
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bccc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008e4  0800be60  0800be60  0001be60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c744  0800c744  0002021c  2**0
                  CONTENTS
  4 .ARM          00000000  0800c744  0800c744  0002021c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800c744  0800c744  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c744  0800c744  0001c744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c748  0800c748  0001c748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800c74c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          000001ac  2000021c  2000021c  0002021c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003c8  200003c8  0002021c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105ab  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f48  00000000  00000000  000307f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e60  00000000  00000000  00032740  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000d98  00000000  00000000  000335a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ce31  00000000  00000000  00034338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001178b  00000000  00000000  00051169  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000add18  00000000  00000000  000628f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011060c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005638  00000000  00000000  0011065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000021c 	.word	0x2000021c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800be44 	.word	0x0800be44

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000220 	.word	0x20000220
 80001cc:	0800be44 	.word	0x0800be44

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000

08000cf4 <togglePowerBtn>:
/* USER CODE BEGIN 0 */

/*
 * READ POWER BUTTON STATE
 */
int togglePowerBtn(int powerBtnState) {
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	//  int readButtonNow = ; // read button, if pressed 1, if not 0
	if (powerBtnState) { // if button was pressed
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d027      	beq.n	8000d52 <togglePowerBtn+0x5e>
		block = 0;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <togglePowerBtn+0x74>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) { // if byte stream is 0 (which means, that since last toggle some time has passed) AND button has a state of 1
 8000d08:	4b18      	ldr	r3, [pc, #96]	; (8000d6c <togglePowerBtn+0x78>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d10c      	bne.n	8000d2a <togglePowerBtn+0x36>
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d008      	beq.n	8000d2a <togglePowerBtn+0x36>
		  byteStream = 1; // make now byte stream to output 1
 8000d18:	4b14      	ldr	r3, [pc, #80]	; (8000d6c <togglePowerBtn+0x78>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
		  buttonState = 0; // change button's state
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d20:	2200      	movs	r2, #0
 8000d22:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d24:	4b12      	ldr	r3, [pc, #72]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	e018      	b.n	8000d5c <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) { // --||-- and button's state is 0
 8000d2a:	4b10      	ldr	r3, [pc, #64]	; (8000d6c <togglePowerBtn+0x78>)
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d10c      	bne.n	8000d4c <togglePowerBtn+0x58>
 8000d32:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d108      	bne.n	8000d4c <togglePowerBtn+0x58>
		  byteStream = 1; // --||--
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <togglePowerBtn+0x78>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	601a      	str	r2, [r3, #0]
		  buttonState = 1; // change button's state
 8000d40:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d42:	2201      	movs	r2, #1
 8000d44:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000d46:	4b0a      	ldr	r3, [pc, #40]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	e007      	b.n	8000d5c <togglePowerBtn+0x68>
		} else { // if byte stream is 1, then just return button's state you currently have
		  return buttonState;
 8000d4c:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	e004      	b.n	8000d5c <togglePowerBtn+0x68>
		}
	} else { // if button is not pressed, make byte stream as 0 and return current button's state
		byteStream = 0;
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <togglePowerBtn+0x78>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]
		return buttonState;
 8000d58:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <togglePowerBtn+0x7c>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
	}
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	370c      	adds	r7, #12
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr
 8000d68:	200003a4 	.word	0x200003a4
 8000d6c:	200003a8 	.word	0x200003a8
 8000d70:	200003ac 	.word	0x200003ac

08000d74 <setInitialState>:
 * Turn servo motor to center
 * Delay for 5 seconds
 * Set speed to highest settings
 */
void setInitialState(uint8_t powerBtnState)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
	if (togglePowerBtn(powerBtnState) == 1) {
 8000d7e:	79fb      	ldrb	r3, [r7, #7]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f7ff ffb7 	bl	8000cf4 <togglePowerBtn>
 8000d86:	4603      	mov	r3, r0
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10b      	bne.n	8000da4 <setInitialState+0x30>
	  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 1500);
 8000d8c:	4b07      	ldr	r3, [pc, #28]	; (8000dac <setInitialState+0x38>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000d94:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 8000d96:	f241 3088 	movw	r0, #5000	; 0x1388
 8000d9a:	f000 fff3 	bl	8001d84 <HAL_Delay>
	  setMotorSpeed(255);
 8000d9e:	20ff      	movs	r0, #255	; 0xff
 8000da0:	f000 f806 	bl	8000db0 <setMotorSpeed>
	}
}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	200002d4 	.word	0x200002d4

08000db0 <setMotorSpeed>:
/*
 * Set Motor Speed:
 * motor_speed => 0 -> 255
 */
void setMotorSpeed(uint8_t motor_speed)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	4603      	mov	r3, r0
 8000db8:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_speed); // RIGHT_DM_PHASE
 8000dba:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <setMotorSpeed+0x28>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	79fa      	ldrb	r2, [r7, #7]
 8000dc0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_speed); // LEFT_DM_PHASE
 8000dc2:	4b05      	ldr	r3, [pc, #20]	; (8000dd8 <setMotorSpeed+0x28>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	79fa      	ldrb	r2, [r7, #7]
 8000dc8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000dca:	bf00      	nop
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop
 8000dd8:	20000288 	.word	0x20000288

08000ddc <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b088      	sub	sp, #32
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	460b      	mov	r3, r1
 8000de6:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8000de8:	78fb      	ldrb	r3, [r7, #3]
 8000dea:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000dec:	2301      	movs	r3, #1
 8000dee:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000df0:	2300      	movs	r3, #0
 8000df2:	613b      	str	r3, [r7, #16]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000df4:	f107 0308 	add.w	r3, r7, #8
 8000df8:	4619      	mov	r1, r3
 8000dfa:	6878      	ldr	r0, [r7, #4]
 8000dfc:	f001 fb0a 	bl	8002414 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f001 f975 	bl	80020f0 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8000e06:	210a      	movs	r1, #10
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f001 fa27 	bl	800225c <HAL_ADC_PollForConversion>

  return HAL_ADC_GetValue(hadc);
 8000e0e:	6878      	ldr	r0, [r7, #4]
 8000e10:	f001 faf2 	bl	80023f8 <HAL_ADC_GetValue>
 8000e14:	4603      	mov	r3, r0
 8000e16:	b29b      	uxth	r3, r3
}
 8000e18:	4618      	mov	r0, r3
 8000e1a:	3720      	adds	r7, #32
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <moveForward>:
/*
 * Move Forward:
 * xPhase => 0
 */
void moveForward()
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8000e24:	2200      	movs	r2, #0
 8000e26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e2a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e2e:	f002 f9b1 	bl	8003194 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8000e32:	2200      	movs	r2, #0
 8000e34:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000e38:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e3c:	f002 f9aa 	bl	8003194 <HAL_GPIO_WritePin>
}
 8000e40:	bf00      	nop
 8000e42:	bd80      	pop	{r7, pc}
 8000e44:	0000      	movs	r0, r0
	...

08000e48 <calcServoRotation>:
 * and 2500 is 90 degrees
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 */
int calcServoRotation(float turningAngle) {
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	ed87 0a01 	vstr	s0, [r7, #4]
	return 500 + round(11.11 * (turningAngle + 90));
 8000e52:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e56:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000eb0 <calcServoRotation+0x68>
 8000e5a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e5e:	ee17 0a90 	vmov	r0, s15
 8000e62:	f7ff fb71 	bl	8000548 <__aeabi_f2d>
 8000e66:	a310      	add	r3, pc, #64	; (adr r3, 8000ea8 <calcServoRotation+0x60>)
 8000e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e6c:	f7ff fbc4 	bl	80005f8 <__aeabi_dmul>
 8000e70:	4602      	mov	r2, r0
 8000e72:	460b      	mov	r3, r1
 8000e74:	ec43 2b17 	vmov	d7, r2, r3
 8000e78:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7c:	eef0 0a67 	vmov.f32	s1, s15
 8000e80:	f009 fdae 	bl	800a9e0 <round>
 8000e84:	ec51 0b10 	vmov	r0, r1, d0
 8000e88:	f04f 0200 	mov.w	r2, #0
 8000e8c:	4b09      	ldr	r3, [pc, #36]	; (8000eb4 <calcServoRotation+0x6c>)
 8000e8e:	f7ff f9fd 	bl	800028c <__adddf3>
 8000e92:	4602      	mov	r2, r0
 8000e94:	460b      	mov	r3, r1
 8000e96:	4610      	mov	r0, r2
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f7ff fe5d 	bl	8000b58 <__aeabi_d2iz>
 8000e9e:	4603      	mov	r3, r0
}
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}
 8000ea8:	eb851eb8 	.word	0xeb851eb8
 8000eac:	40263851 	.word	0x40263851
 8000eb0:	42b40000 	.word	0x42b40000
 8000eb4:	407f4000 	.word	0x407f4000

08000eb8 <getDistance>:
 * Map ADC values to distance (in cm) based on predetermined measurements.
 *
 * https://www.hackster.io/tothmiki91/infrared-radar-with-sharp-distance-sensor-91554a
 */
float getDistance(float adcVal)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b087      	sub	sp, #28
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
  float distance = DISTANCE_MAX;
 8000ec2:	4b36      	ldr	r3, [pc, #216]	; (8000f9c <getDistance+0xe4>)
 8000ec4:	617b      	str	r3, [r7, #20]

  // Linear interpolation from measured ADC value and MAP.
  for (int i = 1; i < (sizeof(distAdcMap)/sizeof(S_DIST_ADC_MAP)); i++)
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	613b      	str	r3, [r7, #16]
 8000eca:	e04e      	b.n	8000f6a <getDistance+0xb2>
  {
    if (adcVal > distAdcMap[i].adcVal)
 8000ecc:	4a34      	ldr	r2, [pc, #208]	; (8000fa0 <getDistance+0xe8>)
 8000ece:	693b      	ldr	r3, [r7, #16]
 8000ed0:	00db      	lsls	r3, r3, #3
 8000ed2:	4413      	add	r3, r2
 8000ed4:	3304      	adds	r3, #4
 8000ed6:	edd3 7a00 	vldr	s15, [r3]
 8000eda:	ed97 7a01 	vldr	s14, [r7, #4]
 8000ede:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee6:	dd3d      	ble.n	8000f64 <getDistance+0xac>
    {
      float factor = (adcVal - distAdcMap[i].adcVal)/(distAdcMap[i-1].adcVal - distAdcMap[i].adcVal);
 8000ee8:	4a2d      	ldr	r2, [pc, #180]	; (8000fa0 <getDistance+0xe8>)
 8000eea:	693b      	ldr	r3, [r7, #16]
 8000eec:	00db      	lsls	r3, r3, #3
 8000eee:	4413      	add	r3, r2
 8000ef0:	3304      	adds	r3, #4
 8000ef2:	edd3 7a00 	vldr	s15, [r3]
 8000ef6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000efa:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	3b01      	subs	r3, #1
 8000f02:	4a27      	ldr	r2, [pc, #156]	; (8000fa0 <getDistance+0xe8>)
 8000f04:	00db      	lsls	r3, r3, #3
 8000f06:	4413      	add	r3, r2
 8000f08:	3304      	adds	r3, #4
 8000f0a:	ed93 7a00 	vldr	s14, [r3]
 8000f0e:	4a24      	ldr	r2, [pc, #144]	; (8000fa0 <getDistance+0xe8>)
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	00db      	lsls	r3, r3, #3
 8000f14:	4413      	add	r3, r2
 8000f16:	3304      	adds	r3, #4
 8000f18:	edd3 7a00 	vldr	s15, [r3]
 8000f1c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f24:	edc7 7a03 	vstr	s15, [r7, #12]
      distance = factor * (distAdcMap[i-1].distance - distAdcMap[i].distance) + distAdcMap[i].distance;
 8000f28:	693b      	ldr	r3, [r7, #16]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	4a1c      	ldr	r2, [pc, #112]	; (8000fa0 <getDistance+0xe8>)
 8000f2e:	00db      	lsls	r3, r3, #3
 8000f30:	4413      	add	r3, r2
 8000f32:	ed93 7a00 	vldr	s14, [r3]
 8000f36:	4a1a      	ldr	r2, [pc, #104]	; (8000fa0 <getDistance+0xe8>)
 8000f38:	693b      	ldr	r3, [r7, #16]
 8000f3a:	00db      	lsls	r3, r3, #3
 8000f3c:	4413      	add	r3, r2
 8000f3e:	edd3 7a00 	vldr	s15, [r3]
 8000f42:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000f46:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f4e:	4a14      	ldr	r2, [pc, #80]	; (8000fa0 <getDistance+0xe8>)
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	00db      	lsls	r3, r3, #3
 8000f54:	4413      	add	r3, r2
 8000f56:	edd3 7a00 	vldr	s15, [r3]
 8000f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f5e:	edc7 7a05 	vstr	s15, [r7, #20]
      distance -= DISTANCE_THRESHOLD;
      break;
 8000f62:	e005      	b.n	8000f70 <getDistance+0xb8>
  for (int i = 1; i < (sizeof(distAdcMap)/sizeof(S_DIST_ADC_MAP)); i++)
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	3301      	adds	r3, #1
 8000f68:	613b      	str	r3, [r7, #16]
 8000f6a:	693b      	ldr	r3, [r7, #16]
 8000f6c:	2b06      	cmp	r3, #6
 8000f6e:	d9ad      	bls.n	8000ecc <getDistance+0x14>
    }
  }

  if(distance <= DISTANCE_MIN){
 8000f70:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000f78:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f80:	d801      	bhi.n	8000f86 <getDistance+0xce>
	  return DISTANCE_MIN;
 8000f82:	4b08      	ldr	r3, [pc, #32]	; (8000fa4 <getDistance+0xec>)
 8000f84:	e000      	b.n	8000f88 <getDistance+0xd0>
  } else {
	  return distance;
 8000f86:	697b      	ldr	r3, [r7, #20]
  }
}
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000f90:	371c      	adds	r7, #28
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	42200000 	.word	0x42200000
 8000fa0:	20000004 	.word	0x20000004
 8000fa4:	41200000 	.word	0x41200000

08000fa8 <calcBestPath>:
/*
 * Calculate best path:
 * Boat should always move in the direction with the best possible space
 */
void calcBestPath(uint16_t ir_left, uint16_t ir_center, uint16_t ir_right, float* turningAngle, float* directionAmount)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	ed2d 8b02 	vpush	{d8}
 8000fae:	b08a      	sub	sp, #40	; 0x28
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	607b      	str	r3, [r7, #4]
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	81fb      	strh	r3, [r7, #14]
 8000fb8:	460b      	mov	r3, r1
 8000fba:	81bb      	strh	r3, [r7, #12]
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	817b      	strh	r3, [r7, #10]
	float vv_left, vh_left;
	float vv_right, vh_right;
	float net_vertical, net_horizontal;

    // Resolve left sensor readings to vertical and horizontal plane
	vv_left = sinf(sensor_angle * (M_PI / 180.0)) * ir_left;
 8000fc0:	4b71      	ldr	r3, [pc, #452]	; (8001188 <calcBestPath+0x1e0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f7ff fabf 	bl	8000548 <__aeabi_f2d>
 8000fca:	a36d      	add	r3, pc, #436	; (adr r3, 8001180 <calcBestPath+0x1d8>)
 8000fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd0:	f7ff fb12 	bl	80005f8 <__aeabi_dmul>
 8000fd4:	4602      	mov	r2, r0
 8000fd6:	460b      	mov	r3, r1
 8000fd8:	4610      	mov	r0, r2
 8000fda:	4619      	mov	r1, r3
 8000fdc:	f7ff fe04 	bl	8000be8 <__aeabi_d2f>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	ee00 3a10 	vmov	s0, r3
 8000fe6:	f009 fe61 	bl	800acac <sinf>
 8000fea:	eeb0 7a40 	vmov.f32	s14, s0
 8000fee:	89fb      	ldrh	r3, [r7, #14]
 8000ff0:	ee07 3a90 	vmov	s15, r3
 8000ff4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000ffc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vh_left = cosf(sensor_angle * (M_PI / 180.0)) * ir_left;
 8001000:	4b61      	ldr	r3, [pc, #388]	; (8001188 <calcBestPath+0x1e0>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fa9f 	bl	8000548 <__aeabi_f2d>
 800100a:	a35d      	add	r3, pc, #372	; (adr r3, 8001180 <calcBestPath+0x1d8>)
 800100c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001010:	f7ff faf2 	bl	80005f8 <__aeabi_dmul>
 8001014:	4602      	mov	r2, r0
 8001016:	460b      	mov	r3, r1
 8001018:	4610      	mov	r0, r2
 800101a:	4619      	mov	r1, r3
 800101c:	f7ff fde4 	bl	8000be8 <__aeabi_d2f>
 8001020:	4603      	mov	r3, r0
 8001022:	ee00 3a10 	vmov	s0, r3
 8001026:	f009 fdf5 	bl	800ac14 <cosf>
 800102a:	eeb0 7a40 	vmov.f32	s14, s0
 800102e:	89fb      	ldrh	r3, [r7, #14]
 8001030:	ee07 3a90 	vmov	s15, r3
 8001034:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001038:	ee67 7a27 	vmul.f32	s15, s14, s15
 800103c:	edc7 7a08 	vstr	s15, [r7, #32]

	// Resolve right sensor readings to vertical and horizontal plane
	vv_right = sinf(sensor_angle * (M_PI / 180.0)) * ir_right;
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <calcBestPath+0x1e0>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	4618      	mov	r0, r3
 8001046:	f7ff fa7f 	bl	8000548 <__aeabi_f2d>
 800104a:	a34d      	add	r3, pc, #308	; (adr r3, 8001180 <calcBestPath+0x1d8>)
 800104c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001050:	f7ff fad2 	bl	80005f8 <__aeabi_dmul>
 8001054:	4602      	mov	r2, r0
 8001056:	460b      	mov	r3, r1
 8001058:	4610      	mov	r0, r2
 800105a:	4619      	mov	r1, r3
 800105c:	f7ff fdc4 	bl	8000be8 <__aeabi_d2f>
 8001060:	4603      	mov	r3, r0
 8001062:	ee00 3a10 	vmov	s0, r3
 8001066:	f009 fe21 	bl	800acac <sinf>
 800106a:	eeb0 7a40 	vmov.f32	s14, s0
 800106e:	897b      	ldrh	r3, [r7, #10]
 8001070:	ee07 3a90 	vmov	s15, r3
 8001074:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001078:	ee67 7a27 	vmul.f32	s15, s14, s15
 800107c:	edc7 7a07 	vstr	s15, [r7, #28]
	vh_right = cosf(sensor_angle * (M_PI / 180.0)) * ir_right;
 8001080:	4b41      	ldr	r3, [pc, #260]	; (8001188 <calcBestPath+0x1e0>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff fa5f 	bl	8000548 <__aeabi_f2d>
 800108a:	a33d      	add	r3, pc, #244	; (adr r3, 8001180 <calcBestPath+0x1d8>)
 800108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001090:	f7ff fab2 	bl	80005f8 <__aeabi_dmul>
 8001094:	4602      	mov	r2, r0
 8001096:	460b      	mov	r3, r1
 8001098:	4610      	mov	r0, r2
 800109a:	4619      	mov	r1, r3
 800109c:	f7ff fda4 	bl	8000be8 <__aeabi_d2f>
 80010a0:	4603      	mov	r3, r0
 80010a2:	ee00 3a10 	vmov	s0, r3
 80010a6:	f009 fdb5 	bl	800ac14 <cosf>
 80010aa:	eeb0 7a40 	vmov.f32	s14, s0
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	ee07 3a90 	vmov	s15, r3
 80010b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010bc:	edc7 7a06 	vstr	s15, [r7, #24]

	// Calculate sum of all three vectors
	net_vertical = vv_left + ir_center + vv_right;
 80010c0:	89bb      	ldrh	r3, [r7, #12]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80010ca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010da:	edc7 7a05 	vstr	s15, [r7, #20]
	net_horizontal = -(vh_left) + vh_right;
 80010de:	ed97 7a06 	vldr	s14, [r7, #24]
 80010e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80010e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ea:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate angle servo motor should turn as well as approximate value for free space.
	// Free space amount will be used to control speed.
	*turningAngle = atanf(net_horizontal / net_vertical) / (M_PI / 180.0) * 2;
 80010ee:	ed97 7a04 	vldr	s14, [r7, #16]
 80010f2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010fa:	eeb0 0a66 	vmov.f32	s0, s13
 80010fe:	f009 fcb5 	bl	800aa6c <atanf>
 8001102:	ee10 3a10 	vmov	r3, s0
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff fa1e 	bl	8000548 <__aeabi_f2d>
 800110c:	a31c      	add	r3, pc, #112	; (adr r3, 8001180 <calcBestPath+0x1d8>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fb9b 	bl	800084c <__aeabi_ddiv>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	4602      	mov	r2, r0
 8001120:	460b      	mov	r3, r1
 8001122:	f7ff f8b3 	bl	800028c <__adddf3>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	4610      	mov	r0, r2
 800112c:	4619      	mov	r1, r3
 800112e:	f7ff fd5b 	bl	8000be8 <__aeabi_d2f>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
	*directionAmount = sqrtf(powf(net_horizontal, 2) + powf(net_vertical, 2));
 8001138:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800113c:	ed97 0a04 	vldr	s0, [r7, #16]
 8001140:	f009 fdfa 	bl	800ad38 <powf>
 8001144:	eeb0 8a40 	vmov.f32	s16, s0
 8001148:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 800114c:	ed97 0a05 	vldr	s0, [r7, #20]
 8001150:	f009 fdf2 	bl	800ad38 <powf>
 8001154:	eef0 7a40 	vmov.f32	s15, s0
 8001158:	ee78 7a27 	vadd.f32	s15, s16, s15
 800115c:	eeb0 0a67 	vmov.f32	s0, s15
 8001160:	f009 fe42 	bl	800ade8 <sqrtf>
 8001164:	eef0 7a40 	vmov.f32	s15, s0
 8001168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116a:	edc3 7a00 	vstr	s15, [r3]
}
 800116e:	bf00      	nop
 8001170:	3728      	adds	r7, #40	; 0x28
 8001172:	46bd      	mov	sp, r7
 8001174:	ecbd 8b02 	vpop	{d8}
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	f3af 8000 	nop.w
 8001180:	a2529d39 	.word	0xa2529d39
 8001184:	3f91df46 	.word	0x3f91df46
 8001188:	20000000 	.word	0x20000000

0800118c <setMotionSettings>:
/*
 * Set Motion Settings:
 * Based on path calculation, configure servo and speed PWM
 */
void setMotionSettings(float turningAngle, float directionAmount)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	ed87 0a01 	vstr	s0, [r7, #4]
 8001196:	edc7 0a00 	vstr	s1, [r7]
	// float speed = calcMotorSpeed(directionAmount);
	uint16_t rotation = calcServoRotation(turningAngle);
 800119a:	ed97 0a01 	vldr	s0, [r7, #4]
 800119e:	f7ff fe53 	bl	8000e48 <calcServoRotation>
 80011a2:	4603      	mov	r3, r0
 80011a4:	81fb      	strh	r3, [r7, #14]

	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, rotation);
 80011a6:	4b05      	ldr	r3, [pc, #20]	; (80011bc <setMotionSettings+0x30>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	89fa      	ldrh	r2, [r7, #14]
 80011ac:	635a      	str	r2, [r3, #52]	; 0x34
	setMotorSpeed(255);
 80011ae:	20ff      	movs	r0, #255	; 0xff
 80011b0:	f7ff fdfe 	bl	8000db0 <setMotorSpeed>
}
 80011b4:	bf00      	nop
 80011b6:	3710      	adds	r7, #16
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	200002d4 	.word	0x200002d4

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b590      	push	{r4, r7, lr}
 80011c2:	b087      	sub	sp, #28
 80011c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c6:	f000 fd77 	bl	8001cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011ca:	f000 f899 	bl	8001300 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011ce:	f000 fabd 	bl	800174c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011d2:	f000 fa8b 	bl	80016ec <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80011d6:	f000 f957 	bl	8001488 <MX_TIM1_Init>
  MX_ADC1_Init();
 80011da:	f000 f8e5 	bl	80013a8 <MX_ADC1_Init>
  MX_TIM17_Init();
 80011de:	f000 fa0b 	bl	80015f8 <MX_TIM17_Init>

  uint8_t powerBtnState;
  uint16_t ir_left, ir_center, ir_right;
  float turningAngle, directionAmount;

  HAL_TIM_Base_Start(&htim1);
 80011e2:	4844      	ldr	r0, [pc, #272]	; (80012f4 <main+0x134>)
 80011e4:	f003 fbe0 	bl	80049a8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 80011e8:	4843      	ldr	r0, [pc, #268]	; (80012f8 <main+0x138>)
 80011ea:	f003 fbdd 	bl	80049a8 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80011ee:	2100      	movs	r1, #0
 80011f0:	4840      	ldr	r0, [pc, #256]	; (80012f4 <main+0x134>)
 80011f2:	f003 fc8f 	bl	8004b14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80011f6:	2104      	movs	r1, #4
 80011f8:	483e      	ldr	r0, [pc, #248]	; (80012f4 <main+0x134>)
 80011fa:	f003 fc8b 	bl	8004b14 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 80011fe:	2100      	movs	r1, #0
 8001200:	483d      	ldr	r0, [pc, #244]	; (80012f8 <main+0x138>)
 8001202:	f003 fc87 	bl	8004b14 <HAL_TIM_PWM_Start>

  powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001206:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800120a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800120e:	f001 ffa9 	bl	8003164 <HAL_GPIO_ReadPin>
 8001212:	4603      	mov	r3, r0
 8001214:	73fb      	strb	r3, [r7, #15]
  setInitialState(powerBtnState);
 8001216:	7bfb      	ldrb	r3, [r7, #15]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fdab 	bl	8000d74 <setInitialState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 800121e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001226:	f001 ff9d 	bl	8003164 <HAL_GPIO_ReadPin>
 800122a:	4603      	mov	r3, r0
 800122c:	73fb      	strb	r3, [r7, #15]

		if (togglePowerBtn(powerBtnState) == 1) {
 800122e:	7bfb      	ldrb	r3, [r7, #15]
 8001230:	4618      	mov	r0, r3
 8001232:	f7ff fd5f 	bl	8000cf4 <togglePowerBtn>
 8001236:	4603      	mov	r3, r0
 8001238:	2b01      	cmp	r3, #1
 800123a:	d151      	bne.n	80012e0 <main+0x120>
			ir_left = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 800123c:	2101      	movs	r1, #1
 800123e:	482f      	ldr	r0, [pc, #188]	; (80012fc <main+0x13c>)
 8001240:	f7ff fdcc 	bl	8000ddc <ADC_Read>
 8001244:	4603      	mov	r3, r0
 8001246:	ee07 3a90 	vmov	s15, r3
 800124a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800124e:	eeb0 0a67 	vmov.f32	s0, s15
 8001252:	f7ff fe31 	bl	8000eb8 <getDistance>
 8001256:	eef0 7a40 	vmov.f32	s15, s0
 800125a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800125e:	ee17 3a90 	vmov	r3, s15
 8001262:	81bb      	strh	r3, [r7, #12]
			ir_center = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 8001264:	2102      	movs	r1, #2
 8001266:	4825      	ldr	r0, [pc, #148]	; (80012fc <main+0x13c>)
 8001268:	f7ff fdb8 	bl	8000ddc <ADC_Read>
 800126c:	4603      	mov	r3, r0
 800126e:	ee07 3a90 	vmov	s15, r3
 8001272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001276:	eeb0 0a67 	vmov.f32	s0, s15
 800127a:	f7ff fe1d 	bl	8000eb8 <getDistance>
 800127e:	eef0 7a40 	vmov.f32	s15, s0
 8001282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001286:	ee17 3a90 	vmov	r3, s15
 800128a:	817b      	strh	r3, [r7, #10]
			ir_right = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 800128c:	2104      	movs	r1, #4
 800128e:	481b      	ldr	r0, [pc, #108]	; (80012fc <main+0x13c>)
 8001290:	f7ff fda4 	bl	8000ddc <ADC_Read>
 8001294:	4603      	mov	r3, r0
 8001296:	ee07 3a90 	vmov	s15, r3
 800129a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800129e:	eeb0 0a67 	vmov.f32	s0, s15
 80012a2:	f7ff fe09 	bl	8000eb8 <getDistance>
 80012a6:	eef0 7a40 	vmov.f32	s15, s0
 80012aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012ae:	ee17 3a90 	vmov	r3, s15
 80012b2:	813b      	strh	r3, [r7, #8]
//			int length = sprintf(message, "%d, %d, %d, %f\n\r", ADC_Read(&hadc1, ADC_CHANNEL_1),ADC_Read(&hadc1, ADC_CHANNEL_2), ADC_Read(&hadc1, ADC_CHANNEL_4), turningAngle);
//			HAL_UART_Transmit(&huart2, message, length, 100);
//
//			HAL_Delay(1000);

			calcBestPath(ir_left, ir_center, ir_right, &turningAngle, &directionAmount);
 80012b4:	1d3c      	adds	r4, r7, #4
 80012b6:	893a      	ldrh	r2, [r7, #8]
 80012b8:	8979      	ldrh	r1, [r7, #10]
 80012ba:	89b8      	ldrh	r0, [r7, #12]
 80012bc:	463b      	mov	r3, r7
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	4623      	mov	r3, r4
 80012c2:	f7ff fe71 	bl	8000fa8 <calcBestPath>
			setMotionSettings(turningAngle, directionAmount);
 80012c6:	edd7 7a01 	vldr	s15, [r7, #4]
 80012ca:	ed97 7a00 	vldr	s14, [r7]
 80012ce:	eef0 0a47 	vmov.f32	s1, s14
 80012d2:	eeb0 0a67 	vmov.f32	s0, s15
 80012d6:	f7ff ff59 	bl	800118c <setMotionSettings>

			moveForward();
 80012da:	f7ff fda1 	bl	8000e20 <moveForward>
 80012de:	e79e      	b.n	800121e <main+0x5e>
		} else {
			__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 1500);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <main+0x138>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
			setMotorSpeed(0);
 80012ea:	2000      	movs	r0, #0
 80012ec:	f7ff fd60 	bl	8000db0 <setMotorSpeed>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 80012f0:	e795      	b.n	800121e <main+0x5e>
 80012f2:	bf00      	nop
 80012f4:	20000288 	.word	0x20000288
 80012f8:	200002d4 	.word	0x200002d4
 80012fc:	20000238 	.word	0x20000238

08001300 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b096      	sub	sp, #88	; 0x58
 8001304:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001306:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800130a:	2228      	movs	r2, #40	; 0x28
 800130c:	2100      	movs	r1, #0
 800130e:	4618      	mov	r0, r3
 8001310:	f004 feec 	bl	80060ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001314:	f107 031c 	add.w	r3, r7, #28
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
 8001322:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001324:	1d3b      	adds	r3, r7, #4
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
 800132a:	605a      	str	r2, [r3, #4]
 800132c:	609a      	str	r2, [r3, #8]
 800132e:	60da      	str	r2, [r3, #12]
 8001330:	611a      	str	r2, [r3, #16]
 8001332:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001334:	2302      	movs	r3, #2
 8001336:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001338:	2301      	movs	r3, #1
 800133a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800133c:	2310      	movs	r3, #16
 800133e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001340:	2300      	movs	r3, #0
 8001342:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001344:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001348:	4618      	mov	r0, r3
 800134a:	f001 ff3b 	bl	80031c4 <HAL_RCC_OscConfig>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	d001      	beq.n	8001358 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001354:	f000 fa48 	bl	80017e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001358:	230f      	movs	r3, #15
 800135a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001368:	2300      	movs	r3, #0
 800136a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800136c:	f107 031c 	add.w	r3, r7, #28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f002 ff64 	bl	8004240 <HAL_RCC_ClockConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800137e:	f000 fa33 	bl	80017e8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001382:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001386:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001388:	2300      	movs	r3, #0
 800138a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	4618      	mov	r0, r3
 8001390:	f003 f98c 	bl	80046ac <HAL_RCCEx_PeriphCLKConfig>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800139a:	f000 fa25 	bl	80017e8 <Error_Handler>
  }
}
 800139e:	bf00      	nop
 80013a0:	3758      	adds	r7, #88	; 0x58
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
	...

080013a8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80013ae:	f107 031c 	add.w	r3, r7, #28
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]
 80013c2:	609a      	str	r2, [r3, #8]
 80013c4:	60da      	str	r2, [r3, #12]
 80013c6:	611a      	str	r2, [r3, #16]
 80013c8:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80013d0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80013d2:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013d4:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013d8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013da:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013e6:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013f4:	4b23      	ldr	r3, [pc, #140]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <MX_ADC1_Init+0xdc>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001400:	4b20      	ldr	r3, [pc, #128]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001402:	2200      	movs	r2, #0
 8001404:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001406:	4b1f      	ldr	r3, [pc, #124]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001408:	2201      	movs	r2, #1
 800140a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800140c:	4b1d      	ldr	r3, [pc, #116]	; (8001484 <MX_ADC1_Init+0xdc>)
 800140e:	2200      	movs	r2, #0
 8001410:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001416:	2204      	movs	r2, #4
 8001418:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800141a:	4b1a      	ldr	r3, [pc, #104]	; (8001484 <MX_ADC1_Init+0xdc>)
 800141c:	2200      	movs	r2, #0
 800141e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001420:	4b18      	ldr	r3, [pc, #96]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001422:	2200      	movs	r2, #0
 8001424:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001426:	4817      	ldr	r0, [pc, #92]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001428:	f000 fcd0 	bl	8001dcc <HAL_ADC_Init>
 800142c:	4603      	mov	r3, r0
 800142e:	2b00      	cmp	r3, #0
 8001430:	d001      	beq.n	8001436 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001432:	f000 f9d9 	bl	80017e8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800143a:	f107 031c 	add.w	r3, r7, #28
 800143e:	4619      	mov	r1, r3
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_ADC1_Init+0xdc>)
 8001442:	f001 faa7 	bl	8002994 <HAL_ADCEx_MultiModeConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 800144c:	f000 f9cc 	bl	80017e8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001450:	2301      	movs	r3, #1
 8001452:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001454:	2301      	movs	r3, #1
 8001456:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001458:	2300      	movs	r3, #0
 800145a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001468:	1d3b      	adds	r3, r7, #4
 800146a:	4619      	mov	r1, r3
 800146c:	4805      	ldr	r0, [pc, #20]	; (8001484 <MX_ADC1_Init+0xdc>)
 800146e:	f000 ffd1 	bl	8002414 <HAL_ADC_ConfigChannel>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001478:	f000 f9b6 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800147c:	bf00      	nop
 800147e:	3728      	adds	r7, #40	; 0x28
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	20000238 	.word	0x20000238

08001488 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b09a      	sub	sp, #104	; 0x68
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
 80014b8:	615a      	str	r2, [r3, #20]
 80014ba:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80014bc:	1d3b      	adds	r3, r7, #4
 80014be:	222c      	movs	r2, #44	; 0x2c
 80014c0:	2100      	movs	r1, #0
 80014c2:	4618      	mov	r0, r3
 80014c4:	f004 fe12 	bl	80060ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80014c8:	4b49      	ldr	r3, [pc, #292]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014ca:	4a4a      	ldr	r2, [pc, #296]	; (80015f4 <MX_TIM1_Init+0x16c>)
 80014cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 80014ce:	4b48      	ldr	r3, [pc, #288]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014d0:	f44f 721c 	mov.w	r2, #624	; 0x270
 80014d4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b46      	ldr	r3, [pc, #280]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 80014dc:	4b44      	ldr	r3, [pc, #272]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014de:	22ff      	movs	r2, #255	; 0xff
 80014e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e2:	4b43      	ldr	r3, [pc, #268]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014e8:	4b41      	ldr	r3, [pc, #260]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ee:	4b40      	ldr	r3, [pc, #256]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014f0:	2280      	movs	r2, #128	; 0x80
 80014f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014f4:	483e      	ldr	r0, [pc, #248]	; (80015f0 <MX_TIM1_Init+0x168>)
 80014f6:	f003 f9ff 	bl	80048f8 <HAL_TIM_Base_Init>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001500:	f000 f972 	bl	80017e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001504:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001508:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800150a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800150e:	4619      	mov	r1, r3
 8001510:	4837      	ldr	r0, [pc, #220]	; (80015f0 <MX_TIM1_Init+0x168>)
 8001512:	f003 fcff 	bl	8004f14 <HAL_TIM_ConfigClockSource>
 8001516:	4603      	mov	r3, r0
 8001518:	2b00      	cmp	r3, #0
 800151a:	d001      	beq.n	8001520 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 800151c:	f000 f964 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001520:	4833      	ldr	r0, [pc, #204]	; (80015f0 <MX_TIM1_Init+0x168>)
 8001522:	f003 fa95 	bl	8004a50 <HAL_TIM_PWM_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 800152c:	f000 f95c 	bl	80017e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001530:	2300      	movs	r3, #0
 8001532:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001538:	2300      	movs	r3, #0
 800153a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800153c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001540:	4619      	mov	r1, r3
 8001542:	482b      	ldr	r0, [pc, #172]	; (80015f0 <MX_TIM1_Init+0x168>)
 8001544:	f004 f98e 	bl	8005864 <HAL_TIMEx_MasterConfigSynchronization>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 800154e:	f000 f94b 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001552:	2360      	movs	r3, #96	; 0x60
 8001554:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800155a:	2300      	movs	r3, #0
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800155e:	2300      	movs	r3, #0
 8001560:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001562:	2300      	movs	r3, #0
 8001564:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800156a:	2300      	movs	r3, #0
 800156c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800156e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001572:	2200      	movs	r2, #0
 8001574:	4619      	mov	r1, r3
 8001576:	481e      	ldr	r0, [pc, #120]	; (80015f0 <MX_TIM1_Init+0x168>)
 8001578:	f003 fbb8 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 800157c:	4603      	mov	r3, r0
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001582:	f000 f931 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001586:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800158a:	2204      	movs	r2, #4
 800158c:	4619      	mov	r1, r3
 800158e:	4818      	ldr	r0, [pc, #96]	; (80015f0 <MX_TIM1_Init+0x168>)
 8001590:	f003 fbac 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001594:	4603      	mov	r3, r0
 8001596:	2b00      	cmp	r3, #0
 8001598:	d001      	beq.n	800159e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800159a:	f000 f925 	bl	80017e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015a6:	2300      	movs	r3, #0
 80015a8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015b6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015bc:	2300      	movs	r3, #0
 80015be:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015c4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015c6:	2300      	movs	r3, #0
 80015c8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80015ce:	1d3b      	adds	r3, r7, #4
 80015d0:	4619      	mov	r1, r3
 80015d2:	4807      	ldr	r0, [pc, #28]	; (80015f0 <MX_TIM1_Init+0x168>)
 80015d4:	f004 f9b4 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 80015de:	f000 f903 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80015e2:	4803      	ldr	r0, [pc, #12]	; (80015f0 <MX_TIM1_Init+0x168>)
 80015e4:	f000 f99a 	bl	800191c <HAL_TIM_MspPostInit>

}
 80015e8:	bf00      	nop
 80015ea:	3768      	adds	r7, #104	; 0x68
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	20000288 	.word	0x20000288
 80015f4:	40012c00 	.word	0x40012c00

080015f8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b092      	sub	sp, #72	; 0x48
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80015fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001602:	2200      	movs	r2, #0
 8001604:	601a      	str	r2, [r3, #0]
 8001606:	605a      	str	r2, [r3, #4]
 8001608:	609a      	str	r2, [r3, #8]
 800160a:	60da      	str	r2, [r3, #12]
 800160c:	611a      	str	r2, [r3, #16]
 800160e:	615a      	str	r2, [r3, #20]
 8001610:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001612:	463b      	mov	r3, r7
 8001614:	222c      	movs	r2, #44	; 0x2c
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f004 fd67 	bl	80060ec <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 800161e:	4b31      	ldr	r3, [pc, #196]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001620:	4a31      	ldr	r2, [pc, #196]	; (80016e8 <MX_TIM17_Init+0xf0>)
 8001622:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 8001624:	4b2f      	ldr	r3, [pc, #188]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001626:	2207      	movs	r2, #7
 8001628:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162a:	4b2e      	ldr	r3, [pc, #184]	; (80016e4 <MX_TIM17_Init+0xec>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 8001630:	4b2c      	ldr	r3, [pc, #176]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001632:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001636:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001638:	4b2a      	ldr	r3, [pc, #168]	; (80016e4 <MX_TIM17_Init+0xec>)
 800163a:	2200      	movs	r2, #0
 800163c:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800163e:	4b29      	ldr	r3, [pc, #164]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001640:	2200      	movs	r2, #0
 8001642:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001644:	4b27      	ldr	r3, [pc, #156]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001646:	2280      	movs	r2, #128	; 0x80
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 800164a:	4826      	ldr	r0, [pc, #152]	; (80016e4 <MX_TIM17_Init+0xec>)
 800164c:	f003 f954 	bl	80048f8 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8001656:	f000 f8c7 	bl	80017e8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800165a:	4822      	ldr	r0, [pc, #136]	; (80016e4 <MX_TIM17_Init+0xec>)
 800165c:	f003 f9f8 	bl	8004a50 <HAL_TIM_PWM_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001666:	f000 f8bf 	bl	80017e8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800166a:	2360      	movs	r3, #96	; 0x60
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001672:	2300      	movs	r3, #0
 8001674:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001676:	2300      	movs	r3, #0
 8001678:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800167a:	2300      	movs	r3, #0
 800167c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167e:	2300      	movs	r3, #0
 8001680:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001682:	2300      	movs	r3, #0
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	2200      	movs	r2, #0
 800168c:	4619      	mov	r1, r3
 800168e:	4815      	ldr	r0, [pc, #84]	; (80016e4 <MX_TIM17_Init+0xec>)
 8001690:	f003 fb2c 	bl	8004cec <HAL_TIM_PWM_ConfigChannel>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800169a:	f000 f8a5 	bl	80017e8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800169e:	2300      	movs	r3, #0
 80016a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016a2:	2300      	movs	r3, #0
 80016a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016bc:	2300      	movs	r3, #0
 80016be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 80016c0:	463b      	mov	r3, r7
 80016c2:	4619      	mov	r1, r3
 80016c4:	4807      	ldr	r0, [pc, #28]	; (80016e4 <MX_TIM17_Init+0xec>)
 80016c6:	f004 f93b 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d001      	beq.n	80016d4 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 80016d0:	f000 f88a 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 80016d4:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_TIM17_Init+0xec>)
 80016d6:	f000 f921 	bl	800191c <HAL_TIM_MspPostInit>

}
 80016da:	bf00      	nop
 80016dc:	3748      	adds	r7, #72	; 0x48
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	200002d4 	.word	0x200002d4
 80016e8:	40014800 	.word	0x40014800

080016ec <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_USART2_UART_Init+0x58>)
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <MX_USART2_UART_Init+0x5c>)
 80016f4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016f6:	4b13      	ldr	r3, [pc, #76]	; (8001744 <MX_USART2_UART_Init+0x58>)
 80016f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016fc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001700:	2200      	movs	r2, #0
 8001702:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001706:	2200      	movs	r2, #0
 8001708:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800170c:	2200      	movs	r2, #0
 800170e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001710:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001712:	220c      	movs	r2, #12
 8001714:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001718:	2200      	movs	r2, #0
 800171a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800171c:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800171e:	2200      	movs	r2, #0
 8001720:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001722:	4b08      	ldr	r3, [pc, #32]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001724:	2200      	movs	r2, #0
 8001726:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <MX_USART2_UART_Init+0x58>)
 800172a:	2200      	movs	r2, #0
 800172c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800172e:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_USART2_UART_Init+0x58>)
 8001730:	f004 f97e 	bl	8005a30 <HAL_UART_Init>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800173a:	f000 f855 	bl	80017e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800173e:	bf00      	nop
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	20000320 	.word	0x20000320
 8001748:	40004400 	.word	0x40004400

0800174c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001752:	f107 030c 	add.w	r3, r7, #12
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
 8001760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001762:	4b20      	ldr	r3, [pc, #128]	; (80017e4 <MX_GPIO_Init+0x98>)
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <MX_GPIO_Init+0x98>)
 8001768:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800176c:	6153      	str	r3, [r2, #20]
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_GPIO_Init+0x98>)
 8001770:	695b      	ldr	r3, [r3, #20]
 8001772:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001776:	60bb      	str	r3, [r7, #8]
 8001778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_GPIO_Init+0x98>)
 800177c:	695b      	ldr	r3, [r3, #20]
 800177e:	4a19      	ldr	r2, [pc, #100]	; (80017e4 <MX_GPIO_Init+0x98>)
 8001780:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001784:	6153      	str	r3, [r2, #20]
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_GPIO_Init+0x98>)
 8001788:	695b      	ldr	r3, [r3, #20]
 800178a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800178e:	607b      	str	r3, [r7, #4]
 8001790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001792:	2200      	movs	r2, #0
 8001794:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001798:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179c:	f001 fcfa 	bl	8003194 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 80017a0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80017a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017a6:	2301      	movs	r3, #1
 80017a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ae:	2300      	movs	r3, #0
 80017b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b2:	f107 030c 	add.w	r3, r7, #12
 80017b6:	4619      	mov	r1, r3
 80017b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017bc:	f001 fb60 	bl	8002e80 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 80017c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017c6:	2300      	movs	r3, #0
 80017c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80017ca:	2302      	movs	r3, #2
 80017cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	4619      	mov	r1, r3
 80017d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017d8:	f001 fb52 	bl	8002e80 <HAL_GPIO_Init>

}
 80017dc:	bf00      	nop
 80017de:	3720      	adds	r7, #32
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017ec:	b672      	cpsid	i
}
 80017ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017f0:	e7fe      	b.n	80017f0 <Error_Handler+0x8>
	...

080017f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017fa:	4b0f      	ldr	r3, [pc, #60]	; (8001838 <HAL_MspInit+0x44>)
 80017fc:	699b      	ldr	r3, [r3, #24]
 80017fe:	4a0e      	ldr	r2, [pc, #56]	; (8001838 <HAL_MspInit+0x44>)
 8001800:	f043 0301 	orr.w	r3, r3, #1
 8001804:	6193      	str	r3, [r2, #24]
 8001806:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <HAL_MspInit+0x44>)
 8001808:	699b      	ldr	r3, [r3, #24]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	607b      	str	r3, [r7, #4]
 8001810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001812:	4b09      	ldr	r3, [pc, #36]	; (8001838 <HAL_MspInit+0x44>)
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	4a08      	ldr	r2, [pc, #32]	; (8001838 <HAL_MspInit+0x44>)
 8001818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800181c:	61d3      	str	r3, [r2, #28]
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_MspInit+0x44>)
 8001820:	69db      	ldr	r3, [r3, #28]
 8001822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001826:	603b      	str	r3, [r7, #0]
 8001828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800182a:	bf00      	nop
 800182c:	370c      	adds	r7, #12
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr
 8001836:	bf00      	nop
 8001838:	40021000 	.word	0x40021000

0800183c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b08a      	sub	sp, #40	; 0x28
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001844:	f107 0314 	add.w	r3, r7, #20
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800185c:	d124      	bne.n	80018a8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800185e:	4b14      	ldr	r3, [pc, #80]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	4a13      	ldr	r2, [pc, #76]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6153      	str	r3, [r2, #20]
 800186a:	4b11      	ldr	r3, [pc, #68]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	613b      	str	r3, [r7, #16]
 8001874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001876:	4b0e      	ldr	r3, [pc, #56]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001878:	695b      	ldr	r3, [r3, #20]
 800187a:	4a0d      	ldr	r2, [pc, #52]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 800187c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001880:	6153      	str	r3, [r2, #20]
 8001882:	4b0b      	ldr	r3, [pc, #44]	; (80018b0 <HAL_ADC_MspInit+0x74>)
 8001884:	695b      	ldr	r3, [r3, #20]
 8001886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188a:	60fb      	str	r3, [r7, #12]
 800188c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 800188e:	230b      	movs	r3, #11
 8001890:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001892:	2303      	movs	r3, #3
 8001894:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189a:	f107 0314 	add.w	r3, r7, #20
 800189e:	4619      	mov	r1, r3
 80018a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018a4:	f001 faec 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018a8:	bf00      	nop
 80018aa:	3728      	adds	r7, #40	; 0x28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40021000 	.word	0x40021000

080018b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a13      	ldr	r2, [pc, #76]	; (8001910 <HAL_TIM_Base_MspInit+0x5c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d10c      	bne.n	80018e0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80018c6:	4b13      	ldr	r3, [pc, #76]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	4a12      	ldr	r2, [pc, #72]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018cc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80018d0:	6193      	str	r3, [r2, #24]
 80018d2:	4b10      	ldr	r3, [pc, #64]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80018de:	e010      	b.n	8001902 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a0c      	ldr	r2, [pc, #48]	; (8001918 <HAL_TIM_Base_MspInit+0x64>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d10b      	bne.n	8001902 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80018ea:	4b0a      	ldr	r3, [pc, #40]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018ec:	699b      	ldr	r3, [r3, #24]
 80018ee:	4a09      	ldr	r2, [pc, #36]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018f4:	6193      	str	r3, [r2, #24]
 80018f6:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_TIM_Base_MspInit+0x60>)
 80018f8:	699b      	ldr	r3, [r3, #24]
 80018fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018fe:	60bb      	str	r3, [r7, #8]
 8001900:	68bb      	ldr	r3, [r7, #8]
}
 8001902:	bf00      	nop
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	40012c00 	.word	0x40012c00
 8001914:	40021000 	.word	0x40021000
 8001918:	40014800 	.word	0x40014800

0800191c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b08a      	sub	sp, #40	; 0x28
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	4a23      	ldr	r2, [pc, #140]	; (80019c8 <HAL_TIM_MspPostInit+0xac>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d11e      	bne.n	800197c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800193e:	4b23      	ldr	r3, [pc, #140]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	4a22      	ldr	r2, [pc, #136]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 8001944:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001948:	6153      	str	r3, [r2, #20]
 800194a:	4b20      	ldr	r3, [pc, #128]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001952:	613b      	str	r3, [r7, #16]
 8001954:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 8001956:	f44f 7340 	mov.w	r3, #768	; 0x300
 800195a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195c:	2302      	movs	r3, #2
 800195e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001960:	2300      	movs	r3, #0
 8001962:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001964:	2300      	movs	r3, #0
 8001966:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001968:	2306      	movs	r3, #6
 800196a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196c:	f107 0314 	add.w	r3, r7, #20
 8001970:	4619      	mov	r1, r3
 8001972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001976:	f001 fa83 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800197a:	e020      	b.n	80019be <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a13      	ldr	r2, [pc, #76]	; (80019d0 <HAL_TIM_MspPostInit+0xb4>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d11b      	bne.n	80019be <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b11      	ldr	r3, [pc, #68]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	4a10      	ldr	r2, [pc, #64]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 800198c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001990:	6153      	str	r3, [r2, #20]
 8001992:	4b0e      	ldr	r3, [pc, #56]	; (80019cc <HAL_TIM_MspPostInit+0xb0>)
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 800199e:	2320      	movs	r3, #32
 80019a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2300      	movs	r3, #0
 80019ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 80019ae:	230a      	movs	r3, #10
 80019b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 0314 	add.w	r3, r7, #20
 80019b6:	4619      	mov	r1, r3
 80019b8:	4806      	ldr	r0, [pc, #24]	; (80019d4 <HAL_TIM_MspPostInit+0xb8>)
 80019ba:	f001 fa61 	bl	8002e80 <HAL_GPIO_Init>
}
 80019be:	bf00      	nop
 80019c0:	3728      	adds	r7, #40	; 0x28
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40012c00 	.word	0x40012c00
 80019cc:	40021000 	.word	0x40021000
 80019d0:	40014800 	.word	0x40014800
 80019d4:	48000400 	.word	0x48000400

080019d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b08a      	sub	sp, #40	; 0x28
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019e0:	f107 0314 	add.w	r3, r7, #20
 80019e4:	2200      	movs	r2, #0
 80019e6:	601a      	str	r2, [r3, #0]
 80019e8:	605a      	str	r2, [r3, #4]
 80019ea:	609a      	str	r2, [r3, #8]
 80019ec:	60da      	str	r2, [r3, #12]
 80019ee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a18      	ldr	r2, [pc, #96]	; (8001a58 <HAL_UART_MspInit+0x80>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d129      	bne.n	8001a4e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019fa:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <HAL_UART_MspInit+0x84>)
 80019fc:	69db      	ldr	r3, [r3, #28]
 80019fe:	4a17      	ldr	r2, [pc, #92]	; (8001a5c <HAL_UART_MspInit+0x84>)
 8001a00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a04:	61d3      	str	r3, [r2, #28]
 8001a06:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <HAL_UART_MspInit+0x84>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a0e:	613b      	str	r3, [r7, #16]
 8001a10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a12:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <HAL_UART_MspInit+0x84>)
 8001a14:	695b      	ldr	r3, [r3, #20]
 8001a16:	4a11      	ldr	r2, [pc, #68]	; (8001a5c <HAL_UART_MspInit+0x84>)
 8001a18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a1c:	6153      	str	r3, [r2, #20]
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <HAL_UART_MspInit+0x84>)
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a2a:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a30:	2302      	movs	r3, #2
 8001a32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a3c:	2307      	movs	r3, #7
 8001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a40:	f107 0314 	add.w	r3, r7, #20
 8001a44:	4619      	mov	r1, r3
 8001a46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a4a:	f001 fa19 	bl	8002e80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a4e:	bf00      	nop
 8001a50:	3728      	adds	r7, #40	; 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	40004400 	.word	0x40004400
 8001a5c:	40021000 	.word	0x40021000

08001a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a64:	e7fe      	b.n	8001a64 <NMI_Handler+0x4>

08001a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a6a:	e7fe      	b.n	8001a6a <HardFault_Handler+0x4>

08001a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a70:	e7fe      	b.n	8001a70 <MemManage_Handler+0x4>

08001a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a72:	b480      	push	{r7}
 8001a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a76:	e7fe      	b.n	8001a76 <BusFault_Handler+0x4>

08001a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a7c:	e7fe      	b.n	8001a7c <UsageFault_Handler+0x4>

08001a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a7e:	b480      	push	{r7}
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr

08001a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a9e:	bf00      	nop
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aac:	f000 f94a 	bl	8001d44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}

08001ab4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
	return 1;
 8001ab8:	2301      	movs	r3, #1
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr

08001ac4 <_kill>:

int _kill(int pid, int sig)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001ace:	f004 fae3 	bl	8006098 <__errno>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2216      	movs	r2, #22
 8001ad6:	601a      	str	r2, [r3, #0]
	return -1;
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3708      	adds	r7, #8
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <_exit>:

void _exit (int status)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffe7 	bl	8001ac4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001af6:	e7fe      	b.n	8001af6 <_exit+0x12>

08001af8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	e00a      	b.n	8001b20 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b0a:	f3af 8000 	nop.w
 8001b0e:	4601      	mov	r1, r0
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	1c5a      	adds	r2, r3, #1
 8001b14:	60ba      	str	r2, [r7, #8]
 8001b16:	b2ca      	uxtb	r2, r1
 8001b18:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	617b      	str	r3, [r7, #20]
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	dbf0      	blt.n	8001b0a <_read+0x12>
	}

return len;
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	3718      	adds	r7, #24
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}

08001b32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b32:	b580      	push	{r7, lr}
 8001b34:	b086      	sub	sp, #24
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	60f8      	str	r0, [r7, #12]
 8001b3a:	60b9      	str	r1, [r7, #8]
 8001b3c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b3e:	2300      	movs	r3, #0
 8001b40:	617b      	str	r3, [r7, #20]
 8001b42:	e009      	b.n	8001b58 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	1c5a      	adds	r2, r3, #1
 8001b48:	60ba      	str	r2, [r7, #8]
 8001b4a:	781b      	ldrb	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	3301      	adds	r3, #1
 8001b56:	617b      	str	r3, [r7, #20]
 8001b58:	697a      	ldr	r2, [r7, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	429a      	cmp	r2, r3
 8001b5e:	dbf1      	blt.n	8001b44 <_write+0x12>
	}
	return len;
 8001b60:	687b      	ldr	r3, [r7, #4]
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3718      	adds	r7, #24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_close>:

int _close(int file)
{
 8001b6a:	b480      	push	{r7}
 8001b6c:	b083      	sub	sp, #12
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
	return -1;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	370c      	adds	r7, #12
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr

08001b82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b82:	b480      	push	{r7}
 8001b84:	b083      	sub	sp, #12
 8001b86:	af00      	add	r7, sp, #0
 8001b88:	6078      	str	r0, [r7, #4]
 8001b8a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b92:	605a      	str	r2, [r3, #4]
	return 0;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	370c      	adds	r7, #12
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr

08001ba2 <_isatty>:

int _isatty(int file)
{
 8001ba2:	b480      	push	{r7}
 8001ba4:	b083      	sub	sp, #12
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	6078      	str	r0, [r7, #4]
	return 1;
 8001baa:	2301      	movs	r3, #1
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	370c      	adds	r7, #12
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr

08001bb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b085      	sub	sp, #20
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
	return 0;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3714      	adds	r7, #20
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr
	...

08001bd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001bdc:	4a14      	ldr	r2, [pc, #80]	; (8001c30 <_sbrk+0x5c>)
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <_sbrk+0x60>)
 8001be0:	1ad3      	subs	r3, r2, r3
 8001be2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001be4:	697b      	ldr	r3, [r7, #20]
 8001be6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001be8:	4b13      	ldr	r3, [pc, #76]	; (8001c38 <_sbrk+0x64>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d102      	bne.n	8001bf6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001bf0:	4b11      	ldr	r3, [pc, #68]	; (8001c38 <_sbrk+0x64>)
 8001bf2:	4a12      	ldr	r2, [pc, #72]	; (8001c3c <_sbrk+0x68>)
 8001bf4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001bf6:	4b10      	ldr	r3, [pc, #64]	; (8001c38 <_sbrk+0x64>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d207      	bcs.n	8001c14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c04:	f004 fa48 	bl	8006098 <__errno>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c12:	e009      	b.n	8001c28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c14:	4b08      	ldr	r3, [pc, #32]	; (8001c38 <_sbrk+0x64>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c1a:	4b07      	ldr	r3, [pc, #28]	; (8001c38 <_sbrk+0x64>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4413      	add	r3, r2
 8001c22:	4a05      	ldr	r2, [pc, #20]	; (8001c38 <_sbrk+0x64>)
 8001c24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c26:	68fb      	ldr	r3, [r7, #12]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3718      	adds	r7, #24
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}
 8001c30:	20003000 	.word	0x20003000
 8001c34:	00000400 	.word	0x00000400
 8001c38:	200003b0 	.word	0x200003b0
 8001c3c:	200003c8 	.word	0x200003c8

08001c40 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c44:	4b06      	ldr	r3, [pc, #24]	; (8001c60 <SystemInit+0x20>)
 8001c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c4a:	4a05      	ldr	r2, [pc, #20]	; (8001c60 <SystemInit+0x20>)
 8001c4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c54:	bf00      	nop
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	e000ed00 	.word	0xe000ed00

08001c64 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c9c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c68:	480d      	ldr	r0, [pc, #52]	; (8001ca0 <LoopForever+0x6>)
  ldr r1, =_edata
 8001c6a:	490e      	ldr	r1, [pc, #56]	; (8001ca4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001c6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ca8 <LoopForever+0xe>)
  movs r3, #0
 8001c6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c70:	e002      	b.n	8001c78 <LoopCopyDataInit>

08001c72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c76:	3304      	adds	r3, #4

08001c78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c7c:	d3f9      	bcc.n	8001c72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c7e:	4a0b      	ldr	r2, [pc, #44]	; (8001cac <LoopForever+0x12>)
  ldr r4, =_ebss
 8001c80:	4c0b      	ldr	r4, [pc, #44]	; (8001cb0 <LoopForever+0x16>)
  movs r3, #0
 8001c82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c84:	e001      	b.n	8001c8a <LoopFillZerobss>

08001c86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c88:	3204      	adds	r2, #4

08001c8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c8c:	d3fb      	bcc.n	8001c86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001c8e:	f7ff ffd7 	bl	8001c40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c92:	f004 fa07 	bl	80060a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c96:	f7ff fa93 	bl	80011c0 <main>

08001c9a <LoopForever>:

LoopForever:
    b LoopForever
 8001c9a:	e7fe      	b.n	8001c9a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c9c:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8001ca0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ca4:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8001ca8:	0800c74c 	.word	0x0800c74c
  ldr r2, =_sbss
 8001cac:	2000021c 	.word	0x2000021c
  ldr r4, =_ebss
 8001cb0:	200003c8 	.word	0x200003c8

08001cb4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cb4:	e7fe      	b.n	8001cb4 <ADC1_2_IRQHandler>
	...

08001cb8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cbc:	4b08      	ldr	r3, [pc, #32]	; (8001ce0 <HAL_Init+0x28>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4a07      	ldr	r2, [pc, #28]	; (8001ce0 <HAL_Init+0x28>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc8:	2003      	movs	r0, #3
 8001cca:	f001 f8a5 	bl	8002e18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cce:	2000      	movs	r0, #0
 8001cd0:	f000 f808 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cd4:	f7ff fd8e 	bl	80017f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd8:	2300      	movs	r3, #0
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40022000 	.word	0x40022000

08001ce4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <HAL_InitTick+0x54>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_InitTick+0x58>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	4619      	mov	r1, r3
 8001cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cfa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d02:	4618      	mov	r0, r3
 8001d04:	f001 f8af 	bl	8002e66 <HAL_SYSTICK_Config>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e00e      	b.n	8001d30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b0f      	cmp	r3, #15
 8001d16:	d80a      	bhi.n	8001d2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d18:	2200      	movs	r2, #0
 8001d1a:	6879      	ldr	r1, [r7, #4]
 8001d1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001d20:	f001 f885 	bl	8002e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <HAL_InitTick+0x5c>)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	e000      	b.n	8001d30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3708      	adds	r7, #8
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}
 8001d38:	2000003c 	.word	0x2000003c
 8001d3c:	20000044 	.word	0x20000044
 8001d40:	20000040 	.word	0x20000040

08001d44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <HAL_IncTick+0x20>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <HAL_IncTick+0x24>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	4413      	add	r3, r2
 8001d54:	4a04      	ldr	r2, [pc, #16]	; (8001d68 <HAL_IncTick+0x24>)
 8001d56:	6013      	str	r3, [r2, #0]
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	20000044 	.word	0x20000044
 8001d68:	200003b4 	.word	0x200003b4

08001d6c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001d70:	4b03      	ldr	r3, [pc, #12]	; (8001d80 <HAL_GetTick+0x14>)
 8001d72:	681b      	ldr	r3, [r3, #0]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	200003b4 	.word	0x200003b4

08001d84 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d8c:	f7ff ffee 	bl	8001d6c <HAL_GetTick>
 8001d90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d9c:	d005      	beq.n	8001daa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	; (8001dc8 <HAL_Delay+0x44>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	4413      	add	r3, r2
 8001da8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001daa:	bf00      	nop
 8001dac:	f7ff ffde 	bl	8001d6c <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68bb      	ldr	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	68fa      	ldr	r2, [r7, #12]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d8f7      	bhi.n	8001dac <HAL_Delay+0x28>
  {
  }
}
 8001dbc:	bf00      	nop
 8001dbe:	bf00      	nop
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20000044 	.word	0x20000044

08001dcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b09a      	sub	sp, #104	; 0x68
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d101      	bne.n	8001dec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	e172      	b.n	80020d2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001df6:	f003 0310 	and.w	r3, r3, #16
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d176      	bne.n	8001eec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d152      	bne.n	8001eac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2200      	movs	r2, #0
 8001e10:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff fd0b 	bl	800183c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d13b      	bne.n	8001eac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001e34:	6878      	ldr	r0, [r7, #4]
 8001e36:	f000 fed7 	bl	8002be8 <ADC_Disable>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f003 0310 	and.w	r3, r3, #16
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d12f      	bne.n	8001eac <HAL_ADC_Init+0xe0>
 8001e4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d12b      	bne.n	8001eac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001e5c:	f023 0302 	bic.w	r3, r3, #2
 8001e60:	f043 0202 	orr.w	r2, r3, #2
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	689a      	ldr	r2, [r3, #8]
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001e76:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001e86:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001e88:	4b94      	ldr	r3, [pc, #592]	; (80020dc <HAL_ADC_Init+0x310>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a94      	ldr	r2, [pc, #592]	; (80020e0 <HAL_ADC_Init+0x314>)
 8001e8e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e92:	0c9a      	lsrs	r2, r3, #18
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001e9e:	e002      	b.n	8001ea6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d1f9      	bne.n	8001ea0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d007      	beq.n	8001eca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ec4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec8:	d110      	bne.n	8001eec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	f023 0312 	bic.w	r3, r3, #18
 8001ed2:	f043 0210 	orr.w	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ede:	f043 0201 	orr.w	r2, r3, #1
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef0:	f003 0310 	and.w	r3, r3, #16
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	f040 80df 	bne.w	80020b8 <HAL_ADC_Init+0x2ec>
 8001efa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	f040 80da 	bne.w	80020b8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f040 80d2 	bne.w	80020b8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001f1c:	f043 0202 	orr.w	r2, r3, #2
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f24:	4b6f      	ldr	r3, [pc, #444]	; (80020e4 <HAL_ADC_Init+0x318>)
 8001f26:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001f30:	d102      	bne.n	8001f38 <HAL_ADC_Init+0x16c>
 8001f32:	4b6d      	ldr	r3, [pc, #436]	; (80020e8 <HAL_ADC_Init+0x31c>)
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	e002      	b.n	8001f3e <HAL_ADC_Init+0x172>
 8001f38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d108      	bne.n	8001f5e <HAL_ADC_Init+0x192>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d101      	bne.n	8001f5e <HAL_ADC_Init+0x192>
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <HAL_ADC_Init+0x194>
 8001f5e:	2300      	movs	r3, #0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d11c      	bne.n	8001f9e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d010      	beq.n	8001f8c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f003 0303 	and.w	r3, r3, #3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d107      	bne.n	8001f86 <HAL_ADC_Init+0x1ba>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_Init+0x1ba>
 8001f82:	2301      	movs	r3, #1
 8001f84:	e000      	b.n	8001f88 <HAL_ADC_Init+0x1bc>
 8001f86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d108      	bne.n	8001f9e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001f8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	7e5b      	ldrb	r3, [r3, #25]
 8001fa2:	035b      	lsls	r3, r3, #13
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fa8:	2a01      	cmp	r2, #1
 8001faa:	d002      	beq.n	8001fb2 <HAL_ADC_Init+0x1e6>
 8001fac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001fb0:	e000      	b.n	8001fb4 <HAL_ADC_Init+0x1e8>
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	431a      	orrs	r2, r3
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	431a      	orrs	r2, r3
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	689b      	ldr	r3, [r3, #8]
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d11b      	bne.n	800200a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	7e5b      	ldrb	r3, [r3, #25]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d109      	bne.n	8001fee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	045a      	lsls	r2, r3, #17
 8001fe2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fea:	663b      	str	r3, [r7, #96]	; 0x60
 8001fec:	e00d      	b.n	800200a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001ff6:	f043 0220 	orr.w	r2, r3, #32
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002002:	f043 0201 	orr.w	r2, r3, #1
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800200e:	2b01      	cmp	r3, #1
 8002010:	d007      	beq.n	8002022 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800201a:	4313      	orrs	r3, r2
 800201c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800201e:	4313      	orrs	r3, r2
 8002020:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	f003 030c 	and.w	r3, r3, #12
 800202c:	2b00      	cmp	r3, #0
 800202e:	d114      	bne.n	800205a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	6812      	ldr	r2, [r2, #0]
 800203a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800203e:	f023 0302 	bic.w	r3, r3, #2
 8002042:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	7e1b      	ldrb	r3, [r3, #24]
 8002048:	039a      	lsls	r2, r3, #14
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4313      	orrs	r3, r2
 8002054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002056:	4313      	orrs	r3, r2
 8002058:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68da      	ldr	r2, [r3, #12]
 8002060:	4b22      	ldr	r3, [pc, #136]	; (80020ec <HAL_ADC_Init+0x320>)
 8002062:	4013      	ands	r3, r2
 8002064:	687a      	ldr	r2, [r7, #4]
 8002066:	6812      	ldr	r2, [r2, #0]
 8002068:	6e39      	ldr	r1, [r7, #96]	; 0x60
 800206a:	430b      	orrs	r3, r1
 800206c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	691b      	ldr	r3, [r3, #16]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d10c      	bne.n	8002090 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207c:	f023 010f 	bic.w	r1, r3, #15
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69db      	ldr	r3, [r3, #28]
 8002084:	1e5a      	subs	r2, r3, #1
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	631a      	str	r2, [r3, #48]	; 0x30
 800208e:	e007      	b.n	80020a0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f022 020f 	bic.w	r2, r2, #15
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	f023 0303 	bic.w	r3, r3, #3
 80020ae:	f043 0201 	orr.w	r2, r3, #1
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	; 0x40
 80020b6:	e00a      	b.n	80020ce <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020bc:	f023 0312 	bic.w	r3, r3, #18
 80020c0:	f043 0210 	orr.w	r2, r3, #16
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 80020c8:	2301      	movs	r3, #1
 80020ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 80020ce:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	3768      	adds	r7, #104	; 0x68
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bd80      	pop	{r7, pc}
 80020da:	bf00      	nop
 80020dc:	2000003c 	.word	0x2000003c
 80020e0:	431bde83 	.word	0x431bde83
 80020e4:	50000300 	.word	0x50000300
 80020e8:	50000100 	.word	0x50000100
 80020ec:	fff0c007 	.word	0xfff0c007

080020f0 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020f8:	2300      	movs	r3, #0
 80020fa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	f003 0304 	and.w	r3, r3, #4
 8002106:	2b00      	cmp	r3, #0
 8002108:	f040 809c 	bne.w	8002244 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002112:	2b01      	cmp	r3, #1
 8002114:	d101      	bne.n	800211a <HAL_ADC_Start+0x2a>
 8002116:	2302      	movs	r3, #2
 8002118:	e097      	b.n	800224a <HAL_ADC_Start+0x15a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	2201      	movs	r2, #1
 800211e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f000 fcfc 	bl	8002b20 <ADC_Enable>
 8002128:	4603      	mov	r3, r0
 800212a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	2b00      	cmp	r3, #0
 8002130:	f040 8083 	bne.w	800223a <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800213c:	f023 0301 	bic.w	r3, r3, #1
 8002140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002148:	4b42      	ldr	r3, [pc, #264]	; (8002254 <HAL_ADC_Start+0x164>)
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 031f 	and.w	r3, r3, #31
 8002150:	2b00      	cmp	r3, #0
 8002152:	d004      	beq.n	800215e <HAL_ADC_Start+0x6e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800215c:	d115      	bne.n	800218a <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002162:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d027      	beq.n	80021c8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002180:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8002188:	e01e      	b.n	80021c8 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800219e:	d004      	beq.n	80021aa <HAL_ADC_Start+0xba>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a2c      	ldr	r2, [pc, #176]	; (8002258 <HAL_ADC_Start+0x168>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d10e      	bne.n	80021c8 <HAL_ADC_Start+0xd8>
 80021aa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d007      	beq.n	80021c8 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021d4:	d106      	bne.n	80021e4 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	f023 0206 	bic.w	r2, r3, #6
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	645a      	str	r2, [r3, #68]	; 0x44
 80021e2:	e002      	b.n	80021ea <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	221c      	movs	r2, #28
 80021f8:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80021fa:	4b16      	ldr	r3, [pc, #88]	; (8002254 <HAL_ADC_Start+0x164>)
 80021fc:	689b      	ldr	r3, [r3, #8]
 80021fe:	f003 031f 	and.w	r3, r3, #31
 8002202:	2b00      	cmp	r3, #0
 8002204:	d010      	beq.n	8002228 <HAL_ADC_Start+0x138>
 8002206:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_ADC_Start+0x164>)
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	f003 031f 	and.w	r3, r3, #31
 800220e:	2b05      	cmp	r3, #5
 8002210:	d00a      	beq.n	8002228 <HAL_ADC_Start+0x138>
 8002212:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_ADC_Start+0x164>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	f003 031f 	and.w	r3, r3, #31
 800221a:	2b09      	cmp	r3, #9
 800221c:	d004      	beq.n	8002228 <HAL_ADC_Start+0x138>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002226:	d10f      	bne.n	8002248 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0204 	orr.w	r2, r2, #4
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	e006      	b.n	8002248 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8002242:	e001      	b.n	8002248 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002244:	2302      	movs	r3, #2
 8002246:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002248:	7bfb      	ldrb	r3, [r7, #15]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3710      	adds	r7, #16
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	50000300 	.word	0x50000300
 8002258:	50000100 	.word	0x50000100

0800225c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8002266:	2300      	movs	r3, #0
 8002268:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	2b08      	cmp	r3, #8
 8002270:	d102      	bne.n	8002278 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002272:	2308      	movs	r3, #8
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	e02e      	b.n	80022d6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002278:	4b5e      	ldr	r3, [pc, #376]	; (80023f4 <HAL_ADC_PollForConversion+0x198>)
 800227a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 031f 	and.w	r3, r3, #31
 8002284:	2b00      	cmp	r3, #0
 8002286:	d112      	bne.n	80022ae <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68db      	ldr	r3, [r3, #12]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b01      	cmp	r3, #1
 8002294:	d11d      	bne.n	80022d2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e09d      	b.n	80023ea <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f043 0220 	orr.w	r2, r3, #32
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	2200      	movs	r2, #0
 80022ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e08b      	b.n	80023ea <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80022d2:	230c      	movs	r3, #12
 80022d4:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_ADC_PollForConversion+0x198>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 031f 	and.w	r3, r3, #31
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d004      	beq.n	80022ec <HAL_ADC_PollForConversion+0x90>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022ea:	d104      	bne.n	80022f6 <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	613b      	str	r3, [r7, #16]
 80022f4:	e003      	b.n	80022fe <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80022f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80022fe:	f7ff fd35 	bl	8001d6c <HAL_GetTick>
 8002302:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002304:	e021      	b.n	800234a <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800230c:	d01d      	beq.n	800234a <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d007      	beq.n	8002324 <HAL_ADC_PollForConversion+0xc8>
 8002314:	f7ff fd2a 	bl	8001d6c <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d212      	bcs.n	800234a <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	681a      	ldr	r2, [r3, #0]
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10b      	bne.n	800234a <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002336:	f043 0204 	orr.w	r2, r3, #4
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e04f      	b.n	80023ea <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	4013      	ands	r3, r2
 8002354:	2b00      	cmp	r3, #0
 8002356:	d0d6      	beq.n	8002306 <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800236e:	2b00      	cmp	r3, #0
 8002370:	d131      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8002378:	2b00      	cmp	r3, #0
 800237a:	d12c      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	2b08      	cmp	r3, #8
 8002388:	d125      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	f003 0304 	and.w	r3, r3, #4
 8002394:	2b00      	cmp	r3, #0
 8002396:	d112      	bne.n	80023be <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d112      	bne.n	80023d6 <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	f043 0201 	orr.w	r2, r3, #1
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	641a      	str	r2, [r3, #64]	; 0x40
 80023bc:	e00b      	b.n	80023d6 <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f043 0220 	orr.w	r2, r3, #32
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ce:	f043 0201 	orr.w	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	697a      	ldr	r2, [r7, #20]
 80023e6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80023e8:	2300      	movs	r3, #0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	3718      	adds	r7, #24
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	50000300 	.word	0x50000300

080023f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002410:	4770      	bx	lr
	...

08002414 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002414:	b480      	push	{r7}
 8002416:	b09b      	sub	sp, #108	; 0x6c
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800241e:	2300      	movs	r3, #0
 8002420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_ADC_ConfigChannel+0x22>
 8002432:	2302      	movs	r3, #2
 8002434:	e2a4      	b.n	8002980 <HAL_ADC_ConfigChannel+0x56c>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f040 8288 	bne.w	800295e <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	2b04      	cmp	r3, #4
 8002454:	d81c      	bhi.n	8002490 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685a      	ldr	r2, [r3, #4]
 8002460:	4613      	mov	r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4413      	add	r3, r2
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	461a      	mov	r2, r3
 800246a:	231f      	movs	r3, #31
 800246c:	4093      	lsls	r3, r2
 800246e:	43db      	mvns	r3, r3
 8002470:	4019      	ands	r1, r3
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6818      	ldr	r0, [r3, #0]
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	685a      	ldr	r2, [r3, #4]
 800247a:	4613      	mov	r3, r2
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	4413      	add	r3, r2
 8002480:	005b      	lsls	r3, r3, #1
 8002482:	fa00 f203 	lsl.w	r2, r0, r3
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	430a      	orrs	r2, r1
 800248c:	631a      	str	r2, [r3, #48]	; 0x30
 800248e:	e063      	b.n	8002558 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	685b      	ldr	r3, [r3, #4]
 8002494:	2b09      	cmp	r3, #9
 8002496:	d81e      	bhi.n	80024d6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685a      	ldr	r2, [r3, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	4413      	add	r3, r2
 80024a8:	005b      	lsls	r3, r3, #1
 80024aa:	3b1e      	subs	r3, #30
 80024ac:	221f      	movs	r2, #31
 80024ae:	fa02 f303 	lsl.w	r3, r2, r3
 80024b2:	43db      	mvns	r3, r3
 80024b4:	4019      	ands	r1, r3
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	6818      	ldr	r0, [r3, #0]
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	4613      	mov	r3, r2
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4413      	add	r3, r2
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	3b1e      	subs	r3, #30
 80024c8:	fa00 f203 	lsl.w	r2, r0, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	635a      	str	r2, [r3, #52]	; 0x34
 80024d4:	e040      	b.n	8002558 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b0e      	cmp	r3, #14
 80024dc:	d81e      	bhi.n	800251c <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	005b      	lsls	r3, r3, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	3b3c      	subs	r3, #60	; 0x3c
 80024f2:	221f      	movs	r2, #31
 80024f4:	fa02 f303 	lsl.w	r3, r2, r3
 80024f8:	43db      	mvns	r3, r3
 80024fa:	4019      	ands	r1, r3
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	6818      	ldr	r0, [r3, #0]
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	4613      	mov	r3, r2
 8002506:	005b      	lsls	r3, r3, #1
 8002508:	4413      	add	r3, r2
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	3b3c      	subs	r3, #60	; 0x3c
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	639a      	str	r2, [r3, #56]	; 0x38
 800251a:	e01d      	b.n	8002558 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	685a      	ldr	r2, [r3, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	005b      	lsls	r3, r3, #1
 800252a:	4413      	add	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	3b5a      	subs	r3, #90	; 0x5a
 8002530:	221f      	movs	r2, #31
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	4019      	ands	r1, r3
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6818      	ldr	r0, [r3, #0]
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685a      	ldr	r2, [r3, #4]
 8002542:	4613      	mov	r3, r2
 8002544:	005b      	lsls	r3, r3, #1
 8002546:	4413      	add	r3, r2
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	3b5a      	subs	r3, #90	; 0x5a
 800254c:	fa00 f203 	lsl.w	r2, r0, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	430a      	orrs	r2, r1
 8002556:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	f040 80e5 	bne.w	8002732 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2b09      	cmp	r3, #9
 800256e:	d91c      	bls.n	80025aa <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	6999      	ldr	r1, [r3, #24]
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	4613      	mov	r3, r2
 800257c:	005b      	lsls	r3, r3, #1
 800257e:	4413      	add	r3, r2
 8002580:	3b1e      	subs	r3, #30
 8002582:	2207      	movs	r2, #7
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	4019      	ands	r1, r3
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	6898      	ldr	r0, [r3, #8]
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	4613      	mov	r3, r2
 8002596:	005b      	lsls	r3, r3, #1
 8002598:	4413      	add	r3, r2
 800259a:	3b1e      	subs	r3, #30
 800259c:	fa00 f203 	lsl.w	r2, r0, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	430a      	orrs	r2, r1
 80025a6:	619a      	str	r2, [r3, #24]
 80025a8:	e019      	b.n	80025de <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	6959      	ldr	r1, [r3, #20]
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	005b      	lsls	r3, r3, #1
 80025b8:	4413      	add	r3, r2
 80025ba:	2207      	movs	r2, #7
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	43db      	mvns	r3, r3
 80025c2:	4019      	ands	r1, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	6898      	ldr	r0, [r3, #8]
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681a      	ldr	r2, [r3, #0]
 80025cc:	4613      	mov	r3, r2
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	4413      	add	r3, r2
 80025d2:	fa00 f203 	lsl.w	r2, r0, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	430a      	orrs	r2, r1
 80025dc:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80025de:	683b      	ldr	r3, [r7, #0]
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	08db      	lsrs	r3, r3, #3
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	fa02 f303 	lsl.w	r3, r2, r3
 80025f4:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	2b03      	cmp	r3, #3
 80025fe:	d84f      	bhi.n	80026a0 <HAL_ADC_ConfigChannel+0x28c>
 8002600:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_ADC_ConfigChannel+0x1f4>)
 8002602:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002606:	bf00      	nop
 8002608:	08002619 	.word	0x08002619
 800260c:	0800263b 	.word	0x0800263b
 8002610:	0800265d 	.word	0x0800265d
 8002614:	0800267f 	.word	0x0800267f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800261e:	4b94      	ldr	r3, [pc, #592]	; (8002870 <HAL_ADC_ConfigChannel+0x45c>)
 8002620:	4013      	ands	r3, r2
 8002622:	683a      	ldr	r2, [r7, #0]
 8002624:	6812      	ldr	r2, [r2, #0]
 8002626:	0691      	lsls	r1, r2, #26
 8002628:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800262a:	430a      	orrs	r2, r1
 800262c:	431a      	orrs	r2, r3
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002636:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002638:	e07e      	b.n	8002738 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002640:	4b8b      	ldr	r3, [pc, #556]	; (8002870 <HAL_ADC_ConfigChannel+0x45c>)
 8002642:	4013      	ands	r3, r2
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	6812      	ldr	r2, [r2, #0]
 8002648:	0691      	lsls	r1, r2, #26
 800264a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800264c:	430a      	orrs	r2, r1
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002658:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800265a:	e06d      	b.n	8002738 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002662:	4b83      	ldr	r3, [pc, #524]	; (8002870 <HAL_ADC_ConfigChannel+0x45c>)
 8002664:	4013      	ands	r3, r2
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	6812      	ldr	r2, [r2, #0]
 800266a:	0691      	lsls	r1, r2, #26
 800266c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800266e:	430a      	orrs	r2, r1
 8002670:	431a      	orrs	r2, r3
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800267a:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800267c:	e05c      	b.n	8002738 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002684:	4b7a      	ldr	r3, [pc, #488]	; (8002870 <HAL_ADC_ConfigChannel+0x45c>)
 8002686:	4013      	ands	r3, r2
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6812      	ldr	r2, [r2, #0]
 800268c:	0691      	lsls	r1, r2, #26
 800268e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002690:	430a      	orrs	r2, r1
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800269c:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800269e:	e04b      	b.n	8002738 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80026a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	069b      	lsls	r3, r3, #26
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d107      	bne.n	80026c4 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026c2:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80026ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	069b      	lsls	r3, r3, #26
 80026d4:	429a      	cmp	r2, r3
 80026d6:	d107      	bne.n	80026e8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80026e6:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	069b      	lsls	r3, r3, #26
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d107      	bne.n	800270c <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800270a:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002712:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	069b      	lsls	r3, r3, #26
 800271c:	429a      	cmp	r2, r3
 800271e:	d10a      	bne.n	8002736 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800272e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002730:	e001      	b.n	8002736 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <HAL_ADC_ConfigChannel+0x324>
      break;
 8002736:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	f003 0303 	and.w	r3, r3, #3
 8002742:	2b01      	cmp	r3, #1
 8002744:	d108      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x344>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0301 	and.w	r3, r3, #1
 8002750:	2b01      	cmp	r3, #1
 8002752:	d101      	bne.n	8002758 <HAL_ADC_ConfigChannel+0x344>
 8002754:	2301      	movs	r3, #1
 8002756:	e000      	b.n	800275a <HAL_ADC_ConfigChannel+0x346>
 8002758:	2300      	movs	r3, #0
 800275a:	2b00      	cmp	r3, #0
 800275c:	f040 810a 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d00f      	beq.n	8002788 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2201      	movs	r2, #1
 8002776:	fa02 f303 	lsl.w	r3, r2, r3
 800277a:	43da      	mvns	r2, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	400a      	ands	r2, r1
 8002782:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8002786:	e049      	b.n	800281c <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	2201      	movs	r2, #1
 8002796:	409a      	lsls	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	430a      	orrs	r2, r1
 800279e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	2b09      	cmp	r3, #9
 80027a8:	d91c      	bls.n	80027e4 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	6999      	ldr	r1, [r3, #24]
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	3b1b      	subs	r3, #27
 80027bc:	2207      	movs	r2, #7
 80027be:	fa02 f303 	lsl.w	r3, r2, r3
 80027c2:	43db      	mvns	r3, r3
 80027c4:	4019      	ands	r1, r3
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	6898      	ldr	r0, [r3, #8]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	3b1b      	subs	r3, #27
 80027d6:	fa00 f203 	lsl.w	r2, r0, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	430a      	orrs	r2, r1
 80027e0:	619a      	str	r2, [r3, #24]
 80027e2:	e01b      	b.n	800281c <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	6959      	ldr	r1, [r3, #20]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	4613      	mov	r3, r2
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	4413      	add	r3, r2
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43db      	mvns	r3, r3
 80027fe:	4019      	ands	r1, r3
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	6898      	ldr	r0, [r3, #8]
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	1c5a      	adds	r2, r3, #1
 800280a:	4613      	mov	r3, r2
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	4413      	add	r3, r2
 8002810:	fa00 f203 	lsl.w	r2, r0, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800281c:	4b15      	ldr	r3, [pc, #84]	; (8002874 <HAL_ADC_ConfigChannel+0x460>)
 800281e:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	2b10      	cmp	r3, #16
 8002826:	d105      	bne.n	8002834 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002828:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002830:	2b00      	cmp	r3, #0
 8002832:	d015      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002838:	2b11      	cmp	r3, #17
 800283a:	d105      	bne.n	8002848 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800283c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800283e:	689b      	ldr	r3, [r3, #8]
 8002840:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002844:	2b00      	cmp	r3, #0
 8002846:	d00b      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 800284c:	2b12      	cmp	r3, #18
 800284e:	f040 8091 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002854:	689b      	ldr	r3, [r3, #8]
 8002856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800285a:	2b00      	cmp	r3, #0
 800285c:	f040 808a 	bne.w	8002974 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002868:	d108      	bne.n	800287c <HAL_ADC_ConfigChannel+0x468>
 800286a:	4b03      	ldr	r3, [pc, #12]	; (8002878 <HAL_ADC_ConfigChannel+0x464>)
 800286c:	60fb      	str	r3, [r7, #12]
 800286e:	e008      	b.n	8002882 <HAL_ADC_ConfigChannel+0x46e>
 8002870:	83fff000 	.word	0x83fff000
 8002874:	50000300 	.word	0x50000300
 8002878:	50000100 	.word	0x50000100
 800287c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002880:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 0303 	and.w	r3, r3, #3
 800288c:	2b01      	cmp	r3, #1
 800288e:	d108      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x48e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b01      	cmp	r3, #1
 800289c:	d101      	bne.n	80028a2 <HAL_ADC_ConfigChannel+0x48e>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_ADC_ConfigChannel+0x490>
 80028a2:	2300      	movs	r3, #0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d150      	bne.n	800294a <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028a8:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d010      	beq.n	80028d0 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	f003 0303 	and.w	r3, r3, #3
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d107      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4b6>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d101      	bne.n	80028ca <HAL_ADC_ConfigChannel+0x4b6>
 80028c6:	2301      	movs	r3, #1
 80028c8:	e000      	b.n	80028cc <HAL_ADC_ConfigChannel+0x4b8>
 80028ca:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d13c      	bne.n	800294a <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	2b10      	cmp	r3, #16
 80028d6:	d11d      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x500>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80028e0:	d118      	bne.n	8002914 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80028e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80028ec:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80028ee:	4b27      	ldr	r3, [pc, #156]	; (800298c <HAL_ADC_ConfigChannel+0x578>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a27      	ldr	r2, [pc, #156]	; (8002990 <HAL_ADC_ConfigChannel+0x57c>)
 80028f4:	fba2 2303 	umull	r2, r3, r2, r3
 80028f8:	0c9a      	lsrs	r2, r3, #18
 80028fa:	4613      	mov	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	4413      	add	r3, r2
 8002900:	005b      	lsls	r3, r3, #1
 8002902:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002904:	e002      	b.n	800290c <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	3b01      	subs	r3, #1
 800290a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	2b00      	cmp	r3, #0
 8002910:	d1f9      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002912:	e02e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b11      	cmp	r3, #17
 800291a:	d10b      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x520>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002924:	d106      	bne.n	8002934 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002926:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800292e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002930:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002932:	e01e      	b.n	8002972 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	2b12      	cmp	r3, #18
 800293a:	d11a      	bne.n	8002972 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800293c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002944:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002946:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002948:	e013      	b.n	8002972 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0220 	orr.w	r2, r3, #32
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800295c:	e00a      	b.n	8002974 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002962:	f043 0220 	orr.w	r2, r3, #32
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002970:	e000      	b.n	8002974 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002972:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2200      	movs	r2, #0
 8002978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800297c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002980:	4618      	mov	r0, r3
 8002982:	376c      	adds	r7, #108	; 0x6c
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr
 800298c:	2000003c 	.word	0x2000003c
 8002990:	431bde83 	.word	0x431bde83

08002994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002994:	b480      	push	{r7}
 8002996:	b099      	sub	sp, #100	; 0x64
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800299e:	2300      	movs	r3, #0
 80029a0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ac:	d102      	bne.n	80029b4 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80029ae:	4b5a      	ldr	r3, [pc, #360]	; (8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80029b0:	60bb      	str	r3, [r7, #8]
 80029b2:	e002      	b.n	80029ba <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80029b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80029b8:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d101      	bne.n	80029c4 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80029c0:	2301      	movs	r3, #1
 80029c2:	e0a2      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80029ce:	2302      	movs	r3, #2
 80029d0:	e09b      	b.n	8002b0a <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d17f      	bne.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 0304 	and.w	r3, r3, #4
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d179      	bne.n	8002ae8 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029f4:	4b49      	ldr	r3, [pc, #292]	; (8002b1c <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80029f6:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d040      	beq.n	8002a82 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a02:	689b      	ldr	r3, [r3, #8]
 8002a04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	6859      	ldr	r1, [r3, #4]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a12:	035b      	lsls	r3, r3, #13
 8002a14:	430b      	orrs	r3, r1
 8002a16:	431a      	orrs	r2, r3
 8002a18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a1a:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 0303 	and.w	r3, r3, #3
 8002a26:	2b01      	cmp	r3, #1
 8002a28:	d108      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d101      	bne.n	8002a3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e000      	b.n	8002a3e <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15c      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f003 0303 	and.w	r3, r3, #3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d107      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a5a:	2301      	movs	r3, #1
 8002a5c:	e000      	b.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002a5e:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d14b      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002a64:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a6c:	f023 030f 	bic.w	r3, r3, #15
 8002a70:	683a      	ldr	r2, [r7, #0]
 8002a72:	6811      	ldr	r1, [r2, #0]
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	6892      	ldr	r2, [r2, #8]
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a7e:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a80:	e03c      	b.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a8a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a8c:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d108      	bne.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e000      	b.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8002aae:	2300      	movs	r3, #0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d123      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0303 	and.w	r3, r3, #3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d107      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0301 	and.w	r3, r3, #1
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d101      	bne.n	8002ad0 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8002ad0:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d112      	bne.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002ad6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002ade:	f023 030f 	bic.w	r3, r3, #15
 8002ae2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002ae4:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ae6:	e009      	b.n	8002afc <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aec:	f043 0220 	orr.w	r2, r3, #32
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002afa:	e000      	b.n	8002afe <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002afc:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2200      	movs	r2, #0
 8002b02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002b06:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3764      	adds	r7, #100	; 0x64
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	50000100 	.word	0x50000100
 8002b1c:	50000300 	.word	0x50000300

08002b20 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 0303 	and.w	r3, r3, #3
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d108      	bne.n	8002b4c <ADC_Enable+0x2c>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <ADC_Enable+0x2c>
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e000      	b.n	8002b4e <ADC_Enable+0x2e>
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d143      	bne.n	8002bda <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <ADC_Enable+0xc4>)
 8002b5a:	4013      	ands	r3, r2
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00d      	beq.n	8002b7c <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	f043 0210 	orr.w	r2, r3, #16
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b70:	f043 0201 	orr.w	r2, r3, #1
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e02f      	b.n	8002bdc <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689a      	ldr	r2, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f042 0201 	orr.w	r2, r2, #1
 8002b8a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b8c:	f7ff f8ee 	bl	8001d6c <HAL_GetTick>
 8002b90:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b92:	e01b      	b.n	8002bcc <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b94:	f7ff f8ea 	bl	8001d6c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d914      	bls.n	8002bcc <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f003 0301 	and.w	r3, r3, #1
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d00d      	beq.n	8002bcc <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f043 0210 	orr.w	r2, r3, #16
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc0:	f043 0201 	orr.w	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e007      	b.n	8002bdc <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d1dc      	bne.n	8002b94 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	8000003f 	.word	0x8000003f

08002be8 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d108      	bne.n	8002c14 <ADC_Disable+0x2c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <ADC_Disable+0x2c>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e000      	b.n	8002c16 <ADC_Disable+0x2e>
 8002c14:	2300      	movs	r3, #0
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d047      	beq.n	8002caa <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f003 030d 	and.w	r3, r3, #13
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d10f      	bne.n	8002c48 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689a      	ldr	r2, [r3, #8]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0202 	orr.w	r2, r2, #2
 8002c36:	609a      	str	r2, [r3, #8]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002c40:	f7ff f894 	bl	8001d6c <HAL_GetTick>
 8002c44:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c46:	e029      	b.n	8002c9c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e023      	b.n	8002cac <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c64:	f7ff f882 	bl	8001d6c <HAL_GetTick>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d914      	bls.n	8002c9c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 0301 	and.w	r3, r3, #1
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d10d      	bne.n	8002c9c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c84:	f043 0210 	orr.w	r2, r3, #16
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	f043 0201 	orr.w	r2, r3, #1
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e007      	b.n	8002cac <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d0dc      	beq.n	8002c64 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002caa:	2300      	movs	r3, #0
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cca:	68ba      	ldr	r2, [r7, #8]
 8002ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ce6:	4a04      	ldr	r2, [pc, #16]	; (8002cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	60d3      	str	r3, [r2, #12]
}
 8002cec:	bf00      	nop
 8002cee:	3714      	adds	r7, #20
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr
 8002cf8:	e000ed00 	.word	0xe000ed00

08002cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d00:	4b04      	ldr	r3, [pc, #16]	; (8002d14 <__NVIC_GetPriorityGrouping+0x18>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	0a1b      	lsrs	r3, r3, #8
 8002d06:	f003 0307 	and.w	r3, r3, #7
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d12:	4770      	bx	lr
 8002d14:	e000ed00 	.word	0xe000ed00

08002d18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b083      	sub	sp, #12
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	4603      	mov	r3, r0
 8002d20:	6039      	str	r1, [r7, #0]
 8002d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	db0a      	blt.n	8002d42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	490c      	ldr	r1, [pc, #48]	; (8002d64 <__NVIC_SetPriority+0x4c>)
 8002d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d36:	0112      	lsls	r2, r2, #4
 8002d38:	b2d2      	uxtb	r2, r2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d40:	e00a      	b.n	8002d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	b2da      	uxtb	r2, r3
 8002d46:	4908      	ldr	r1, [pc, #32]	; (8002d68 <__NVIC_SetPriority+0x50>)
 8002d48:	79fb      	ldrb	r3, [r7, #7]
 8002d4a:	f003 030f 	and.w	r3, r3, #15
 8002d4e:	3b04      	subs	r3, #4
 8002d50:	0112      	lsls	r2, r2, #4
 8002d52:	b2d2      	uxtb	r2, r2
 8002d54:	440b      	add	r3, r1
 8002d56:	761a      	strb	r2, [r3, #24]
}
 8002d58:	bf00      	nop
 8002d5a:	370c      	adds	r7, #12
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	e000e100 	.word	0xe000e100
 8002d68:	e000ed00 	.word	0xe000ed00

08002d6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d6c:	b480      	push	{r7}
 8002d6e:	b089      	sub	sp, #36	; 0x24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	f003 0307 	and.w	r3, r3, #7
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d80:	69fb      	ldr	r3, [r7, #28]
 8002d82:	f1c3 0307 	rsb	r3, r3, #7
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	bf28      	it	cs
 8002d8a:	2304      	movcs	r3, #4
 8002d8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2b06      	cmp	r3, #6
 8002d94:	d902      	bls.n	8002d9c <NVIC_EncodePriority+0x30>
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	3b03      	subs	r3, #3
 8002d9a:	e000      	b.n	8002d9e <NVIC_EncodePriority+0x32>
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002da0:	f04f 32ff 	mov.w	r2, #4294967295
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43da      	mvns	r2, r3
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	401a      	ands	r2, r3
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002db4:	f04f 31ff 	mov.w	r1, #4294967295
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	fa01 f303 	lsl.w	r3, r1, r3
 8002dbe:	43d9      	mvns	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	4313      	orrs	r3, r2
         );
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3724      	adds	r7, #36	; 0x24
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
	...

08002dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002de4:	d301      	bcc.n	8002dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002de6:	2301      	movs	r3, #1
 8002de8:	e00f      	b.n	8002e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dea:	4a0a      	ldr	r2, [pc, #40]	; (8002e14 <SysTick_Config+0x40>)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3b01      	subs	r3, #1
 8002df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002df2:	210f      	movs	r1, #15
 8002df4:	f04f 30ff 	mov.w	r0, #4294967295
 8002df8:	f7ff ff8e 	bl	8002d18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dfc:	4b05      	ldr	r3, [pc, #20]	; (8002e14 <SysTick_Config+0x40>)
 8002dfe:	2200      	movs	r2, #0
 8002e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e02:	4b04      	ldr	r3, [pc, #16]	; (8002e14 <SysTick_Config+0x40>)
 8002e04:	2207      	movs	r2, #7
 8002e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}
 8002e12:	bf00      	nop
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b082      	sub	sp, #8
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e20:	6878      	ldr	r0, [r7, #4]
 8002e22:	f7ff ff47 	bl	8002cb4 <__NVIC_SetPriorityGrouping>
}
 8002e26:	bf00      	nop
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b086      	sub	sp, #24
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	4603      	mov	r3, r0
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	607a      	str	r2, [r7, #4]
 8002e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e40:	f7ff ff5c 	bl	8002cfc <__NVIC_GetPriorityGrouping>
 8002e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	68b9      	ldr	r1, [r7, #8]
 8002e4a:	6978      	ldr	r0, [r7, #20]
 8002e4c:	f7ff ff8e 	bl	8002d6c <NVIC_EncodePriority>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e56:	4611      	mov	r1, r2
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7ff ff5d 	bl	8002d18 <__NVIC_SetPriority>
}
 8002e5e:	bf00      	nop
 8002e60:	3718      	adds	r7, #24
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}

08002e66 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e66:	b580      	push	{r7, lr}
 8002e68:	b082      	sub	sp, #8
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f7ff ffb0 	bl	8002dd4 <SysTick_Config>
 8002e74:	4603      	mov	r3, r0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
	...

08002e80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b087      	sub	sp, #28
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e8e:	e14e      	b.n	800312e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	2101      	movs	r1, #1
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	fa01 f303 	lsl.w	r3, r1, r3
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 8140 	beq.w	8003128 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f003 0303 	and.w	r3, r3, #3
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d005      	beq.n	8002ec0 <HAL_GPIO_Init+0x40>
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f003 0303 	and.w	r3, r3, #3
 8002ebc:	2b02      	cmp	r3, #2
 8002ebe:	d130      	bne.n	8002f22 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	005b      	lsls	r3, r3, #1
 8002eca:	2203      	movs	r2, #3
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	693a      	ldr	r2, [r7, #16]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	697b      	ldr	r3, [r7, #20]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	693a      	ldr	r2, [r7, #16]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	693a      	ldr	r2, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	fa02 f303 	lsl.w	r3, r2, r3
 8002efe:	43db      	mvns	r3, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4013      	ands	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	091b      	lsrs	r3, r3, #4
 8002f0c:	f003 0201 	and.w	r2, r3, #1
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b03      	cmp	r3, #3
 8002f2c:	d017      	beq.n	8002f5e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	005b      	lsls	r3, r3, #1
 8002f38:	2203      	movs	r2, #3
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	693a      	ldr	r2, [r7, #16]
 8002f42:	4013      	ands	r3, r2
 8002f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	689a      	ldr	r2, [r3, #8]
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	005b      	lsls	r3, r3, #1
 8002f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f52:	693a      	ldr	r2, [r7, #16]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d123      	bne.n	8002fb2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	08da      	lsrs	r2, r3, #3
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	3208      	adds	r2, #8
 8002f72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f76:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f78:	697b      	ldr	r3, [r7, #20]
 8002f7a:	f003 0307 	and.w	r3, r3, #7
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	220f      	movs	r2, #15
 8002f82:	fa02 f303 	lsl.w	r3, r2, r3
 8002f86:	43db      	mvns	r3, r3
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	691a      	ldr	r2, [r3, #16]
 8002f92:	697b      	ldr	r3, [r7, #20]
 8002f94:	f003 0307 	and.w	r3, r3, #7
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	693a      	ldr	r2, [r7, #16]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	08da      	lsrs	r2, r3, #3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	3208      	adds	r2, #8
 8002fac:	6939      	ldr	r1, [r7, #16]
 8002fae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	2203      	movs	r2, #3
 8002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc2:	43db      	mvns	r3, r3
 8002fc4:	693a      	ldr	r2, [r7, #16]
 8002fc6:	4013      	ands	r3, r2
 8002fc8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f003 0203 	and.w	r2, r3, #3
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	693a      	ldr	r2, [r7, #16]
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 809a 	beq.w	8003128 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ff4:	4b55      	ldr	r3, [pc, #340]	; (800314c <HAL_GPIO_Init+0x2cc>)
 8002ff6:	699b      	ldr	r3, [r3, #24]
 8002ff8:	4a54      	ldr	r2, [pc, #336]	; (800314c <HAL_GPIO_Init+0x2cc>)
 8002ffa:	f043 0301 	orr.w	r3, r3, #1
 8002ffe:	6193      	str	r3, [r2, #24]
 8003000:	4b52      	ldr	r3, [pc, #328]	; (800314c <HAL_GPIO_Init+0x2cc>)
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	f003 0301 	and.w	r3, r3, #1
 8003008:	60bb      	str	r3, [r7, #8]
 800300a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800300c:	4a50      	ldr	r2, [pc, #320]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	089b      	lsrs	r3, r3, #2
 8003012:	3302      	adds	r3, #2
 8003014:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003018:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f003 0303 	and.w	r3, r3, #3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	220f      	movs	r2, #15
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	693a      	ldr	r2, [r7, #16]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003036:	d013      	beq.n	8003060 <HAL_GPIO_Init+0x1e0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a46      	ldr	r2, [pc, #280]	; (8003154 <HAL_GPIO_Init+0x2d4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00d      	beq.n	800305c <HAL_GPIO_Init+0x1dc>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a45      	ldr	r2, [pc, #276]	; (8003158 <HAL_GPIO_Init+0x2d8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d007      	beq.n	8003058 <HAL_GPIO_Init+0x1d8>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a44      	ldr	r2, [pc, #272]	; (800315c <HAL_GPIO_Init+0x2dc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d101      	bne.n	8003054 <HAL_GPIO_Init+0x1d4>
 8003050:	2303      	movs	r3, #3
 8003052:	e006      	b.n	8003062 <HAL_GPIO_Init+0x1e2>
 8003054:	2305      	movs	r3, #5
 8003056:	e004      	b.n	8003062 <HAL_GPIO_Init+0x1e2>
 8003058:	2302      	movs	r3, #2
 800305a:	e002      	b.n	8003062 <HAL_GPIO_Init+0x1e2>
 800305c:	2301      	movs	r3, #1
 800305e:	e000      	b.n	8003062 <HAL_GPIO_Init+0x1e2>
 8003060:	2300      	movs	r3, #0
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	f002 0203 	and.w	r2, r2, #3
 8003068:	0092      	lsls	r2, r2, #2
 800306a:	4093      	lsls	r3, r2
 800306c:	693a      	ldr	r2, [r7, #16]
 800306e:	4313      	orrs	r3, r2
 8003070:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003072:	4937      	ldr	r1, [pc, #220]	; (8003150 <HAL_GPIO_Init+0x2d0>)
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	693a      	ldr	r2, [r7, #16]
 800307c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003080:	4b37      	ldr	r3, [pc, #220]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	43db      	mvns	r3, r3
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4013      	ands	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003098:	2b00      	cmp	r3, #0
 800309a:	d003      	beq.n	80030a4 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800309c:	693a      	ldr	r2, [r7, #16]
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	4313      	orrs	r3, r2
 80030a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80030a4:	4a2e      	ldr	r2, [pc, #184]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80030aa:	4b2d      	ldr	r3, [pc, #180]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	43db      	mvns	r3, r3
 80030b4:	693a      	ldr	r2, [r7, #16]
 80030b6:	4013      	ands	r3, r2
 80030b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d003      	beq.n	80030ce <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80030c6:	693a      	ldr	r2, [r7, #16]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030ce:	4a24      	ldr	r2, [pc, #144]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80030d4:	4b22      	ldr	r3, [pc, #136]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	43db      	mvns	r3, r3
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	4013      	ands	r3, r2
 80030e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d003      	beq.n	80030f8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80030f0:	693a      	ldr	r2, [r7, #16]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	4313      	orrs	r3, r2
 80030f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030f8:	4a19      	ldr	r2, [pc, #100]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030fe:	4b18      	ldr	r3, [pc, #96]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	43db      	mvns	r3, r3
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4013      	ands	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	685b      	ldr	r3, [r3, #4]
 8003112:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	4313      	orrs	r3, r2
 8003120:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8003122:	4a0f      	ldr	r2, [pc, #60]	; (8003160 <HAL_GPIO_Init+0x2e0>)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8003128:	697b      	ldr	r3, [r7, #20]
 800312a:	3301      	adds	r3, #1
 800312c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	681a      	ldr	r2, [r3, #0]
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	fa22 f303 	lsr.w	r3, r2, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	f47f aea9 	bne.w	8002e90 <HAL_GPIO_Init+0x10>
  }
}
 800313e:	bf00      	nop
 8003140:	bf00      	nop
 8003142:	371c      	adds	r7, #28
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr
 800314c:	40021000 	.word	0x40021000
 8003150:	40010000 	.word	0x40010000
 8003154:	48000400 	.word	0x48000400
 8003158:	48000800 	.word	0x48000800
 800315c:	48000c00 	.word	0x48000c00
 8003160:	40010400 	.word	0x40010400

08003164 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003164:	b480      	push	{r7}
 8003166:	b085      	sub	sp, #20
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
 800316c:	460b      	mov	r3, r1
 800316e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691a      	ldr	r2, [r3, #16]
 8003174:	887b      	ldrh	r3, [r7, #2]
 8003176:	4013      	ands	r3, r2
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
 8003180:	e001      	b.n	8003186 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
 80031a0:	4613      	mov	r3, r2
 80031a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031a4:	787b      	ldrb	r3, [r7, #1]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d003      	beq.n	80031b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031aa:	887a      	ldrh	r2, [r7, #2]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031b0:	e002      	b.n	80031b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031b2:	887a      	ldrh	r2, [r7, #2]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031b8:	bf00      	nop
 80031ba:	370c      	adds	r7, #12
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031d4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031da:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d102      	bne.n	80031ea <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 80031e4:	2301      	movs	r3, #1
 80031e6:	f001 b823 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031ee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 817d 	beq.w	80034fa <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003200:	4bbc      	ldr	r3, [pc, #752]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	f003 030c 	and.w	r3, r3, #12
 8003208:	2b04      	cmp	r3, #4
 800320a:	d00c      	beq.n	8003226 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800320c:	4bb9      	ldr	r3, [pc, #740]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f003 030c 	and.w	r3, r3, #12
 8003214:	2b08      	cmp	r3, #8
 8003216:	d15c      	bne.n	80032d2 <HAL_RCC_OscConfig+0x10e>
 8003218:	4bb6      	ldr	r3, [pc, #728]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003220:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003224:	d155      	bne.n	80032d2 <HAL_RCC_OscConfig+0x10e>
 8003226:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800322a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800322e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8003232:	fa93 f3a3 	rbit	r3, r3
 8003236:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800323a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800323e:	fab3 f383 	clz	r3, r3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	095b      	lsrs	r3, r3, #5
 8003246:	b2db      	uxtb	r3, r3
 8003248:	f043 0301 	orr.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b01      	cmp	r3, #1
 8003250:	d102      	bne.n	8003258 <HAL_RCC_OscConfig+0x94>
 8003252:	4ba8      	ldr	r3, [pc, #672]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	e015      	b.n	8003284 <HAL_RCC_OscConfig+0xc0>
 8003258:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800325c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003260:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8003264:	fa93 f3a3 	rbit	r3, r3
 8003268:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 800326c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003270:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8003274:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8003278:	fa93 f3a3 	rbit	r3, r3
 800327c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8003280:	4b9c      	ldr	r3, [pc, #624]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003284:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003288:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 800328c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8003290:	fa92 f2a2 	rbit	r2, r2
 8003294:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8003298:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 800329c:	fab2 f282 	clz	r2, r2
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	f042 0220 	orr.w	r2, r2, #32
 80032a6:	b2d2      	uxtb	r2, r2
 80032a8:	f002 021f 	and.w	r2, r2, #31
 80032ac:	2101      	movs	r1, #1
 80032ae:	fa01 f202 	lsl.w	r2, r1, r2
 80032b2:	4013      	ands	r3, r2
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	f000 811f 	beq.w	80034f8 <HAL_RCC_OscConfig+0x334>
 80032ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032be:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	f040 8116 	bne.w	80034f8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f000 bfaf 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032e2:	d106      	bne.n	80032f2 <HAL_RCC_OscConfig+0x12e>
 80032e4:	4b83      	ldr	r3, [pc, #524]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a82      	ldr	r2, [pc, #520]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 80032ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ee:	6013      	str	r3, [r2, #0]
 80032f0:	e036      	b.n	8003360 <HAL_RCC_OscConfig+0x19c>
 80032f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80032f6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10c      	bne.n	800331c <HAL_RCC_OscConfig+0x158>
 8003302:	4b7c      	ldr	r3, [pc, #496]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a7b      	ldr	r2, [pc, #492]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003308:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	4b79      	ldr	r3, [pc, #484]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a78      	ldr	r2, [pc, #480]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003314:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003318:	6013      	str	r3, [r2, #0]
 800331a:	e021      	b.n	8003360 <HAL_RCC_OscConfig+0x19c>
 800331c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003320:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800332c:	d10c      	bne.n	8003348 <HAL_RCC_OscConfig+0x184>
 800332e:	4b71      	ldr	r3, [pc, #452]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a70      	ldr	r2, [pc, #448]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	4b6e      	ldr	r3, [pc, #440]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a6d      	ldr	r2, [pc, #436]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003344:	6013      	str	r3, [r2, #0]
 8003346:	e00b      	b.n	8003360 <HAL_RCC_OscConfig+0x19c>
 8003348:	4b6a      	ldr	r3, [pc, #424]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a69      	ldr	r2, [pc, #420]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800334e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003352:	6013      	str	r3, [r2, #0]
 8003354:	4b67      	ldr	r3, [pc, #412]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	4a66      	ldr	r2, [pc, #408]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800335a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800335e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003360:	4b64      	ldr	r3, [pc, #400]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003364:	f023 020f 	bic.w	r2, r3, #15
 8003368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800336c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	495f      	ldr	r1, [pc, #380]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003376:	4313      	orrs	r3, r2
 8003378:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800337a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800337e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d059      	beq.n	800343e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800338a:	f7fe fcef 	bl	8001d6c <HAL_GetTick>
 800338e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003392:	e00a      	b.n	80033aa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003394:	f7fe fcea 	bl	8001d6c <HAL_GetTick>
 8003398:	4602      	mov	r2, r0
 800339a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b64      	cmp	r3, #100	; 0x64
 80033a2:	d902      	bls.n	80033aa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	f000 bf43 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 80033aa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033ae:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 80033be:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	095b      	lsrs	r3, r3, #5
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d102      	bne.n	80033dc <HAL_RCC_OscConfig+0x218>
 80033d6:	4b47      	ldr	r3, [pc, #284]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	e015      	b.n	8003408 <HAL_RCC_OscConfig+0x244>
 80033dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033e0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80033e8:	fa93 f3a3 	rbit	r3, r3
 80033ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80033f0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80033f4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80033f8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003404:	4b3b      	ldr	r3, [pc, #236]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 8003406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003408:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800340c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003410:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003414:	fa92 f2a2 	rbit	r2, r2
 8003418:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 800341c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003420:	fab2 f282 	clz	r2, r2
 8003424:	b2d2      	uxtb	r2, r2
 8003426:	f042 0220 	orr.w	r2, r2, #32
 800342a:	b2d2      	uxtb	r2, r2
 800342c:	f002 021f 	and.w	r2, r2, #31
 8003430:	2101      	movs	r1, #1
 8003432:	fa01 f202 	lsl.w	r2, r1, r2
 8003436:	4013      	ands	r3, r2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d0ab      	beq.n	8003394 <HAL_RCC_OscConfig+0x1d0>
 800343c:	e05d      	b.n	80034fa <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800343e:	f7fe fc95 	bl	8001d6c <HAL_GetTick>
 8003442:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003446:	e00a      	b.n	800345e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003448:	f7fe fc90 	bl	8001d6c <HAL_GetTick>
 800344c:	4602      	mov	r2, r0
 800344e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b64      	cmp	r3, #100	; 0x64
 8003456:	d902      	bls.n	800345e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	f000 bee9 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 800345e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003462:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003472:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	095b      	lsrs	r3, r3, #5
 800347e:	b2db      	uxtb	r3, r3
 8003480:	f043 0301 	orr.w	r3, r3, #1
 8003484:	b2db      	uxtb	r3, r3
 8003486:	2b01      	cmp	r3, #1
 8003488:	d102      	bne.n	8003490 <HAL_RCC_OscConfig+0x2cc>
 800348a:	4b1a      	ldr	r3, [pc, #104]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	e015      	b.n	80034bc <HAL_RCC_OscConfig+0x2f8>
 8003490:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003494:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003498:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 800349c:	fa93 f3a3 	rbit	r3, r3
 80034a0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80034a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80034a8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80034ac:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80034b0:	fa93 f3a3 	rbit	r3, r3
 80034b4:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_RCC_OscConfig+0x330>)
 80034ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034bc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80034c0:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80034c4:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80034c8:	fa92 f2a2 	rbit	r2, r2
 80034cc:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80034d0:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80034d4:	fab2 f282 	clz	r2, r2
 80034d8:	b2d2      	uxtb	r2, r2
 80034da:	f042 0220 	orr.w	r2, r2, #32
 80034de:	b2d2      	uxtb	r2, r2
 80034e0:	f002 021f 	and.w	r2, r2, #31
 80034e4:	2101      	movs	r1, #1
 80034e6:	fa01 f202 	lsl.w	r2, r1, r2
 80034ea:	4013      	ands	r3, r2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1ab      	bne.n	8003448 <HAL_RCC_OscConfig+0x284>
 80034f0:	e003      	b.n	80034fa <HAL_RCC_OscConfig+0x336>
 80034f2:	bf00      	nop
 80034f4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0302 	and.w	r3, r3, #2
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 817d 	beq.w	800380a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003510:	4ba6      	ldr	r3, [pc, #664]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	f003 030c 	and.w	r3, r3, #12
 8003518:	2b00      	cmp	r3, #0
 800351a:	d00b      	beq.n	8003534 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800351c:	4ba3      	ldr	r3, [pc, #652]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 030c 	and.w	r3, r3, #12
 8003524:	2b08      	cmp	r3, #8
 8003526:	d172      	bne.n	800360e <HAL_RCC_OscConfig+0x44a>
 8003528:	4ba0      	ldr	r3, [pc, #640]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d16c      	bne.n	800360e <HAL_RCC_OscConfig+0x44a>
 8003534:	2302      	movs	r3, #2
 8003536:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800353a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 800353e:	fa93 f3a3 	rbit	r3, r3
 8003542:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8003546:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800354a:	fab3 f383 	clz	r3, r3
 800354e:	b2db      	uxtb	r3, r3
 8003550:	095b      	lsrs	r3, r3, #5
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f043 0301 	orr.w	r3, r3, #1
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	d102      	bne.n	8003564 <HAL_RCC_OscConfig+0x3a0>
 800355e:	4b93      	ldr	r3, [pc, #588]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	e013      	b.n	800358c <HAL_RCC_OscConfig+0x3c8>
 8003564:	2302      	movs	r3, #2
 8003566:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800356a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800356e:	fa93 f3a3 	rbit	r3, r3
 8003572:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8003576:	2302      	movs	r3, #2
 8003578:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800357c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003580:	fa93 f3a3 	rbit	r3, r3
 8003584:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8003588:	4b88      	ldr	r3, [pc, #544]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	2202      	movs	r2, #2
 800358e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8003592:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8003596:	fa92 f2a2 	rbit	r2, r2
 800359a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800359e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80035a2:	fab2 f282 	clz	r2, r2
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	f042 0220 	orr.w	r2, r2, #32
 80035ac:	b2d2      	uxtb	r2, r2
 80035ae:	f002 021f 	and.w	r2, r2, #31
 80035b2:	2101      	movs	r1, #1
 80035b4:	fa01 f202 	lsl.w	r2, r1, r2
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d00a      	beq.n	80035d4 <HAL_RCC_OscConfig+0x410>
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	2b01      	cmp	r3, #1
 80035cc:	d002      	beq.n	80035d4 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	f000 be2e 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035d4:	4b75      	ldr	r3, [pc, #468]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	21f8      	movs	r1, #248	; 0xf8
 80035ea:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ee:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80035f2:	fa91 f1a1 	rbit	r1, r1
 80035f6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 80035fa:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80035fe:	fab1 f181 	clz	r1, r1
 8003602:	b2c9      	uxtb	r1, r1
 8003604:	408b      	lsls	r3, r1
 8003606:	4969      	ldr	r1, [pc, #420]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 8003608:	4313      	orrs	r3, r2
 800360a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800360c:	e0fd      	b.n	800380a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800360e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003612:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	691b      	ldr	r3, [r3, #16]
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 8088 	beq.w	8003730 <HAL_RCC_OscConfig+0x56c>
 8003620:	2301      	movs	r3, #1
 8003622:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003626:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800362a:	fa93 f3a3 	rbit	r3, r3
 800362e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003632:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003636:	fab3 f383 	clz	r3, r3
 800363a:	b2db      	uxtb	r3, r3
 800363c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003640:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	461a      	mov	r2, r3
 8003648:	2301      	movs	r3, #1
 800364a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800364c:	f7fe fb8e 	bl	8001d6c <HAL_GetTick>
 8003650:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003654:	e00a      	b.n	800366c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003656:	f7fe fb89 	bl	8001d6c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003660:	1ad3      	subs	r3, r2, r3
 8003662:	2b02      	cmp	r3, #2
 8003664:	d902      	bls.n	800366c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	f000 bde2 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 800366c:	2302      	movs	r3, #2
 800366e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003672:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8003676:	fa93 f3a3 	rbit	r3, r3
 800367a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800367e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003682:	fab3 f383 	clz	r3, r3
 8003686:	b2db      	uxtb	r3, r3
 8003688:	095b      	lsrs	r3, r3, #5
 800368a:	b2db      	uxtb	r3, r3
 800368c:	f043 0301 	orr.w	r3, r3, #1
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b01      	cmp	r3, #1
 8003694:	d102      	bne.n	800369c <HAL_RCC_OscConfig+0x4d8>
 8003696:	4b45      	ldr	r3, [pc, #276]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	e013      	b.n	80036c4 <HAL_RCC_OscConfig+0x500>
 800369c:	2302      	movs	r3, #2
 800369e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80036a6:	fa93 f3a3 	rbit	r3, r3
 80036aa:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80036ae:	2302      	movs	r3, #2
 80036b0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80036b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80036b8:	fa93 f3a3 	rbit	r3, r3
 80036bc:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80036c0:	4b3a      	ldr	r3, [pc, #232]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	2202      	movs	r2, #2
 80036c6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80036ca:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80036ce:	fa92 f2a2 	rbit	r2, r2
 80036d2:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80036d6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80036da:	fab2 f282 	clz	r2, r2
 80036de:	b2d2      	uxtb	r2, r2
 80036e0:	f042 0220 	orr.w	r2, r2, #32
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0af      	beq.n	8003656 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f6:	4b2d      	ldr	r3, [pc, #180]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003702:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	21f8      	movs	r1, #248	; 0xf8
 800370c:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003714:	fa91 f1a1 	rbit	r1, r1
 8003718:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 800371c:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003720:	fab1 f181 	clz	r1, r1
 8003724:	b2c9      	uxtb	r1, r1
 8003726:	408b      	lsls	r3, r1
 8003728:	4920      	ldr	r1, [pc, #128]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 800372a:	4313      	orrs	r3, r2
 800372c:	600b      	str	r3, [r1, #0]
 800372e:	e06c      	b.n	800380a <HAL_RCC_OscConfig+0x646>
 8003730:	2301      	movs	r3, #1
 8003732:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800373a:	fa93 f3a3 	rbit	r3, r3
 800373e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003742:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003746:	fab3 f383 	clz	r3, r3
 800374a:	b2db      	uxtb	r3, r3
 800374c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003750:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	461a      	mov	r2, r3
 8003758:	2300      	movs	r3, #0
 800375a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800375c:	f7fe fb06 	bl	8001d6c <HAL_GetTick>
 8003760:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003764:	e00a      	b.n	800377c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003766:	f7fe fb01 	bl	8001d6c <HAL_GetTick>
 800376a:	4602      	mov	r2, r0
 800376c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d902      	bls.n	800377c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	f000 bd5a 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 800377c:	2302      	movs	r3, #2
 800377e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003782:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8003786:	fa93 f3a3 	rbit	r3, r3
 800378a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800378e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003792:	fab3 f383 	clz	r3, r3
 8003796:	b2db      	uxtb	r3, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	b2db      	uxtb	r3, r3
 800379c:	f043 0301 	orr.w	r3, r3, #1
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	2b01      	cmp	r3, #1
 80037a4:	d104      	bne.n	80037b0 <HAL_RCC_OscConfig+0x5ec>
 80037a6:	4b01      	ldr	r3, [pc, #4]	; (80037ac <HAL_RCC_OscConfig+0x5e8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	e015      	b.n	80037d8 <HAL_RCC_OscConfig+0x614>
 80037ac:	40021000 	.word	0x40021000
 80037b0:	2302      	movs	r3, #2
 80037b2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037b6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80037ba:	fa93 f3a3 	rbit	r3, r3
 80037be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80037c2:	2302      	movs	r3, #2
 80037c4:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80037c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80037cc:	fa93 f3a3 	rbit	r3, r3
 80037d0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80037d4:	4bc8      	ldr	r3, [pc, #800]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 80037d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d8:	2202      	movs	r2, #2
 80037da:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80037de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80037e2:	fa92 f2a2 	rbit	r2, r2
 80037e6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80037ea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80037ee:	fab2 f282 	clz	r2, r2
 80037f2:	b2d2      	uxtb	r2, r2
 80037f4:	f042 0220 	orr.w	r2, r2, #32
 80037f8:	b2d2      	uxtb	r2, r2
 80037fa:	f002 021f 	and.w	r2, r2, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f202 	lsl.w	r2, r1, r2
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d1ad      	bne.n	8003766 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800380a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800380e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8110 	beq.w	8003a40 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003820:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003824:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d079      	beq.n	8003924 <HAL_RCC_OscConfig+0x760>
 8003830:	2301      	movs	r3, #1
 8003832:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800383a:	fa93 f3a3 	rbit	r3, r3
 800383e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003846:	fab3 f383 	clz	r3, r3
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	4bab      	ldr	r3, [pc, #684]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	2301      	movs	r3, #1
 8003858:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800385a:	f7fe fa87 	bl	8001d6c <HAL_GetTick>
 800385e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003862:	e00a      	b.n	800387a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003864:	f7fe fa82 	bl	8001d6c <HAL_GetTick>
 8003868:	4602      	mov	r2, r0
 800386a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	2b02      	cmp	r3, #2
 8003872:	d902      	bls.n	800387a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003874:	2303      	movs	r3, #3
 8003876:	f000 bcdb 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 800387a:	2302      	movs	r3, #2
 800387c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003880:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003884:	fa93 f3a3 	rbit	r3, r3
 8003888:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800388c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003890:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8003894:	2202      	movs	r2, #2
 8003896:	601a      	str	r2, [r3, #0]
 8003898:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800389c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	fa93 f2a3 	rbit	r2, r3
 80038a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038aa:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80038ae:	601a      	str	r2, [r3, #0]
 80038b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038b8:	2202      	movs	r2, #2
 80038ba:	601a      	str	r2, [r3, #0]
 80038bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038c0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	fa93 f2a3 	rbit	r2, r3
 80038ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80038d2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038d4:	4b88      	ldr	r3, [pc, #544]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 80038d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038dc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038e0:	2102      	movs	r1, #2
 80038e2:	6019      	str	r1, [r3, #0]
 80038e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	fa93 f1a3 	rbit	r1, r3
 80038f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038f6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80038fa:	6019      	str	r1, [r3, #0]
  return result;
 80038fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003900:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003910:	b2db      	uxtb	r3, r3
 8003912:	f003 031f 	and.w	r3, r3, #31
 8003916:	2101      	movs	r1, #1
 8003918:	fa01 f303 	lsl.w	r3, r1, r3
 800391c:	4013      	ands	r3, r2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d0a0      	beq.n	8003864 <HAL_RCC_OscConfig+0x6a0>
 8003922:	e08d      	b.n	8003a40 <HAL_RCC_OscConfig+0x87c>
 8003924:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003928:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800392c:	2201      	movs	r2, #1
 800392e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003930:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003934:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	fa93 f2a3 	rbit	r2, r3
 800393e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003942:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003946:	601a      	str	r2, [r3, #0]
  return result;
 8003948:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800394c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003950:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
 8003958:	461a      	mov	r2, r3
 800395a:	4b68      	ldr	r3, [pc, #416]	; (8003afc <HAL_RCC_OscConfig+0x938>)
 800395c:	4413      	add	r3, r2
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	461a      	mov	r2, r3
 8003962:	2300      	movs	r3, #0
 8003964:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003966:	f7fe fa01 	bl	8001d6c <HAL_GetTick>
 800396a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800396e:	e00a      	b.n	8003986 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003970:	f7fe f9fc 	bl	8001d6c <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	2b02      	cmp	r3, #2
 800397e:	d902      	bls.n	8003986 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	f000 bc55 	b.w	8004230 <HAL_RCC_OscConfig+0x106c>
 8003986:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800398a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800398e:	2202      	movs	r2, #2
 8003990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003992:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003996:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	fa93 f2a3 	rbit	r2, r3
 80039a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039a4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80039a8:	601a      	str	r2, [r3, #0]
 80039aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ae:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039b2:	2202      	movs	r2, #2
 80039b4:	601a      	str	r2, [r3, #0]
 80039b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ba:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	fa93 f2a3 	rbit	r2, r3
 80039c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039c8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80039cc:	601a      	str	r2, [r3, #0]
 80039ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039d6:	2202      	movs	r2, #2
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	fa93 f2a3 	rbit	r2, r3
 80039e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039ec:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80039f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039f2:	4b41      	ldr	r3, [pc, #260]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 80039f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fa:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80039fe:	2102      	movs	r1, #2
 8003a00:	6019      	str	r1, [r3, #0]
 8003a02:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a06:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	fa93 f1a3 	rbit	r1, r3
 8003a10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a18:	6019      	str	r1, [r3, #0]
  return result;
 8003a1a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a1e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	fab3 f383 	clz	r3, r3
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	f003 031f 	and.w	r3, r3, #31
 8003a34:	2101      	movs	r1, #1
 8003a36:	fa01 f303 	lsl.w	r3, r1, r3
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d197      	bne.n	8003970 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003a40:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a44:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0304 	and.w	r3, r3, #4
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	f000 81a1 	beq.w	8003d98 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a5c:	4b26      	ldr	r3, [pc, #152]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003a5e:	69db      	ldr	r3, [r3, #28]
 8003a60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d116      	bne.n	8003a96 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a68:	4b23      	ldr	r3, [pc, #140]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	4a22      	ldr	r2, [pc, #136]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a72:	61d3      	str	r3, [r2, #28]
 8003a74:	4b20      	ldr	r3, [pc, #128]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003a7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a80:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a84:	601a      	str	r2, [r3, #0]
 8003a86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a8a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003a8e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a90:	2301      	movs	r3, #1
 8003a92:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a96:	4b1a      	ldr	r3, [pc, #104]	; (8003b00 <HAL_RCC_OscConfig+0x93c>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d11a      	bne.n	8003ad8 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003aa2:	4b17      	ldr	r3, [pc, #92]	; (8003b00 <HAL_RCC_OscConfig+0x93c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a16      	ldr	r2, [pc, #88]	; (8003b00 <HAL_RCC_OscConfig+0x93c>)
 8003aa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003aac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003aae:	f7fe f95d 	bl	8001d6c <HAL_GetTick>
 8003ab2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ab6:	e009      	b.n	8003acc <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ab8:	f7fe f958 	bl	8001d6c <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003ac2:	1ad3      	subs	r3, r2, r3
 8003ac4:	2b64      	cmp	r3, #100	; 0x64
 8003ac6:	d901      	bls.n	8003acc <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003ac8:	2303      	movs	r3, #3
 8003aca:	e3b1      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003acc:	4b0c      	ldr	r3, [pc, #48]	; (8003b00 <HAL_RCC_OscConfig+0x93c>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d0ef      	beq.n	8003ab8 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ad8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003adc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d10d      	bne.n	8003b04 <HAL_RCC_OscConfig+0x940>
 8003ae8:	4b03      	ldr	r3, [pc, #12]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003aea:	6a1b      	ldr	r3, [r3, #32]
 8003aec:	4a02      	ldr	r2, [pc, #8]	; (8003af8 <HAL_RCC_OscConfig+0x934>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6213      	str	r3, [r2, #32]
 8003af4:	e03c      	b.n	8003b70 <HAL_RCC_OscConfig+0x9ac>
 8003af6:	bf00      	nop
 8003af8:	40021000 	.word	0x40021000
 8003afc:	10908120 	.word	0x10908120
 8003b00:	40007000 	.word	0x40007000
 8003b04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b08:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d10c      	bne.n	8003b2e <HAL_RCC_OscConfig+0x96a>
 8003b14:	4bc1      	ldr	r3, [pc, #772]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b16:	6a1b      	ldr	r3, [r3, #32]
 8003b18:	4ac0      	ldr	r2, [pc, #768]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	6213      	str	r3, [r2, #32]
 8003b20:	4bbe      	ldr	r3, [pc, #760]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b22:	6a1b      	ldr	r3, [r3, #32]
 8003b24:	4abd      	ldr	r2, [pc, #756]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b26:	f023 0304 	bic.w	r3, r3, #4
 8003b2a:	6213      	str	r3, [r2, #32]
 8003b2c:	e020      	b.n	8003b70 <HAL_RCC_OscConfig+0x9ac>
 8003b2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68db      	ldr	r3, [r3, #12]
 8003b3a:	2b05      	cmp	r3, #5
 8003b3c:	d10c      	bne.n	8003b58 <HAL_RCC_OscConfig+0x994>
 8003b3e:	4bb7      	ldr	r3, [pc, #732]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b40:	6a1b      	ldr	r3, [r3, #32]
 8003b42:	4ab6      	ldr	r2, [pc, #728]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b44:	f043 0304 	orr.w	r3, r3, #4
 8003b48:	6213      	str	r3, [r2, #32]
 8003b4a:	4bb4      	ldr	r3, [pc, #720]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	4ab3      	ldr	r2, [pc, #716]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b50:	f043 0301 	orr.w	r3, r3, #1
 8003b54:	6213      	str	r3, [r2, #32]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCC_OscConfig+0x9ac>
 8003b58:	4bb0      	ldr	r3, [pc, #704]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	4aaf      	ldr	r2, [pc, #700]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b5e:	f023 0301 	bic.w	r3, r3, #1
 8003b62:	6213      	str	r3, [r2, #32]
 8003b64:	4bad      	ldr	r3, [pc, #692]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b66:	6a1b      	ldr	r3, [r3, #32]
 8003b68:	4aac      	ldr	r2, [pc, #688]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003b6a:	f023 0304 	bic.w	r3, r3, #4
 8003b6e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b74:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 8081 	beq.w	8003c84 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b82:	f7fe f8f3 	bl	8001d6c <HAL_GetTick>
 8003b86:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8a:	e00b      	b.n	8003ba4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b8c:	f7fe f8ee 	bl	8001d6c <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b9c:	4293      	cmp	r3, r2
 8003b9e:	d901      	bls.n	8003ba4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8003ba0:	2303      	movs	r3, #3
 8003ba2:	e345      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
 8003ba4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ba8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bac:	2202      	movs	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bb4:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	fa93 f2a3 	rbit	r2, r3
 8003bbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bc2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bd0:	2202      	movs	r2, #2
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bd8:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	fa93 f2a3 	rbit	r2, r3
 8003be2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bea:	601a      	str	r2, [r3, #0]
  return result;
 8003bec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bf0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003bf4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	fab3 f383 	clz	r3, r3
 8003bfa:	b2db      	uxtb	r3, r3
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	b2db      	uxtb	r3, r3
 8003c00:	f043 0302 	orr.w	r3, r3, #2
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d102      	bne.n	8003c10 <HAL_RCC_OscConfig+0xa4c>
 8003c0a:	4b84      	ldr	r3, [pc, #528]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	e013      	b.n	8003c38 <HAL_RCC_OscConfig+0xa74>
 8003c10:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c14:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c18:	2202      	movs	r2, #2
 8003c1a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c20:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	fa93 f2a3 	rbit	r2, r3
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	4b79      	ldr	r3, [pc, #484]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c3c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c40:	2102      	movs	r1, #2
 8003c42:	6011      	str	r1, [r2, #0]
 8003c44:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c48:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003c4c:	6812      	ldr	r2, [r2, #0]
 8003c4e:	fa92 f1a2 	rbit	r1, r2
 8003c52:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c56:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c5a:	6011      	str	r1, [r2, #0]
  return result;
 8003c5c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c60:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003c64:	6812      	ldr	r2, [r2, #0]
 8003c66:	fab2 f282 	clz	r2, r2
 8003c6a:	b2d2      	uxtb	r2, r2
 8003c6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	f002 021f 	and.w	r2, r2, #31
 8003c76:	2101      	movs	r1, #1
 8003c78:	fa01 f202 	lsl.w	r2, r1, r2
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d084      	beq.n	8003b8c <HAL_RCC_OscConfig+0x9c8>
 8003c82:	e07f      	b.n	8003d84 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c84:	f7fe f872 	bl	8001d6c <HAL_GetTick>
 8003c88:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8c:	e00b      	b.n	8003ca6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c8e:	f7fe f86d 	bl	8001d6c <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d901      	bls.n	8003ca6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8003ca2:	2303      	movs	r3, #3
 8003ca4:	e2c4      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
 8003ca6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003caa:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb6:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	fa93 f2a3 	rbit	r2, r3
 8003cc0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8003cc8:	601a      	str	r2, [r3, #0]
 8003cca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cce:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	601a      	str	r2, [r3, #0]
 8003cd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cda:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	fa93 f2a3 	rbit	r2, r3
 8003ce4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ce8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cec:	601a      	str	r2, [r3, #0]
  return result;
 8003cee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cf2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003cf6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003cf8:	fab3 f383 	clz	r3, r3
 8003cfc:	b2db      	uxtb	r3, r3
 8003cfe:	095b      	lsrs	r3, r3, #5
 8003d00:	b2db      	uxtb	r3, r3
 8003d02:	f043 0302 	orr.w	r3, r3, #2
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d102      	bne.n	8003d12 <HAL_RCC_OscConfig+0xb4e>
 8003d0c:	4b43      	ldr	r3, [pc, #268]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003d0e:	6a1b      	ldr	r3, [r3, #32]
 8003d10:	e013      	b.n	8003d3a <HAL_RCC_OscConfig+0xb76>
 8003d12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d16:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d1e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d22:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	fa93 f2a3 	rbit	r2, r3
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003d34:	601a      	str	r2, [r3, #0]
 8003d36:	4b39      	ldr	r3, [pc, #228]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d3e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d42:	2102      	movs	r1, #2
 8003d44:	6011      	str	r1, [r2, #0]
 8003d46:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d4a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003d4e:	6812      	ldr	r2, [r2, #0]
 8003d50:	fa92 f1a2 	rbit	r1, r2
 8003d54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d58:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d5c:	6011      	str	r1, [r2, #0]
  return result;
 8003d5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003d62:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003d66:	6812      	ldr	r2, [r2, #0]
 8003d68:	fab2 f282 	clz	r2, r2
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	f002 021f 	and.w	r2, r2, #31
 8003d78:	2101      	movs	r1, #1
 8003d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8003d7e:	4013      	ands	r3, r2
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d184      	bne.n	8003c8e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d105      	bne.n	8003d98 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d8c:	4b23      	ldr	r3, [pc, #140]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003d8e:	69db      	ldr	r3, [r3, #28]
 8003d90:	4a22      	ldr	r2, [pc, #136]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d98:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	69db      	ldr	r3, [r3, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	f000 8242 	beq.w	800422e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003daa:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <HAL_RCC_OscConfig+0xc58>)
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 030c 	and.w	r3, r3, #12
 8003db2:	2b08      	cmp	r3, #8
 8003db4:	f000 8213 	beq.w	80041de <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003db8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dbc:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	69db      	ldr	r3, [r3, #28]
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	f040 8162 	bne.w	800408e <HAL_RCC_OscConfig+0xeca>
 8003dca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dce:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003dd2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003dd6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ddc:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	fa93 f2a3 	rbit	r2, r3
 8003de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003dea:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003dee:	601a      	str	r2, [r3, #0]
  return result;
 8003df0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003df8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003dfa:	fab3 f383 	clz	r3, r3
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003e04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	461a      	mov	r2, r3
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd ffac 	bl	8001d6c <HAL_GetTick>
 8003e14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e18:	e00c      	b.n	8003e34 <HAL_RCC_OscConfig+0xc70>
 8003e1a:	bf00      	nop
 8003e1c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e20:	f7fd ffa4 	bl	8001d6c <HAL_GetTick>
 8003e24:	4602      	mov	r2, r0
 8003e26:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	2b02      	cmp	r3, #2
 8003e2e:	d901      	bls.n	8003e34 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003e30:	2303      	movs	r3, #3
 8003e32:	e1fd      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
 8003e34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e38:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e3c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e40:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e46:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	fa93 f2a3 	rbit	r2, r3
 8003e50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e54:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e58:	601a      	str	r2, [r3, #0]
  return result;
 8003e5a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e5e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003e62:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003e64:	fab3 f383 	clz	r3, r3
 8003e68:	b2db      	uxtb	r3, r3
 8003e6a:	095b      	lsrs	r3, r3, #5
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	f043 0301 	orr.w	r3, r3, #1
 8003e72:	b2db      	uxtb	r3, r3
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d102      	bne.n	8003e7e <HAL_RCC_OscConfig+0xcba>
 8003e78:	4bb0      	ldr	r3, [pc, #704]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	e027      	b.n	8003ece <HAL_RCC_OscConfig+0xd0a>
 8003e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e82:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e86:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003e8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e90:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	fa93 f2a3 	rbit	r2, r3
 8003e9a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e9e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ea8:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003eac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003eb6:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	fa93 f2a3 	rbit	r2, r3
 8003ec0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ec4:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	4b9c      	ldr	r3, [pc, #624]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ed2:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ed6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003eda:	6011      	str	r1, [r2, #0]
 8003edc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ee0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003ee4:	6812      	ldr	r2, [r2, #0]
 8003ee6:	fa92 f1a2 	rbit	r1, r2
 8003eea:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003eee:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003ef2:	6011      	str	r1, [r2, #0]
  return result;
 8003ef4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ef8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	fab2 f282 	clz	r2, r2
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	f042 0220 	orr.w	r2, r2, #32
 8003f08:	b2d2      	uxtb	r2, r2
 8003f0a:	f002 021f 	and.w	r2, r2, #31
 8003f0e:	2101      	movs	r1, #1
 8003f10:	fa01 f202 	lsl.w	r2, r1, r2
 8003f14:	4013      	ands	r3, r2
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d182      	bne.n	8003e20 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003f1a:	4b88      	ldr	r3, [pc, #544]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003f22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f26:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003f2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	497f      	ldr	r1, [pc, #508]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	604b      	str	r3, [r1, #4]
 8003f42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f46:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003f4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f50:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f54:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	fa93 f2a3 	rbit	r2, r3
 8003f5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f62:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f66:	601a      	str	r2, [r3, #0]
  return result;
 8003f68:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003f6c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003f70:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f72:	fab3 f383 	clz	r3, r3
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003f7c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	461a      	mov	r2, r3
 8003f84:	2301      	movs	r3, #1
 8003f86:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f88:	f7fd fef0 	bl	8001d6c <HAL_GetTick>
 8003f8c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f90:	e009      	b.n	8003fa6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f92:	f7fd feeb 	bl	8001d6c <HAL_GetTick>
 8003f96:	4602      	mov	r2, r0
 8003f98:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003f9c:	1ad3      	subs	r3, r2, r3
 8003f9e:	2b02      	cmp	r3, #2
 8003fa0:	d901      	bls.n	8003fa6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	e144      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
 8003fa6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003faa:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fb8:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	fa93 f2a3 	rbit	r2, r3
 8003fc2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fc6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fca:	601a      	str	r2, [r3, #0]
  return result;
 8003fcc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003fd0:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003fd4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003fd6:	fab3 f383 	clz	r3, r3
 8003fda:	b2db      	uxtb	r3, r3
 8003fdc:	095b      	lsrs	r3, r3, #5
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	f043 0301 	orr.w	r3, r3, #1
 8003fe4:	b2db      	uxtb	r3, r3
 8003fe6:	2b01      	cmp	r3, #1
 8003fe8:	d102      	bne.n	8003ff0 <HAL_RCC_OscConfig+0xe2c>
 8003fea:	4b54      	ldr	r3, [pc, #336]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	e027      	b.n	8004040 <HAL_RCC_OscConfig+0xe7c>
 8003ff0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ff4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003ff8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ffc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004002:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	fa93 f2a3 	rbit	r2, r3
 800400c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004010:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8004014:	601a      	str	r2, [r3, #0]
 8004016:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800401a:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800401e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004028:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	fa93 f2a3 	rbit	r2, r3
 8004032:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004036:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	4b3f      	ldr	r3, [pc, #252]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004044:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004048:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800404c:	6011      	str	r1, [r2, #0]
 800404e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004052:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8004056:	6812      	ldr	r2, [r2, #0]
 8004058:	fa92 f1a2 	rbit	r1, r2
 800405c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004060:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8004064:	6011      	str	r1, [r2, #0]
  return result;
 8004066:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800406a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800406e:	6812      	ldr	r2, [r2, #0]
 8004070:	fab2 f282 	clz	r2, r2
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	f042 0220 	orr.w	r2, r2, #32
 800407a:	b2d2      	uxtb	r2, r2
 800407c:	f002 021f 	and.w	r2, r2, #31
 8004080:	2101      	movs	r1, #1
 8004082:	fa01 f202 	lsl.w	r2, r1, r2
 8004086:	4013      	ands	r3, r2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d082      	beq.n	8003f92 <HAL_RCC_OscConfig+0xdce>
 800408c:	e0cf      	b.n	800422e <HAL_RCC_OscConfig+0x106a>
 800408e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004092:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8004096:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800409a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800409c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040a0:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	fa93 f2a3 	rbit	r2, r3
 80040aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040ae:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040b2:	601a      	str	r2, [r3, #0]
  return result;
 80040b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040b8:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 80040bc:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040be:	fab3 f383 	clz	r3, r3
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80040c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	461a      	mov	r2, r3
 80040d0:	2300      	movs	r3, #0
 80040d2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd fe4a 	bl	8001d6c <HAL_GetTick>
 80040d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	e009      	b.n	80040f2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040de:	f7fd fe45 	bl	8001d6c <HAL_GetTick>
 80040e2:	4602      	mov	r2, r0
 80040e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b02      	cmp	r3, #2
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e09e      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
 80040f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80040f6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80040fa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80040fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004100:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004104:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	fa93 f2a3 	rbit	r2, r3
 800410e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004112:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004116:	601a      	str	r2, [r3, #0]
  return result;
 8004118:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800411c:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8004120:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	095b      	lsrs	r3, r3, #5
 800412a:	b2db      	uxtb	r3, r3
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b01      	cmp	r3, #1
 8004134:	d104      	bne.n	8004140 <HAL_RCC_OscConfig+0xf7c>
 8004136:	4b01      	ldr	r3, [pc, #4]	; (800413c <HAL_RCC_OscConfig+0xf78>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	e029      	b.n	8004190 <HAL_RCC_OscConfig+0xfcc>
 800413c:	40021000 	.word	0x40021000
 8004140:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004144:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004148:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800414c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800414e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004152:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	fa93 f2a3 	rbit	r2, r3
 800415c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004160:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8004164:	601a      	str	r2, [r3, #0]
 8004166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800416a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800416e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8004172:	601a      	str	r2, [r3, #0]
 8004174:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004178:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	fa93 f2a3 	rbit	r2, r3
 8004182:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004186:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800418a:	601a      	str	r2, [r3, #0]
 800418c:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_OscConfig+0x1078>)
 800418e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004190:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8004194:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8004198:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800419c:	6011      	str	r1, [r2, #0]
 800419e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041a2:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	fa92 f1a2 	rbit	r1, r2
 80041ac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041b0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041b4:	6011      	str	r1, [r2, #0]
  return result;
 80041b6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80041ba:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 80041be:	6812      	ldr	r2, [r2, #0]
 80041c0:	fab2 f282 	clz	r2, r2
 80041c4:	b2d2      	uxtb	r2, r2
 80041c6:	f042 0220 	orr.w	r2, r2, #32
 80041ca:	b2d2      	uxtb	r2, r2
 80041cc:	f002 021f 	and.w	r2, r2, #31
 80041d0:	2101      	movs	r1, #1
 80041d2:	fa01 f202 	lsl.w	r2, r1, r2
 80041d6:	4013      	ands	r3, r2
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d180      	bne.n	80040de <HAL_RCC_OscConfig+0xf1a>
 80041dc:	e027      	b.n	800422e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80041e2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	2b01      	cmp	r3, #1
 80041ec:	d101      	bne.n	80041f2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	e01e      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_OscConfig+0x1078>)
 80041f4:	685b      	ldr	r3, [r3, #4]
 80041f6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041fa:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80041fe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004202:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8004206:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6a1b      	ldr	r3, [r3, #32]
 800420e:	429a      	cmp	r2, r3
 8004210:	d10b      	bne.n	800422a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8004212:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8004216:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800421a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800421e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004226:	429a      	cmp	r2, r3
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e000      	b.n	8004230 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800422e:	2300      	movs	r3, #0
}
 8004230:	4618      	mov	r0, r3
 8004232:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	40021000 	.word	0x40021000

08004240 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b09e      	sub	sp, #120	; 0x78
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
 8004248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800424a:	2300      	movs	r3, #0
 800424c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e162      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004258:	4b90      	ldr	r3, [pc, #576]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f003 0307 	and.w	r3, r3, #7
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	429a      	cmp	r2, r3
 8004264:	d910      	bls.n	8004288 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004266:	4b8d      	ldr	r3, [pc, #564]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f023 0207 	bic.w	r2, r3, #7
 800426e:	498b      	ldr	r1, [pc, #556]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	4313      	orrs	r3, r2
 8004274:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004276:	4b89      	ldr	r3, [pc, #548]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0307 	and.w	r3, r3, #7
 800427e:	683a      	ldr	r2, [r7, #0]
 8004280:	429a      	cmp	r2, r3
 8004282:	d001      	beq.n	8004288 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004284:	2301      	movs	r3, #1
 8004286:	e14a      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004294:	4b82      	ldr	r3, [pc, #520]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004296:	685b      	ldr	r3, [r3, #4]
 8004298:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	497f      	ldr	r1, [pc, #508]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042a2:	4313      	orrs	r3, r2
 80042a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 0301 	and.w	r3, r3, #1
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	f000 80dc 	beq.w	800446c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d13c      	bne.n	8004336 <HAL_RCC_ClockConfig+0xf6>
 80042bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042c0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042c4:	fa93 f3a3 	rbit	r3, r3
 80042c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80042ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042cc:	fab3 f383 	clz	r3, r3
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	095b      	lsrs	r3, r3, #5
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	f043 0301 	orr.w	r3, r3, #1
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d102      	bne.n	80042e6 <HAL_RCC_ClockConfig+0xa6>
 80042e0:	4b6f      	ldr	r3, [pc, #444]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	e00f      	b.n	8004306 <HAL_RCC_ClockConfig+0xc6>
 80042e6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042ea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042ee:	fa93 f3a3 	rbit	r3, r3
 80042f2:	667b      	str	r3, [r7, #100]	; 0x64
 80042f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80042f8:	663b      	str	r3, [r7, #96]	; 0x60
 80042fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80042fc:	fa93 f3a3 	rbit	r3, r3
 8004300:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004302:	4b67      	ldr	r3, [pc, #412]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004306:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800430a:	65ba      	str	r2, [r7, #88]	; 0x58
 800430c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8004314:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	f042 0220 	orr.w	r2, r2, #32
 8004320:	b2d2      	uxtb	r2, r2
 8004322:	f002 021f 	and.w	r2, r2, #31
 8004326:	2101      	movs	r1, #1
 8004328:	fa01 f202 	lsl.w	r2, r1, r2
 800432c:	4013      	ands	r3, r2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d17b      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e0f3      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	685b      	ldr	r3, [r3, #4]
 800433a:	2b02      	cmp	r3, #2
 800433c:	d13c      	bne.n	80043b8 <HAL_RCC_ClockConfig+0x178>
 800433e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004342:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004346:	fa93 f3a3 	rbit	r3, r3
 800434a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800434c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800434e:	fab3 f383 	clz	r3, r3
 8004352:	b2db      	uxtb	r3, r3
 8004354:	095b      	lsrs	r3, r3, #5
 8004356:	b2db      	uxtb	r3, r3
 8004358:	f043 0301 	orr.w	r3, r3, #1
 800435c:	b2db      	uxtb	r3, r3
 800435e:	2b01      	cmp	r3, #1
 8004360:	d102      	bne.n	8004368 <HAL_RCC_ClockConfig+0x128>
 8004362:	4b4f      	ldr	r3, [pc, #316]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	e00f      	b.n	8004388 <HAL_RCC_ClockConfig+0x148>
 8004368:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800436c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800436e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004370:	fa93 f3a3 	rbit	r3, r3
 8004374:	647b      	str	r3, [r7, #68]	; 0x44
 8004376:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800437a:	643b      	str	r3, [r7, #64]	; 0x40
 800437c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800437e:	fa93 f3a3 	rbit	r3, r3
 8004382:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004384:	4b46      	ldr	r3, [pc, #280]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800438c:	63ba      	str	r2, [r7, #56]	; 0x38
 800438e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004390:	fa92 f2a2 	rbit	r2, r2
 8004394:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8004396:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004398:	fab2 f282 	clz	r2, r2
 800439c:	b2d2      	uxtb	r2, r2
 800439e:	f042 0220 	orr.w	r2, r2, #32
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	f002 021f 	and.w	r2, r2, #31
 80043a8:	2101      	movs	r1, #1
 80043aa:	fa01 f202 	lsl.w	r2, r1, r2
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d13a      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e0b2      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 80043b8:	2302      	movs	r3, #2
 80043ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	fa93 f3a3 	rbit	r3, r3
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80043c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	fab3 f383 	clz	r3, r3
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	095b      	lsrs	r3, r3, #5
 80043ce:	b2db      	uxtb	r3, r3
 80043d0:	f043 0301 	orr.w	r3, r3, #1
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	2b01      	cmp	r3, #1
 80043d8:	d102      	bne.n	80043e0 <HAL_RCC_ClockConfig+0x1a0>
 80043da:	4b31      	ldr	r3, [pc, #196]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	e00d      	b.n	80043fc <HAL_RCC_ClockConfig+0x1bc>
 80043e0:	2302      	movs	r3, #2
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043e6:	fa93 f3a3 	rbit	r3, r3
 80043ea:	627b      	str	r3, [r7, #36]	; 0x24
 80043ec:	2302      	movs	r3, #2
 80043ee:	623b      	str	r3, [r7, #32]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	61fb      	str	r3, [r7, #28]
 80043f8:	4b29      	ldr	r3, [pc, #164]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 80043fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043fc:	2202      	movs	r2, #2
 80043fe:	61ba      	str	r2, [r7, #24]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	fa92 f2a2 	rbit	r2, r2
 8004406:	617a      	str	r2, [r7, #20]
  return result;
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	fab2 f282 	clz	r2, r2
 800440e:	b2d2      	uxtb	r2, r2
 8004410:	f042 0220 	orr.w	r2, r2, #32
 8004414:	b2d2      	uxtb	r2, r2
 8004416:	f002 021f 	and.w	r2, r2, #31
 800441a:	2101      	movs	r1, #1
 800441c:	fa01 f202 	lsl.w	r2, r1, r2
 8004420:	4013      	ands	r3, r2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e079      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800442a:	4b1d      	ldr	r3, [pc, #116]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f023 0203 	bic.w	r2, r3, #3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	491a      	ldr	r1, [pc, #104]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 8004438:	4313      	orrs	r3, r2
 800443a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800443c:	f7fd fc96 	bl	8001d6c <HAL_GetTick>
 8004440:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004442:	e00a      	b.n	800445a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004444:	f7fd fc92 	bl	8001d6c <HAL_GetTick>
 8004448:	4602      	mov	r2, r0
 800444a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800444c:	1ad3      	subs	r3, r2, r3
 800444e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004452:	4293      	cmp	r3, r2
 8004454:	d901      	bls.n	800445a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8004456:	2303      	movs	r3, #3
 8004458:	e061      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800445a:	4b11      	ldr	r3, [pc, #68]	; (80044a0 <HAL_RCC_ClockConfig+0x260>)
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	f003 020c 	and.w	r2, r3, #12
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	429a      	cmp	r2, r3
 800446a:	d1eb      	bne.n	8004444 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800446c:	4b0b      	ldr	r3, [pc, #44]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	683a      	ldr	r2, [r7, #0]
 8004476:	429a      	cmp	r2, r3
 8004478:	d214      	bcs.n	80044a4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800447a:	4b08      	ldr	r3, [pc, #32]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f023 0207 	bic.w	r2, r3, #7
 8004482:	4906      	ldr	r1, [pc, #24]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448a:	4b04      	ldr	r3, [pc, #16]	; (800449c <HAL_RCC_ClockConfig+0x25c>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f003 0307 	and.w	r3, r3, #7
 8004492:	683a      	ldr	r2, [r7, #0]
 8004494:	429a      	cmp	r2, r3
 8004496:	d005      	beq.n	80044a4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e040      	b.n	800451e <HAL_RCC_ClockConfig+0x2de>
 800449c:	40022000 	.word	0x40022000
 80044a0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f003 0304 	and.w	r3, r3, #4
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d008      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044b0:	4b1d      	ldr	r3, [pc, #116]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	491a      	ldr	r1, [pc, #104]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d009      	beq.n	80044e2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044ce:	4b16      	ldr	r3, [pc, #88]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	00db      	lsls	r3, r3, #3
 80044dc:	4912      	ldr	r1, [pc, #72]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044de:	4313      	orrs	r3, r2
 80044e0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044e2:	f000 f829 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 80044e6:	4601      	mov	r1, r0
 80044e8:	4b0f      	ldr	r3, [pc, #60]	; (8004528 <HAL_RCC_ClockConfig+0x2e8>)
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80044f0:	22f0      	movs	r2, #240	; 0xf0
 80044f2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	fa92 f2a2 	rbit	r2, r2
 80044fa:	60fa      	str	r2, [r7, #12]
  return result;
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	fab2 f282 	clz	r2, r2
 8004502:	b2d2      	uxtb	r2, r2
 8004504:	40d3      	lsrs	r3, r2
 8004506:	4a09      	ldr	r2, [pc, #36]	; (800452c <HAL_RCC_ClockConfig+0x2ec>)
 8004508:	5cd3      	ldrb	r3, [r2, r3]
 800450a:	fa21 f303 	lsr.w	r3, r1, r3
 800450e:	4a08      	ldr	r2, [pc, #32]	; (8004530 <HAL_RCC_ClockConfig+0x2f0>)
 8004510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004512:	4b08      	ldr	r3, [pc, #32]	; (8004534 <HAL_RCC_ClockConfig+0x2f4>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4618      	mov	r0, r3
 8004518:	f7fd fbe4 	bl	8001ce4 <HAL_InitTick>
  
  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3778      	adds	r7, #120	; 0x78
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
 8004526:	bf00      	nop
 8004528:	40021000 	.word	0x40021000
 800452c:	0800be60 	.word	0x0800be60
 8004530:	2000003c 	.word	0x2000003c
 8004534:	20000040 	.word	0x20000040

08004538 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004538:	b480      	push	{r7}
 800453a:	b08b      	sub	sp, #44	; 0x2c
 800453c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800453e:	2300      	movs	r3, #0
 8004540:	61fb      	str	r3, [r7, #28]
 8004542:	2300      	movs	r3, #0
 8004544:	61bb      	str	r3, [r7, #24]
 8004546:	2300      	movs	r3, #0
 8004548:	627b      	str	r3, [r7, #36]	; 0x24
 800454a:	2300      	movs	r3, #0
 800454c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800454e:	2300      	movs	r3, #0
 8004550:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004552:	4b29      	ldr	r3, [pc, #164]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	f003 030c 	and.w	r3, r3, #12
 800455e:	2b04      	cmp	r3, #4
 8004560:	d002      	beq.n	8004568 <HAL_RCC_GetSysClockFreq+0x30>
 8004562:	2b08      	cmp	r3, #8
 8004564:	d003      	beq.n	800456e <HAL_RCC_GetSysClockFreq+0x36>
 8004566:	e03c      	b.n	80045e2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 800456a:	623b      	str	r3, [r7, #32]
      break;
 800456c:	e03c      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004574:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8004578:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457a:	68ba      	ldr	r2, [r7, #8]
 800457c:	fa92 f2a2 	rbit	r2, r2
 8004580:	607a      	str	r2, [r7, #4]
  return result;
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	fab2 f282 	clz	r2, r2
 8004588:	b2d2      	uxtb	r2, r2
 800458a:	40d3      	lsrs	r3, r2
 800458c:	4a1c      	ldr	r2, [pc, #112]	; (8004600 <HAL_RCC_GetSysClockFreq+0xc8>)
 800458e:	5cd3      	ldrb	r3, [r2, r3]
 8004590:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8004592:	4b19      	ldr	r3, [pc, #100]	; (80045f8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	220f      	movs	r2, #15
 800459c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	fa92 f2a2 	rbit	r2, r2
 80045a4:	60fa      	str	r2, [r7, #12]
  return result;
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	fab2 f282 	clz	r2, r2
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	40d3      	lsrs	r3, r2
 80045b0:	4a14      	ldr	r2, [pc, #80]	; (8004604 <HAL_RCC_GetSysClockFreq+0xcc>)
 80045b2:	5cd3      	ldrb	r3, [r2, r3]
 80045b4:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d008      	beq.n	80045d2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80045c0:	4a0e      	ldr	r2, [pc, #56]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fb02 f303 	mul.w	r3, r2, r3
 80045ce:	627b      	str	r3, [r7, #36]	; 0x24
 80045d0:	e004      	b.n	80045dc <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	4a0c      	ldr	r2, [pc, #48]	; (8004608 <HAL_RCC_GetSysClockFreq+0xd0>)
 80045d6:	fb02 f303 	mul.w	r3, r2, r3
 80045da:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	623b      	str	r3, [r7, #32]
      break;
 80045e0:	e002      	b.n	80045e8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80045e2:	4b06      	ldr	r3, [pc, #24]	; (80045fc <HAL_RCC_GetSysClockFreq+0xc4>)
 80045e4:	623b      	str	r3, [r7, #32]
      break;
 80045e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80045e8:	6a3b      	ldr	r3, [r7, #32]
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	372c      	adds	r7, #44	; 0x2c
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40021000 	.word	0x40021000
 80045fc:	007a1200 	.word	0x007a1200
 8004600:	0800be78 	.word	0x0800be78
 8004604:	0800be88 	.word	0x0800be88
 8004608:	003d0900 	.word	0x003d0900

0800460c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	2000003c 	.word	0x2000003c

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b082      	sub	sp, #8
 8004628:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800462a:	f7ff ffef 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462e:	4601      	mov	r1, r0
 8004630:	4b0b      	ldr	r3, [pc, #44]	; (8004660 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004638:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800463c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	fa92 f2a2 	rbit	r2, r2
 8004644:	603a      	str	r2, [r7, #0]
  return result;
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	fab2 f282 	clz	r2, r2
 800464c:	b2d2      	uxtb	r2, r2
 800464e:	40d3      	lsrs	r3, r2
 8004650:	4a04      	ldr	r2, [pc, #16]	; (8004664 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004652:	5cd3      	ldrb	r3, [r2, r3]
 8004654:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004658:	4618      	mov	r0, r3
 800465a:	3708      	adds	r7, #8
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}
 8004660:	40021000 	.word	0x40021000
 8004664:	0800be70 	.word	0x0800be70

08004668 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b082      	sub	sp, #8
 800466c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800466e:	f7ff ffcd 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004672:	4601      	mov	r1, r0
 8004674:	4b0b      	ldr	r3, [pc, #44]	; (80046a4 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800467c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004680:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004682:	687a      	ldr	r2, [r7, #4]
 8004684:	fa92 f2a2 	rbit	r2, r2
 8004688:	603a      	str	r2, [r7, #0]
  return result;
 800468a:	683a      	ldr	r2, [r7, #0]
 800468c:	fab2 f282 	clz	r2, r2
 8004690:	b2d2      	uxtb	r2, r2
 8004692:	40d3      	lsrs	r3, r2
 8004694:	4a04      	ldr	r2, [pc, #16]	; (80046a8 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004696:	5cd3      	ldrb	r3, [r2, r3]
 8004698:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800469c:	4618      	mov	r0, r3
 800469e:	3708      	adds	r7, #8
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}
 80046a4:	40021000 	.word	0x40021000
 80046a8:	0800be70 	.word	0x0800be70

080046ac <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b092      	sub	sp, #72	; 0x48
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80046b8:	2300      	movs	r3, #0
 80046ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80046bc:	2300      	movs	r3, #0
 80046be:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	f000 80cd 	beq.w	800486a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046d0:	4b86      	ldr	r3, [pc, #536]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10e      	bne.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046dc:	4b83      	ldr	r3, [pc, #524]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046de:	69db      	ldr	r3, [r3, #28]
 80046e0:	4a82      	ldr	r2, [pc, #520]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046e6:	61d3      	str	r3, [r2, #28]
 80046e8:	4b80      	ldr	r3, [pc, #512]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80046ea:	69db      	ldr	r3, [r3, #28]
 80046ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046f0:	60bb      	str	r3, [r7, #8]
 80046f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046f4:	2301      	movs	r3, #1
 80046f6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046fa:	4b7d      	ldr	r3, [pc, #500]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004702:	2b00      	cmp	r3, #0
 8004704:	d118      	bne.n	8004738 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004706:	4b7a      	ldr	r3, [pc, #488]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4a79      	ldr	r2, [pc, #484]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800470c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004710:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004712:	f7fd fb2b 	bl	8001d6c <HAL_GetTick>
 8004716:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004718:	e008      	b.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800471a:	f7fd fb27 	bl	8001d6c <HAL_GetTick>
 800471e:	4602      	mov	r2, r0
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	1ad3      	subs	r3, r2, r3
 8004724:	2b64      	cmp	r3, #100	; 0x64
 8004726:	d901      	bls.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e0db      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800472c:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004734:	2b00      	cmp	r3, #0
 8004736:	d0f0      	beq.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004738:	4b6c      	ldr	r3, [pc, #432]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004740:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004744:	2b00      	cmp	r3, #0
 8004746:	d07d      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	685b      	ldr	r3, [r3, #4]
 800474c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004750:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004752:	429a      	cmp	r2, r3
 8004754:	d076      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004756:	4b65      	ldr	r3, [pc, #404]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004758:	6a1b      	ldr	r3, [r3, #32]
 800475a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800475e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004760:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004764:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004768:	fa93 f3a3 	rbit	r3, r3
 800476c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800476e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004770:	fab3 f383 	clz	r3, r3
 8004774:	b2db      	uxtb	r3, r3
 8004776:	461a      	mov	r2, r3
 8004778:	4b5e      	ldr	r3, [pc, #376]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800477a:	4413      	add	r3, r2
 800477c:	009b      	lsls	r3, r3, #2
 800477e:	461a      	mov	r2, r3
 8004780:	2301      	movs	r3, #1
 8004782:	6013      	str	r3, [r2, #0]
 8004784:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004788:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800478a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800478c:	fa93 f3a3 	rbit	r3, r3
 8004790:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004792:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004794:	fab3 f383 	clz	r3, r3
 8004798:	b2db      	uxtb	r3, r3
 800479a:	461a      	mov	r2, r3
 800479c:	4b55      	ldr	r3, [pc, #340]	; (80048f4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800479e:	4413      	add	r3, r2
 80047a0:	009b      	lsls	r3, r3, #2
 80047a2:	461a      	mov	r2, r3
 80047a4:	2300      	movs	r3, #0
 80047a6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80047a8:	4a50      	ldr	r2, [pc, #320]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80047aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047ac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80047ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d045      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fd fad8 	bl	8001d6c <HAL_GetTick>
 80047bc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047be:	e00a      	b.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047c0:	f7fd fad4 	bl	8001d6c <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d901      	bls.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80047d2:	2303      	movs	r3, #3
 80047d4:	e086      	b.n	80048e4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80047d6:	2302      	movs	r3, #2
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047dc:	fa93 f3a3 	rbit	r3, r3
 80047e0:	627b      	str	r3, [r7, #36]	; 0x24
 80047e2:	2302      	movs	r3, #2
 80047e4:	623b      	str	r3, [r7, #32]
 80047e6:	6a3b      	ldr	r3, [r7, #32]
 80047e8:	fa93 f3a3 	rbit	r3, r3
 80047ec:	61fb      	str	r3, [r7, #28]
  return result;
 80047ee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	095b      	lsrs	r3, r3, #5
 80047f8:	b2db      	uxtb	r3, r3
 80047fa:	f043 0302 	orr.w	r3, r3, #2
 80047fe:	b2db      	uxtb	r3, r3
 8004800:	2b02      	cmp	r3, #2
 8004802:	d102      	bne.n	800480a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004804:	4b39      	ldr	r3, [pc, #228]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	e007      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800480a:	2302      	movs	r3, #2
 800480c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	fa93 f3a3 	rbit	r3, r3
 8004814:	617b      	str	r3, [r7, #20]
 8004816:	4b35      	ldr	r3, [pc, #212]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800481a:	2202      	movs	r2, #2
 800481c:	613a      	str	r2, [r7, #16]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	fa92 f2a2 	rbit	r2, r2
 8004824:	60fa      	str	r2, [r7, #12]
  return result;
 8004826:	68fa      	ldr	r2, [r7, #12]
 8004828:	fab2 f282 	clz	r2, r2
 800482c:	b2d2      	uxtb	r2, r2
 800482e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004832:	b2d2      	uxtb	r2, r2
 8004834:	f002 021f 	and.w	r2, r2, #31
 8004838:	2101      	movs	r1, #1
 800483a:	fa01 f202 	lsl.w	r2, r1, r2
 800483e:	4013      	ands	r3, r2
 8004840:	2b00      	cmp	r3, #0
 8004842:	d0bd      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004844:	4b29      	ldr	r3, [pc, #164]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004846:	6a1b      	ldr	r3, [r3, #32]
 8004848:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	4926      	ldr	r1, [pc, #152]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004852:	4313      	orrs	r3, r2
 8004854:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004856:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485e:	4b23      	ldr	r3, [pc, #140]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004860:	69db      	ldr	r3, [r3, #28]
 8004862:	4a22      	ldr	r2, [pc, #136]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004864:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004868:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f003 0301 	and.w	r3, r3, #1
 8004872:	2b00      	cmp	r3, #0
 8004874:	d008      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487a:	f023 0203 	bic.w	r2, r3, #3
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	689b      	ldr	r3, [r3, #8]
 8004882:	491a      	ldr	r1, [pc, #104]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004884:	4313      	orrs	r3, r2
 8004886:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0320 	and.w	r3, r3, #32
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004894:	4b15      	ldr	r3, [pc, #84]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004898:	f023 0210 	bic.w	r2, r3, #16
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	68db      	ldr	r3, [r3, #12]
 80048a0:	4912      	ldr	r1, [pc, #72]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80048b2:	4b0e      	ldr	r3, [pc, #56]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	490b      	ldr	r1, [pc, #44]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d008      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80048d0:	4b06      	ldr	r3, [pc, #24]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048d4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	695b      	ldr	r3, [r3, #20]
 80048dc:	4903      	ldr	r1, [pc, #12]	; (80048ec <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80048de:	4313      	orrs	r3, r2
 80048e0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048e2:	2300      	movs	r3, #0
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3748      	adds	r7, #72	; 0x48
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40021000 	.word	0x40021000
 80048f0:	40007000 	.word	0x40007000
 80048f4:	10908100 	.word	0x10908100

080048f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	e049      	b.n	800499e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004910:	b2db      	uxtb	r3, r3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d106      	bne.n	8004924 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7fc ffc8 	bl	80018b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2202      	movs	r2, #2
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	3304      	adds	r3, #4
 8004934:	4619      	mov	r1, r3
 8004936:	4610      	mov	r0, r2
 8004938:	f000 fbb6 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2201      	movs	r2, #1
 8004950:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2201      	movs	r2, #1
 8004968:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2201      	movs	r2, #1
 8004970:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2201      	movs	r2, #1
 8004978:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	2201      	movs	r2, #1
 8004988:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2201      	movs	r2, #1
 8004990:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3708      	adds	r7, #8
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
	...

080049a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b085      	sub	sp, #20
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d001      	beq.n	80049c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80049bc:	2301      	movs	r3, #1
 80049be:	e038      	b.n	8004a32 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	4a1c      	ldr	r2, [pc, #112]	; (8004a40 <HAL_TIM_Base_Start+0x98>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d00e      	beq.n	80049f0 <HAL_TIM_Base_Start+0x48>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049da:	d009      	beq.n	80049f0 <HAL_TIM_Base_Start+0x48>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4a18      	ldr	r2, [pc, #96]	; (8004a44 <HAL_TIM_Base_Start+0x9c>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d004      	beq.n	80049f0 <HAL_TIM_Base_Start+0x48>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	4a17      	ldr	r2, [pc, #92]	; (8004a48 <HAL_TIM_Base_Start+0xa0>)
 80049ec:	4293      	cmp	r3, r2
 80049ee:	d115      	bne.n	8004a1c <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689a      	ldr	r2, [r3, #8]
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <HAL_TIM_Base_Start+0xa4>)
 80049f8:	4013      	ands	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2b06      	cmp	r3, #6
 8004a00:	d015      	beq.n	8004a2e <HAL_TIM_Base_Start+0x86>
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a08:	d011      	beq.n	8004a2e <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f042 0201 	orr.w	r2, r2, #1
 8004a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a1a:	e008      	b.n	8004a2e <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f042 0201 	orr.w	r2, r2, #1
 8004a2a:	601a      	str	r2, [r3, #0]
 8004a2c:	e000      	b.n	8004a30 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
 8004a3e:	bf00      	nop
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40014000 	.word	0x40014000
 8004a4c:	00010007 	.word	0x00010007

08004a50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e049      	b.n	8004af6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f000 f841 	bl	8004afe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2202      	movs	r2, #2
 8004a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681a      	ldr	r2, [r3, #0]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	4610      	mov	r0, r2
 8004a90:	f000 fb0a 	bl	80050a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2201      	movs	r2, #1
 8004ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2201      	movs	r2, #1
 8004ac0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2201      	movs	r2, #1
 8004ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2201      	movs	r2, #1
 8004af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3708      	adds	r7, #8
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004b06:	bf00      	nop
 8004b08:	370c      	adds	r7, #12
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b10:	4770      	bx	lr
	...

08004b14 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b084      	sub	sp, #16
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <HAL_TIM_PWM_Start+0x24>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b01      	cmp	r3, #1
 8004b2e:	bf14      	ite	ne
 8004b30:	2301      	movne	r3, #1
 8004b32:	2300      	moveq	r3, #0
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	e03c      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x9e>
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b04      	cmp	r3, #4
 8004b3c:	d109      	bne.n	8004b52 <HAL_TIM_PWM_Start+0x3e>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004b44:	b2db      	uxtb	r3, r3
 8004b46:	2b01      	cmp	r3, #1
 8004b48:	bf14      	ite	ne
 8004b4a:	2301      	movne	r3, #1
 8004b4c:	2300      	moveq	r3, #0
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	e02f      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x9e>
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	2b08      	cmp	r3, #8
 8004b56:	d109      	bne.n	8004b6c <HAL_TIM_PWM_Start+0x58>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b01      	cmp	r3, #1
 8004b62:	bf14      	ite	ne
 8004b64:	2301      	movne	r3, #1
 8004b66:	2300      	moveq	r3, #0
 8004b68:	b2db      	uxtb	r3, r3
 8004b6a:	e022      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x9e>
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	2b0c      	cmp	r3, #12
 8004b70:	d109      	bne.n	8004b86 <HAL_TIM_PWM_Start+0x72>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b78:	b2db      	uxtb	r3, r3
 8004b7a:	2b01      	cmp	r3, #1
 8004b7c:	bf14      	ite	ne
 8004b7e:	2301      	movne	r3, #1
 8004b80:	2300      	moveq	r3, #0
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	e015      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x9e>
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b10      	cmp	r3, #16
 8004b8a:	d109      	bne.n	8004ba0 <HAL_TIM_PWM_Start+0x8c>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b01      	cmp	r3, #1
 8004b96:	bf14      	ite	ne
 8004b98:	2301      	movne	r3, #1
 8004b9a:	2300      	moveq	r3, #0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	e008      	b.n	8004bb2 <HAL_TIM_PWM_Start+0x9e>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ba6:	b2db      	uxtb	r3, r3
 8004ba8:	2b01      	cmp	r3, #1
 8004baa:	bf14      	ite	ne
 8004bac:	2301      	movne	r3, #1
 8004bae:	2300      	moveq	r3, #0
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e088      	b.n	8004ccc <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d104      	bne.n	8004bca <HAL_TIM_PWM_Start+0xb6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bc8:	e023      	b.n	8004c12 <HAL_TIM_PWM_Start+0xfe>
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	2b04      	cmp	r3, #4
 8004bce:	d104      	bne.n	8004bda <HAL_TIM_PWM_Start+0xc6>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004bd8:	e01b      	b.n	8004c12 <HAL_TIM_PWM_Start+0xfe>
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b08      	cmp	r3, #8
 8004bde:	d104      	bne.n	8004bea <HAL_TIM_PWM_Start+0xd6>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2202      	movs	r2, #2
 8004be4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004be8:	e013      	b.n	8004c12 <HAL_TIM_PWM_Start+0xfe>
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	2b0c      	cmp	r3, #12
 8004bee:	d104      	bne.n	8004bfa <HAL_TIM_PWM_Start+0xe6>
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2202      	movs	r2, #2
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004bf8:	e00b      	b.n	8004c12 <HAL_TIM_PWM_Start+0xfe>
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	2b10      	cmp	r3, #16
 8004bfe:	d104      	bne.n	8004c0a <HAL_TIM_PWM_Start+0xf6>
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c08:	e003      	b.n	8004c12 <HAL_TIM_PWM_Start+0xfe>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2202      	movs	r2, #2
 8004c0e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	2201      	movs	r2, #1
 8004c18:	6839      	ldr	r1, [r7, #0]
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f000 fdfc 	bl	8005818 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a2b      	ldr	r2, [pc, #172]	; (8004cd4 <HAL_TIM_PWM_Start+0x1c0>)
 8004c26:	4293      	cmp	r3, r2
 8004c28:	d00e      	beq.n	8004c48 <HAL_TIM_PWM_Start+0x134>
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a2a      	ldr	r2, [pc, #168]	; (8004cd8 <HAL_TIM_PWM_Start+0x1c4>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d009      	beq.n	8004c48 <HAL_TIM_PWM_Start+0x134>
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	4a28      	ldr	r2, [pc, #160]	; (8004cdc <HAL_TIM_PWM_Start+0x1c8>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d004      	beq.n	8004c48 <HAL_TIM_PWM_Start+0x134>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <HAL_TIM_PWM_Start+0x1cc>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_PWM_Start+0x138>
 8004c48:	2301      	movs	r3, #1
 8004c4a:	e000      	b.n	8004c4e <HAL_TIM_PWM_Start+0x13a>
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d007      	beq.n	8004c62 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c60:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4a1b      	ldr	r2, [pc, #108]	; (8004cd4 <HAL_TIM_PWM_Start+0x1c0>)
 8004c68:	4293      	cmp	r3, r2
 8004c6a:	d00e      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x176>
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c74:	d009      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x176>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIM_PWM_Start+0x1d0>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d004      	beq.n	8004c8a <HAL_TIM_PWM_Start+0x176>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a14      	ldr	r2, [pc, #80]	; (8004cd8 <HAL_TIM_PWM_Start+0x1c4>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d115      	bne.n	8004cb6 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	689a      	ldr	r2, [r3, #8]
 8004c90:	4b15      	ldr	r3, [pc, #84]	; (8004ce8 <HAL_TIM_PWM_Start+0x1d4>)
 8004c92:	4013      	ands	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	2b06      	cmp	r3, #6
 8004c9a:	d015      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x1b4>
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ca2:	d011      	beq.n	8004cc8 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681a      	ldr	r2, [r3, #0]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f042 0201 	orr.w	r2, r2, #1
 8004cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cb4:	e008      	b.n	8004cc8 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681a      	ldr	r2, [r3, #0]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f042 0201 	orr.w	r2, r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]
 8004cc6:	e000      	b.n	8004cca <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cc8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}
 8004cd4:	40012c00 	.word	0x40012c00
 8004cd8:	40014000 	.word	0x40014000
 8004cdc:	40014400 	.word	0x40014400
 8004ce0:	40014800 	.word	0x40014800
 8004ce4:	40000400 	.word	0x40000400
 8004ce8:	00010007 	.word	0x00010007

08004cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b086      	sub	sp, #24
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d101      	bne.n	8004d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004d06:	2302      	movs	r3, #2
 8004d08:	e0ff      	b.n	8004f0a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2b14      	cmp	r3, #20
 8004d16:	f200 80f0 	bhi.w	8004efa <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004d1a:	a201      	add	r2, pc, #4	; (adr r2, 8004d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d20:	08004d75 	.word	0x08004d75
 8004d24:	08004efb 	.word	0x08004efb
 8004d28:	08004efb 	.word	0x08004efb
 8004d2c:	08004efb 	.word	0x08004efb
 8004d30:	08004db5 	.word	0x08004db5
 8004d34:	08004efb 	.word	0x08004efb
 8004d38:	08004efb 	.word	0x08004efb
 8004d3c:	08004efb 	.word	0x08004efb
 8004d40:	08004df7 	.word	0x08004df7
 8004d44:	08004efb 	.word	0x08004efb
 8004d48:	08004efb 	.word	0x08004efb
 8004d4c:	08004efb 	.word	0x08004efb
 8004d50:	08004e37 	.word	0x08004e37
 8004d54:	08004efb 	.word	0x08004efb
 8004d58:	08004efb 	.word	0x08004efb
 8004d5c:	08004efb 	.word	0x08004efb
 8004d60:	08004e79 	.word	0x08004e79
 8004d64:	08004efb 	.word	0x08004efb
 8004d68:	08004efb 	.word	0x08004efb
 8004d6c:	08004efb 	.word	0x08004efb
 8004d70:	08004eb9 	.word	0x08004eb9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	68b9      	ldr	r1, [r7, #8]
 8004d7a:	4618      	mov	r0, r3
 8004d7c:	f000 fa0c 	bl	8005198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	699a      	ldr	r2, [r3, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f042 0208 	orr.w	r2, r2, #8
 8004d8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	699a      	ldr	r2, [r3, #24]
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0204 	bic.w	r2, r2, #4
 8004d9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	6999      	ldr	r1, [r3, #24]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	691a      	ldr	r2, [r3, #16]
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	430a      	orrs	r2, r1
 8004db0:	619a      	str	r2, [r3, #24]
      break;
 8004db2:	e0a5      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	68b9      	ldr	r1, [r7, #8]
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f000 fa72 	bl	80052a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	699a      	ldr	r2, [r3, #24]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004dce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	699a      	ldr	r2, [r3, #24]
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004dde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6999      	ldr	r1, [r3, #24]
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	021a      	lsls	r2, r3, #8
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	430a      	orrs	r2, r1
 8004df2:	619a      	str	r2, [r3, #24]
      break;
 8004df4:	e084      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	68b9      	ldr	r1, [r7, #8]
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f000 fad1 	bl	80053a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69da      	ldr	r2, [r3, #28]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0208 	orr.w	r2, r2, #8
 8004e10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	69da      	ldr	r2, [r3, #28]
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f022 0204 	bic.w	r2, r2, #4
 8004e20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	69d9      	ldr	r1, [r3, #28]
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	691a      	ldr	r2, [r3, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	430a      	orrs	r2, r1
 8004e32:	61da      	str	r2, [r3, #28]
      break;
 8004e34:	e064      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f000 fb2f 	bl	80054a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	69da      	ldr	r2, [r3, #28]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	69da      	ldr	r2, [r3, #28]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	69d9      	ldr	r1, [r3, #28]
 8004e68:	68bb      	ldr	r3, [r7, #8]
 8004e6a:	691b      	ldr	r3, [r3, #16]
 8004e6c:	021a      	lsls	r2, r3, #8
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	430a      	orrs	r2, r1
 8004e74:	61da      	str	r2, [r3, #28]
      break;
 8004e76:	e043      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	68b9      	ldr	r1, [r7, #8]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f000 fb72 	bl	8005568 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f042 0208 	orr.w	r2, r2, #8
 8004e92:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f022 0204 	bic.w	r2, r2, #4
 8004ea2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	430a      	orrs	r2, r1
 8004eb4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004eb6:	e023      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	68b9      	ldr	r1, [r7, #8]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f000 fbb0 	bl	8005624 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ed2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ee2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	021a      	lsls	r2, r3, #8
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	430a      	orrs	r2, r1
 8004ef6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004ef8:	e002      	b.n	8004f00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	75fb      	strb	r3, [r7, #23]
      break;
 8004efe:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop

08004f14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d101      	bne.n	8004f30 <HAL_TIM_ConfigClockSource+0x1c>
 8004f2c:	2302      	movs	r3, #2
 8004f2e:	e0b6      	b.n	800509e <HAL_TIM_ConfigClockSource+0x18a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2201      	movs	r2, #1
 8004f34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	689b      	ldr	r3, [r3, #8]
 8004f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f5a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f6c:	d03e      	beq.n	8004fec <HAL_TIM_ConfigClockSource+0xd8>
 8004f6e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f72:	f200 8087 	bhi.w	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004f76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f7a:	f000 8086 	beq.w	800508a <HAL_TIM_ConfigClockSource+0x176>
 8004f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f82:	d87f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004f84:	2b70      	cmp	r3, #112	; 0x70
 8004f86:	d01a      	beq.n	8004fbe <HAL_TIM_ConfigClockSource+0xaa>
 8004f88:	2b70      	cmp	r3, #112	; 0x70
 8004f8a:	d87b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004f8c:	2b60      	cmp	r3, #96	; 0x60
 8004f8e:	d050      	beq.n	8005032 <HAL_TIM_ConfigClockSource+0x11e>
 8004f90:	2b60      	cmp	r3, #96	; 0x60
 8004f92:	d877      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004f94:	2b50      	cmp	r3, #80	; 0x50
 8004f96:	d03c      	beq.n	8005012 <HAL_TIM_ConfigClockSource+0xfe>
 8004f98:	2b50      	cmp	r3, #80	; 0x50
 8004f9a:	d873      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004f9c:	2b40      	cmp	r3, #64	; 0x40
 8004f9e:	d058      	beq.n	8005052 <HAL_TIM_ConfigClockSource+0x13e>
 8004fa0:	2b40      	cmp	r3, #64	; 0x40
 8004fa2:	d86f      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004fa4:	2b30      	cmp	r3, #48	; 0x30
 8004fa6:	d064      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15e>
 8004fa8:	2b30      	cmp	r3, #48	; 0x30
 8004faa:	d86b      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004fac:	2b20      	cmp	r3, #32
 8004fae:	d060      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15e>
 8004fb0:	2b20      	cmp	r3, #32
 8004fb2:	d867      	bhi.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d05c      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15e>
 8004fb8:	2b10      	cmp	r3, #16
 8004fba:	d05a      	beq.n	8005072 <HAL_TIM_ConfigClockSource+0x15e>
 8004fbc:	e062      	b.n	8005084 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6818      	ldr	r0, [r3, #0]
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	6899      	ldr	r1, [r3, #8]
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	f000 fc03 	bl	80057d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004fe0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	609a      	str	r2, [r3, #8]
      break;
 8004fea:	e04f      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6818      	ldr	r0, [r3, #0]
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	6899      	ldr	r1, [r3, #8]
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	f000 fbec 	bl	80057d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	689a      	ldr	r2, [r3, #8]
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800500e:	609a      	str	r2, [r3, #8]
      break;
 8005010:	e03c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6818      	ldr	r0, [r3, #0]
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	6859      	ldr	r1, [r3, #4]
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	461a      	mov	r2, r3
 8005020:	f000 fb60 	bl	80056e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	2150      	movs	r1, #80	; 0x50
 800502a:	4618      	mov	r0, r3
 800502c:	f000 fbb9 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005030:	e02c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6818      	ldr	r0, [r3, #0]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	6859      	ldr	r1, [r3, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	461a      	mov	r2, r3
 8005040:	f000 fb7f 	bl	8005742 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2160      	movs	r1, #96	; 0x60
 800504a:	4618      	mov	r0, r3
 800504c:	f000 fba9 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005050:	e01c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6818      	ldr	r0, [r3, #0]
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	6859      	ldr	r1, [r3, #4]
 800505a:	683b      	ldr	r3, [r7, #0]
 800505c:	68db      	ldr	r3, [r3, #12]
 800505e:	461a      	mov	r2, r3
 8005060:	f000 fb40 	bl	80056e4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	2140      	movs	r1, #64	; 0x40
 800506a:	4618      	mov	r0, r3
 800506c:	f000 fb99 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005070:	e00c      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681a      	ldr	r2, [r3, #0]
 8005076:	683b      	ldr	r3, [r7, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	4619      	mov	r1, r3
 800507c:	4610      	mov	r0, r2
 800507e:	f000 fb90 	bl	80057a2 <TIM_ITRx_SetConfig>
      break;
 8005082:	e003      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8005084:	2301      	movs	r3, #1
 8005086:	73fb      	strb	r3, [r7, #15]
      break;
 8005088:	e000      	b.n	800508c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800508a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	2201      	movs	r2, #1
 8005090:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2200      	movs	r2, #0
 8005098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800509c:	7bfb      	ldrb	r3, [r7, #15]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3710      	adds	r7, #16
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	4a32      	ldr	r2, [pc, #200]	; (8005184 <TIM_Base_SetConfig+0xdc>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d007      	beq.n	80050d0 <TIM_Base_SetConfig+0x28>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050c6:	d003      	beq.n	80050d0 <TIM_Base_SetConfig+0x28>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	4a2f      	ldr	r2, [pc, #188]	; (8005188 <TIM_Base_SetConfig+0xe0>)
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d108      	bne.n	80050e2 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	4313      	orrs	r3, r2
 80050e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	4a27      	ldr	r2, [pc, #156]	; (8005184 <TIM_Base_SetConfig+0xdc>)
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d013      	beq.n	8005112 <TIM_Base_SetConfig+0x6a>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050f0:	d00f      	beq.n	8005112 <TIM_Base_SetConfig+0x6a>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	4a24      	ldr	r2, [pc, #144]	; (8005188 <TIM_Base_SetConfig+0xe0>)
 80050f6:	4293      	cmp	r3, r2
 80050f8:	d00b      	beq.n	8005112 <TIM_Base_SetConfig+0x6a>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	4a23      	ldr	r2, [pc, #140]	; (800518c <TIM_Base_SetConfig+0xe4>)
 80050fe:	4293      	cmp	r3, r2
 8005100:	d007      	beq.n	8005112 <TIM_Base_SetConfig+0x6a>
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	4a22      	ldr	r2, [pc, #136]	; (8005190 <TIM_Base_SetConfig+0xe8>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d003      	beq.n	8005112 <TIM_Base_SetConfig+0x6a>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	4a21      	ldr	r2, [pc, #132]	; (8005194 <TIM_Base_SetConfig+0xec>)
 800510e:	4293      	cmp	r3, r2
 8005110:	d108      	bne.n	8005124 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005118:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	68fa      	ldr	r2, [r7, #12]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	4a0e      	ldr	r2, [pc, #56]	; (8005184 <TIM_Base_SetConfig+0xdc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d00b      	beq.n	8005168 <TIM_Base_SetConfig+0xc0>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	4a0e      	ldr	r2, [pc, #56]	; (800518c <TIM_Base_SetConfig+0xe4>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d007      	beq.n	8005168 <TIM_Base_SetConfig+0xc0>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	4a0d      	ldr	r2, [pc, #52]	; (8005190 <TIM_Base_SetConfig+0xe8>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d003      	beq.n	8005168 <TIM_Base_SetConfig+0xc0>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	4a0c      	ldr	r2, [pc, #48]	; (8005194 <TIM_Base_SetConfig+0xec>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d103      	bne.n	8005170 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	691a      	ldr	r2, [r3, #16]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2201      	movs	r2, #1
 8005174:	615a      	str	r2, [r3, #20]
}
 8005176:	bf00      	nop
 8005178:	3714      	adds	r7, #20
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
 8005182:	bf00      	nop
 8005184:	40012c00 	.word	0x40012c00
 8005188:	40000400 	.word	0x40000400
 800518c:	40014000 	.word	0x40014000
 8005190:	40014400 	.word	0x40014400
 8005194:	40014800 	.word	0x40014800

08005198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	6a1b      	ldr	r3, [r3, #32]
 80051a6:	f023 0201 	bic.w	r2, r3, #1
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
 80051b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	685b      	ldr	r3, [r3, #4]
 80051b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	699b      	ldr	r3, [r3, #24]
 80051be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f023 0303 	bic.w	r3, r3, #3
 80051d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	68fa      	ldr	r2, [r7, #12]
 80051da:	4313      	orrs	r3, r2
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	f023 0302 	bic.w	r3, r3, #2
 80051e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80051e6:	683b      	ldr	r3, [r7, #0]
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_OC1_SetConfig+0xfc>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d00b      	beq.n	8005210 <TIM_OC1_SetConfig+0x78>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_OC1_SetConfig+0x100>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d007      	beq.n	8005210 <TIM_OC1_SetConfig+0x78>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a26      	ldr	r2, [pc, #152]	; (800529c <TIM_OC1_SetConfig+0x104>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d003      	beq.n	8005210 <TIM_OC1_SetConfig+0x78>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a25      	ldr	r2, [pc, #148]	; (80052a0 <TIM_OC1_SetConfig+0x108>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d10c      	bne.n	800522a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	f023 0308 	bic.w	r3, r3, #8
 8005216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	697a      	ldr	r2, [r7, #20]
 800521e:	4313      	orrs	r3, r2
 8005220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f023 0304 	bic.w	r3, r3, #4
 8005228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a19      	ldr	r2, [pc, #100]	; (8005294 <TIM_OC1_SetConfig+0xfc>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d00b      	beq.n	800524a <TIM_OC1_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a18      	ldr	r2, [pc, #96]	; (8005298 <TIM_OC1_SetConfig+0x100>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d007      	beq.n	800524a <TIM_OC1_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a17      	ldr	r2, [pc, #92]	; (800529c <TIM_OC1_SetConfig+0x104>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d003      	beq.n	800524a <TIM_OC1_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a16      	ldr	r2, [pc, #88]	; (80052a0 <TIM_OC1_SetConfig+0x108>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d111      	bne.n	800526e <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800524a:	693b      	ldr	r3, [r7, #16]
 800524c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005250:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005258:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	695b      	ldr	r3, [r3, #20]
 800525e:	693a      	ldr	r2, [r7, #16]
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	699b      	ldr	r3, [r3, #24]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	4313      	orrs	r3, r2
 800526c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	697a      	ldr	r2, [r7, #20]
 8005286:	621a      	str	r2, [r3, #32]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40014000 	.word	0x40014000
 800529c:	40014400 	.word	0x40014400
 80052a0:	40014800 	.word	0x40014800

080052a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b087      	sub	sp, #28
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
 80052ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a1b      	ldr	r3, [r3, #32]
 80052b2:	f023 0210 	bic.w	r2, r3, #16
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	685b      	ldr	r3, [r3, #4]
 80052c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	699b      	ldr	r3, [r3, #24]
 80052ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80052d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80052d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	021b      	lsls	r3, r3, #8
 80052e6:	68fa      	ldr	r2, [r7, #12]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	697a      	ldr	r2, [r7, #20]
 80052fc:	4313      	orrs	r3, r2
 80052fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a24      	ldr	r2, [pc, #144]	; (8005394 <TIM_OC2_SetConfig+0xf0>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d10d      	bne.n	8005324 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800530e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	011b      	lsls	r3, r3, #4
 8005316:	697a      	ldr	r2, [r7, #20]
 8005318:	4313      	orrs	r3, r2
 800531a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005322:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <TIM_OC2_SetConfig+0xf0>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d00b      	beq.n	8005344 <TIM_OC2_SetConfig+0xa0>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	4a1a      	ldr	r2, [pc, #104]	; (8005398 <TIM_OC2_SetConfig+0xf4>)
 8005330:	4293      	cmp	r3, r2
 8005332:	d007      	beq.n	8005344 <TIM_OC2_SetConfig+0xa0>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a19      	ldr	r2, [pc, #100]	; (800539c <TIM_OC2_SetConfig+0xf8>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d003      	beq.n	8005344 <TIM_OC2_SetConfig+0xa0>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <TIM_OC2_SetConfig+0xfc>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d113      	bne.n	800536c <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800534a:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005352:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	695b      	ldr	r3, [r3, #20]
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	693a      	ldr	r2, [r7, #16]
 800535c:	4313      	orrs	r3, r2
 800535e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	693a      	ldr	r2, [r7, #16]
 8005368:	4313      	orrs	r3, r2
 800536a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	68fa      	ldr	r2, [r7, #12]
 8005376:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	685a      	ldr	r2, [r3, #4]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	697a      	ldr	r2, [r7, #20]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	bf00      	nop
 8005388:	371c      	adds	r7, #28
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	40012c00 	.word	0x40012c00
 8005398:	40014000 	.word	0x40014000
 800539c:	40014400 	.word	0x40014400
 80053a0:	40014800 	.word	0x40014800

080053a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b087      	sub	sp, #28
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	69db      	ldr	r3, [r3, #28]
 80053ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80053d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0303 	bic.w	r3, r3, #3
 80053de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	68fa      	ldr	r2, [r7, #12]
 80053e6:	4313      	orrs	r3, r2
 80053e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80053ea:	697b      	ldr	r3, [r7, #20]
 80053ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80053f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	021b      	lsls	r3, r3, #8
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a23      	ldr	r2, [pc, #140]	; (8005490 <TIM_OC3_SetConfig+0xec>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d10d      	bne.n	8005422 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800540c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	021b      	lsls	r3, r3, #8
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005420:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	4a1a      	ldr	r2, [pc, #104]	; (8005490 <TIM_OC3_SetConfig+0xec>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d00b      	beq.n	8005442 <TIM_OC3_SetConfig+0x9e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	4a19      	ldr	r2, [pc, #100]	; (8005494 <TIM_OC3_SetConfig+0xf0>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d007      	beq.n	8005442 <TIM_OC3_SetConfig+0x9e>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	4a18      	ldr	r2, [pc, #96]	; (8005498 <TIM_OC3_SetConfig+0xf4>)
 8005436:	4293      	cmp	r3, r2
 8005438:	d003      	beq.n	8005442 <TIM_OC3_SetConfig+0x9e>
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4a17      	ldr	r2, [pc, #92]	; (800549c <TIM_OC3_SetConfig+0xf8>)
 800543e:	4293      	cmp	r3, r2
 8005440:	d113      	bne.n	800546a <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	693a      	ldr	r2, [r7, #16]
 800545a:	4313      	orrs	r3, r2
 800545c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	699b      	ldr	r3, [r3, #24]
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4313      	orrs	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68fa      	ldr	r2, [r7, #12]
 8005474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	685a      	ldr	r2, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	621a      	str	r2, [r3, #32]
}
 8005484:	bf00      	nop
 8005486:	371c      	adds	r7, #28
 8005488:	46bd      	mov	sp, r7
 800548a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548e:	4770      	bx	lr
 8005490:	40012c00 	.word	0x40012c00
 8005494:	40014000 	.word	0x40014000
 8005498:	40014400 	.word	0x40014400
 800549c:	40014800 	.word	0x40014800

080054a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b087      	sub	sp, #28
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	6078      	str	r0, [r7, #4]
 80054a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a1b      	ldr	r3, [r3, #32]
 80054ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6a1b      	ldr	r3, [r3, #32]
 80054ba:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	69db      	ldr	r3, [r3, #28]
 80054c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80054d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	021b      	lsls	r3, r3, #8
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80054ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	031b      	lsls	r3, r3, #12
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a16      	ldr	r2, [pc, #88]	; (8005558 <TIM_OC4_SetConfig+0xb8>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d00b      	beq.n	800551c <TIM_OC4_SetConfig+0x7c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a15      	ldr	r2, [pc, #84]	; (800555c <TIM_OC4_SetConfig+0xbc>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d007      	beq.n	800551c <TIM_OC4_SetConfig+0x7c>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	4a14      	ldr	r2, [pc, #80]	; (8005560 <TIM_OC4_SetConfig+0xc0>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d003      	beq.n	800551c <TIM_OC4_SetConfig+0x7c>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	4a13      	ldr	r2, [pc, #76]	; (8005564 <TIM_OC4_SetConfig+0xc4>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d109      	bne.n	8005530 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005522:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005524:	683b      	ldr	r3, [r7, #0]
 8005526:	695b      	ldr	r3, [r3, #20]
 8005528:	019b      	lsls	r3, r3, #6
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	4313      	orrs	r3, r2
 800552e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	685a      	ldr	r2, [r3, #4]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40014000 	.word	0x40014000
 8005560:	40014400 	.word	0x40014400
 8005564:	40014800 	.word	0x40014800

08005568 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005568:	b480      	push	{r7}
 800556a:	b087      	sub	sp, #28
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a1b      	ldr	r3, [r3, #32]
 8005576:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6a1b      	ldr	r3, [r3, #32]
 8005582:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005596:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800559a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	4313      	orrs	r3, r2
 80055a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80055ac:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	041b      	lsls	r3, r3, #16
 80055b4:	693a      	ldr	r2, [r7, #16]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <TIM_OC5_SetConfig+0xac>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d00b      	beq.n	80055da <TIM_OC5_SetConfig+0x72>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a14      	ldr	r2, [pc, #80]	; (8005618 <TIM_OC5_SetConfig+0xb0>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d007      	beq.n	80055da <TIM_OC5_SetConfig+0x72>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	4a13      	ldr	r2, [pc, #76]	; (800561c <TIM_OC5_SetConfig+0xb4>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d003      	beq.n	80055da <TIM_OC5_SetConfig+0x72>
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	4a12      	ldr	r2, [pc, #72]	; (8005620 <TIM_OC5_SetConfig+0xb8>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d109      	bne.n	80055ee <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055e0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80055e2:	683b      	ldr	r3, [r7, #0]
 80055e4:	695b      	ldr	r3, [r3, #20]
 80055e6:	021b      	lsls	r3, r3, #8
 80055e8:	697a      	ldr	r2, [r7, #20]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	68fa      	ldr	r2, [r7, #12]
 80055f8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	693a      	ldr	r2, [r7, #16]
 8005606:	621a      	str	r2, [r3, #32]
}
 8005608:	bf00      	nop
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr
 8005614:	40012c00 	.word	0x40012c00
 8005618:	40014000 	.word	0x40014000
 800561c:	40014400 	.word	0x40014400
 8005620:	40014800 	.word	0x40014800

08005624 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005624:	b480      	push	{r7}
 8005626:	b087      	sub	sp, #28
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a1b      	ldr	r3, [r3, #32]
 8005632:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a1b      	ldr	r3, [r3, #32]
 800563e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005652:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005656:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800566a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	051b      	lsls	r3, r3, #20
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a16      	ldr	r2, [pc, #88]	; (80056d4 <TIM_OC6_SetConfig+0xb0>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_OC6_SetConfig+0x74>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a15      	ldr	r2, [pc, #84]	; (80056d8 <TIM_OC6_SetConfig+0xb4>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_OC6_SetConfig+0x74>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a14      	ldr	r2, [pc, #80]	; (80056dc <TIM_OC6_SetConfig+0xb8>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_OC6_SetConfig+0x74>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a13      	ldr	r2, [pc, #76]	; (80056e0 <TIM_OC6_SetConfig+0xbc>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d109      	bne.n	80056ac <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800569e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	695b      	ldr	r3, [r3, #20]
 80056a4:	029b      	lsls	r3, r3, #10
 80056a6:	697a      	ldr	r2, [r7, #20]
 80056a8:	4313      	orrs	r3, r2
 80056aa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	68fa      	ldr	r2, [r7, #12]
 80056b6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	685a      	ldr	r2, [r3, #4]
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	693a      	ldr	r2, [r7, #16]
 80056c4:	621a      	str	r2, [r3, #32]
}
 80056c6:	bf00      	nop
 80056c8:	371c      	adds	r7, #28
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr
 80056d2:	bf00      	nop
 80056d4:	40012c00 	.word	0x40012c00
 80056d8:	40014000 	.word	0x40014000
 80056dc:	40014400 	.word	0x40014400
 80056e0:	40014800 	.word	0x40014800

080056e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b087      	sub	sp, #28
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	6a1b      	ldr	r3, [r3, #32]
 80056f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6a1b      	ldr	r3, [r3, #32]
 80056fa:	f023 0201 	bic.w	r2, r3, #1
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	699b      	ldr	r3, [r3, #24]
 8005706:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005708:	693b      	ldr	r3, [r7, #16]
 800570a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800570e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	011b      	lsls	r3, r3, #4
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	f023 030a 	bic.w	r3, r3, #10
 8005720:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	4313      	orrs	r3, r2
 8005728:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	621a      	str	r2, [r3, #32]
}
 8005736:	bf00      	nop
 8005738:	371c      	adds	r7, #28
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr

08005742 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005742:	b480      	push	{r7}
 8005744:	b087      	sub	sp, #28
 8005746:	af00      	add	r7, sp, #0
 8005748:	60f8      	str	r0, [r7, #12]
 800574a:	60b9      	str	r1, [r7, #8]
 800574c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	f023 0210 	bic.w	r2, r3, #16
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	699b      	ldr	r3, [r3, #24]
 800575e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6a1b      	ldr	r3, [r3, #32]
 8005764:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800576c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	031b      	lsls	r3, r3, #12
 8005772:	697a      	ldr	r2, [r7, #20]
 8005774:	4313      	orrs	r3, r2
 8005776:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800577e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	693a      	ldr	r2, [r7, #16]
 8005786:	4313      	orrs	r3, r2
 8005788:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	697a      	ldr	r2, [r7, #20]
 800578e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	693a      	ldr	r2, [r7, #16]
 8005794:	621a      	str	r2, [r3, #32]
}
 8005796:	bf00      	nop
 8005798:	371c      	adds	r7, #28
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr

080057a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057a2:	b480      	push	{r7}
 80057a4:	b085      	sub	sp, #20
 80057a6:	af00      	add	r7, sp, #0
 80057a8:	6078      	str	r0, [r7, #4]
 80057aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4313      	orrs	r3, r2
 80057c0:	f043 0307 	orr.w	r3, r3, #7
 80057c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	609a      	str	r2, [r3, #8]
}
 80057cc:	bf00      	nop
 80057ce:	3714      	adds	r7, #20
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057d8:	b480      	push	{r7}
 80057da:	b087      	sub	sp, #28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	021a      	lsls	r2, r3, #8
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	431a      	orrs	r2, r3
 80057fc:	68bb      	ldr	r3, [r7, #8]
 80057fe:	4313      	orrs	r3, r2
 8005800:	697a      	ldr	r2, [r7, #20]
 8005802:	4313      	orrs	r3, r2
 8005804:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	697a      	ldr	r2, [r7, #20]
 800580a:	609a      	str	r2, [r3, #8]
}
 800580c:	bf00      	nop
 800580e:	371c      	adds	r7, #28
 8005810:	46bd      	mov	sp, r7
 8005812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005816:	4770      	bx	lr

08005818 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005818:	b480      	push	{r7}
 800581a:	b087      	sub	sp, #28
 800581c:	af00      	add	r7, sp, #0
 800581e:	60f8      	str	r0, [r7, #12]
 8005820:	60b9      	str	r1, [r7, #8]
 8005822:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	f003 031f 	and.w	r3, r3, #31
 800582a:	2201      	movs	r2, #1
 800582c:	fa02 f303 	lsl.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6a1a      	ldr	r2, [r3, #32]
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	43db      	mvns	r3, r3
 800583a:	401a      	ands	r2, r3
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a1a      	ldr	r2, [r3, #32]
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f003 031f 	and.w	r3, r3, #31
 800584a:	6879      	ldr	r1, [r7, #4]
 800584c:	fa01 f303 	lsl.w	r3, r1, r3
 8005850:	431a      	orrs	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	621a      	str	r2, [r3, #32]
}
 8005856:	bf00      	nop
 8005858:	371c      	adds	r7, #28
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005864:	b480      	push	{r7}
 8005866:	b085      	sub	sp, #20
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
 800586c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005874:	2b01      	cmp	r3, #1
 8005876:	d101      	bne.n	800587c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005878:	2302      	movs	r3, #2
 800587a:	e054      	b.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2201      	movs	r2, #1
 8005880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2202      	movs	r2, #2
 8005888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	689b      	ldr	r3, [r3, #8]
 800589a:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a24      	ldr	r2, [pc, #144]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058a2:	4293      	cmp	r3, r2
 80058a4:	d108      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058ac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68fa      	ldr	r2, [r7, #12]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4313      	orrs	r3, r2
 80058c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4a17      	ldr	r2, [pc, #92]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d00e      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d009      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4a13      	ldr	r2, [pc, #76]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d004      	beq.n	80058fa <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a11      	ldr	r2, [pc, #68]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d10c      	bne.n	8005914 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005900:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	68ba      	ldr	r2, [r7, #8]
 8005908:	4313      	orrs	r3, r2
 800590a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	68ba      	ldr	r2, [r7, #8]
 8005912:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2201      	movs	r2, #1
 8005918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005924:	2300      	movs	r3, #0
}
 8005926:	4618      	mov	r0, r3
 8005928:	3714      	adds	r7, #20
 800592a:	46bd      	mov	sp, r7
 800592c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005930:	4770      	bx	lr
 8005932:	bf00      	nop
 8005934:	40012c00 	.word	0x40012c00
 8005938:	40000400 	.word	0x40000400
 800593c:	40014000 	.word	0x40014000

08005940 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005940:	b480      	push	{r7}
 8005942:	b085      	sub	sp, #20
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
 8005948:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800594a:	2300      	movs	r3, #0
 800594c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005954:	2b01      	cmp	r3, #1
 8005956:	d101      	bne.n	800595c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005958:	2302      	movs	r3, #2
 800595a:	e060      	b.n	8005a1e <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	68db      	ldr	r3, [r3, #12]
 800596e:	4313      	orrs	r3, r2
 8005970:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	4313      	orrs	r3, r2
 800597e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	4313      	orrs	r3, r2
 800598c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	4313      	orrs	r3, r2
 800599a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	4313      	orrs	r3, r2
 80059a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c2:	4313      	orrs	r3, r2
 80059c4:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	699b      	ldr	r3, [r3, #24]
 80059d0:	041b      	lsls	r3, r3, #16
 80059d2:	4313      	orrs	r3, r2
 80059d4:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4a14      	ldr	r2, [pc, #80]	; (8005a2c <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80059dc:	4293      	cmp	r3, r2
 80059de:	d115      	bne.n	8005a0c <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ea:	051b      	lsls	r3, r3, #20
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	69db      	ldr	r3, [r3, #28]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	6a1b      	ldr	r3, [r3, #32]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	68fa      	ldr	r2, [r7, #12]
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3714      	adds	r7, #20
 8005a22:	46bd      	mov	sp, r7
 8005a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a28:	4770      	bx	lr
 8005a2a:	bf00      	nop
 8005a2c:	40012c00 	.word	0x40012c00

08005a30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b082      	sub	sp, #8
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d101      	bne.n	8005a42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a3e:	2301      	movs	r3, #1
 8005a40:	e040      	b.n	8005ac4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fb ffc0 	bl	80019d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2224      	movs	r2, #36	; 0x24
 8005a5c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	681a      	ldr	r2, [r3, #0]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f022 0201 	bic.w	r2, r2, #1
 8005a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f82c 	bl	8005acc <UART_SetConfig>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b01      	cmp	r3, #1
 8005a78:	d101      	bne.n	8005a7e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e022      	b.n	8005ac4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d002      	beq.n	8005a8c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f956 	bl	8005d38 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	685a      	ldr	r2, [r3, #4]
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	689a      	ldr	r2, [r3, #8]
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 f9dd 	bl	8005e7c <UART_CheckIdleState>
 8005ac2:	4603      	mov	r3, r0
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3708      	adds	r7, #8
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	bd80      	pop	{r7, pc}

08005acc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b088      	sub	sp, #32
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689a      	ldr	r2, [r3, #8]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	431a      	orrs	r2, r3
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	695b      	ldr	r3, [r3, #20]
 8005ae6:	431a      	orrs	r2, r3
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	4b8a      	ldr	r3, [pc, #552]	; (8005d20 <UART_SetConfig+0x254>)
 8005af8:	4013      	ands	r3, r2
 8005afa:	687a      	ldr	r2, [r7, #4]
 8005afc:	6812      	ldr	r2, [r2, #0]
 8005afe:	6979      	ldr	r1, [r7, #20]
 8005b00:	430b      	orrs	r3, r1
 8005b02:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	68da      	ldr	r2, [r3, #12]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	430a      	orrs	r2, r1
 8005b18:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	699b      	ldr	r3, [r3, #24]
 8005b1e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a1b      	ldr	r3, [r3, #32]
 8005b24:	697a      	ldr	r2, [r7, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	697a      	ldr	r2, [r7, #20]
 8005b3a:	430a      	orrs	r2, r1
 8005b3c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	4a78      	ldr	r2, [pc, #480]	; (8005d24 <UART_SetConfig+0x258>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d120      	bne.n	8005b8a <UART_SetConfig+0xbe>
 8005b48:	4b77      	ldr	r3, [pc, #476]	; (8005d28 <UART_SetConfig+0x25c>)
 8005b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b4c:	f003 0303 	and.w	r3, r3, #3
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	d817      	bhi.n	8005b84 <UART_SetConfig+0xb8>
 8005b54:	a201      	add	r2, pc, #4	; (adr r2, 8005b5c <UART_SetConfig+0x90>)
 8005b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5a:	bf00      	nop
 8005b5c:	08005b6d 	.word	0x08005b6d
 8005b60:	08005b79 	.word	0x08005b79
 8005b64:	08005b7f 	.word	0x08005b7f
 8005b68:	08005b73 	.word	0x08005b73
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	77fb      	strb	r3, [r7, #31]
 8005b70:	e01d      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b72:	2302      	movs	r3, #2
 8005b74:	77fb      	strb	r3, [r7, #31]
 8005b76:	e01a      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b78:	2304      	movs	r3, #4
 8005b7a:	77fb      	strb	r3, [r7, #31]
 8005b7c:	e017      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b7e:	2308      	movs	r3, #8
 8005b80:	77fb      	strb	r3, [r7, #31]
 8005b82:	e014      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b84:	2310      	movs	r3, #16
 8005b86:	77fb      	strb	r3, [r7, #31]
 8005b88:	e011      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	4a67      	ldr	r2, [pc, #412]	; (8005d2c <UART_SetConfig+0x260>)
 8005b90:	4293      	cmp	r3, r2
 8005b92:	d102      	bne.n	8005b9a <UART_SetConfig+0xce>
 8005b94:	2300      	movs	r3, #0
 8005b96:	77fb      	strb	r3, [r7, #31]
 8005b98:	e009      	b.n	8005bae <UART_SetConfig+0xe2>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	4a64      	ldr	r2, [pc, #400]	; (8005d30 <UART_SetConfig+0x264>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d102      	bne.n	8005baa <UART_SetConfig+0xde>
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	77fb      	strb	r3, [r7, #31]
 8005ba8:	e001      	b.n	8005bae <UART_SetConfig+0xe2>
 8005baa:	2310      	movs	r3, #16
 8005bac:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	69db      	ldr	r3, [r3, #28]
 8005bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb6:	d15b      	bne.n	8005c70 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8005bb8:	7ffb      	ldrb	r3, [r7, #31]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d827      	bhi.n	8005c0e <UART_SetConfig+0x142>
 8005bbe:	a201      	add	r2, pc, #4	; (adr r2, 8005bc4 <UART_SetConfig+0xf8>)
 8005bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc4:	08005be9 	.word	0x08005be9
 8005bc8:	08005bf1 	.word	0x08005bf1
 8005bcc:	08005bf9 	.word	0x08005bf9
 8005bd0:	08005c0f 	.word	0x08005c0f
 8005bd4:	08005bff 	.word	0x08005bff
 8005bd8:	08005c0f 	.word	0x08005c0f
 8005bdc:	08005c0f 	.word	0x08005c0f
 8005be0:	08005c0f 	.word	0x08005c0f
 8005be4:	08005c07 	.word	0x08005c07
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005be8:	f7fe fd1c 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005bec:	61b8      	str	r0, [r7, #24]
        break;
 8005bee:	e013      	b.n	8005c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005bf0:	f7fe fd3a 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8005bf4:	61b8      	str	r0, [r7, #24]
        break;
 8005bf6:	e00f      	b.n	8005c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005bf8:	4b4e      	ldr	r3, [pc, #312]	; (8005d34 <UART_SetConfig+0x268>)
 8005bfa:	61bb      	str	r3, [r7, #24]
        break;
 8005bfc:	e00c      	b.n	8005c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005bfe:	f7fe fc9b 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 8005c02:	61b8      	str	r0, [r7, #24]
        break;
 8005c04:	e008      	b.n	8005c18 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005c0a:	61bb      	str	r3, [r7, #24]
        break;
 8005c0c:	e004      	b.n	8005c18 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005c0e:	2300      	movs	r3, #0
 8005c10:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	77bb      	strb	r3, [r7, #30]
        break;
 8005c16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d074      	beq.n	8005d08 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005c1e:	69bb      	ldr	r3, [r7, #24]
 8005c20:	005a      	lsls	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	085b      	lsrs	r3, r3, #1
 8005c28:	441a      	add	r2, r3
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	2b0f      	cmp	r3, #15
 8005c3a:	d916      	bls.n	8005c6a <UART_SetConfig+0x19e>
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c42:	d212      	bcs.n	8005c6a <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005c44:	693b      	ldr	r3, [r7, #16]
 8005c46:	b29b      	uxth	r3, r3
 8005c48:	f023 030f 	bic.w	r3, r3, #15
 8005c4c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	085b      	lsrs	r3, r3, #1
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	f003 0307 	and.w	r3, r3, #7
 8005c58:	b29a      	uxth	r2, r3
 8005c5a:	89fb      	ldrh	r3, [r7, #14]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	89fa      	ldrh	r2, [r7, #14]
 8005c66:	60da      	str	r2, [r3, #12]
 8005c68:	e04e      	b.n	8005d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	77bb      	strb	r3, [r7, #30]
 8005c6e:	e04b      	b.n	8005d08 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005c70:	7ffb      	ldrb	r3, [r7, #31]
 8005c72:	2b08      	cmp	r3, #8
 8005c74:	d827      	bhi.n	8005cc6 <UART_SetConfig+0x1fa>
 8005c76:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <UART_SetConfig+0x1b0>)
 8005c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7c:	08005ca1 	.word	0x08005ca1
 8005c80:	08005ca9 	.word	0x08005ca9
 8005c84:	08005cb1 	.word	0x08005cb1
 8005c88:	08005cc7 	.word	0x08005cc7
 8005c8c:	08005cb7 	.word	0x08005cb7
 8005c90:	08005cc7 	.word	0x08005cc7
 8005c94:	08005cc7 	.word	0x08005cc7
 8005c98:	08005cc7 	.word	0x08005cc7
 8005c9c:	08005cbf 	.word	0x08005cbf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005ca0:	f7fe fcc0 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8005ca4:	61b8      	str	r0, [r7, #24]
        break;
 8005ca6:	e013      	b.n	8005cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005ca8:	f7fe fcde 	bl	8004668 <HAL_RCC_GetPCLK2Freq>
 8005cac:	61b8      	str	r0, [r7, #24]
        break;
 8005cae:	e00f      	b.n	8005cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005cb0:	4b20      	ldr	r3, [pc, #128]	; (8005d34 <UART_SetConfig+0x268>)
 8005cb2:	61bb      	str	r3, [r7, #24]
        break;
 8005cb4:	e00c      	b.n	8005cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005cb6:	f7fe fc3f 	bl	8004538 <HAL_RCC_GetSysClockFreq>
 8005cba:	61b8      	str	r0, [r7, #24]
        break;
 8005cbc:	e008      	b.n	8005cd0 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005cc2:	61bb      	str	r3, [r7, #24]
        break;
 8005cc4:	e004      	b.n	8005cd0 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	77bb      	strb	r3, [r7, #30]
        break;
 8005cce:	bf00      	nop
    }

    if (pclk != 0U)
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d018      	beq.n	8005d08 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	085a      	lsrs	r2, r3, #1
 8005cdc:	69bb      	ldr	r3, [r7, #24]
 8005cde:	441a      	add	r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	2b0f      	cmp	r3, #15
 8005cf0:	d908      	bls.n	8005d04 <UART_SetConfig+0x238>
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cf8:	d204      	bcs.n	8005d04 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	60da      	str	r2, [r3, #12]
 8005d02:	e001      	b.n	8005d08 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005d04:	2301      	movs	r3, #1
 8005d06:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2200      	movs	r2, #0
 8005d12:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005d14:	7fbb      	ldrb	r3, [r7, #30]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3720      	adds	r7, #32
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}
 8005d1e:	bf00      	nop
 8005d20:	efff69f3 	.word	0xefff69f3
 8005d24:	40013800 	.word	0x40013800
 8005d28:	40021000 	.word	0x40021000
 8005d2c:	40004400 	.word	0x40004400
 8005d30:	40004800 	.word	0x40004800
 8005d34:	007a1200 	.word	0x007a1200

08005d38 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b083      	sub	sp, #12
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	f003 0301 	and.w	r3, r3, #1
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00a      	beq.n	8005d62 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	430a      	orrs	r2, r1
 8005d60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00a      	beq.n	8005d84 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	430a      	orrs	r2, r1
 8005d82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d88:	f003 0304 	and.w	r3, r3, #4
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d00a      	beq.n	8005da6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	430a      	orrs	r2, r1
 8005da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00a      	beq.n	8005dc8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	685b      	ldr	r3, [r3, #4]
 8005db8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	430a      	orrs	r2, r1
 8005dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dcc:	f003 0310 	and.w	r3, r3, #16
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00a      	beq.n	8005dea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	430a      	orrs	r2, r1
 8005de8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dee:	f003 0320 	and.w	r3, r3, #32
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d00a      	beq.n	8005e0c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	689b      	ldr	r3, [r3, #8]
 8005dfc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	430a      	orrs	r2, r1
 8005e0a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d01a      	beq.n	8005e4e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	430a      	orrs	r2, r1
 8005e2c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e36:	d10a      	bne.n	8005e4e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	430a      	orrs	r2, r1
 8005e6e:	605a      	str	r2, [r3, #4]
  }
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b086      	sub	sp, #24
 8005e80:	af02      	add	r7, sp, #8
 8005e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005e8c:	f7fb ff6e 	bl	8001d6c <HAL_GetTick>
 8005e90:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f003 0308 	and.w	r3, r3, #8
 8005e9c:	2b08      	cmp	r3, #8
 8005e9e:	d10e      	bne.n	8005ebe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ea0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ea4:	9300      	str	r3, [sp, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f82d 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005eb4:	4603      	mov	r3, r0
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d001      	beq.n	8005ebe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005eba:	2303      	movs	r3, #3
 8005ebc:	e023      	b.n	8005f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0304 	and.w	r3, r3, #4
 8005ec8:	2b04      	cmp	r3, #4
 8005eca:	d10e      	bne.n	8005eea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ed0:	9300      	str	r3, [sp, #0]
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 f817 	bl	8005f0e <UART_WaitOnFlagUntilTimeout>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d001      	beq.n	8005eea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ee6:	2303      	movs	r3, #3
 8005ee8:	e00d      	b.n	8005f06 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	2220      	movs	r2, #32
 8005eee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2220      	movs	r2, #32
 8005ef4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005f04:	2300      	movs	r3, #0
}
 8005f06:	4618      	mov	r0, r3
 8005f08:	3710      	adds	r7, #16
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	bd80      	pop	{r7, pc}

08005f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005f0e:	b580      	push	{r7, lr}
 8005f10:	b09c      	sub	sp, #112	; 0x70
 8005f12:	af00      	add	r7, sp, #0
 8005f14:	60f8      	str	r0, [r7, #12]
 8005f16:	60b9      	str	r1, [r7, #8]
 8005f18:	603b      	str	r3, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f1e:	e0a5      	b.n	800606c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	f000 80a1 	beq.w	800606c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f2a:	f7fb ff1f 	bl	8001d6c <HAL_GetTick>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	1ad3      	subs	r3, r2, r3
 8005f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005f36:	429a      	cmp	r2, r3
 8005f38:	d302      	bcc.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8005f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d13e      	bne.n	8005fbe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f48:	e853 3f00 	ldrex	r3, [r3]
 8005f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005f54:	667b      	str	r3, [r7, #100]	; 0x64
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	461a      	mov	r2, r3
 8005f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f60:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005f66:	e841 2300 	strex	r3, r2, [r1]
 8005f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1e6      	bne.n	8005f40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	3308      	adds	r3, #8
 8005f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005f7c:	e853 3f00 	ldrex	r3, [r3]
 8005f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f84:	f023 0301 	bic.w	r3, r3, #1
 8005f88:	663b      	str	r3, [r7, #96]	; 0x60
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3308      	adds	r3, #8
 8005f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8005f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005f9a:	e841 2300 	strex	r3, r2, [r1]
 8005f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d1e5      	bne.n	8005f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2220      	movs	r2, #32
 8005faa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	2220      	movs	r2, #32
 8005fb0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005fba:	2303      	movs	r3, #3
 8005fbc:	e067      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f003 0304 	and.w	r3, r3, #4
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d04f      	beq.n	800606c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fda:	d147      	bne.n	800606c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fe4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fee:	e853 3f00 	ldrex	r3, [r3]
 8005ff2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ffa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	461a      	mov	r2, r3
 8006002:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006004:	637b      	str	r3, [r7, #52]	; 0x34
 8006006:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006008:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800600a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800600c:	e841 2300 	strex	r3, r2, [r1]
 8006010:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006014:	2b00      	cmp	r3, #0
 8006016:	d1e6      	bne.n	8005fe6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	3308      	adds	r3, #8
 800601e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006020:	697b      	ldr	r3, [r7, #20]
 8006022:	e853 3f00 	ldrex	r3, [r3]
 8006026:	613b      	str	r3, [r7, #16]
   return(result);
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	f023 0301 	bic.w	r3, r3, #1
 800602e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	3308      	adds	r3, #8
 8006036:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006038:	623a      	str	r2, [r7, #32]
 800603a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800603c:	69f9      	ldr	r1, [r7, #28]
 800603e:	6a3a      	ldr	r2, [r7, #32]
 8006040:	e841 2300 	strex	r3, r2, [r1]
 8006044:	61bb      	str	r3, [r7, #24]
   return(result);
 8006046:	69bb      	ldr	r3, [r7, #24]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1e5      	bne.n	8006018 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2220      	movs	r2, #32
 8006050:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2220      	movs	r2, #32
 800605c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006068:	2303      	movs	r3, #3
 800606a:	e010      	b.n	800608e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	69da      	ldr	r2, [r3, #28]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	4013      	ands	r3, r2
 8006076:	68ba      	ldr	r2, [r7, #8]
 8006078:	429a      	cmp	r2, r3
 800607a:	bf0c      	ite	eq
 800607c:	2301      	moveq	r3, #1
 800607e:	2300      	movne	r3, #0
 8006080:	b2db      	uxtb	r3, r3
 8006082:	461a      	mov	r2, r3
 8006084:	79fb      	ldrb	r3, [r7, #7]
 8006086:	429a      	cmp	r2, r3
 8006088:	f43f af4a 	beq.w	8005f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	3770      	adds	r7, #112	; 0x70
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}
	...

08006098 <__errno>:
 8006098:	4b01      	ldr	r3, [pc, #4]	; (80060a0 <__errno+0x8>)
 800609a:	6818      	ldr	r0, [r3, #0]
 800609c:	4770      	bx	lr
 800609e:	bf00      	nop
 80060a0:	20000048 	.word	0x20000048

080060a4 <__libc_init_array>:
 80060a4:	b570      	push	{r4, r5, r6, lr}
 80060a6:	4d0d      	ldr	r5, [pc, #52]	; (80060dc <__libc_init_array+0x38>)
 80060a8:	4c0d      	ldr	r4, [pc, #52]	; (80060e0 <__libc_init_array+0x3c>)
 80060aa:	1b64      	subs	r4, r4, r5
 80060ac:	10a4      	asrs	r4, r4, #2
 80060ae:	2600      	movs	r6, #0
 80060b0:	42a6      	cmp	r6, r4
 80060b2:	d109      	bne.n	80060c8 <__libc_init_array+0x24>
 80060b4:	4d0b      	ldr	r5, [pc, #44]	; (80060e4 <__libc_init_array+0x40>)
 80060b6:	4c0c      	ldr	r4, [pc, #48]	; (80060e8 <__libc_init_array+0x44>)
 80060b8:	f005 fec4 	bl	800be44 <_init>
 80060bc:	1b64      	subs	r4, r4, r5
 80060be:	10a4      	asrs	r4, r4, #2
 80060c0:	2600      	movs	r6, #0
 80060c2:	42a6      	cmp	r6, r4
 80060c4:	d105      	bne.n	80060d2 <__libc_init_array+0x2e>
 80060c6:	bd70      	pop	{r4, r5, r6, pc}
 80060c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060cc:	4798      	blx	r3
 80060ce:	3601      	adds	r6, #1
 80060d0:	e7ee      	b.n	80060b0 <__libc_init_array+0xc>
 80060d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060d6:	4798      	blx	r3
 80060d8:	3601      	adds	r6, #1
 80060da:	e7f2      	b.n	80060c2 <__libc_init_array+0x1e>
 80060dc:	0800c744 	.word	0x0800c744
 80060e0:	0800c744 	.word	0x0800c744
 80060e4:	0800c744 	.word	0x0800c744
 80060e8:	0800c748 	.word	0x0800c748

080060ec <memset>:
 80060ec:	4402      	add	r2, r0
 80060ee:	4603      	mov	r3, r0
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d100      	bne.n	80060f6 <memset+0xa>
 80060f4:	4770      	bx	lr
 80060f6:	f803 1b01 	strb.w	r1, [r3], #1
 80060fa:	e7f9      	b.n	80060f0 <memset+0x4>

080060fc <__cvt>:
 80060fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006100:	ec55 4b10 	vmov	r4, r5, d0
 8006104:	2d00      	cmp	r5, #0
 8006106:	460e      	mov	r6, r1
 8006108:	4619      	mov	r1, r3
 800610a:	462b      	mov	r3, r5
 800610c:	bfbb      	ittet	lt
 800610e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8006112:	461d      	movlt	r5, r3
 8006114:	2300      	movge	r3, #0
 8006116:	232d      	movlt	r3, #45	; 0x2d
 8006118:	700b      	strb	r3, [r1, #0]
 800611a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800611c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8006120:	4691      	mov	r9, r2
 8006122:	f023 0820 	bic.w	r8, r3, #32
 8006126:	bfbc      	itt	lt
 8006128:	4622      	movlt	r2, r4
 800612a:	4614      	movlt	r4, r2
 800612c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006130:	d005      	beq.n	800613e <__cvt+0x42>
 8006132:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8006136:	d100      	bne.n	800613a <__cvt+0x3e>
 8006138:	3601      	adds	r6, #1
 800613a:	2102      	movs	r1, #2
 800613c:	e000      	b.n	8006140 <__cvt+0x44>
 800613e:	2103      	movs	r1, #3
 8006140:	ab03      	add	r3, sp, #12
 8006142:	9301      	str	r3, [sp, #4]
 8006144:	ab02      	add	r3, sp, #8
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	ec45 4b10 	vmov	d0, r4, r5
 800614c:	4653      	mov	r3, sl
 800614e:	4632      	mov	r2, r6
 8006150:	f001 fdae 	bl	8007cb0 <_dtoa_r>
 8006154:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8006158:	4607      	mov	r7, r0
 800615a:	d102      	bne.n	8006162 <__cvt+0x66>
 800615c:	f019 0f01 	tst.w	r9, #1
 8006160:	d022      	beq.n	80061a8 <__cvt+0xac>
 8006162:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8006166:	eb07 0906 	add.w	r9, r7, r6
 800616a:	d110      	bne.n	800618e <__cvt+0x92>
 800616c:	783b      	ldrb	r3, [r7, #0]
 800616e:	2b30      	cmp	r3, #48	; 0x30
 8006170:	d10a      	bne.n	8006188 <__cvt+0x8c>
 8006172:	2200      	movs	r2, #0
 8006174:	2300      	movs	r3, #0
 8006176:	4620      	mov	r0, r4
 8006178:	4629      	mov	r1, r5
 800617a:	f7fa fca5 	bl	8000ac8 <__aeabi_dcmpeq>
 800617e:	b918      	cbnz	r0, 8006188 <__cvt+0x8c>
 8006180:	f1c6 0601 	rsb	r6, r6, #1
 8006184:	f8ca 6000 	str.w	r6, [sl]
 8006188:	f8da 3000 	ldr.w	r3, [sl]
 800618c:	4499      	add	r9, r3
 800618e:	2200      	movs	r2, #0
 8006190:	2300      	movs	r3, #0
 8006192:	4620      	mov	r0, r4
 8006194:	4629      	mov	r1, r5
 8006196:	f7fa fc97 	bl	8000ac8 <__aeabi_dcmpeq>
 800619a:	b108      	cbz	r0, 80061a0 <__cvt+0xa4>
 800619c:	f8cd 900c 	str.w	r9, [sp, #12]
 80061a0:	2230      	movs	r2, #48	; 0x30
 80061a2:	9b03      	ldr	r3, [sp, #12]
 80061a4:	454b      	cmp	r3, r9
 80061a6:	d307      	bcc.n	80061b8 <__cvt+0xbc>
 80061a8:	9b03      	ldr	r3, [sp, #12]
 80061aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80061ac:	1bdb      	subs	r3, r3, r7
 80061ae:	4638      	mov	r0, r7
 80061b0:	6013      	str	r3, [r2, #0]
 80061b2:	b004      	add	sp, #16
 80061b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061b8:	1c59      	adds	r1, r3, #1
 80061ba:	9103      	str	r1, [sp, #12]
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e7f0      	b.n	80061a2 <__cvt+0xa6>

080061c0 <__exponent>:
 80061c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80061c2:	4603      	mov	r3, r0
 80061c4:	2900      	cmp	r1, #0
 80061c6:	bfb8      	it	lt
 80061c8:	4249      	neglt	r1, r1
 80061ca:	f803 2b02 	strb.w	r2, [r3], #2
 80061ce:	bfb4      	ite	lt
 80061d0:	222d      	movlt	r2, #45	; 0x2d
 80061d2:	222b      	movge	r2, #43	; 0x2b
 80061d4:	2909      	cmp	r1, #9
 80061d6:	7042      	strb	r2, [r0, #1]
 80061d8:	dd2a      	ble.n	8006230 <__exponent+0x70>
 80061da:	f10d 0407 	add.w	r4, sp, #7
 80061de:	46a4      	mov	ip, r4
 80061e0:	270a      	movs	r7, #10
 80061e2:	46a6      	mov	lr, r4
 80061e4:	460a      	mov	r2, r1
 80061e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80061ea:	fb07 1516 	mls	r5, r7, r6, r1
 80061ee:	3530      	adds	r5, #48	; 0x30
 80061f0:	2a63      	cmp	r2, #99	; 0x63
 80061f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80061f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80061fa:	4631      	mov	r1, r6
 80061fc:	dcf1      	bgt.n	80061e2 <__exponent+0x22>
 80061fe:	3130      	adds	r1, #48	; 0x30
 8006200:	f1ae 0502 	sub.w	r5, lr, #2
 8006204:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006208:	1c44      	adds	r4, r0, #1
 800620a:	4629      	mov	r1, r5
 800620c:	4561      	cmp	r1, ip
 800620e:	d30a      	bcc.n	8006226 <__exponent+0x66>
 8006210:	f10d 0209 	add.w	r2, sp, #9
 8006214:	eba2 020e 	sub.w	r2, r2, lr
 8006218:	4565      	cmp	r5, ip
 800621a:	bf88      	it	hi
 800621c:	2200      	movhi	r2, #0
 800621e:	4413      	add	r3, r2
 8006220:	1a18      	subs	r0, r3, r0
 8006222:	b003      	add	sp, #12
 8006224:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006226:	f811 2b01 	ldrb.w	r2, [r1], #1
 800622a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800622e:	e7ed      	b.n	800620c <__exponent+0x4c>
 8006230:	2330      	movs	r3, #48	; 0x30
 8006232:	3130      	adds	r1, #48	; 0x30
 8006234:	7083      	strb	r3, [r0, #2]
 8006236:	70c1      	strb	r1, [r0, #3]
 8006238:	1d03      	adds	r3, r0, #4
 800623a:	e7f1      	b.n	8006220 <__exponent+0x60>

0800623c <_printf_float>:
 800623c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006240:	ed2d 8b02 	vpush	{d8}
 8006244:	b08d      	sub	sp, #52	; 0x34
 8006246:	460c      	mov	r4, r1
 8006248:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800624c:	4616      	mov	r6, r2
 800624e:	461f      	mov	r7, r3
 8006250:	4605      	mov	r5, r0
 8006252:	f002 fe8b 	bl	8008f6c <_localeconv_r>
 8006256:	f8d0 a000 	ldr.w	sl, [r0]
 800625a:	4650      	mov	r0, sl
 800625c:	f7f9 ffb8 	bl	80001d0 <strlen>
 8006260:	2300      	movs	r3, #0
 8006262:	930a      	str	r3, [sp, #40]	; 0x28
 8006264:	6823      	ldr	r3, [r4, #0]
 8006266:	9305      	str	r3, [sp, #20]
 8006268:	f8d8 3000 	ldr.w	r3, [r8]
 800626c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8006270:	3307      	adds	r3, #7
 8006272:	f023 0307 	bic.w	r3, r3, #7
 8006276:	f103 0208 	add.w	r2, r3, #8
 800627a:	f8c8 2000 	str.w	r2, [r8]
 800627e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006282:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8006286:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800628a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800628e:	9307      	str	r3, [sp, #28]
 8006290:	f8cd 8018 	str.w	r8, [sp, #24]
 8006294:	ee08 0a10 	vmov	s16, r0
 8006298:	4b9f      	ldr	r3, [pc, #636]	; (8006518 <_printf_float+0x2dc>)
 800629a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800629e:	f04f 32ff 	mov.w	r2, #4294967295
 80062a2:	f7fa fc43 	bl	8000b2c <__aeabi_dcmpun>
 80062a6:	bb88      	cbnz	r0, 800630c <_printf_float+0xd0>
 80062a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062ac:	4b9a      	ldr	r3, [pc, #616]	; (8006518 <_printf_float+0x2dc>)
 80062ae:	f04f 32ff 	mov.w	r2, #4294967295
 80062b2:	f7fa fc1d 	bl	8000af0 <__aeabi_dcmple>
 80062b6:	bb48      	cbnz	r0, 800630c <_printf_float+0xd0>
 80062b8:	2200      	movs	r2, #0
 80062ba:	2300      	movs	r3, #0
 80062bc:	4640      	mov	r0, r8
 80062be:	4649      	mov	r1, r9
 80062c0:	f7fa fc0c 	bl	8000adc <__aeabi_dcmplt>
 80062c4:	b110      	cbz	r0, 80062cc <_printf_float+0x90>
 80062c6:	232d      	movs	r3, #45	; 0x2d
 80062c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80062cc:	4b93      	ldr	r3, [pc, #588]	; (800651c <_printf_float+0x2e0>)
 80062ce:	4894      	ldr	r0, [pc, #592]	; (8006520 <_printf_float+0x2e4>)
 80062d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80062d4:	bf94      	ite	ls
 80062d6:	4698      	movls	r8, r3
 80062d8:	4680      	movhi	r8, r0
 80062da:	2303      	movs	r3, #3
 80062dc:	6123      	str	r3, [r4, #16]
 80062de:	9b05      	ldr	r3, [sp, #20]
 80062e0:	f023 0204 	bic.w	r2, r3, #4
 80062e4:	6022      	str	r2, [r4, #0]
 80062e6:	f04f 0900 	mov.w	r9, #0
 80062ea:	9700      	str	r7, [sp, #0]
 80062ec:	4633      	mov	r3, r6
 80062ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80062f0:	4621      	mov	r1, r4
 80062f2:	4628      	mov	r0, r5
 80062f4:	f000 f9d8 	bl	80066a8 <_printf_common>
 80062f8:	3001      	adds	r0, #1
 80062fa:	f040 8090 	bne.w	800641e <_printf_float+0x1e2>
 80062fe:	f04f 30ff 	mov.w	r0, #4294967295
 8006302:	b00d      	add	sp, #52	; 0x34
 8006304:	ecbd 8b02 	vpop	{d8}
 8006308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800630c:	4642      	mov	r2, r8
 800630e:	464b      	mov	r3, r9
 8006310:	4640      	mov	r0, r8
 8006312:	4649      	mov	r1, r9
 8006314:	f7fa fc0a 	bl	8000b2c <__aeabi_dcmpun>
 8006318:	b140      	cbz	r0, 800632c <_printf_float+0xf0>
 800631a:	464b      	mov	r3, r9
 800631c:	2b00      	cmp	r3, #0
 800631e:	bfbc      	itt	lt
 8006320:	232d      	movlt	r3, #45	; 0x2d
 8006322:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006326:	487f      	ldr	r0, [pc, #508]	; (8006524 <_printf_float+0x2e8>)
 8006328:	4b7f      	ldr	r3, [pc, #508]	; (8006528 <_printf_float+0x2ec>)
 800632a:	e7d1      	b.n	80062d0 <_printf_float+0x94>
 800632c:	6863      	ldr	r3, [r4, #4]
 800632e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8006332:	9206      	str	r2, [sp, #24]
 8006334:	1c5a      	adds	r2, r3, #1
 8006336:	d13f      	bne.n	80063b8 <_printf_float+0x17c>
 8006338:	2306      	movs	r3, #6
 800633a:	6063      	str	r3, [r4, #4]
 800633c:	9b05      	ldr	r3, [sp, #20]
 800633e:	6861      	ldr	r1, [r4, #4]
 8006340:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8006344:	2300      	movs	r3, #0
 8006346:	9303      	str	r3, [sp, #12]
 8006348:	ab0a      	add	r3, sp, #40	; 0x28
 800634a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800634e:	ab09      	add	r3, sp, #36	; 0x24
 8006350:	ec49 8b10 	vmov	d0, r8, r9
 8006354:	9300      	str	r3, [sp, #0]
 8006356:	6022      	str	r2, [r4, #0]
 8006358:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800635c:	4628      	mov	r0, r5
 800635e:	f7ff fecd 	bl	80060fc <__cvt>
 8006362:	9b06      	ldr	r3, [sp, #24]
 8006364:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006366:	2b47      	cmp	r3, #71	; 0x47
 8006368:	4680      	mov	r8, r0
 800636a:	d108      	bne.n	800637e <_printf_float+0x142>
 800636c:	1cc8      	adds	r0, r1, #3
 800636e:	db02      	blt.n	8006376 <_printf_float+0x13a>
 8006370:	6863      	ldr	r3, [r4, #4]
 8006372:	4299      	cmp	r1, r3
 8006374:	dd41      	ble.n	80063fa <_printf_float+0x1be>
 8006376:	f1ab 0b02 	sub.w	fp, fp, #2
 800637a:	fa5f fb8b 	uxtb.w	fp, fp
 800637e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006382:	d820      	bhi.n	80063c6 <_printf_float+0x18a>
 8006384:	3901      	subs	r1, #1
 8006386:	465a      	mov	r2, fp
 8006388:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800638c:	9109      	str	r1, [sp, #36]	; 0x24
 800638e:	f7ff ff17 	bl	80061c0 <__exponent>
 8006392:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006394:	1813      	adds	r3, r2, r0
 8006396:	2a01      	cmp	r2, #1
 8006398:	4681      	mov	r9, r0
 800639a:	6123      	str	r3, [r4, #16]
 800639c:	dc02      	bgt.n	80063a4 <_printf_float+0x168>
 800639e:	6822      	ldr	r2, [r4, #0]
 80063a0:	07d2      	lsls	r2, r2, #31
 80063a2:	d501      	bpl.n	80063a8 <_printf_float+0x16c>
 80063a4:	3301      	adds	r3, #1
 80063a6:	6123      	str	r3, [r4, #16]
 80063a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d09c      	beq.n	80062ea <_printf_float+0xae>
 80063b0:	232d      	movs	r3, #45	; 0x2d
 80063b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063b6:	e798      	b.n	80062ea <_printf_float+0xae>
 80063b8:	9a06      	ldr	r2, [sp, #24]
 80063ba:	2a47      	cmp	r2, #71	; 0x47
 80063bc:	d1be      	bne.n	800633c <_printf_float+0x100>
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d1bc      	bne.n	800633c <_printf_float+0x100>
 80063c2:	2301      	movs	r3, #1
 80063c4:	e7b9      	b.n	800633a <_printf_float+0xfe>
 80063c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80063ca:	d118      	bne.n	80063fe <_printf_float+0x1c2>
 80063cc:	2900      	cmp	r1, #0
 80063ce:	6863      	ldr	r3, [r4, #4]
 80063d0:	dd0b      	ble.n	80063ea <_printf_float+0x1ae>
 80063d2:	6121      	str	r1, [r4, #16]
 80063d4:	b913      	cbnz	r3, 80063dc <_printf_float+0x1a0>
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	07d0      	lsls	r0, r2, #31
 80063da:	d502      	bpl.n	80063e2 <_printf_float+0x1a6>
 80063dc:	3301      	adds	r3, #1
 80063de:	440b      	add	r3, r1
 80063e0:	6123      	str	r3, [r4, #16]
 80063e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80063e4:	f04f 0900 	mov.w	r9, #0
 80063e8:	e7de      	b.n	80063a8 <_printf_float+0x16c>
 80063ea:	b913      	cbnz	r3, 80063f2 <_printf_float+0x1b6>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	07d2      	lsls	r2, r2, #31
 80063f0:	d501      	bpl.n	80063f6 <_printf_float+0x1ba>
 80063f2:	3302      	adds	r3, #2
 80063f4:	e7f4      	b.n	80063e0 <_printf_float+0x1a4>
 80063f6:	2301      	movs	r3, #1
 80063f8:	e7f2      	b.n	80063e0 <_printf_float+0x1a4>
 80063fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80063fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006400:	4299      	cmp	r1, r3
 8006402:	db05      	blt.n	8006410 <_printf_float+0x1d4>
 8006404:	6823      	ldr	r3, [r4, #0]
 8006406:	6121      	str	r1, [r4, #16]
 8006408:	07d8      	lsls	r0, r3, #31
 800640a:	d5ea      	bpl.n	80063e2 <_printf_float+0x1a6>
 800640c:	1c4b      	adds	r3, r1, #1
 800640e:	e7e7      	b.n	80063e0 <_printf_float+0x1a4>
 8006410:	2900      	cmp	r1, #0
 8006412:	bfd4      	ite	le
 8006414:	f1c1 0202 	rsble	r2, r1, #2
 8006418:	2201      	movgt	r2, #1
 800641a:	4413      	add	r3, r2
 800641c:	e7e0      	b.n	80063e0 <_printf_float+0x1a4>
 800641e:	6823      	ldr	r3, [r4, #0]
 8006420:	055a      	lsls	r2, r3, #21
 8006422:	d407      	bmi.n	8006434 <_printf_float+0x1f8>
 8006424:	6923      	ldr	r3, [r4, #16]
 8006426:	4642      	mov	r2, r8
 8006428:	4631      	mov	r1, r6
 800642a:	4628      	mov	r0, r5
 800642c:	47b8      	blx	r7
 800642e:	3001      	adds	r0, #1
 8006430:	d12c      	bne.n	800648c <_printf_float+0x250>
 8006432:	e764      	b.n	80062fe <_printf_float+0xc2>
 8006434:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8006438:	f240 80e0 	bls.w	80065fc <_printf_float+0x3c0>
 800643c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006440:	2200      	movs	r2, #0
 8006442:	2300      	movs	r3, #0
 8006444:	f7fa fb40 	bl	8000ac8 <__aeabi_dcmpeq>
 8006448:	2800      	cmp	r0, #0
 800644a:	d034      	beq.n	80064b6 <_printf_float+0x27a>
 800644c:	4a37      	ldr	r2, [pc, #220]	; (800652c <_printf_float+0x2f0>)
 800644e:	2301      	movs	r3, #1
 8006450:	4631      	mov	r1, r6
 8006452:	4628      	mov	r0, r5
 8006454:	47b8      	blx	r7
 8006456:	3001      	adds	r0, #1
 8006458:	f43f af51 	beq.w	80062fe <_printf_float+0xc2>
 800645c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006460:	429a      	cmp	r2, r3
 8006462:	db02      	blt.n	800646a <_printf_float+0x22e>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	07d8      	lsls	r0, r3, #31
 8006468:	d510      	bpl.n	800648c <_printf_float+0x250>
 800646a:	ee18 3a10 	vmov	r3, s16
 800646e:	4652      	mov	r2, sl
 8006470:	4631      	mov	r1, r6
 8006472:	4628      	mov	r0, r5
 8006474:	47b8      	blx	r7
 8006476:	3001      	adds	r0, #1
 8006478:	f43f af41 	beq.w	80062fe <_printf_float+0xc2>
 800647c:	f04f 0800 	mov.w	r8, #0
 8006480:	f104 091a 	add.w	r9, r4, #26
 8006484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006486:	3b01      	subs	r3, #1
 8006488:	4543      	cmp	r3, r8
 800648a:	dc09      	bgt.n	80064a0 <_printf_float+0x264>
 800648c:	6823      	ldr	r3, [r4, #0]
 800648e:	079b      	lsls	r3, r3, #30
 8006490:	f100 8105 	bmi.w	800669e <_printf_float+0x462>
 8006494:	68e0      	ldr	r0, [r4, #12]
 8006496:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006498:	4298      	cmp	r0, r3
 800649a:	bfb8      	it	lt
 800649c:	4618      	movlt	r0, r3
 800649e:	e730      	b.n	8006302 <_printf_float+0xc6>
 80064a0:	2301      	movs	r3, #1
 80064a2:	464a      	mov	r2, r9
 80064a4:	4631      	mov	r1, r6
 80064a6:	4628      	mov	r0, r5
 80064a8:	47b8      	blx	r7
 80064aa:	3001      	adds	r0, #1
 80064ac:	f43f af27 	beq.w	80062fe <_printf_float+0xc2>
 80064b0:	f108 0801 	add.w	r8, r8, #1
 80064b4:	e7e6      	b.n	8006484 <_printf_float+0x248>
 80064b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	dc39      	bgt.n	8006530 <_printf_float+0x2f4>
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <_printf_float+0x2f0>)
 80064be:	2301      	movs	r3, #1
 80064c0:	4631      	mov	r1, r6
 80064c2:	4628      	mov	r0, r5
 80064c4:	47b8      	blx	r7
 80064c6:	3001      	adds	r0, #1
 80064c8:	f43f af19 	beq.w	80062fe <_printf_float+0xc2>
 80064cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80064d0:	4313      	orrs	r3, r2
 80064d2:	d102      	bne.n	80064da <_printf_float+0x29e>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	07d9      	lsls	r1, r3, #31
 80064d8:	d5d8      	bpl.n	800648c <_printf_float+0x250>
 80064da:	ee18 3a10 	vmov	r3, s16
 80064de:	4652      	mov	r2, sl
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f af09 	beq.w	80062fe <_printf_float+0xc2>
 80064ec:	f04f 0900 	mov.w	r9, #0
 80064f0:	f104 0a1a 	add.w	sl, r4, #26
 80064f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064f6:	425b      	negs	r3, r3
 80064f8:	454b      	cmp	r3, r9
 80064fa:	dc01      	bgt.n	8006500 <_printf_float+0x2c4>
 80064fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064fe:	e792      	b.n	8006426 <_printf_float+0x1ea>
 8006500:	2301      	movs	r3, #1
 8006502:	4652      	mov	r2, sl
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f aef7 	beq.w	80062fe <_printf_float+0xc2>
 8006510:	f109 0901 	add.w	r9, r9, #1
 8006514:	e7ee      	b.n	80064f4 <_printf_float+0x2b8>
 8006516:	bf00      	nop
 8006518:	7fefffff 	.word	0x7fefffff
 800651c:	0800be9c 	.word	0x0800be9c
 8006520:	0800bea0 	.word	0x0800bea0
 8006524:	0800bea8 	.word	0x0800bea8
 8006528:	0800bea4 	.word	0x0800bea4
 800652c:	0800beac 	.word	0x0800beac
 8006530:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006532:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006534:	429a      	cmp	r2, r3
 8006536:	bfa8      	it	ge
 8006538:	461a      	movge	r2, r3
 800653a:	2a00      	cmp	r2, #0
 800653c:	4691      	mov	r9, r2
 800653e:	dc37      	bgt.n	80065b0 <_printf_float+0x374>
 8006540:	f04f 0b00 	mov.w	fp, #0
 8006544:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006548:	f104 021a 	add.w	r2, r4, #26
 800654c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800654e:	9305      	str	r3, [sp, #20]
 8006550:	eba3 0309 	sub.w	r3, r3, r9
 8006554:	455b      	cmp	r3, fp
 8006556:	dc33      	bgt.n	80065c0 <_printf_float+0x384>
 8006558:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800655c:	429a      	cmp	r2, r3
 800655e:	db3b      	blt.n	80065d8 <_printf_float+0x39c>
 8006560:	6823      	ldr	r3, [r4, #0]
 8006562:	07da      	lsls	r2, r3, #31
 8006564:	d438      	bmi.n	80065d8 <_printf_float+0x39c>
 8006566:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006568:	9a05      	ldr	r2, [sp, #20]
 800656a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800656c:	1a9a      	subs	r2, r3, r2
 800656e:	eba3 0901 	sub.w	r9, r3, r1
 8006572:	4591      	cmp	r9, r2
 8006574:	bfa8      	it	ge
 8006576:	4691      	movge	r9, r2
 8006578:	f1b9 0f00 	cmp.w	r9, #0
 800657c:	dc35      	bgt.n	80065ea <_printf_float+0x3ae>
 800657e:	f04f 0800 	mov.w	r8, #0
 8006582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006586:	f104 0a1a 	add.w	sl, r4, #26
 800658a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800658e:	1a9b      	subs	r3, r3, r2
 8006590:	eba3 0309 	sub.w	r3, r3, r9
 8006594:	4543      	cmp	r3, r8
 8006596:	f77f af79 	ble.w	800648c <_printf_float+0x250>
 800659a:	2301      	movs	r3, #1
 800659c:	4652      	mov	r2, sl
 800659e:	4631      	mov	r1, r6
 80065a0:	4628      	mov	r0, r5
 80065a2:	47b8      	blx	r7
 80065a4:	3001      	adds	r0, #1
 80065a6:	f43f aeaa 	beq.w	80062fe <_printf_float+0xc2>
 80065aa:	f108 0801 	add.w	r8, r8, #1
 80065ae:	e7ec      	b.n	800658a <_printf_float+0x34e>
 80065b0:	4613      	mov	r3, r2
 80065b2:	4631      	mov	r1, r6
 80065b4:	4642      	mov	r2, r8
 80065b6:	4628      	mov	r0, r5
 80065b8:	47b8      	blx	r7
 80065ba:	3001      	adds	r0, #1
 80065bc:	d1c0      	bne.n	8006540 <_printf_float+0x304>
 80065be:	e69e      	b.n	80062fe <_printf_float+0xc2>
 80065c0:	2301      	movs	r3, #1
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	9205      	str	r2, [sp, #20]
 80065c8:	47b8      	blx	r7
 80065ca:	3001      	adds	r0, #1
 80065cc:	f43f ae97 	beq.w	80062fe <_printf_float+0xc2>
 80065d0:	9a05      	ldr	r2, [sp, #20]
 80065d2:	f10b 0b01 	add.w	fp, fp, #1
 80065d6:	e7b9      	b.n	800654c <_printf_float+0x310>
 80065d8:	ee18 3a10 	vmov	r3, s16
 80065dc:	4652      	mov	r2, sl
 80065de:	4631      	mov	r1, r6
 80065e0:	4628      	mov	r0, r5
 80065e2:	47b8      	blx	r7
 80065e4:	3001      	adds	r0, #1
 80065e6:	d1be      	bne.n	8006566 <_printf_float+0x32a>
 80065e8:	e689      	b.n	80062fe <_printf_float+0xc2>
 80065ea:	9a05      	ldr	r2, [sp, #20]
 80065ec:	464b      	mov	r3, r9
 80065ee:	4442      	add	r2, r8
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b8      	blx	r7
 80065f6:	3001      	adds	r0, #1
 80065f8:	d1c1      	bne.n	800657e <_printf_float+0x342>
 80065fa:	e680      	b.n	80062fe <_printf_float+0xc2>
 80065fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80065fe:	2a01      	cmp	r2, #1
 8006600:	dc01      	bgt.n	8006606 <_printf_float+0x3ca>
 8006602:	07db      	lsls	r3, r3, #31
 8006604:	d538      	bpl.n	8006678 <_printf_float+0x43c>
 8006606:	2301      	movs	r3, #1
 8006608:	4642      	mov	r2, r8
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	f43f ae74 	beq.w	80062fe <_printf_float+0xc2>
 8006616:	ee18 3a10 	vmov	r3, s16
 800661a:	4652      	mov	r2, sl
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	f43f ae6b 	beq.w	80062fe <_printf_float+0xc2>
 8006628:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800662c:	2200      	movs	r2, #0
 800662e:	2300      	movs	r3, #0
 8006630:	f7fa fa4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006634:	b9d8      	cbnz	r0, 800666e <_printf_float+0x432>
 8006636:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006638:	f108 0201 	add.w	r2, r8, #1
 800663c:	3b01      	subs	r3, #1
 800663e:	4631      	mov	r1, r6
 8006640:	4628      	mov	r0, r5
 8006642:	47b8      	blx	r7
 8006644:	3001      	adds	r0, #1
 8006646:	d10e      	bne.n	8006666 <_printf_float+0x42a>
 8006648:	e659      	b.n	80062fe <_printf_float+0xc2>
 800664a:	2301      	movs	r3, #1
 800664c:	4652      	mov	r2, sl
 800664e:	4631      	mov	r1, r6
 8006650:	4628      	mov	r0, r5
 8006652:	47b8      	blx	r7
 8006654:	3001      	adds	r0, #1
 8006656:	f43f ae52 	beq.w	80062fe <_printf_float+0xc2>
 800665a:	f108 0801 	add.w	r8, r8, #1
 800665e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006660:	3b01      	subs	r3, #1
 8006662:	4543      	cmp	r3, r8
 8006664:	dcf1      	bgt.n	800664a <_printf_float+0x40e>
 8006666:	464b      	mov	r3, r9
 8006668:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800666c:	e6dc      	b.n	8006428 <_printf_float+0x1ec>
 800666e:	f04f 0800 	mov.w	r8, #0
 8006672:	f104 0a1a 	add.w	sl, r4, #26
 8006676:	e7f2      	b.n	800665e <_printf_float+0x422>
 8006678:	2301      	movs	r3, #1
 800667a:	4642      	mov	r2, r8
 800667c:	e7df      	b.n	800663e <_printf_float+0x402>
 800667e:	2301      	movs	r3, #1
 8006680:	464a      	mov	r2, r9
 8006682:	4631      	mov	r1, r6
 8006684:	4628      	mov	r0, r5
 8006686:	47b8      	blx	r7
 8006688:	3001      	adds	r0, #1
 800668a:	f43f ae38 	beq.w	80062fe <_printf_float+0xc2>
 800668e:	f108 0801 	add.w	r8, r8, #1
 8006692:	68e3      	ldr	r3, [r4, #12]
 8006694:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006696:	1a5b      	subs	r3, r3, r1
 8006698:	4543      	cmp	r3, r8
 800669a:	dcf0      	bgt.n	800667e <_printf_float+0x442>
 800669c:	e6fa      	b.n	8006494 <_printf_float+0x258>
 800669e:	f04f 0800 	mov.w	r8, #0
 80066a2:	f104 0919 	add.w	r9, r4, #25
 80066a6:	e7f4      	b.n	8006692 <_printf_float+0x456>

080066a8 <_printf_common>:
 80066a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066ac:	4616      	mov	r6, r2
 80066ae:	4699      	mov	r9, r3
 80066b0:	688a      	ldr	r2, [r1, #8]
 80066b2:	690b      	ldr	r3, [r1, #16]
 80066b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066b8:	4293      	cmp	r3, r2
 80066ba:	bfb8      	it	lt
 80066bc:	4613      	movlt	r3, r2
 80066be:	6033      	str	r3, [r6, #0]
 80066c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066c4:	4607      	mov	r7, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	b10a      	cbz	r2, 80066ce <_printf_common+0x26>
 80066ca:	3301      	adds	r3, #1
 80066cc:	6033      	str	r3, [r6, #0]
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	0699      	lsls	r1, r3, #26
 80066d2:	bf42      	ittt	mi
 80066d4:	6833      	ldrmi	r3, [r6, #0]
 80066d6:	3302      	addmi	r3, #2
 80066d8:	6033      	strmi	r3, [r6, #0]
 80066da:	6825      	ldr	r5, [r4, #0]
 80066dc:	f015 0506 	ands.w	r5, r5, #6
 80066e0:	d106      	bne.n	80066f0 <_printf_common+0x48>
 80066e2:	f104 0a19 	add.w	sl, r4, #25
 80066e6:	68e3      	ldr	r3, [r4, #12]
 80066e8:	6832      	ldr	r2, [r6, #0]
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	42ab      	cmp	r3, r5
 80066ee:	dc26      	bgt.n	800673e <_printf_common+0x96>
 80066f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066f4:	1e13      	subs	r3, r2, #0
 80066f6:	6822      	ldr	r2, [r4, #0]
 80066f8:	bf18      	it	ne
 80066fa:	2301      	movne	r3, #1
 80066fc:	0692      	lsls	r2, r2, #26
 80066fe:	d42b      	bmi.n	8006758 <_printf_common+0xb0>
 8006700:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006704:	4649      	mov	r1, r9
 8006706:	4638      	mov	r0, r7
 8006708:	47c0      	blx	r8
 800670a:	3001      	adds	r0, #1
 800670c:	d01e      	beq.n	800674c <_printf_common+0xa4>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	68e5      	ldr	r5, [r4, #12]
 8006712:	6832      	ldr	r2, [r6, #0]
 8006714:	f003 0306 	and.w	r3, r3, #6
 8006718:	2b04      	cmp	r3, #4
 800671a:	bf08      	it	eq
 800671c:	1aad      	subeq	r5, r5, r2
 800671e:	68a3      	ldr	r3, [r4, #8]
 8006720:	6922      	ldr	r2, [r4, #16]
 8006722:	bf0c      	ite	eq
 8006724:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006728:	2500      	movne	r5, #0
 800672a:	4293      	cmp	r3, r2
 800672c:	bfc4      	itt	gt
 800672e:	1a9b      	subgt	r3, r3, r2
 8006730:	18ed      	addgt	r5, r5, r3
 8006732:	2600      	movs	r6, #0
 8006734:	341a      	adds	r4, #26
 8006736:	42b5      	cmp	r5, r6
 8006738:	d11a      	bne.n	8006770 <_printf_common+0xc8>
 800673a:	2000      	movs	r0, #0
 800673c:	e008      	b.n	8006750 <_printf_common+0xa8>
 800673e:	2301      	movs	r3, #1
 8006740:	4652      	mov	r2, sl
 8006742:	4649      	mov	r1, r9
 8006744:	4638      	mov	r0, r7
 8006746:	47c0      	blx	r8
 8006748:	3001      	adds	r0, #1
 800674a:	d103      	bne.n	8006754 <_printf_common+0xac>
 800674c:	f04f 30ff 	mov.w	r0, #4294967295
 8006750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006754:	3501      	adds	r5, #1
 8006756:	e7c6      	b.n	80066e6 <_printf_common+0x3e>
 8006758:	18e1      	adds	r1, r4, r3
 800675a:	1c5a      	adds	r2, r3, #1
 800675c:	2030      	movs	r0, #48	; 0x30
 800675e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006762:	4422      	add	r2, r4
 8006764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006768:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800676c:	3302      	adds	r3, #2
 800676e:	e7c7      	b.n	8006700 <_printf_common+0x58>
 8006770:	2301      	movs	r3, #1
 8006772:	4622      	mov	r2, r4
 8006774:	4649      	mov	r1, r9
 8006776:	4638      	mov	r0, r7
 8006778:	47c0      	blx	r8
 800677a:	3001      	adds	r0, #1
 800677c:	d0e6      	beq.n	800674c <_printf_common+0xa4>
 800677e:	3601      	adds	r6, #1
 8006780:	e7d9      	b.n	8006736 <_printf_common+0x8e>
	...

08006784 <_printf_i>:
 8006784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006788:	7e0f      	ldrb	r7, [r1, #24]
 800678a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800678c:	2f78      	cmp	r7, #120	; 0x78
 800678e:	4691      	mov	r9, r2
 8006790:	4680      	mov	r8, r0
 8006792:	460c      	mov	r4, r1
 8006794:	469a      	mov	sl, r3
 8006796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800679a:	d807      	bhi.n	80067ac <_printf_i+0x28>
 800679c:	2f62      	cmp	r7, #98	; 0x62
 800679e:	d80a      	bhi.n	80067b6 <_printf_i+0x32>
 80067a0:	2f00      	cmp	r7, #0
 80067a2:	f000 80d8 	beq.w	8006956 <_printf_i+0x1d2>
 80067a6:	2f58      	cmp	r7, #88	; 0x58
 80067a8:	f000 80a3 	beq.w	80068f2 <_printf_i+0x16e>
 80067ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067b4:	e03a      	b.n	800682c <_printf_i+0xa8>
 80067b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067ba:	2b15      	cmp	r3, #21
 80067bc:	d8f6      	bhi.n	80067ac <_printf_i+0x28>
 80067be:	a101      	add	r1, pc, #4	; (adr r1, 80067c4 <_printf_i+0x40>)
 80067c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067c4:	0800681d 	.word	0x0800681d
 80067c8:	08006831 	.word	0x08006831
 80067cc:	080067ad 	.word	0x080067ad
 80067d0:	080067ad 	.word	0x080067ad
 80067d4:	080067ad 	.word	0x080067ad
 80067d8:	080067ad 	.word	0x080067ad
 80067dc:	08006831 	.word	0x08006831
 80067e0:	080067ad 	.word	0x080067ad
 80067e4:	080067ad 	.word	0x080067ad
 80067e8:	080067ad 	.word	0x080067ad
 80067ec:	080067ad 	.word	0x080067ad
 80067f0:	0800693d 	.word	0x0800693d
 80067f4:	08006861 	.word	0x08006861
 80067f8:	0800691f 	.word	0x0800691f
 80067fc:	080067ad 	.word	0x080067ad
 8006800:	080067ad 	.word	0x080067ad
 8006804:	0800695f 	.word	0x0800695f
 8006808:	080067ad 	.word	0x080067ad
 800680c:	08006861 	.word	0x08006861
 8006810:	080067ad 	.word	0x080067ad
 8006814:	080067ad 	.word	0x080067ad
 8006818:	08006927 	.word	0x08006927
 800681c:	682b      	ldr	r3, [r5, #0]
 800681e:	1d1a      	adds	r2, r3, #4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	602a      	str	r2, [r5, #0]
 8006824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800682c:	2301      	movs	r3, #1
 800682e:	e0a3      	b.n	8006978 <_printf_i+0x1f4>
 8006830:	6820      	ldr	r0, [r4, #0]
 8006832:	6829      	ldr	r1, [r5, #0]
 8006834:	0606      	lsls	r6, r0, #24
 8006836:	f101 0304 	add.w	r3, r1, #4
 800683a:	d50a      	bpl.n	8006852 <_printf_i+0xce>
 800683c:	680e      	ldr	r6, [r1, #0]
 800683e:	602b      	str	r3, [r5, #0]
 8006840:	2e00      	cmp	r6, #0
 8006842:	da03      	bge.n	800684c <_printf_i+0xc8>
 8006844:	232d      	movs	r3, #45	; 0x2d
 8006846:	4276      	negs	r6, r6
 8006848:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800684c:	485e      	ldr	r0, [pc, #376]	; (80069c8 <_printf_i+0x244>)
 800684e:	230a      	movs	r3, #10
 8006850:	e019      	b.n	8006886 <_printf_i+0x102>
 8006852:	680e      	ldr	r6, [r1, #0]
 8006854:	602b      	str	r3, [r5, #0]
 8006856:	f010 0f40 	tst.w	r0, #64	; 0x40
 800685a:	bf18      	it	ne
 800685c:	b236      	sxthne	r6, r6
 800685e:	e7ef      	b.n	8006840 <_printf_i+0xbc>
 8006860:	682b      	ldr	r3, [r5, #0]
 8006862:	6820      	ldr	r0, [r4, #0]
 8006864:	1d19      	adds	r1, r3, #4
 8006866:	6029      	str	r1, [r5, #0]
 8006868:	0601      	lsls	r1, r0, #24
 800686a:	d501      	bpl.n	8006870 <_printf_i+0xec>
 800686c:	681e      	ldr	r6, [r3, #0]
 800686e:	e002      	b.n	8006876 <_printf_i+0xf2>
 8006870:	0646      	lsls	r6, r0, #25
 8006872:	d5fb      	bpl.n	800686c <_printf_i+0xe8>
 8006874:	881e      	ldrh	r6, [r3, #0]
 8006876:	4854      	ldr	r0, [pc, #336]	; (80069c8 <_printf_i+0x244>)
 8006878:	2f6f      	cmp	r7, #111	; 0x6f
 800687a:	bf0c      	ite	eq
 800687c:	2308      	moveq	r3, #8
 800687e:	230a      	movne	r3, #10
 8006880:	2100      	movs	r1, #0
 8006882:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006886:	6865      	ldr	r5, [r4, #4]
 8006888:	60a5      	str	r5, [r4, #8]
 800688a:	2d00      	cmp	r5, #0
 800688c:	bfa2      	ittt	ge
 800688e:	6821      	ldrge	r1, [r4, #0]
 8006890:	f021 0104 	bicge.w	r1, r1, #4
 8006894:	6021      	strge	r1, [r4, #0]
 8006896:	b90e      	cbnz	r6, 800689c <_printf_i+0x118>
 8006898:	2d00      	cmp	r5, #0
 800689a:	d04d      	beq.n	8006938 <_printf_i+0x1b4>
 800689c:	4615      	mov	r5, r2
 800689e:	fbb6 f1f3 	udiv	r1, r6, r3
 80068a2:	fb03 6711 	mls	r7, r3, r1, r6
 80068a6:	5dc7      	ldrb	r7, [r0, r7]
 80068a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068ac:	4637      	mov	r7, r6
 80068ae:	42bb      	cmp	r3, r7
 80068b0:	460e      	mov	r6, r1
 80068b2:	d9f4      	bls.n	800689e <_printf_i+0x11a>
 80068b4:	2b08      	cmp	r3, #8
 80068b6:	d10b      	bne.n	80068d0 <_printf_i+0x14c>
 80068b8:	6823      	ldr	r3, [r4, #0]
 80068ba:	07de      	lsls	r6, r3, #31
 80068bc:	d508      	bpl.n	80068d0 <_printf_i+0x14c>
 80068be:	6923      	ldr	r3, [r4, #16]
 80068c0:	6861      	ldr	r1, [r4, #4]
 80068c2:	4299      	cmp	r1, r3
 80068c4:	bfde      	ittt	le
 80068c6:	2330      	movle	r3, #48	; 0x30
 80068c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068d0:	1b52      	subs	r2, r2, r5
 80068d2:	6122      	str	r2, [r4, #16]
 80068d4:	f8cd a000 	str.w	sl, [sp]
 80068d8:	464b      	mov	r3, r9
 80068da:	aa03      	add	r2, sp, #12
 80068dc:	4621      	mov	r1, r4
 80068de:	4640      	mov	r0, r8
 80068e0:	f7ff fee2 	bl	80066a8 <_printf_common>
 80068e4:	3001      	adds	r0, #1
 80068e6:	d14c      	bne.n	8006982 <_printf_i+0x1fe>
 80068e8:	f04f 30ff 	mov.w	r0, #4294967295
 80068ec:	b004      	add	sp, #16
 80068ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068f2:	4835      	ldr	r0, [pc, #212]	; (80069c8 <_printf_i+0x244>)
 80068f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f8:	6829      	ldr	r1, [r5, #0]
 80068fa:	6823      	ldr	r3, [r4, #0]
 80068fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8006900:	6029      	str	r1, [r5, #0]
 8006902:	061d      	lsls	r5, r3, #24
 8006904:	d514      	bpl.n	8006930 <_printf_i+0x1ac>
 8006906:	07df      	lsls	r7, r3, #31
 8006908:	bf44      	itt	mi
 800690a:	f043 0320 	orrmi.w	r3, r3, #32
 800690e:	6023      	strmi	r3, [r4, #0]
 8006910:	b91e      	cbnz	r6, 800691a <_printf_i+0x196>
 8006912:	6823      	ldr	r3, [r4, #0]
 8006914:	f023 0320 	bic.w	r3, r3, #32
 8006918:	6023      	str	r3, [r4, #0]
 800691a:	2310      	movs	r3, #16
 800691c:	e7b0      	b.n	8006880 <_printf_i+0xfc>
 800691e:	6823      	ldr	r3, [r4, #0]
 8006920:	f043 0320 	orr.w	r3, r3, #32
 8006924:	6023      	str	r3, [r4, #0]
 8006926:	2378      	movs	r3, #120	; 0x78
 8006928:	4828      	ldr	r0, [pc, #160]	; (80069cc <_printf_i+0x248>)
 800692a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800692e:	e7e3      	b.n	80068f8 <_printf_i+0x174>
 8006930:	0659      	lsls	r1, r3, #25
 8006932:	bf48      	it	mi
 8006934:	b2b6      	uxthmi	r6, r6
 8006936:	e7e6      	b.n	8006906 <_printf_i+0x182>
 8006938:	4615      	mov	r5, r2
 800693a:	e7bb      	b.n	80068b4 <_printf_i+0x130>
 800693c:	682b      	ldr	r3, [r5, #0]
 800693e:	6826      	ldr	r6, [r4, #0]
 8006940:	6961      	ldr	r1, [r4, #20]
 8006942:	1d18      	adds	r0, r3, #4
 8006944:	6028      	str	r0, [r5, #0]
 8006946:	0635      	lsls	r5, r6, #24
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	d501      	bpl.n	8006950 <_printf_i+0x1cc>
 800694c:	6019      	str	r1, [r3, #0]
 800694e:	e002      	b.n	8006956 <_printf_i+0x1d2>
 8006950:	0670      	lsls	r0, r6, #25
 8006952:	d5fb      	bpl.n	800694c <_printf_i+0x1c8>
 8006954:	8019      	strh	r1, [r3, #0]
 8006956:	2300      	movs	r3, #0
 8006958:	6123      	str	r3, [r4, #16]
 800695a:	4615      	mov	r5, r2
 800695c:	e7ba      	b.n	80068d4 <_printf_i+0x150>
 800695e:	682b      	ldr	r3, [r5, #0]
 8006960:	1d1a      	adds	r2, r3, #4
 8006962:	602a      	str	r2, [r5, #0]
 8006964:	681d      	ldr	r5, [r3, #0]
 8006966:	6862      	ldr	r2, [r4, #4]
 8006968:	2100      	movs	r1, #0
 800696a:	4628      	mov	r0, r5
 800696c:	f7f9 fc38 	bl	80001e0 <memchr>
 8006970:	b108      	cbz	r0, 8006976 <_printf_i+0x1f2>
 8006972:	1b40      	subs	r0, r0, r5
 8006974:	6060      	str	r0, [r4, #4]
 8006976:	6863      	ldr	r3, [r4, #4]
 8006978:	6123      	str	r3, [r4, #16]
 800697a:	2300      	movs	r3, #0
 800697c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006980:	e7a8      	b.n	80068d4 <_printf_i+0x150>
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	462a      	mov	r2, r5
 8006986:	4649      	mov	r1, r9
 8006988:	4640      	mov	r0, r8
 800698a:	47d0      	blx	sl
 800698c:	3001      	adds	r0, #1
 800698e:	d0ab      	beq.n	80068e8 <_printf_i+0x164>
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	079b      	lsls	r3, r3, #30
 8006994:	d413      	bmi.n	80069be <_printf_i+0x23a>
 8006996:	68e0      	ldr	r0, [r4, #12]
 8006998:	9b03      	ldr	r3, [sp, #12]
 800699a:	4298      	cmp	r0, r3
 800699c:	bfb8      	it	lt
 800699e:	4618      	movlt	r0, r3
 80069a0:	e7a4      	b.n	80068ec <_printf_i+0x168>
 80069a2:	2301      	movs	r3, #1
 80069a4:	4632      	mov	r2, r6
 80069a6:	4649      	mov	r1, r9
 80069a8:	4640      	mov	r0, r8
 80069aa:	47d0      	blx	sl
 80069ac:	3001      	adds	r0, #1
 80069ae:	d09b      	beq.n	80068e8 <_printf_i+0x164>
 80069b0:	3501      	adds	r5, #1
 80069b2:	68e3      	ldr	r3, [r4, #12]
 80069b4:	9903      	ldr	r1, [sp, #12]
 80069b6:	1a5b      	subs	r3, r3, r1
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	dcf2      	bgt.n	80069a2 <_printf_i+0x21e>
 80069bc:	e7eb      	b.n	8006996 <_printf_i+0x212>
 80069be:	2500      	movs	r5, #0
 80069c0:	f104 0619 	add.w	r6, r4, #25
 80069c4:	e7f5      	b.n	80069b2 <_printf_i+0x22e>
 80069c6:	bf00      	nop
 80069c8:	0800beae 	.word	0x0800beae
 80069cc:	0800bebf 	.word	0x0800bebf

080069d0 <_scanf_float>:
 80069d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069d4:	b087      	sub	sp, #28
 80069d6:	4617      	mov	r7, r2
 80069d8:	9303      	str	r3, [sp, #12]
 80069da:	688b      	ldr	r3, [r1, #8]
 80069dc:	1e5a      	subs	r2, r3, #1
 80069de:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80069e2:	bf83      	ittte	hi
 80069e4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80069e8:	195b      	addhi	r3, r3, r5
 80069ea:	9302      	strhi	r3, [sp, #8]
 80069ec:	2300      	movls	r3, #0
 80069ee:	bf86      	itte	hi
 80069f0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80069f4:	608b      	strhi	r3, [r1, #8]
 80069f6:	9302      	strls	r3, [sp, #8]
 80069f8:	680b      	ldr	r3, [r1, #0]
 80069fa:	468b      	mov	fp, r1
 80069fc:	2500      	movs	r5, #0
 80069fe:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8006a02:	f84b 3b1c 	str.w	r3, [fp], #28
 8006a06:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a0a:	4680      	mov	r8, r0
 8006a0c:	460c      	mov	r4, r1
 8006a0e:	465e      	mov	r6, fp
 8006a10:	46aa      	mov	sl, r5
 8006a12:	46a9      	mov	r9, r5
 8006a14:	9501      	str	r5, [sp, #4]
 8006a16:	68a2      	ldr	r2, [r4, #8]
 8006a18:	b152      	cbz	r2, 8006a30 <_scanf_float+0x60>
 8006a1a:	683b      	ldr	r3, [r7, #0]
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b4e      	cmp	r3, #78	; 0x4e
 8006a20:	d864      	bhi.n	8006aec <_scanf_float+0x11c>
 8006a22:	2b40      	cmp	r3, #64	; 0x40
 8006a24:	d83c      	bhi.n	8006aa0 <_scanf_float+0xd0>
 8006a26:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8006a2a:	b2c8      	uxtb	r0, r1
 8006a2c:	280e      	cmp	r0, #14
 8006a2e:	d93a      	bls.n	8006aa6 <_scanf_float+0xd6>
 8006a30:	f1b9 0f00 	cmp.w	r9, #0
 8006a34:	d003      	beq.n	8006a3e <_scanf_float+0x6e>
 8006a36:	6823      	ldr	r3, [r4, #0]
 8006a38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a3c:	6023      	str	r3, [r4, #0]
 8006a3e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a42:	f1ba 0f01 	cmp.w	sl, #1
 8006a46:	f200 8113 	bhi.w	8006c70 <_scanf_float+0x2a0>
 8006a4a:	455e      	cmp	r6, fp
 8006a4c:	f200 8105 	bhi.w	8006c5a <_scanf_float+0x28a>
 8006a50:	2501      	movs	r5, #1
 8006a52:	4628      	mov	r0, r5
 8006a54:	b007      	add	sp, #28
 8006a56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a5a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8006a5e:	2a0d      	cmp	r2, #13
 8006a60:	d8e6      	bhi.n	8006a30 <_scanf_float+0x60>
 8006a62:	a101      	add	r1, pc, #4	; (adr r1, 8006a68 <_scanf_float+0x98>)
 8006a64:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a68:	08006ba7 	.word	0x08006ba7
 8006a6c:	08006a31 	.word	0x08006a31
 8006a70:	08006a31 	.word	0x08006a31
 8006a74:	08006a31 	.word	0x08006a31
 8006a78:	08006c07 	.word	0x08006c07
 8006a7c:	08006bdf 	.word	0x08006bdf
 8006a80:	08006a31 	.word	0x08006a31
 8006a84:	08006a31 	.word	0x08006a31
 8006a88:	08006bb5 	.word	0x08006bb5
 8006a8c:	08006a31 	.word	0x08006a31
 8006a90:	08006a31 	.word	0x08006a31
 8006a94:	08006a31 	.word	0x08006a31
 8006a98:	08006a31 	.word	0x08006a31
 8006a9c:	08006b6d 	.word	0x08006b6d
 8006aa0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8006aa4:	e7db      	b.n	8006a5e <_scanf_float+0x8e>
 8006aa6:	290e      	cmp	r1, #14
 8006aa8:	d8c2      	bhi.n	8006a30 <_scanf_float+0x60>
 8006aaa:	a001      	add	r0, pc, #4	; (adr r0, 8006ab0 <_scanf_float+0xe0>)
 8006aac:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ab0:	08006b5f 	.word	0x08006b5f
 8006ab4:	08006a31 	.word	0x08006a31
 8006ab8:	08006b5f 	.word	0x08006b5f
 8006abc:	08006bf3 	.word	0x08006bf3
 8006ac0:	08006a31 	.word	0x08006a31
 8006ac4:	08006b0d 	.word	0x08006b0d
 8006ac8:	08006b49 	.word	0x08006b49
 8006acc:	08006b49 	.word	0x08006b49
 8006ad0:	08006b49 	.word	0x08006b49
 8006ad4:	08006b49 	.word	0x08006b49
 8006ad8:	08006b49 	.word	0x08006b49
 8006adc:	08006b49 	.word	0x08006b49
 8006ae0:	08006b49 	.word	0x08006b49
 8006ae4:	08006b49 	.word	0x08006b49
 8006ae8:	08006b49 	.word	0x08006b49
 8006aec:	2b6e      	cmp	r3, #110	; 0x6e
 8006aee:	d809      	bhi.n	8006b04 <_scanf_float+0x134>
 8006af0:	2b60      	cmp	r3, #96	; 0x60
 8006af2:	d8b2      	bhi.n	8006a5a <_scanf_float+0x8a>
 8006af4:	2b54      	cmp	r3, #84	; 0x54
 8006af6:	d077      	beq.n	8006be8 <_scanf_float+0x218>
 8006af8:	2b59      	cmp	r3, #89	; 0x59
 8006afa:	d199      	bne.n	8006a30 <_scanf_float+0x60>
 8006afc:	2d07      	cmp	r5, #7
 8006afe:	d197      	bne.n	8006a30 <_scanf_float+0x60>
 8006b00:	2508      	movs	r5, #8
 8006b02:	e029      	b.n	8006b58 <_scanf_float+0x188>
 8006b04:	2b74      	cmp	r3, #116	; 0x74
 8006b06:	d06f      	beq.n	8006be8 <_scanf_float+0x218>
 8006b08:	2b79      	cmp	r3, #121	; 0x79
 8006b0a:	e7f6      	b.n	8006afa <_scanf_float+0x12a>
 8006b0c:	6821      	ldr	r1, [r4, #0]
 8006b0e:	05c8      	lsls	r0, r1, #23
 8006b10:	d51a      	bpl.n	8006b48 <_scanf_float+0x178>
 8006b12:	9b02      	ldr	r3, [sp, #8]
 8006b14:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006b18:	6021      	str	r1, [r4, #0]
 8006b1a:	f109 0901 	add.w	r9, r9, #1
 8006b1e:	b11b      	cbz	r3, 8006b28 <_scanf_float+0x158>
 8006b20:	3b01      	subs	r3, #1
 8006b22:	3201      	adds	r2, #1
 8006b24:	9302      	str	r3, [sp, #8]
 8006b26:	60a2      	str	r2, [r4, #8]
 8006b28:	68a3      	ldr	r3, [r4, #8]
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	60a3      	str	r3, [r4, #8]
 8006b2e:	6923      	ldr	r3, [r4, #16]
 8006b30:	3301      	adds	r3, #1
 8006b32:	6123      	str	r3, [r4, #16]
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	3b01      	subs	r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	607b      	str	r3, [r7, #4]
 8006b3c:	f340 8084 	ble.w	8006c48 <_scanf_float+0x278>
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	3301      	adds	r3, #1
 8006b44:	603b      	str	r3, [r7, #0]
 8006b46:	e766      	b.n	8006a16 <_scanf_float+0x46>
 8006b48:	eb1a 0f05 	cmn.w	sl, r5
 8006b4c:	f47f af70 	bne.w	8006a30 <_scanf_float+0x60>
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8006b56:	6022      	str	r2, [r4, #0]
 8006b58:	f806 3b01 	strb.w	r3, [r6], #1
 8006b5c:	e7e4      	b.n	8006b28 <_scanf_float+0x158>
 8006b5e:	6822      	ldr	r2, [r4, #0]
 8006b60:	0610      	lsls	r0, r2, #24
 8006b62:	f57f af65 	bpl.w	8006a30 <_scanf_float+0x60>
 8006b66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b6a:	e7f4      	b.n	8006b56 <_scanf_float+0x186>
 8006b6c:	f1ba 0f00 	cmp.w	sl, #0
 8006b70:	d10e      	bne.n	8006b90 <_scanf_float+0x1c0>
 8006b72:	f1b9 0f00 	cmp.w	r9, #0
 8006b76:	d10e      	bne.n	8006b96 <_scanf_float+0x1c6>
 8006b78:	6822      	ldr	r2, [r4, #0]
 8006b7a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006b7e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006b82:	d108      	bne.n	8006b96 <_scanf_float+0x1c6>
 8006b84:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006b88:	6022      	str	r2, [r4, #0]
 8006b8a:	f04f 0a01 	mov.w	sl, #1
 8006b8e:	e7e3      	b.n	8006b58 <_scanf_float+0x188>
 8006b90:	f1ba 0f02 	cmp.w	sl, #2
 8006b94:	d055      	beq.n	8006c42 <_scanf_float+0x272>
 8006b96:	2d01      	cmp	r5, #1
 8006b98:	d002      	beq.n	8006ba0 <_scanf_float+0x1d0>
 8006b9a:	2d04      	cmp	r5, #4
 8006b9c:	f47f af48 	bne.w	8006a30 <_scanf_float+0x60>
 8006ba0:	3501      	adds	r5, #1
 8006ba2:	b2ed      	uxtb	r5, r5
 8006ba4:	e7d8      	b.n	8006b58 <_scanf_float+0x188>
 8006ba6:	f1ba 0f01 	cmp.w	sl, #1
 8006baa:	f47f af41 	bne.w	8006a30 <_scanf_float+0x60>
 8006bae:	f04f 0a02 	mov.w	sl, #2
 8006bb2:	e7d1      	b.n	8006b58 <_scanf_float+0x188>
 8006bb4:	b97d      	cbnz	r5, 8006bd6 <_scanf_float+0x206>
 8006bb6:	f1b9 0f00 	cmp.w	r9, #0
 8006bba:	f47f af3c 	bne.w	8006a36 <_scanf_float+0x66>
 8006bbe:	6822      	ldr	r2, [r4, #0]
 8006bc0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8006bc4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8006bc8:	f47f af39 	bne.w	8006a3e <_scanf_float+0x6e>
 8006bcc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006bd0:	6022      	str	r2, [r4, #0]
 8006bd2:	2501      	movs	r5, #1
 8006bd4:	e7c0      	b.n	8006b58 <_scanf_float+0x188>
 8006bd6:	2d03      	cmp	r5, #3
 8006bd8:	d0e2      	beq.n	8006ba0 <_scanf_float+0x1d0>
 8006bda:	2d05      	cmp	r5, #5
 8006bdc:	e7de      	b.n	8006b9c <_scanf_float+0x1cc>
 8006bde:	2d02      	cmp	r5, #2
 8006be0:	f47f af26 	bne.w	8006a30 <_scanf_float+0x60>
 8006be4:	2503      	movs	r5, #3
 8006be6:	e7b7      	b.n	8006b58 <_scanf_float+0x188>
 8006be8:	2d06      	cmp	r5, #6
 8006bea:	f47f af21 	bne.w	8006a30 <_scanf_float+0x60>
 8006bee:	2507      	movs	r5, #7
 8006bf0:	e7b2      	b.n	8006b58 <_scanf_float+0x188>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	0591      	lsls	r1, r2, #22
 8006bf6:	f57f af1b 	bpl.w	8006a30 <_scanf_float+0x60>
 8006bfa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8006bfe:	6022      	str	r2, [r4, #0]
 8006c00:	f8cd 9004 	str.w	r9, [sp, #4]
 8006c04:	e7a8      	b.n	8006b58 <_scanf_float+0x188>
 8006c06:	6822      	ldr	r2, [r4, #0]
 8006c08:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8006c0c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8006c10:	d006      	beq.n	8006c20 <_scanf_float+0x250>
 8006c12:	0550      	lsls	r0, r2, #21
 8006c14:	f57f af0c 	bpl.w	8006a30 <_scanf_float+0x60>
 8006c18:	f1b9 0f00 	cmp.w	r9, #0
 8006c1c:	f43f af0f 	beq.w	8006a3e <_scanf_float+0x6e>
 8006c20:	0591      	lsls	r1, r2, #22
 8006c22:	bf58      	it	pl
 8006c24:	9901      	ldrpl	r1, [sp, #4]
 8006c26:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8006c2a:	bf58      	it	pl
 8006c2c:	eba9 0101 	subpl.w	r1, r9, r1
 8006c30:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8006c34:	bf58      	it	pl
 8006c36:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c3a:	6022      	str	r2, [r4, #0]
 8006c3c:	f04f 0900 	mov.w	r9, #0
 8006c40:	e78a      	b.n	8006b58 <_scanf_float+0x188>
 8006c42:	f04f 0a03 	mov.w	sl, #3
 8006c46:	e787      	b.n	8006b58 <_scanf_float+0x188>
 8006c48:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4640      	mov	r0, r8
 8006c50:	4798      	blx	r3
 8006c52:	2800      	cmp	r0, #0
 8006c54:	f43f aedf 	beq.w	8006a16 <_scanf_float+0x46>
 8006c58:	e6ea      	b.n	8006a30 <_scanf_float+0x60>
 8006c5a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c5e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c62:	463a      	mov	r2, r7
 8006c64:	4640      	mov	r0, r8
 8006c66:	4798      	blx	r3
 8006c68:	6923      	ldr	r3, [r4, #16]
 8006c6a:	3b01      	subs	r3, #1
 8006c6c:	6123      	str	r3, [r4, #16]
 8006c6e:	e6ec      	b.n	8006a4a <_scanf_float+0x7a>
 8006c70:	1e6b      	subs	r3, r5, #1
 8006c72:	2b06      	cmp	r3, #6
 8006c74:	d825      	bhi.n	8006cc2 <_scanf_float+0x2f2>
 8006c76:	2d02      	cmp	r5, #2
 8006c78:	d836      	bhi.n	8006ce8 <_scanf_float+0x318>
 8006c7a:	455e      	cmp	r6, fp
 8006c7c:	f67f aee8 	bls.w	8006a50 <_scanf_float+0x80>
 8006c80:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c84:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c88:	463a      	mov	r2, r7
 8006c8a:	4640      	mov	r0, r8
 8006c8c:	4798      	blx	r3
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	3b01      	subs	r3, #1
 8006c92:	6123      	str	r3, [r4, #16]
 8006c94:	e7f1      	b.n	8006c7a <_scanf_float+0x2aa>
 8006c96:	9802      	ldr	r0, [sp, #8]
 8006c98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006c9c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	463a      	mov	r2, r7
 8006ca4:	4640      	mov	r0, r8
 8006ca6:	4798      	blx	r3
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	3b01      	subs	r3, #1
 8006cac:	6123      	str	r3, [r4, #16]
 8006cae:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006cb2:	fa5f fa8a 	uxtb.w	sl, sl
 8006cb6:	f1ba 0f02 	cmp.w	sl, #2
 8006cba:	d1ec      	bne.n	8006c96 <_scanf_float+0x2c6>
 8006cbc:	3d03      	subs	r5, #3
 8006cbe:	b2ed      	uxtb	r5, r5
 8006cc0:	1b76      	subs	r6, r6, r5
 8006cc2:	6823      	ldr	r3, [r4, #0]
 8006cc4:	05da      	lsls	r2, r3, #23
 8006cc6:	d52f      	bpl.n	8006d28 <_scanf_float+0x358>
 8006cc8:	055b      	lsls	r3, r3, #21
 8006cca:	d510      	bpl.n	8006cee <_scanf_float+0x31e>
 8006ccc:	455e      	cmp	r6, fp
 8006cce:	f67f aebf 	bls.w	8006a50 <_scanf_float+0x80>
 8006cd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006cd6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cda:	463a      	mov	r2, r7
 8006cdc:	4640      	mov	r0, r8
 8006cde:	4798      	blx	r3
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	6123      	str	r3, [r4, #16]
 8006ce6:	e7f1      	b.n	8006ccc <_scanf_float+0x2fc>
 8006ce8:	46aa      	mov	sl, r5
 8006cea:	9602      	str	r6, [sp, #8]
 8006cec:	e7df      	b.n	8006cae <_scanf_float+0x2de>
 8006cee:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006cf2:	6923      	ldr	r3, [r4, #16]
 8006cf4:	2965      	cmp	r1, #101	; 0x65
 8006cf6:	f103 33ff 	add.w	r3, r3, #4294967295
 8006cfa:	f106 35ff 	add.w	r5, r6, #4294967295
 8006cfe:	6123      	str	r3, [r4, #16]
 8006d00:	d00c      	beq.n	8006d1c <_scanf_float+0x34c>
 8006d02:	2945      	cmp	r1, #69	; 0x45
 8006d04:	d00a      	beq.n	8006d1c <_scanf_float+0x34c>
 8006d06:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d0a:	463a      	mov	r2, r7
 8006d0c:	4640      	mov	r0, r8
 8006d0e:	4798      	blx	r3
 8006d10:	6923      	ldr	r3, [r4, #16]
 8006d12:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d16:	3b01      	subs	r3, #1
 8006d18:	1eb5      	subs	r5, r6, #2
 8006d1a:	6123      	str	r3, [r4, #16]
 8006d1c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8006d20:	463a      	mov	r2, r7
 8006d22:	4640      	mov	r0, r8
 8006d24:	4798      	blx	r3
 8006d26:	462e      	mov	r6, r5
 8006d28:	6825      	ldr	r5, [r4, #0]
 8006d2a:	f015 0510 	ands.w	r5, r5, #16
 8006d2e:	d159      	bne.n	8006de4 <_scanf_float+0x414>
 8006d30:	7035      	strb	r5, [r6, #0]
 8006d32:	6823      	ldr	r3, [r4, #0]
 8006d34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d3c:	d11b      	bne.n	8006d76 <_scanf_float+0x3a6>
 8006d3e:	9b01      	ldr	r3, [sp, #4]
 8006d40:	454b      	cmp	r3, r9
 8006d42:	eba3 0209 	sub.w	r2, r3, r9
 8006d46:	d123      	bne.n	8006d90 <_scanf_float+0x3c0>
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4659      	mov	r1, fp
 8006d4c:	4640      	mov	r0, r8
 8006d4e:	f000 fe99 	bl	8007a84 <_strtod_r>
 8006d52:	6822      	ldr	r2, [r4, #0]
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	f012 0f02 	tst.w	r2, #2
 8006d5a:	ec57 6b10 	vmov	r6, r7, d0
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	d021      	beq.n	8006da6 <_scanf_float+0x3d6>
 8006d62:	9903      	ldr	r1, [sp, #12]
 8006d64:	1d1a      	adds	r2, r3, #4
 8006d66:	600a      	str	r2, [r1, #0]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	e9c3 6700 	strd	r6, r7, [r3]
 8006d6e:	68e3      	ldr	r3, [r4, #12]
 8006d70:	3301      	adds	r3, #1
 8006d72:	60e3      	str	r3, [r4, #12]
 8006d74:	e66d      	b.n	8006a52 <_scanf_float+0x82>
 8006d76:	9b04      	ldr	r3, [sp, #16]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d0e5      	beq.n	8006d48 <_scanf_float+0x378>
 8006d7c:	9905      	ldr	r1, [sp, #20]
 8006d7e:	230a      	movs	r3, #10
 8006d80:	462a      	mov	r2, r5
 8006d82:	3101      	adds	r1, #1
 8006d84:	4640      	mov	r0, r8
 8006d86:	f000 ff05 	bl	8007b94 <_strtol_r>
 8006d8a:	9b04      	ldr	r3, [sp, #16]
 8006d8c:	9e05      	ldr	r6, [sp, #20]
 8006d8e:	1ac2      	subs	r2, r0, r3
 8006d90:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8006d94:	429e      	cmp	r6, r3
 8006d96:	bf28      	it	cs
 8006d98:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8006d9c:	4912      	ldr	r1, [pc, #72]	; (8006de8 <_scanf_float+0x418>)
 8006d9e:	4630      	mov	r0, r6
 8006da0:	f000 f82c 	bl	8006dfc <siprintf>
 8006da4:	e7d0      	b.n	8006d48 <_scanf_float+0x378>
 8006da6:	9903      	ldr	r1, [sp, #12]
 8006da8:	f012 0f04 	tst.w	r2, #4
 8006dac:	f103 0204 	add.w	r2, r3, #4
 8006db0:	600a      	str	r2, [r1, #0]
 8006db2:	d1d9      	bne.n	8006d68 <_scanf_float+0x398>
 8006db4:	f8d3 8000 	ldr.w	r8, [r3]
 8006db8:	ee10 2a10 	vmov	r2, s0
 8006dbc:	ee10 0a10 	vmov	r0, s0
 8006dc0:	463b      	mov	r3, r7
 8006dc2:	4639      	mov	r1, r7
 8006dc4:	f7f9 feb2 	bl	8000b2c <__aeabi_dcmpun>
 8006dc8:	b128      	cbz	r0, 8006dd6 <_scanf_float+0x406>
 8006dca:	4808      	ldr	r0, [pc, #32]	; (8006dec <_scanf_float+0x41c>)
 8006dcc:	f000 f810 	bl	8006df0 <nanf>
 8006dd0:	ed88 0a00 	vstr	s0, [r8]
 8006dd4:	e7cb      	b.n	8006d6e <_scanf_float+0x39e>
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	4639      	mov	r1, r7
 8006dda:	f7f9 ff05 	bl	8000be8 <__aeabi_d2f>
 8006dde:	f8c8 0000 	str.w	r0, [r8]
 8006de2:	e7c4      	b.n	8006d6e <_scanf_float+0x39e>
 8006de4:	2500      	movs	r5, #0
 8006de6:	e634      	b.n	8006a52 <_scanf_float+0x82>
 8006de8:	0800bed0 	.word	0x0800bed0
 8006dec:	0800c2d8 	.word	0x0800c2d8

08006df0 <nanf>:
 8006df0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006df8 <nanf+0x8>
 8006df4:	4770      	bx	lr
 8006df6:	bf00      	nop
 8006df8:	7fc00000 	.word	0x7fc00000

08006dfc <siprintf>:
 8006dfc:	b40e      	push	{r1, r2, r3}
 8006dfe:	b500      	push	{lr}
 8006e00:	b09c      	sub	sp, #112	; 0x70
 8006e02:	ab1d      	add	r3, sp, #116	; 0x74
 8006e04:	9002      	str	r0, [sp, #8]
 8006e06:	9006      	str	r0, [sp, #24]
 8006e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006e0c:	4809      	ldr	r0, [pc, #36]	; (8006e34 <siprintf+0x38>)
 8006e0e:	9107      	str	r1, [sp, #28]
 8006e10:	9104      	str	r1, [sp, #16]
 8006e12:	4909      	ldr	r1, [pc, #36]	; (8006e38 <siprintf+0x3c>)
 8006e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8006e18:	9105      	str	r1, [sp, #20]
 8006e1a:	6800      	ldr	r0, [r0, #0]
 8006e1c:	9301      	str	r3, [sp, #4]
 8006e1e:	a902      	add	r1, sp, #8
 8006e20:	f002 fee4 	bl	8009bec <_svfiprintf_r>
 8006e24:	9b02      	ldr	r3, [sp, #8]
 8006e26:	2200      	movs	r2, #0
 8006e28:	701a      	strb	r2, [r3, #0]
 8006e2a:	b01c      	add	sp, #112	; 0x70
 8006e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e30:	b003      	add	sp, #12
 8006e32:	4770      	bx	lr
 8006e34:	20000048 	.word	0x20000048
 8006e38:	ffff0208 	.word	0xffff0208

08006e3c <sulp>:
 8006e3c:	b570      	push	{r4, r5, r6, lr}
 8006e3e:	4604      	mov	r4, r0
 8006e40:	460d      	mov	r5, r1
 8006e42:	ec45 4b10 	vmov	d0, r4, r5
 8006e46:	4616      	mov	r6, r2
 8006e48:	f002 fc2e 	bl	80096a8 <__ulp>
 8006e4c:	ec51 0b10 	vmov	r0, r1, d0
 8006e50:	b17e      	cbz	r6, 8006e72 <sulp+0x36>
 8006e52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8006e56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	dd09      	ble.n	8006e72 <sulp+0x36>
 8006e5e:	051b      	lsls	r3, r3, #20
 8006e60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8006e64:	2400      	movs	r4, #0
 8006e66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8006e6a:	4622      	mov	r2, r4
 8006e6c:	462b      	mov	r3, r5
 8006e6e:	f7f9 fbc3 	bl	80005f8 <__aeabi_dmul>
 8006e72:	bd70      	pop	{r4, r5, r6, pc}
 8006e74:	0000      	movs	r0, r0
	...

08006e78 <_strtod_l>:
 8006e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7c:	ed2d 8b02 	vpush	{d8}
 8006e80:	b09d      	sub	sp, #116	; 0x74
 8006e82:	461f      	mov	r7, r3
 8006e84:	2300      	movs	r3, #0
 8006e86:	9318      	str	r3, [sp, #96]	; 0x60
 8006e88:	4ba2      	ldr	r3, [pc, #648]	; (8007114 <_strtod_l+0x29c>)
 8006e8a:	9213      	str	r2, [sp, #76]	; 0x4c
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	9305      	str	r3, [sp, #20]
 8006e90:	4604      	mov	r4, r0
 8006e92:	4618      	mov	r0, r3
 8006e94:	4688      	mov	r8, r1
 8006e96:	f7f9 f99b 	bl	80001d0 <strlen>
 8006e9a:	f04f 0a00 	mov.w	sl, #0
 8006e9e:	4605      	mov	r5, r0
 8006ea0:	f04f 0b00 	mov.w	fp, #0
 8006ea4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006ea8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006eaa:	781a      	ldrb	r2, [r3, #0]
 8006eac:	2a2b      	cmp	r2, #43	; 0x2b
 8006eae:	d04e      	beq.n	8006f4e <_strtod_l+0xd6>
 8006eb0:	d83b      	bhi.n	8006f2a <_strtod_l+0xb2>
 8006eb2:	2a0d      	cmp	r2, #13
 8006eb4:	d834      	bhi.n	8006f20 <_strtod_l+0xa8>
 8006eb6:	2a08      	cmp	r2, #8
 8006eb8:	d834      	bhi.n	8006f24 <_strtod_l+0xac>
 8006eba:	2a00      	cmp	r2, #0
 8006ebc:	d03e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	930a      	str	r3, [sp, #40]	; 0x28
 8006ec2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8006ec4:	7833      	ldrb	r3, [r6, #0]
 8006ec6:	2b30      	cmp	r3, #48	; 0x30
 8006ec8:	f040 80b0 	bne.w	800702c <_strtod_l+0x1b4>
 8006ecc:	7873      	ldrb	r3, [r6, #1]
 8006ece:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006ed2:	2b58      	cmp	r3, #88	; 0x58
 8006ed4:	d168      	bne.n	8006fa8 <_strtod_l+0x130>
 8006ed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006ed8:	9301      	str	r3, [sp, #4]
 8006eda:	ab18      	add	r3, sp, #96	; 0x60
 8006edc:	9702      	str	r7, [sp, #8]
 8006ede:	9300      	str	r3, [sp, #0]
 8006ee0:	4a8d      	ldr	r2, [pc, #564]	; (8007118 <_strtod_l+0x2a0>)
 8006ee2:	ab19      	add	r3, sp, #100	; 0x64
 8006ee4:	a917      	add	r1, sp, #92	; 0x5c
 8006ee6:	4620      	mov	r0, r4
 8006ee8:	f001 fd38 	bl	800895c <__gethex>
 8006eec:	f010 0707 	ands.w	r7, r0, #7
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	d005      	beq.n	8006f00 <_strtod_l+0x88>
 8006ef4:	2f06      	cmp	r7, #6
 8006ef6:	d12c      	bne.n	8006f52 <_strtod_l+0xda>
 8006ef8:	3601      	adds	r6, #1
 8006efa:	2300      	movs	r3, #0
 8006efc:	9617      	str	r6, [sp, #92]	; 0x5c
 8006efe:	930a      	str	r3, [sp, #40]	; 0x28
 8006f00:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	f040 8590 	bne.w	8007a28 <_strtod_l+0xbb0>
 8006f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006f0a:	b1eb      	cbz	r3, 8006f48 <_strtod_l+0xd0>
 8006f0c:	4652      	mov	r2, sl
 8006f0e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8006f12:	ec43 2b10 	vmov	d0, r2, r3
 8006f16:	b01d      	add	sp, #116	; 0x74
 8006f18:	ecbd 8b02 	vpop	{d8}
 8006f1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f20:	2a20      	cmp	r2, #32
 8006f22:	d1cc      	bne.n	8006ebe <_strtod_l+0x46>
 8006f24:	3301      	adds	r3, #1
 8006f26:	9317      	str	r3, [sp, #92]	; 0x5c
 8006f28:	e7be      	b.n	8006ea8 <_strtod_l+0x30>
 8006f2a:	2a2d      	cmp	r2, #45	; 0x2d
 8006f2c:	d1c7      	bne.n	8006ebe <_strtod_l+0x46>
 8006f2e:	2201      	movs	r2, #1
 8006f30:	920a      	str	r2, [sp, #40]	; 0x28
 8006f32:	1c5a      	adds	r2, r3, #1
 8006f34:	9217      	str	r2, [sp, #92]	; 0x5c
 8006f36:	785b      	ldrb	r3, [r3, #1]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d1c2      	bne.n	8006ec2 <_strtod_l+0x4a>
 8006f3c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8006f3e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	f040 856e 	bne.w	8007a24 <_strtod_l+0xbac>
 8006f48:	4652      	mov	r2, sl
 8006f4a:	465b      	mov	r3, fp
 8006f4c:	e7e1      	b.n	8006f12 <_strtod_l+0x9a>
 8006f4e:	2200      	movs	r2, #0
 8006f50:	e7ee      	b.n	8006f30 <_strtod_l+0xb8>
 8006f52:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8006f54:	b13a      	cbz	r2, 8006f66 <_strtod_l+0xee>
 8006f56:	2135      	movs	r1, #53	; 0x35
 8006f58:	a81a      	add	r0, sp, #104	; 0x68
 8006f5a:	f002 fcb0 	bl	80098be <__copybits>
 8006f5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006f60:	4620      	mov	r0, r4
 8006f62:	f002 f86f 	bl	8009044 <_Bfree>
 8006f66:	3f01      	subs	r7, #1
 8006f68:	2f04      	cmp	r7, #4
 8006f6a:	d806      	bhi.n	8006f7a <_strtod_l+0x102>
 8006f6c:	e8df f007 	tbb	[pc, r7]
 8006f70:	1714030a 	.word	0x1714030a
 8006f74:	0a          	.byte	0x0a
 8006f75:	00          	.byte	0x00
 8006f76:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8006f7a:	0728      	lsls	r0, r5, #28
 8006f7c:	d5c0      	bpl.n	8006f00 <_strtod_l+0x88>
 8006f7e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8006f82:	e7bd      	b.n	8006f00 <_strtod_l+0x88>
 8006f84:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8006f88:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8006f8a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006f8e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8006f92:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8006f96:	e7f0      	b.n	8006f7a <_strtod_l+0x102>
 8006f98:	f8df b180 	ldr.w	fp, [pc, #384]	; 800711c <_strtod_l+0x2a4>
 8006f9c:	e7ed      	b.n	8006f7a <_strtod_l+0x102>
 8006f9e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8006fa2:	f04f 3aff 	mov.w	sl, #4294967295
 8006fa6:	e7e8      	b.n	8006f7a <_strtod_l+0x102>
 8006fa8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006faa:	1c5a      	adds	r2, r3, #1
 8006fac:	9217      	str	r2, [sp, #92]	; 0x5c
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b30      	cmp	r3, #48	; 0x30
 8006fb2:	d0f9      	beq.n	8006fa8 <_strtod_l+0x130>
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d0a3      	beq.n	8006f00 <_strtod_l+0x88>
 8006fb8:	2301      	movs	r3, #1
 8006fba:	f04f 0900 	mov.w	r9, #0
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006fc2:	9308      	str	r3, [sp, #32]
 8006fc4:	f8cd 901c 	str.w	r9, [sp, #28]
 8006fc8:	464f      	mov	r7, r9
 8006fca:	220a      	movs	r2, #10
 8006fcc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8006fce:	7806      	ldrb	r6, [r0, #0]
 8006fd0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8006fd4:	b2d9      	uxtb	r1, r3
 8006fd6:	2909      	cmp	r1, #9
 8006fd8:	d92a      	bls.n	8007030 <_strtod_l+0x1b8>
 8006fda:	9905      	ldr	r1, [sp, #20]
 8006fdc:	462a      	mov	r2, r5
 8006fde:	f002 ff1f 	bl	8009e20 <strncmp>
 8006fe2:	b398      	cbz	r0, 800704c <_strtod_l+0x1d4>
 8006fe4:	2000      	movs	r0, #0
 8006fe6:	4632      	mov	r2, r6
 8006fe8:	463d      	mov	r5, r7
 8006fea:	9005      	str	r0, [sp, #20]
 8006fec:	4603      	mov	r3, r0
 8006fee:	2a65      	cmp	r2, #101	; 0x65
 8006ff0:	d001      	beq.n	8006ff6 <_strtod_l+0x17e>
 8006ff2:	2a45      	cmp	r2, #69	; 0x45
 8006ff4:	d118      	bne.n	8007028 <_strtod_l+0x1b0>
 8006ff6:	b91d      	cbnz	r5, 8007000 <_strtod_l+0x188>
 8006ff8:	9a04      	ldr	r2, [sp, #16]
 8006ffa:	4302      	orrs	r2, r0
 8006ffc:	d09e      	beq.n	8006f3c <_strtod_l+0xc4>
 8006ffe:	2500      	movs	r5, #0
 8007000:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8007004:	f108 0201 	add.w	r2, r8, #1
 8007008:	9217      	str	r2, [sp, #92]	; 0x5c
 800700a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800700e:	2a2b      	cmp	r2, #43	; 0x2b
 8007010:	d075      	beq.n	80070fe <_strtod_l+0x286>
 8007012:	2a2d      	cmp	r2, #45	; 0x2d
 8007014:	d07b      	beq.n	800710e <_strtod_l+0x296>
 8007016:	f04f 0c00 	mov.w	ip, #0
 800701a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800701e:	2909      	cmp	r1, #9
 8007020:	f240 8082 	bls.w	8007128 <_strtod_l+0x2b0>
 8007024:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8007028:	2600      	movs	r6, #0
 800702a:	e09d      	b.n	8007168 <_strtod_l+0x2f0>
 800702c:	2300      	movs	r3, #0
 800702e:	e7c4      	b.n	8006fba <_strtod_l+0x142>
 8007030:	2f08      	cmp	r7, #8
 8007032:	bfd8      	it	le
 8007034:	9907      	ldrle	r1, [sp, #28]
 8007036:	f100 0001 	add.w	r0, r0, #1
 800703a:	bfda      	itte	le
 800703c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007040:	9307      	strle	r3, [sp, #28]
 8007042:	fb02 3909 	mlagt	r9, r2, r9, r3
 8007046:	3701      	adds	r7, #1
 8007048:	9017      	str	r0, [sp, #92]	; 0x5c
 800704a:	e7bf      	b.n	8006fcc <_strtod_l+0x154>
 800704c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800704e:	195a      	adds	r2, r3, r5
 8007050:	9217      	str	r2, [sp, #92]	; 0x5c
 8007052:	5d5a      	ldrb	r2, [r3, r5]
 8007054:	2f00      	cmp	r7, #0
 8007056:	d037      	beq.n	80070c8 <_strtod_l+0x250>
 8007058:	9005      	str	r0, [sp, #20]
 800705a:	463d      	mov	r5, r7
 800705c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007060:	2b09      	cmp	r3, #9
 8007062:	d912      	bls.n	800708a <_strtod_l+0x212>
 8007064:	2301      	movs	r3, #1
 8007066:	e7c2      	b.n	8006fee <_strtod_l+0x176>
 8007068:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800706a:	1c5a      	adds	r2, r3, #1
 800706c:	9217      	str	r2, [sp, #92]	; 0x5c
 800706e:	785a      	ldrb	r2, [r3, #1]
 8007070:	3001      	adds	r0, #1
 8007072:	2a30      	cmp	r2, #48	; 0x30
 8007074:	d0f8      	beq.n	8007068 <_strtod_l+0x1f0>
 8007076:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800707a:	2b08      	cmp	r3, #8
 800707c:	f200 84d9 	bhi.w	8007a32 <_strtod_l+0xbba>
 8007080:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007082:	9005      	str	r0, [sp, #20]
 8007084:	2000      	movs	r0, #0
 8007086:	9308      	str	r3, [sp, #32]
 8007088:	4605      	mov	r5, r0
 800708a:	3a30      	subs	r2, #48	; 0x30
 800708c:	f100 0301 	add.w	r3, r0, #1
 8007090:	d014      	beq.n	80070bc <_strtod_l+0x244>
 8007092:	9905      	ldr	r1, [sp, #20]
 8007094:	4419      	add	r1, r3
 8007096:	9105      	str	r1, [sp, #20]
 8007098:	462b      	mov	r3, r5
 800709a:	eb00 0e05 	add.w	lr, r0, r5
 800709e:	210a      	movs	r1, #10
 80070a0:	4573      	cmp	r3, lr
 80070a2:	d113      	bne.n	80070cc <_strtod_l+0x254>
 80070a4:	182b      	adds	r3, r5, r0
 80070a6:	2b08      	cmp	r3, #8
 80070a8:	f105 0501 	add.w	r5, r5, #1
 80070ac:	4405      	add	r5, r0
 80070ae:	dc1c      	bgt.n	80070ea <_strtod_l+0x272>
 80070b0:	9907      	ldr	r1, [sp, #28]
 80070b2:	230a      	movs	r3, #10
 80070b4:	fb03 2301 	mla	r3, r3, r1, r2
 80070b8:	9307      	str	r3, [sp, #28]
 80070ba:	2300      	movs	r3, #0
 80070bc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80070be:	1c51      	adds	r1, r2, #1
 80070c0:	9117      	str	r1, [sp, #92]	; 0x5c
 80070c2:	7852      	ldrb	r2, [r2, #1]
 80070c4:	4618      	mov	r0, r3
 80070c6:	e7c9      	b.n	800705c <_strtod_l+0x1e4>
 80070c8:	4638      	mov	r0, r7
 80070ca:	e7d2      	b.n	8007072 <_strtod_l+0x1fa>
 80070cc:	2b08      	cmp	r3, #8
 80070ce:	dc04      	bgt.n	80070da <_strtod_l+0x262>
 80070d0:	9e07      	ldr	r6, [sp, #28]
 80070d2:	434e      	muls	r6, r1
 80070d4:	9607      	str	r6, [sp, #28]
 80070d6:	3301      	adds	r3, #1
 80070d8:	e7e2      	b.n	80070a0 <_strtod_l+0x228>
 80070da:	f103 0c01 	add.w	ip, r3, #1
 80070de:	f1bc 0f10 	cmp.w	ip, #16
 80070e2:	bfd8      	it	le
 80070e4:	fb01 f909 	mulle.w	r9, r1, r9
 80070e8:	e7f5      	b.n	80070d6 <_strtod_l+0x25e>
 80070ea:	2d10      	cmp	r5, #16
 80070ec:	bfdc      	itt	le
 80070ee:	230a      	movle	r3, #10
 80070f0:	fb03 2909 	mlale	r9, r3, r9, r2
 80070f4:	e7e1      	b.n	80070ba <_strtod_l+0x242>
 80070f6:	2300      	movs	r3, #0
 80070f8:	9305      	str	r3, [sp, #20]
 80070fa:	2301      	movs	r3, #1
 80070fc:	e77c      	b.n	8006ff8 <_strtod_l+0x180>
 80070fe:	f04f 0c00 	mov.w	ip, #0
 8007102:	f108 0202 	add.w	r2, r8, #2
 8007106:	9217      	str	r2, [sp, #92]	; 0x5c
 8007108:	f898 2002 	ldrb.w	r2, [r8, #2]
 800710c:	e785      	b.n	800701a <_strtod_l+0x1a2>
 800710e:	f04f 0c01 	mov.w	ip, #1
 8007112:	e7f6      	b.n	8007102 <_strtod_l+0x28a>
 8007114:	0800c120 	.word	0x0800c120
 8007118:	0800bed8 	.word	0x0800bed8
 800711c:	7ff00000 	.word	0x7ff00000
 8007120:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007122:	1c51      	adds	r1, r2, #1
 8007124:	9117      	str	r1, [sp, #92]	; 0x5c
 8007126:	7852      	ldrb	r2, [r2, #1]
 8007128:	2a30      	cmp	r2, #48	; 0x30
 800712a:	d0f9      	beq.n	8007120 <_strtod_l+0x2a8>
 800712c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007130:	2908      	cmp	r1, #8
 8007132:	f63f af79 	bhi.w	8007028 <_strtod_l+0x1b0>
 8007136:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800713a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800713c:	9206      	str	r2, [sp, #24]
 800713e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007140:	1c51      	adds	r1, r2, #1
 8007142:	9117      	str	r1, [sp, #92]	; 0x5c
 8007144:	7852      	ldrb	r2, [r2, #1]
 8007146:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800714a:	2e09      	cmp	r6, #9
 800714c:	d937      	bls.n	80071be <_strtod_l+0x346>
 800714e:	9e06      	ldr	r6, [sp, #24]
 8007150:	1b89      	subs	r1, r1, r6
 8007152:	2908      	cmp	r1, #8
 8007154:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8007158:	dc02      	bgt.n	8007160 <_strtod_l+0x2e8>
 800715a:	4576      	cmp	r6, lr
 800715c:	bfa8      	it	ge
 800715e:	4676      	movge	r6, lr
 8007160:	f1bc 0f00 	cmp.w	ip, #0
 8007164:	d000      	beq.n	8007168 <_strtod_l+0x2f0>
 8007166:	4276      	negs	r6, r6
 8007168:	2d00      	cmp	r5, #0
 800716a:	d14d      	bne.n	8007208 <_strtod_l+0x390>
 800716c:	9904      	ldr	r1, [sp, #16]
 800716e:	4301      	orrs	r1, r0
 8007170:	f47f aec6 	bne.w	8006f00 <_strtod_l+0x88>
 8007174:	2b00      	cmp	r3, #0
 8007176:	f47f aee1 	bne.w	8006f3c <_strtod_l+0xc4>
 800717a:	2a69      	cmp	r2, #105	; 0x69
 800717c:	d027      	beq.n	80071ce <_strtod_l+0x356>
 800717e:	dc24      	bgt.n	80071ca <_strtod_l+0x352>
 8007180:	2a49      	cmp	r2, #73	; 0x49
 8007182:	d024      	beq.n	80071ce <_strtod_l+0x356>
 8007184:	2a4e      	cmp	r2, #78	; 0x4e
 8007186:	f47f aed9 	bne.w	8006f3c <_strtod_l+0xc4>
 800718a:	499f      	ldr	r1, [pc, #636]	; (8007408 <_strtod_l+0x590>)
 800718c:	a817      	add	r0, sp, #92	; 0x5c
 800718e:	f001 fe3d 	bl	8008e0c <__match>
 8007192:	2800      	cmp	r0, #0
 8007194:	f43f aed2 	beq.w	8006f3c <_strtod_l+0xc4>
 8007198:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800719a:	781b      	ldrb	r3, [r3, #0]
 800719c:	2b28      	cmp	r3, #40	; 0x28
 800719e:	d12d      	bne.n	80071fc <_strtod_l+0x384>
 80071a0:	499a      	ldr	r1, [pc, #616]	; (800740c <_strtod_l+0x594>)
 80071a2:	aa1a      	add	r2, sp, #104	; 0x68
 80071a4:	a817      	add	r0, sp, #92	; 0x5c
 80071a6:	f001 fe45 	bl	8008e34 <__hexnan>
 80071aa:	2805      	cmp	r0, #5
 80071ac:	d126      	bne.n	80071fc <_strtod_l+0x384>
 80071ae:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80071b0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80071b4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80071b8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80071bc:	e6a0      	b.n	8006f00 <_strtod_l+0x88>
 80071be:	210a      	movs	r1, #10
 80071c0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80071c4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80071c8:	e7b9      	b.n	800713e <_strtod_l+0x2c6>
 80071ca:	2a6e      	cmp	r2, #110	; 0x6e
 80071cc:	e7db      	b.n	8007186 <_strtod_l+0x30e>
 80071ce:	4990      	ldr	r1, [pc, #576]	; (8007410 <_strtod_l+0x598>)
 80071d0:	a817      	add	r0, sp, #92	; 0x5c
 80071d2:	f001 fe1b 	bl	8008e0c <__match>
 80071d6:	2800      	cmp	r0, #0
 80071d8:	f43f aeb0 	beq.w	8006f3c <_strtod_l+0xc4>
 80071dc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071de:	498d      	ldr	r1, [pc, #564]	; (8007414 <_strtod_l+0x59c>)
 80071e0:	3b01      	subs	r3, #1
 80071e2:	a817      	add	r0, sp, #92	; 0x5c
 80071e4:	9317      	str	r3, [sp, #92]	; 0x5c
 80071e6:	f001 fe11 	bl	8008e0c <__match>
 80071ea:	b910      	cbnz	r0, 80071f2 <_strtod_l+0x37a>
 80071ec:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80071ee:	3301      	adds	r3, #1
 80071f0:	9317      	str	r3, [sp, #92]	; 0x5c
 80071f2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8007424 <_strtod_l+0x5ac>
 80071f6:	f04f 0a00 	mov.w	sl, #0
 80071fa:	e681      	b.n	8006f00 <_strtod_l+0x88>
 80071fc:	4886      	ldr	r0, [pc, #536]	; (8007418 <_strtod_l+0x5a0>)
 80071fe:	f002 fdf7 	bl	8009df0 <nan>
 8007202:	ec5b ab10 	vmov	sl, fp, d0
 8007206:	e67b      	b.n	8006f00 <_strtod_l+0x88>
 8007208:	9b05      	ldr	r3, [sp, #20]
 800720a:	9807      	ldr	r0, [sp, #28]
 800720c:	1af3      	subs	r3, r6, r3
 800720e:	2f00      	cmp	r7, #0
 8007210:	bf08      	it	eq
 8007212:	462f      	moveq	r7, r5
 8007214:	2d10      	cmp	r5, #16
 8007216:	9306      	str	r3, [sp, #24]
 8007218:	46a8      	mov	r8, r5
 800721a:	bfa8      	it	ge
 800721c:	f04f 0810 	movge.w	r8, #16
 8007220:	f7f9 f970 	bl	8000504 <__aeabi_ui2d>
 8007224:	2d09      	cmp	r5, #9
 8007226:	4682      	mov	sl, r0
 8007228:	468b      	mov	fp, r1
 800722a:	dd13      	ble.n	8007254 <_strtod_l+0x3dc>
 800722c:	4b7b      	ldr	r3, [pc, #492]	; (800741c <_strtod_l+0x5a4>)
 800722e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007232:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007236:	f7f9 f9df 	bl	80005f8 <__aeabi_dmul>
 800723a:	4682      	mov	sl, r0
 800723c:	4648      	mov	r0, r9
 800723e:	468b      	mov	fp, r1
 8007240:	f7f9 f960 	bl	8000504 <__aeabi_ui2d>
 8007244:	4602      	mov	r2, r0
 8007246:	460b      	mov	r3, r1
 8007248:	4650      	mov	r0, sl
 800724a:	4659      	mov	r1, fp
 800724c:	f7f9 f81e 	bl	800028c <__adddf3>
 8007250:	4682      	mov	sl, r0
 8007252:	468b      	mov	fp, r1
 8007254:	2d0f      	cmp	r5, #15
 8007256:	dc38      	bgt.n	80072ca <_strtod_l+0x452>
 8007258:	9b06      	ldr	r3, [sp, #24]
 800725a:	2b00      	cmp	r3, #0
 800725c:	f43f ae50 	beq.w	8006f00 <_strtod_l+0x88>
 8007260:	dd24      	ble.n	80072ac <_strtod_l+0x434>
 8007262:	2b16      	cmp	r3, #22
 8007264:	dc0b      	bgt.n	800727e <_strtod_l+0x406>
 8007266:	496d      	ldr	r1, [pc, #436]	; (800741c <_strtod_l+0x5a4>)
 8007268:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800726c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007270:	4652      	mov	r2, sl
 8007272:	465b      	mov	r3, fp
 8007274:	f7f9 f9c0 	bl	80005f8 <__aeabi_dmul>
 8007278:	4682      	mov	sl, r0
 800727a:	468b      	mov	fp, r1
 800727c:	e640      	b.n	8006f00 <_strtod_l+0x88>
 800727e:	9a06      	ldr	r2, [sp, #24]
 8007280:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8007284:	4293      	cmp	r3, r2
 8007286:	db20      	blt.n	80072ca <_strtod_l+0x452>
 8007288:	4c64      	ldr	r4, [pc, #400]	; (800741c <_strtod_l+0x5a4>)
 800728a:	f1c5 050f 	rsb	r5, r5, #15
 800728e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007292:	4652      	mov	r2, sl
 8007294:	465b      	mov	r3, fp
 8007296:	e9d1 0100 	ldrd	r0, r1, [r1]
 800729a:	f7f9 f9ad 	bl	80005f8 <__aeabi_dmul>
 800729e:	9b06      	ldr	r3, [sp, #24]
 80072a0:	1b5d      	subs	r5, r3, r5
 80072a2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80072a6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80072aa:	e7e3      	b.n	8007274 <_strtod_l+0x3fc>
 80072ac:	9b06      	ldr	r3, [sp, #24]
 80072ae:	3316      	adds	r3, #22
 80072b0:	db0b      	blt.n	80072ca <_strtod_l+0x452>
 80072b2:	9b05      	ldr	r3, [sp, #20]
 80072b4:	1b9e      	subs	r6, r3, r6
 80072b6:	4b59      	ldr	r3, [pc, #356]	; (800741c <_strtod_l+0x5a4>)
 80072b8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80072bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 fac2 	bl	800084c <__aeabi_ddiv>
 80072c8:	e7d6      	b.n	8007278 <_strtod_l+0x400>
 80072ca:	9b06      	ldr	r3, [sp, #24]
 80072cc:	eba5 0808 	sub.w	r8, r5, r8
 80072d0:	4498      	add	r8, r3
 80072d2:	f1b8 0f00 	cmp.w	r8, #0
 80072d6:	dd74      	ble.n	80073c2 <_strtod_l+0x54a>
 80072d8:	f018 030f 	ands.w	r3, r8, #15
 80072dc:	d00a      	beq.n	80072f4 <_strtod_l+0x47c>
 80072de:	494f      	ldr	r1, [pc, #316]	; (800741c <_strtod_l+0x5a4>)
 80072e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80072e4:	4652      	mov	r2, sl
 80072e6:	465b      	mov	r3, fp
 80072e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80072ec:	f7f9 f984 	bl	80005f8 <__aeabi_dmul>
 80072f0:	4682      	mov	sl, r0
 80072f2:	468b      	mov	fp, r1
 80072f4:	f038 080f 	bics.w	r8, r8, #15
 80072f8:	d04f      	beq.n	800739a <_strtod_l+0x522>
 80072fa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 80072fe:	dd22      	ble.n	8007346 <_strtod_l+0x4ce>
 8007300:	2500      	movs	r5, #0
 8007302:	462e      	mov	r6, r5
 8007304:	9507      	str	r5, [sp, #28]
 8007306:	9505      	str	r5, [sp, #20]
 8007308:	2322      	movs	r3, #34	; 0x22
 800730a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8007424 <_strtod_l+0x5ac>
 800730e:	6023      	str	r3, [r4, #0]
 8007310:	f04f 0a00 	mov.w	sl, #0
 8007314:	9b07      	ldr	r3, [sp, #28]
 8007316:	2b00      	cmp	r3, #0
 8007318:	f43f adf2 	beq.w	8006f00 <_strtod_l+0x88>
 800731c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800731e:	4620      	mov	r0, r4
 8007320:	f001 fe90 	bl	8009044 <_Bfree>
 8007324:	9905      	ldr	r1, [sp, #20]
 8007326:	4620      	mov	r0, r4
 8007328:	f001 fe8c 	bl	8009044 <_Bfree>
 800732c:	4631      	mov	r1, r6
 800732e:	4620      	mov	r0, r4
 8007330:	f001 fe88 	bl	8009044 <_Bfree>
 8007334:	9907      	ldr	r1, [sp, #28]
 8007336:	4620      	mov	r0, r4
 8007338:	f001 fe84 	bl	8009044 <_Bfree>
 800733c:	4629      	mov	r1, r5
 800733e:	4620      	mov	r0, r4
 8007340:	f001 fe80 	bl	8009044 <_Bfree>
 8007344:	e5dc      	b.n	8006f00 <_strtod_l+0x88>
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <_strtod_l+0x5a8>)
 8007348:	9304      	str	r3, [sp, #16]
 800734a:	2300      	movs	r3, #0
 800734c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8007350:	4650      	mov	r0, sl
 8007352:	4659      	mov	r1, fp
 8007354:	4699      	mov	r9, r3
 8007356:	f1b8 0f01 	cmp.w	r8, #1
 800735a:	dc21      	bgt.n	80073a0 <_strtod_l+0x528>
 800735c:	b10b      	cbz	r3, 8007362 <_strtod_l+0x4ea>
 800735e:	4682      	mov	sl, r0
 8007360:	468b      	mov	fp, r1
 8007362:	4b2f      	ldr	r3, [pc, #188]	; (8007420 <_strtod_l+0x5a8>)
 8007364:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8007368:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800736c:	4652      	mov	r2, sl
 800736e:	465b      	mov	r3, fp
 8007370:	e9d9 0100 	ldrd	r0, r1, [r9]
 8007374:	f7f9 f940 	bl	80005f8 <__aeabi_dmul>
 8007378:	4b2a      	ldr	r3, [pc, #168]	; (8007424 <_strtod_l+0x5ac>)
 800737a:	460a      	mov	r2, r1
 800737c:	400b      	ands	r3, r1
 800737e:	492a      	ldr	r1, [pc, #168]	; (8007428 <_strtod_l+0x5b0>)
 8007380:	428b      	cmp	r3, r1
 8007382:	4682      	mov	sl, r0
 8007384:	d8bc      	bhi.n	8007300 <_strtod_l+0x488>
 8007386:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800738a:	428b      	cmp	r3, r1
 800738c:	bf86      	itte	hi
 800738e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800742c <_strtod_l+0x5b4>
 8007392:	f04f 3aff 	movhi.w	sl, #4294967295
 8007396:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800739a:	2300      	movs	r3, #0
 800739c:	9304      	str	r3, [sp, #16]
 800739e:	e084      	b.n	80074aa <_strtod_l+0x632>
 80073a0:	f018 0f01 	tst.w	r8, #1
 80073a4:	d005      	beq.n	80073b2 <_strtod_l+0x53a>
 80073a6:	9b04      	ldr	r3, [sp, #16]
 80073a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ac:	f7f9 f924 	bl	80005f8 <__aeabi_dmul>
 80073b0:	2301      	movs	r3, #1
 80073b2:	9a04      	ldr	r2, [sp, #16]
 80073b4:	3208      	adds	r2, #8
 80073b6:	f109 0901 	add.w	r9, r9, #1
 80073ba:	ea4f 0868 	mov.w	r8, r8, asr #1
 80073be:	9204      	str	r2, [sp, #16]
 80073c0:	e7c9      	b.n	8007356 <_strtod_l+0x4de>
 80073c2:	d0ea      	beq.n	800739a <_strtod_l+0x522>
 80073c4:	f1c8 0800 	rsb	r8, r8, #0
 80073c8:	f018 020f 	ands.w	r2, r8, #15
 80073cc:	d00a      	beq.n	80073e4 <_strtod_l+0x56c>
 80073ce:	4b13      	ldr	r3, [pc, #76]	; (800741c <_strtod_l+0x5a4>)
 80073d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073d4:	4650      	mov	r0, sl
 80073d6:	4659      	mov	r1, fp
 80073d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073dc:	f7f9 fa36 	bl	800084c <__aeabi_ddiv>
 80073e0:	4682      	mov	sl, r0
 80073e2:	468b      	mov	fp, r1
 80073e4:	ea5f 1828 	movs.w	r8, r8, asr #4
 80073e8:	d0d7      	beq.n	800739a <_strtod_l+0x522>
 80073ea:	f1b8 0f1f 	cmp.w	r8, #31
 80073ee:	dd1f      	ble.n	8007430 <_strtod_l+0x5b8>
 80073f0:	2500      	movs	r5, #0
 80073f2:	462e      	mov	r6, r5
 80073f4:	9507      	str	r5, [sp, #28]
 80073f6:	9505      	str	r5, [sp, #20]
 80073f8:	2322      	movs	r3, #34	; 0x22
 80073fa:	f04f 0a00 	mov.w	sl, #0
 80073fe:	f04f 0b00 	mov.w	fp, #0
 8007402:	6023      	str	r3, [r4, #0]
 8007404:	e786      	b.n	8007314 <_strtod_l+0x49c>
 8007406:	bf00      	nop
 8007408:	0800bea9 	.word	0x0800bea9
 800740c:	0800beec 	.word	0x0800beec
 8007410:	0800bea1 	.word	0x0800bea1
 8007414:	0800c02c 	.word	0x0800c02c
 8007418:	0800c2d8 	.word	0x0800c2d8
 800741c:	0800c1b8 	.word	0x0800c1b8
 8007420:	0800c190 	.word	0x0800c190
 8007424:	7ff00000 	.word	0x7ff00000
 8007428:	7ca00000 	.word	0x7ca00000
 800742c:	7fefffff 	.word	0x7fefffff
 8007430:	f018 0310 	ands.w	r3, r8, #16
 8007434:	bf18      	it	ne
 8007436:	236a      	movne	r3, #106	; 0x6a
 8007438:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 80077e8 <_strtod_l+0x970>
 800743c:	9304      	str	r3, [sp, #16]
 800743e:	4650      	mov	r0, sl
 8007440:	4659      	mov	r1, fp
 8007442:	2300      	movs	r3, #0
 8007444:	f018 0f01 	tst.w	r8, #1
 8007448:	d004      	beq.n	8007454 <_strtod_l+0x5dc>
 800744a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800744e:	f7f9 f8d3 	bl	80005f8 <__aeabi_dmul>
 8007452:	2301      	movs	r3, #1
 8007454:	ea5f 0868 	movs.w	r8, r8, asr #1
 8007458:	f109 0908 	add.w	r9, r9, #8
 800745c:	d1f2      	bne.n	8007444 <_strtod_l+0x5cc>
 800745e:	b10b      	cbz	r3, 8007464 <_strtod_l+0x5ec>
 8007460:	4682      	mov	sl, r0
 8007462:	468b      	mov	fp, r1
 8007464:	9b04      	ldr	r3, [sp, #16]
 8007466:	b1c3      	cbz	r3, 800749a <_strtod_l+0x622>
 8007468:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800746c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007470:	2b00      	cmp	r3, #0
 8007472:	4659      	mov	r1, fp
 8007474:	dd11      	ble.n	800749a <_strtod_l+0x622>
 8007476:	2b1f      	cmp	r3, #31
 8007478:	f340 8124 	ble.w	80076c4 <_strtod_l+0x84c>
 800747c:	2b34      	cmp	r3, #52	; 0x34
 800747e:	bfde      	ittt	le
 8007480:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007484:	f04f 33ff 	movle.w	r3, #4294967295
 8007488:	fa03 f202 	lslle.w	r2, r3, r2
 800748c:	f04f 0a00 	mov.w	sl, #0
 8007490:	bfcc      	ite	gt
 8007492:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8007496:	ea02 0b01 	andle.w	fp, r2, r1
 800749a:	2200      	movs	r2, #0
 800749c:	2300      	movs	r3, #0
 800749e:	4650      	mov	r0, sl
 80074a0:	4659      	mov	r1, fp
 80074a2:	f7f9 fb11 	bl	8000ac8 <__aeabi_dcmpeq>
 80074a6:	2800      	cmp	r0, #0
 80074a8:	d1a2      	bne.n	80073f0 <_strtod_l+0x578>
 80074aa:	9b07      	ldr	r3, [sp, #28]
 80074ac:	9300      	str	r3, [sp, #0]
 80074ae:	9908      	ldr	r1, [sp, #32]
 80074b0:	462b      	mov	r3, r5
 80074b2:	463a      	mov	r2, r7
 80074b4:	4620      	mov	r0, r4
 80074b6:	f001 fe2d 	bl	8009114 <__s2b>
 80074ba:	9007      	str	r0, [sp, #28]
 80074bc:	2800      	cmp	r0, #0
 80074be:	f43f af1f 	beq.w	8007300 <_strtod_l+0x488>
 80074c2:	9b05      	ldr	r3, [sp, #20]
 80074c4:	1b9e      	subs	r6, r3, r6
 80074c6:	9b06      	ldr	r3, [sp, #24]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	bfb4      	ite	lt
 80074cc:	4633      	movlt	r3, r6
 80074ce:	2300      	movge	r3, #0
 80074d0:	930c      	str	r3, [sp, #48]	; 0x30
 80074d2:	9b06      	ldr	r3, [sp, #24]
 80074d4:	2500      	movs	r5, #0
 80074d6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80074da:	9312      	str	r3, [sp, #72]	; 0x48
 80074dc:	462e      	mov	r6, r5
 80074de:	9b07      	ldr	r3, [sp, #28]
 80074e0:	4620      	mov	r0, r4
 80074e2:	6859      	ldr	r1, [r3, #4]
 80074e4:	f001 fd6e 	bl	8008fc4 <_Balloc>
 80074e8:	9005      	str	r0, [sp, #20]
 80074ea:	2800      	cmp	r0, #0
 80074ec:	f43f af0c 	beq.w	8007308 <_strtod_l+0x490>
 80074f0:	9b07      	ldr	r3, [sp, #28]
 80074f2:	691a      	ldr	r2, [r3, #16]
 80074f4:	3202      	adds	r2, #2
 80074f6:	f103 010c 	add.w	r1, r3, #12
 80074fa:	0092      	lsls	r2, r2, #2
 80074fc:	300c      	adds	r0, #12
 80074fe:	f001 fd53 	bl	8008fa8 <memcpy>
 8007502:	ec4b ab10 	vmov	d0, sl, fp
 8007506:	aa1a      	add	r2, sp, #104	; 0x68
 8007508:	a919      	add	r1, sp, #100	; 0x64
 800750a:	4620      	mov	r0, r4
 800750c:	f002 f948 	bl	80097a0 <__d2b>
 8007510:	ec4b ab18 	vmov	d8, sl, fp
 8007514:	9018      	str	r0, [sp, #96]	; 0x60
 8007516:	2800      	cmp	r0, #0
 8007518:	f43f aef6 	beq.w	8007308 <_strtod_l+0x490>
 800751c:	2101      	movs	r1, #1
 800751e:	4620      	mov	r0, r4
 8007520:	f001 fe92 	bl	8009248 <__i2b>
 8007524:	4606      	mov	r6, r0
 8007526:	2800      	cmp	r0, #0
 8007528:	f43f aeee 	beq.w	8007308 <_strtod_l+0x490>
 800752c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800752e:	9904      	ldr	r1, [sp, #16]
 8007530:	2b00      	cmp	r3, #0
 8007532:	bfab      	itete	ge
 8007534:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8007536:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8007538:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800753a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800753e:	bfac      	ite	ge
 8007540:	eb03 0902 	addge.w	r9, r3, r2
 8007544:	1ad7      	sublt	r7, r2, r3
 8007546:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007548:	eba3 0801 	sub.w	r8, r3, r1
 800754c:	4490      	add	r8, r2
 800754e:	4ba1      	ldr	r3, [pc, #644]	; (80077d4 <_strtod_l+0x95c>)
 8007550:	f108 38ff 	add.w	r8, r8, #4294967295
 8007554:	4598      	cmp	r8, r3
 8007556:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800755a:	f280 80c7 	bge.w	80076ec <_strtod_l+0x874>
 800755e:	eba3 0308 	sub.w	r3, r3, r8
 8007562:	2b1f      	cmp	r3, #31
 8007564:	eba2 0203 	sub.w	r2, r2, r3
 8007568:	f04f 0101 	mov.w	r1, #1
 800756c:	f300 80b1 	bgt.w	80076d2 <_strtod_l+0x85a>
 8007570:	fa01 f303 	lsl.w	r3, r1, r3
 8007574:	930d      	str	r3, [sp, #52]	; 0x34
 8007576:	2300      	movs	r3, #0
 8007578:	9308      	str	r3, [sp, #32]
 800757a:	eb09 0802 	add.w	r8, r9, r2
 800757e:	9b04      	ldr	r3, [sp, #16]
 8007580:	45c1      	cmp	r9, r8
 8007582:	4417      	add	r7, r2
 8007584:	441f      	add	r7, r3
 8007586:	464b      	mov	r3, r9
 8007588:	bfa8      	it	ge
 800758a:	4643      	movge	r3, r8
 800758c:	42bb      	cmp	r3, r7
 800758e:	bfa8      	it	ge
 8007590:	463b      	movge	r3, r7
 8007592:	2b00      	cmp	r3, #0
 8007594:	bfc2      	ittt	gt
 8007596:	eba8 0803 	subgt.w	r8, r8, r3
 800759a:	1aff      	subgt	r7, r7, r3
 800759c:	eba9 0903 	subgt.w	r9, r9, r3
 80075a0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	dd17      	ble.n	80075d6 <_strtod_l+0x75e>
 80075a6:	4631      	mov	r1, r6
 80075a8:	461a      	mov	r2, r3
 80075aa:	4620      	mov	r0, r4
 80075ac:	f001 ff0c 	bl	80093c8 <__pow5mult>
 80075b0:	4606      	mov	r6, r0
 80075b2:	2800      	cmp	r0, #0
 80075b4:	f43f aea8 	beq.w	8007308 <_strtod_l+0x490>
 80075b8:	4601      	mov	r1, r0
 80075ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80075bc:	4620      	mov	r0, r4
 80075be:	f001 fe59 	bl	8009274 <__multiply>
 80075c2:	900b      	str	r0, [sp, #44]	; 0x2c
 80075c4:	2800      	cmp	r0, #0
 80075c6:	f43f ae9f 	beq.w	8007308 <_strtod_l+0x490>
 80075ca:	9918      	ldr	r1, [sp, #96]	; 0x60
 80075cc:	4620      	mov	r0, r4
 80075ce:	f001 fd39 	bl	8009044 <_Bfree>
 80075d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80075d4:	9318      	str	r3, [sp, #96]	; 0x60
 80075d6:	f1b8 0f00 	cmp.w	r8, #0
 80075da:	f300 808c 	bgt.w	80076f6 <_strtod_l+0x87e>
 80075de:	9b06      	ldr	r3, [sp, #24]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	dd08      	ble.n	80075f6 <_strtod_l+0x77e>
 80075e4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075e6:	9905      	ldr	r1, [sp, #20]
 80075e8:	4620      	mov	r0, r4
 80075ea:	f001 feed 	bl	80093c8 <__pow5mult>
 80075ee:	9005      	str	r0, [sp, #20]
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f43f ae89 	beq.w	8007308 <_strtod_l+0x490>
 80075f6:	2f00      	cmp	r7, #0
 80075f8:	dd08      	ble.n	800760c <_strtod_l+0x794>
 80075fa:	9905      	ldr	r1, [sp, #20]
 80075fc:	463a      	mov	r2, r7
 80075fe:	4620      	mov	r0, r4
 8007600:	f001 ff3c 	bl	800947c <__lshift>
 8007604:	9005      	str	r0, [sp, #20]
 8007606:	2800      	cmp	r0, #0
 8007608:	f43f ae7e 	beq.w	8007308 <_strtod_l+0x490>
 800760c:	f1b9 0f00 	cmp.w	r9, #0
 8007610:	dd08      	ble.n	8007624 <_strtod_l+0x7ac>
 8007612:	4631      	mov	r1, r6
 8007614:	464a      	mov	r2, r9
 8007616:	4620      	mov	r0, r4
 8007618:	f001 ff30 	bl	800947c <__lshift>
 800761c:	4606      	mov	r6, r0
 800761e:	2800      	cmp	r0, #0
 8007620:	f43f ae72 	beq.w	8007308 <_strtod_l+0x490>
 8007624:	9a05      	ldr	r2, [sp, #20]
 8007626:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007628:	4620      	mov	r0, r4
 800762a:	f001 ffb3 	bl	8009594 <__mdiff>
 800762e:	4605      	mov	r5, r0
 8007630:	2800      	cmp	r0, #0
 8007632:	f43f ae69 	beq.w	8007308 <_strtod_l+0x490>
 8007636:	68c3      	ldr	r3, [r0, #12]
 8007638:	930b      	str	r3, [sp, #44]	; 0x2c
 800763a:	2300      	movs	r3, #0
 800763c:	60c3      	str	r3, [r0, #12]
 800763e:	4631      	mov	r1, r6
 8007640:	f001 ff8c 	bl	800955c <__mcmp>
 8007644:	2800      	cmp	r0, #0
 8007646:	da60      	bge.n	800770a <_strtod_l+0x892>
 8007648:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800764a:	ea53 030a 	orrs.w	r3, r3, sl
 800764e:	f040 8082 	bne.w	8007756 <_strtod_l+0x8de>
 8007652:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007656:	2b00      	cmp	r3, #0
 8007658:	d17d      	bne.n	8007756 <_strtod_l+0x8de>
 800765a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800765e:	0d1b      	lsrs	r3, r3, #20
 8007660:	051b      	lsls	r3, r3, #20
 8007662:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8007666:	d976      	bls.n	8007756 <_strtod_l+0x8de>
 8007668:	696b      	ldr	r3, [r5, #20]
 800766a:	b913      	cbnz	r3, 8007672 <_strtod_l+0x7fa>
 800766c:	692b      	ldr	r3, [r5, #16]
 800766e:	2b01      	cmp	r3, #1
 8007670:	dd71      	ble.n	8007756 <_strtod_l+0x8de>
 8007672:	4629      	mov	r1, r5
 8007674:	2201      	movs	r2, #1
 8007676:	4620      	mov	r0, r4
 8007678:	f001 ff00 	bl	800947c <__lshift>
 800767c:	4631      	mov	r1, r6
 800767e:	4605      	mov	r5, r0
 8007680:	f001 ff6c 	bl	800955c <__mcmp>
 8007684:	2800      	cmp	r0, #0
 8007686:	dd66      	ble.n	8007756 <_strtod_l+0x8de>
 8007688:	9904      	ldr	r1, [sp, #16]
 800768a:	4a53      	ldr	r2, [pc, #332]	; (80077d8 <_strtod_l+0x960>)
 800768c:	465b      	mov	r3, fp
 800768e:	2900      	cmp	r1, #0
 8007690:	f000 8081 	beq.w	8007796 <_strtod_l+0x91e>
 8007694:	ea02 010b 	and.w	r1, r2, fp
 8007698:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800769c:	dc7b      	bgt.n	8007796 <_strtod_l+0x91e>
 800769e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80076a2:	f77f aea9 	ble.w	80073f8 <_strtod_l+0x580>
 80076a6:	4b4d      	ldr	r3, [pc, #308]	; (80077dc <_strtod_l+0x964>)
 80076a8:	4650      	mov	r0, sl
 80076aa:	4659      	mov	r1, fp
 80076ac:	2200      	movs	r2, #0
 80076ae:	f7f8 ffa3 	bl	80005f8 <__aeabi_dmul>
 80076b2:	460b      	mov	r3, r1
 80076b4:	4303      	orrs	r3, r0
 80076b6:	bf08      	it	eq
 80076b8:	2322      	moveq	r3, #34	; 0x22
 80076ba:	4682      	mov	sl, r0
 80076bc:	468b      	mov	fp, r1
 80076be:	bf08      	it	eq
 80076c0:	6023      	streq	r3, [r4, #0]
 80076c2:	e62b      	b.n	800731c <_strtod_l+0x4a4>
 80076c4:	f04f 32ff 	mov.w	r2, #4294967295
 80076c8:	fa02 f303 	lsl.w	r3, r2, r3
 80076cc:	ea03 0a0a 	and.w	sl, r3, sl
 80076d0:	e6e3      	b.n	800749a <_strtod_l+0x622>
 80076d2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 80076d6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 80076da:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 80076de:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 80076e2:	fa01 f308 	lsl.w	r3, r1, r8
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	910d      	str	r1, [sp, #52]	; 0x34
 80076ea:	e746      	b.n	800757a <_strtod_l+0x702>
 80076ec:	2300      	movs	r3, #0
 80076ee:	9308      	str	r3, [sp, #32]
 80076f0:	2301      	movs	r3, #1
 80076f2:	930d      	str	r3, [sp, #52]	; 0x34
 80076f4:	e741      	b.n	800757a <_strtod_l+0x702>
 80076f6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80076f8:	4642      	mov	r2, r8
 80076fa:	4620      	mov	r0, r4
 80076fc:	f001 febe 	bl	800947c <__lshift>
 8007700:	9018      	str	r0, [sp, #96]	; 0x60
 8007702:	2800      	cmp	r0, #0
 8007704:	f47f af6b 	bne.w	80075de <_strtod_l+0x766>
 8007708:	e5fe      	b.n	8007308 <_strtod_l+0x490>
 800770a:	465f      	mov	r7, fp
 800770c:	d16e      	bne.n	80077ec <_strtod_l+0x974>
 800770e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007710:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007714:	b342      	cbz	r2, 8007768 <_strtod_l+0x8f0>
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <_strtod_l+0x968>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d128      	bne.n	800776e <_strtod_l+0x8f6>
 800771c:	9b04      	ldr	r3, [sp, #16]
 800771e:	4651      	mov	r1, sl
 8007720:	b1eb      	cbz	r3, 800775e <_strtod_l+0x8e6>
 8007722:	4b2d      	ldr	r3, [pc, #180]	; (80077d8 <_strtod_l+0x960>)
 8007724:	403b      	ands	r3, r7
 8007726:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800772a:	f04f 32ff 	mov.w	r2, #4294967295
 800772e:	d819      	bhi.n	8007764 <_strtod_l+0x8ec>
 8007730:	0d1b      	lsrs	r3, r3, #20
 8007732:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007736:	fa02 f303 	lsl.w	r3, r2, r3
 800773a:	4299      	cmp	r1, r3
 800773c:	d117      	bne.n	800776e <_strtod_l+0x8f6>
 800773e:	4b29      	ldr	r3, [pc, #164]	; (80077e4 <_strtod_l+0x96c>)
 8007740:	429f      	cmp	r7, r3
 8007742:	d102      	bne.n	800774a <_strtod_l+0x8d2>
 8007744:	3101      	adds	r1, #1
 8007746:	f43f addf 	beq.w	8007308 <_strtod_l+0x490>
 800774a:	4b23      	ldr	r3, [pc, #140]	; (80077d8 <_strtod_l+0x960>)
 800774c:	403b      	ands	r3, r7
 800774e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8007752:	f04f 0a00 	mov.w	sl, #0
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1a4      	bne.n	80076a6 <_strtod_l+0x82e>
 800775c:	e5de      	b.n	800731c <_strtod_l+0x4a4>
 800775e:	f04f 33ff 	mov.w	r3, #4294967295
 8007762:	e7ea      	b.n	800773a <_strtod_l+0x8c2>
 8007764:	4613      	mov	r3, r2
 8007766:	e7e8      	b.n	800773a <_strtod_l+0x8c2>
 8007768:	ea53 030a 	orrs.w	r3, r3, sl
 800776c:	d08c      	beq.n	8007688 <_strtod_l+0x810>
 800776e:	9b08      	ldr	r3, [sp, #32]
 8007770:	b1db      	cbz	r3, 80077aa <_strtod_l+0x932>
 8007772:	423b      	tst	r3, r7
 8007774:	d0ef      	beq.n	8007756 <_strtod_l+0x8de>
 8007776:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007778:	9a04      	ldr	r2, [sp, #16]
 800777a:	4650      	mov	r0, sl
 800777c:	4659      	mov	r1, fp
 800777e:	b1c3      	cbz	r3, 80077b2 <_strtod_l+0x93a>
 8007780:	f7ff fb5c 	bl	8006e3c <sulp>
 8007784:	4602      	mov	r2, r0
 8007786:	460b      	mov	r3, r1
 8007788:	ec51 0b18 	vmov	r0, r1, d8
 800778c:	f7f8 fd7e 	bl	800028c <__adddf3>
 8007790:	4682      	mov	sl, r0
 8007792:	468b      	mov	fp, r1
 8007794:	e7df      	b.n	8007756 <_strtod_l+0x8de>
 8007796:	4013      	ands	r3, r2
 8007798:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800779c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80077a0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80077a4:	f04f 3aff 	mov.w	sl, #4294967295
 80077a8:	e7d5      	b.n	8007756 <_strtod_l+0x8de>
 80077aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80077ac:	ea13 0f0a 	tst.w	r3, sl
 80077b0:	e7e0      	b.n	8007774 <_strtod_l+0x8fc>
 80077b2:	f7ff fb43 	bl	8006e3c <sulp>
 80077b6:	4602      	mov	r2, r0
 80077b8:	460b      	mov	r3, r1
 80077ba:	ec51 0b18 	vmov	r0, r1, d8
 80077be:	f7f8 fd63 	bl	8000288 <__aeabi_dsub>
 80077c2:	2200      	movs	r2, #0
 80077c4:	2300      	movs	r3, #0
 80077c6:	4682      	mov	sl, r0
 80077c8:	468b      	mov	fp, r1
 80077ca:	f7f9 f97d 	bl	8000ac8 <__aeabi_dcmpeq>
 80077ce:	2800      	cmp	r0, #0
 80077d0:	d0c1      	beq.n	8007756 <_strtod_l+0x8de>
 80077d2:	e611      	b.n	80073f8 <_strtod_l+0x580>
 80077d4:	fffffc02 	.word	0xfffffc02
 80077d8:	7ff00000 	.word	0x7ff00000
 80077dc:	39500000 	.word	0x39500000
 80077e0:	000fffff 	.word	0x000fffff
 80077e4:	7fefffff 	.word	0x7fefffff
 80077e8:	0800bf00 	.word	0x0800bf00
 80077ec:	4631      	mov	r1, r6
 80077ee:	4628      	mov	r0, r5
 80077f0:	f002 f832 	bl	8009858 <__ratio>
 80077f4:	ec59 8b10 	vmov	r8, r9, d0
 80077f8:	ee10 0a10 	vmov	r0, s0
 80077fc:	2200      	movs	r2, #0
 80077fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007802:	4649      	mov	r1, r9
 8007804:	f7f9 f974 	bl	8000af0 <__aeabi_dcmple>
 8007808:	2800      	cmp	r0, #0
 800780a:	d07a      	beq.n	8007902 <_strtod_l+0xa8a>
 800780c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d04a      	beq.n	80078a8 <_strtod_l+0xa30>
 8007812:	4b95      	ldr	r3, [pc, #596]	; (8007a68 <_strtod_l+0xbf0>)
 8007814:	2200      	movs	r2, #0
 8007816:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800781a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8007a68 <_strtod_l+0xbf0>
 800781e:	f04f 0800 	mov.w	r8, #0
 8007822:	4b92      	ldr	r3, [pc, #584]	; (8007a6c <_strtod_l+0xbf4>)
 8007824:	403b      	ands	r3, r7
 8007826:	930d      	str	r3, [sp, #52]	; 0x34
 8007828:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800782a:	4b91      	ldr	r3, [pc, #580]	; (8007a70 <_strtod_l+0xbf8>)
 800782c:	429a      	cmp	r2, r3
 800782e:	f040 80b0 	bne.w	8007992 <_strtod_l+0xb1a>
 8007832:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007836:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800783a:	ec4b ab10 	vmov	d0, sl, fp
 800783e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8007842:	f001 ff31 	bl	80096a8 <__ulp>
 8007846:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800784a:	ec53 2b10 	vmov	r2, r3, d0
 800784e:	f7f8 fed3 	bl	80005f8 <__aeabi_dmul>
 8007852:	4652      	mov	r2, sl
 8007854:	465b      	mov	r3, fp
 8007856:	f7f8 fd19 	bl	800028c <__adddf3>
 800785a:	460b      	mov	r3, r1
 800785c:	4983      	ldr	r1, [pc, #524]	; (8007a6c <_strtod_l+0xbf4>)
 800785e:	4a85      	ldr	r2, [pc, #532]	; (8007a74 <_strtod_l+0xbfc>)
 8007860:	4019      	ands	r1, r3
 8007862:	4291      	cmp	r1, r2
 8007864:	4682      	mov	sl, r0
 8007866:	d960      	bls.n	800792a <_strtod_l+0xab2>
 8007868:	ee18 3a90 	vmov	r3, s17
 800786c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8007870:	4293      	cmp	r3, r2
 8007872:	d104      	bne.n	800787e <_strtod_l+0xa06>
 8007874:	ee18 3a10 	vmov	r3, s16
 8007878:	3301      	adds	r3, #1
 800787a:	f43f ad45 	beq.w	8007308 <_strtod_l+0x490>
 800787e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8007a80 <_strtod_l+0xc08>
 8007882:	f04f 3aff 	mov.w	sl, #4294967295
 8007886:	9918      	ldr	r1, [sp, #96]	; 0x60
 8007888:	4620      	mov	r0, r4
 800788a:	f001 fbdb 	bl	8009044 <_Bfree>
 800788e:	9905      	ldr	r1, [sp, #20]
 8007890:	4620      	mov	r0, r4
 8007892:	f001 fbd7 	bl	8009044 <_Bfree>
 8007896:	4631      	mov	r1, r6
 8007898:	4620      	mov	r0, r4
 800789a:	f001 fbd3 	bl	8009044 <_Bfree>
 800789e:	4629      	mov	r1, r5
 80078a0:	4620      	mov	r0, r4
 80078a2:	f001 fbcf 	bl	8009044 <_Bfree>
 80078a6:	e61a      	b.n	80074de <_strtod_l+0x666>
 80078a8:	f1ba 0f00 	cmp.w	sl, #0
 80078ac:	d11b      	bne.n	80078e6 <_strtod_l+0xa6e>
 80078ae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80078b2:	b9f3      	cbnz	r3, 80078f2 <_strtod_l+0xa7a>
 80078b4:	4b6c      	ldr	r3, [pc, #432]	; (8007a68 <_strtod_l+0xbf0>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	4640      	mov	r0, r8
 80078ba:	4649      	mov	r1, r9
 80078bc:	f7f9 f90e 	bl	8000adc <__aeabi_dcmplt>
 80078c0:	b9d0      	cbnz	r0, 80078f8 <_strtod_l+0xa80>
 80078c2:	4640      	mov	r0, r8
 80078c4:	4649      	mov	r1, r9
 80078c6:	4b6c      	ldr	r3, [pc, #432]	; (8007a78 <_strtod_l+0xc00>)
 80078c8:	2200      	movs	r2, #0
 80078ca:	f7f8 fe95 	bl	80005f8 <__aeabi_dmul>
 80078ce:	4680      	mov	r8, r0
 80078d0:	4689      	mov	r9, r1
 80078d2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80078d6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 80078da:	9315      	str	r3, [sp, #84]	; 0x54
 80078dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80078e0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80078e4:	e79d      	b.n	8007822 <_strtod_l+0x9aa>
 80078e6:	f1ba 0f01 	cmp.w	sl, #1
 80078ea:	d102      	bne.n	80078f2 <_strtod_l+0xa7a>
 80078ec:	2f00      	cmp	r7, #0
 80078ee:	f43f ad83 	beq.w	80073f8 <_strtod_l+0x580>
 80078f2:	4b62      	ldr	r3, [pc, #392]	; (8007a7c <_strtod_l+0xc04>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	e78e      	b.n	8007816 <_strtod_l+0x99e>
 80078f8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8007a78 <_strtod_l+0xc00>
 80078fc:	f04f 0800 	mov.w	r8, #0
 8007900:	e7e7      	b.n	80078d2 <_strtod_l+0xa5a>
 8007902:	4b5d      	ldr	r3, [pc, #372]	; (8007a78 <_strtod_l+0xc00>)
 8007904:	4640      	mov	r0, r8
 8007906:	4649      	mov	r1, r9
 8007908:	2200      	movs	r2, #0
 800790a:	f7f8 fe75 	bl	80005f8 <__aeabi_dmul>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	4680      	mov	r8, r0
 8007912:	4689      	mov	r9, r1
 8007914:	b933      	cbnz	r3, 8007924 <_strtod_l+0xaac>
 8007916:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800791a:	900e      	str	r0, [sp, #56]	; 0x38
 800791c:	930f      	str	r3, [sp, #60]	; 0x3c
 800791e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8007922:	e7dd      	b.n	80078e0 <_strtod_l+0xa68>
 8007924:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8007928:	e7f9      	b.n	800791e <_strtod_l+0xaa6>
 800792a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800792e:	9b04      	ldr	r3, [sp, #16]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d1a8      	bne.n	8007886 <_strtod_l+0xa0e>
 8007934:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007938:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800793a:	0d1b      	lsrs	r3, r3, #20
 800793c:	051b      	lsls	r3, r3, #20
 800793e:	429a      	cmp	r2, r3
 8007940:	d1a1      	bne.n	8007886 <_strtod_l+0xa0e>
 8007942:	4640      	mov	r0, r8
 8007944:	4649      	mov	r1, r9
 8007946:	f7f9 f99f 	bl	8000c88 <__aeabi_d2lz>
 800794a:	f7f8 fe27 	bl	800059c <__aeabi_l2d>
 800794e:	4602      	mov	r2, r0
 8007950:	460b      	mov	r3, r1
 8007952:	4640      	mov	r0, r8
 8007954:	4649      	mov	r1, r9
 8007956:	f7f8 fc97 	bl	8000288 <__aeabi_dsub>
 800795a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800795c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007960:	ea43 030a 	orr.w	r3, r3, sl
 8007964:	4313      	orrs	r3, r2
 8007966:	4680      	mov	r8, r0
 8007968:	4689      	mov	r9, r1
 800796a:	d055      	beq.n	8007a18 <_strtod_l+0xba0>
 800796c:	a336      	add	r3, pc, #216	; (adr r3, 8007a48 <_strtod_l+0xbd0>)
 800796e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007972:	f7f9 f8b3 	bl	8000adc <__aeabi_dcmplt>
 8007976:	2800      	cmp	r0, #0
 8007978:	f47f acd0 	bne.w	800731c <_strtod_l+0x4a4>
 800797c:	a334      	add	r3, pc, #208	; (adr r3, 8007a50 <_strtod_l+0xbd8>)
 800797e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007982:	4640      	mov	r0, r8
 8007984:	4649      	mov	r1, r9
 8007986:	f7f9 f8c7 	bl	8000b18 <__aeabi_dcmpgt>
 800798a:	2800      	cmp	r0, #0
 800798c:	f43f af7b 	beq.w	8007886 <_strtod_l+0xa0e>
 8007990:	e4c4      	b.n	800731c <_strtod_l+0x4a4>
 8007992:	9b04      	ldr	r3, [sp, #16]
 8007994:	b333      	cbz	r3, 80079e4 <_strtod_l+0xb6c>
 8007996:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007998:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800799c:	d822      	bhi.n	80079e4 <_strtod_l+0xb6c>
 800799e:	a32e      	add	r3, pc, #184	; (adr r3, 8007a58 <_strtod_l+0xbe0>)
 80079a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079a4:	4640      	mov	r0, r8
 80079a6:	4649      	mov	r1, r9
 80079a8:	f7f9 f8a2 	bl	8000af0 <__aeabi_dcmple>
 80079ac:	b1a0      	cbz	r0, 80079d8 <_strtod_l+0xb60>
 80079ae:	4649      	mov	r1, r9
 80079b0:	4640      	mov	r0, r8
 80079b2:	f7f9 f8f9 	bl	8000ba8 <__aeabi_d2uiz>
 80079b6:	2801      	cmp	r0, #1
 80079b8:	bf38      	it	cc
 80079ba:	2001      	movcc	r0, #1
 80079bc:	f7f8 fda2 	bl	8000504 <__aeabi_ui2d>
 80079c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079c2:	4680      	mov	r8, r0
 80079c4:	4689      	mov	r9, r1
 80079c6:	bb23      	cbnz	r3, 8007a12 <_strtod_l+0xb9a>
 80079c8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80079cc:	9010      	str	r0, [sp, #64]	; 0x40
 80079ce:	9311      	str	r3, [sp, #68]	; 0x44
 80079d0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80079d4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80079d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80079da:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80079dc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80079e0:	1a9b      	subs	r3, r3, r2
 80079e2:	9309      	str	r3, [sp, #36]	; 0x24
 80079e4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079e8:	eeb0 0a48 	vmov.f32	s0, s16
 80079ec:	eef0 0a68 	vmov.f32	s1, s17
 80079f0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80079f4:	f001 fe58 	bl	80096a8 <__ulp>
 80079f8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80079fc:	ec53 2b10 	vmov	r2, r3, d0
 8007a00:	f7f8 fdfa 	bl	80005f8 <__aeabi_dmul>
 8007a04:	ec53 2b18 	vmov	r2, r3, d8
 8007a08:	f7f8 fc40 	bl	800028c <__adddf3>
 8007a0c:	4682      	mov	sl, r0
 8007a0e:	468b      	mov	fp, r1
 8007a10:	e78d      	b.n	800792e <_strtod_l+0xab6>
 8007a12:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8007a16:	e7db      	b.n	80079d0 <_strtod_l+0xb58>
 8007a18:	a311      	add	r3, pc, #68	; (adr r3, 8007a60 <_strtod_l+0xbe8>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f9 f85d 	bl	8000adc <__aeabi_dcmplt>
 8007a22:	e7b2      	b.n	800798a <_strtod_l+0xb12>
 8007a24:	2300      	movs	r3, #0
 8007a26:	930a      	str	r3, [sp, #40]	; 0x28
 8007a28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007a2a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	f7ff ba6b 	b.w	8006f08 <_strtod_l+0x90>
 8007a32:	2a65      	cmp	r2, #101	; 0x65
 8007a34:	f43f ab5f 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a38:	2a45      	cmp	r2, #69	; 0x45
 8007a3a:	f43f ab5c 	beq.w	80070f6 <_strtod_l+0x27e>
 8007a3e:	2301      	movs	r3, #1
 8007a40:	f7ff bb94 	b.w	800716c <_strtod_l+0x2f4>
 8007a44:	f3af 8000 	nop.w
 8007a48:	94a03595 	.word	0x94a03595
 8007a4c:	3fdfffff 	.word	0x3fdfffff
 8007a50:	35afe535 	.word	0x35afe535
 8007a54:	3fe00000 	.word	0x3fe00000
 8007a58:	ffc00000 	.word	0xffc00000
 8007a5c:	41dfffff 	.word	0x41dfffff
 8007a60:	94a03595 	.word	0x94a03595
 8007a64:	3fcfffff 	.word	0x3fcfffff
 8007a68:	3ff00000 	.word	0x3ff00000
 8007a6c:	7ff00000 	.word	0x7ff00000
 8007a70:	7fe00000 	.word	0x7fe00000
 8007a74:	7c9fffff 	.word	0x7c9fffff
 8007a78:	3fe00000 	.word	0x3fe00000
 8007a7c:	bff00000 	.word	0xbff00000
 8007a80:	7fefffff 	.word	0x7fefffff

08007a84 <_strtod_r>:
 8007a84:	4b01      	ldr	r3, [pc, #4]	; (8007a8c <_strtod_r+0x8>)
 8007a86:	f7ff b9f7 	b.w	8006e78 <_strtod_l>
 8007a8a:	bf00      	nop
 8007a8c:	200000b0 	.word	0x200000b0

08007a90 <_strtol_l.constprop.0>:
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a96:	d001      	beq.n	8007a9c <_strtol_l.constprop.0+0xc>
 8007a98:	2b24      	cmp	r3, #36	; 0x24
 8007a9a:	d906      	bls.n	8007aaa <_strtol_l.constprop.0+0x1a>
 8007a9c:	f7fe fafc 	bl	8006098 <__errno>
 8007aa0:	2316      	movs	r3, #22
 8007aa2:	6003      	str	r3, [r0, #0]
 8007aa4:	2000      	movs	r0, #0
 8007aa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aaa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007b90 <_strtol_l.constprop.0+0x100>
 8007aae:	460d      	mov	r5, r1
 8007ab0:	462e      	mov	r6, r5
 8007ab2:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ab6:	f814 700c 	ldrb.w	r7, [r4, ip]
 8007aba:	f017 0708 	ands.w	r7, r7, #8
 8007abe:	d1f7      	bne.n	8007ab0 <_strtol_l.constprop.0+0x20>
 8007ac0:	2c2d      	cmp	r4, #45	; 0x2d
 8007ac2:	d132      	bne.n	8007b2a <_strtol_l.constprop.0+0x9a>
 8007ac4:	782c      	ldrb	r4, [r5, #0]
 8007ac6:	2701      	movs	r7, #1
 8007ac8:	1cb5      	adds	r5, r6, #2
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d05b      	beq.n	8007b86 <_strtol_l.constprop.0+0xf6>
 8007ace:	2b10      	cmp	r3, #16
 8007ad0:	d109      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad2:	2c30      	cmp	r4, #48	; 0x30
 8007ad4:	d107      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007ad6:	782c      	ldrb	r4, [r5, #0]
 8007ad8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007adc:	2c58      	cmp	r4, #88	; 0x58
 8007ade:	d14d      	bne.n	8007b7c <_strtol_l.constprop.0+0xec>
 8007ae0:	786c      	ldrb	r4, [r5, #1]
 8007ae2:	2310      	movs	r3, #16
 8007ae4:	3502      	adds	r5, #2
 8007ae6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007aea:	f108 38ff 	add.w	r8, r8, #4294967295
 8007aee:	f04f 0c00 	mov.w	ip, #0
 8007af2:	fbb8 f9f3 	udiv	r9, r8, r3
 8007af6:	4666      	mov	r6, ip
 8007af8:	fb03 8a19 	mls	sl, r3, r9, r8
 8007afc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8007b00:	f1be 0f09 	cmp.w	lr, #9
 8007b04:	d816      	bhi.n	8007b34 <_strtol_l.constprop.0+0xa4>
 8007b06:	4674      	mov	r4, lr
 8007b08:	42a3      	cmp	r3, r4
 8007b0a:	dd24      	ble.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b0c:	f1bc 0f00 	cmp.w	ip, #0
 8007b10:	db1e      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b12:	45b1      	cmp	r9, r6
 8007b14:	d31c      	bcc.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b16:	d101      	bne.n	8007b1c <_strtol_l.constprop.0+0x8c>
 8007b18:	45a2      	cmp	sl, r4
 8007b1a:	db19      	blt.n	8007b50 <_strtol_l.constprop.0+0xc0>
 8007b1c:	fb06 4603 	mla	r6, r6, r3, r4
 8007b20:	f04f 0c01 	mov.w	ip, #1
 8007b24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b28:	e7e8      	b.n	8007afc <_strtol_l.constprop.0+0x6c>
 8007b2a:	2c2b      	cmp	r4, #43	; 0x2b
 8007b2c:	bf04      	itt	eq
 8007b2e:	782c      	ldrbeq	r4, [r5, #0]
 8007b30:	1cb5      	addeq	r5, r6, #2
 8007b32:	e7ca      	b.n	8007aca <_strtol_l.constprop.0+0x3a>
 8007b34:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8007b38:	f1be 0f19 	cmp.w	lr, #25
 8007b3c:	d801      	bhi.n	8007b42 <_strtol_l.constprop.0+0xb2>
 8007b3e:	3c37      	subs	r4, #55	; 0x37
 8007b40:	e7e2      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b42:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8007b46:	f1be 0f19 	cmp.w	lr, #25
 8007b4a:	d804      	bhi.n	8007b56 <_strtol_l.constprop.0+0xc6>
 8007b4c:	3c57      	subs	r4, #87	; 0x57
 8007b4e:	e7db      	b.n	8007b08 <_strtol_l.constprop.0+0x78>
 8007b50:	f04f 3cff 	mov.w	ip, #4294967295
 8007b54:	e7e6      	b.n	8007b24 <_strtol_l.constprop.0+0x94>
 8007b56:	f1bc 0f00 	cmp.w	ip, #0
 8007b5a:	da05      	bge.n	8007b68 <_strtol_l.constprop.0+0xd8>
 8007b5c:	2322      	movs	r3, #34	; 0x22
 8007b5e:	6003      	str	r3, [r0, #0]
 8007b60:	4646      	mov	r6, r8
 8007b62:	b942      	cbnz	r2, 8007b76 <_strtol_l.constprop.0+0xe6>
 8007b64:	4630      	mov	r0, r6
 8007b66:	e79e      	b.n	8007aa6 <_strtol_l.constprop.0+0x16>
 8007b68:	b107      	cbz	r7, 8007b6c <_strtol_l.constprop.0+0xdc>
 8007b6a:	4276      	negs	r6, r6
 8007b6c:	2a00      	cmp	r2, #0
 8007b6e:	d0f9      	beq.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b70:	f1bc 0f00 	cmp.w	ip, #0
 8007b74:	d000      	beq.n	8007b78 <_strtol_l.constprop.0+0xe8>
 8007b76:	1e69      	subs	r1, r5, #1
 8007b78:	6011      	str	r1, [r2, #0]
 8007b7a:	e7f3      	b.n	8007b64 <_strtol_l.constprop.0+0xd4>
 8007b7c:	2430      	movs	r4, #48	; 0x30
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d1b1      	bne.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b82:	2308      	movs	r3, #8
 8007b84:	e7af      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b86:	2c30      	cmp	r4, #48	; 0x30
 8007b88:	d0a5      	beq.n	8007ad6 <_strtol_l.constprop.0+0x46>
 8007b8a:	230a      	movs	r3, #10
 8007b8c:	e7ab      	b.n	8007ae6 <_strtol_l.constprop.0+0x56>
 8007b8e:	bf00      	nop
 8007b90:	0800bf29 	.word	0x0800bf29

08007b94 <_strtol_r>:
 8007b94:	f7ff bf7c 	b.w	8007a90 <_strtol_l.constprop.0>

08007b98 <quorem>:
 8007b98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b9c:	6903      	ldr	r3, [r0, #16]
 8007b9e:	690c      	ldr	r4, [r1, #16]
 8007ba0:	42a3      	cmp	r3, r4
 8007ba2:	4607      	mov	r7, r0
 8007ba4:	f2c0 8081 	blt.w	8007caa <quorem+0x112>
 8007ba8:	3c01      	subs	r4, #1
 8007baa:	f101 0814 	add.w	r8, r1, #20
 8007bae:	f100 0514 	add.w	r5, r0, #20
 8007bb2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007bb6:	9301      	str	r3, [sp, #4]
 8007bb8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007bbc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007bc0:	3301      	adds	r3, #1
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8007bc8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007bcc:	fbb2 f6f3 	udiv	r6, r2, r3
 8007bd0:	d331      	bcc.n	8007c36 <quorem+0x9e>
 8007bd2:	f04f 0e00 	mov.w	lr, #0
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	46ac      	mov	ip, r5
 8007bda:	46f2      	mov	sl, lr
 8007bdc:	f850 2b04 	ldr.w	r2, [r0], #4
 8007be0:	b293      	uxth	r3, r2
 8007be2:	fb06 e303 	mla	r3, r6, r3, lr
 8007be6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8007bea:	b29b      	uxth	r3, r3
 8007bec:	ebaa 0303 	sub.w	r3, sl, r3
 8007bf0:	f8dc a000 	ldr.w	sl, [ip]
 8007bf4:	0c12      	lsrs	r2, r2, #16
 8007bf6:	fa13 f38a 	uxtah	r3, r3, sl
 8007bfa:	fb06 e202 	mla	r2, r6, r2, lr
 8007bfe:	9300      	str	r3, [sp, #0]
 8007c00:	9b00      	ldr	r3, [sp, #0]
 8007c02:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8007c06:	b292      	uxth	r2, r2
 8007c08:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8007c0c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c10:	f8bd 3000 	ldrh.w	r3, [sp]
 8007c14:	4581      	cmp	r9, r0
 8007c16:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c1a:	f84c 3b04 	str.w	r3, [ip], #4
 8007c1e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8007c22:	d2db      	bcs.n	8007bdc <quorem+0x44>
 8007c24:	f855 300b 	ldr.w	r3, [r5, fp]
 8007c28:	b92b      	cbnz	r3, 8007c36 <quorem+0x9e>
 8007c2a:	9b01      	ldr	r3, [sp, #4]
 8007c2c:	3b04      	subs	r3, #4
 8007c2e:	429d      	cmp	r5, r3
 8007c30:	461a      	mov	r2, r3
 8007c32:	d32e      	bcc.n	8007c92 <quorem+0xfa>
 8007c34:	613c      	str	r4, [r7, #16]
 8007c36:	4638      	mov	r0, r7
 8007c38:	f001 fc90 	bl	800955c <__mcmp>
 8007c3c:	2800      	cmp	r0, #0
 8007c3e:	db24      	blt.n	8007c8a <quorem+0xf2>
 8007c40:	3601      	adds	r6, #1
 8007c42:	4628      	mov	r0, r5
 8007c44:	f04f 0c00 	mov.w	ip, #0
 8007c48:	f858 2b04 	ldr.w	r2, [r8], #4
 8007c4c:	f8d0 e000 	ldr.w	lr, [r0]
 8007c50:	b293      	uxth	r3, r2
 8007c52:	ebac 0303 	sub.w	r3, ip, r3
 8007c56:	0c12      	lsrs	r2, r2, #16
 8007c58:	fa13 f38e 	uxtah	r3, r3, lr
 8007c5c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8007c60:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007c6a:	45c1      	cmp	r9, r8
 8007c6c:	f840 3b04 	str.w	r3, [r0], #4
 8007c70:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8007c74:	d2e8      	bcs.n	8007c48 <quorem+0xb0>
 8007c76:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007c7a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007c7e:	b922      	cbnz	r2, 8007c8a <quorem+0xf2>
 8007c80:	3b04      	subs	r3, #4
 8007c82:	429d      	cmp	r5, r3
 8007c84:	461a      	mov	r2, r3
 8007c86:	d30a      	bcc.n	8007c9e <quorem+0x106>
 8007c88:	613c      	str	r4, [r7, #16]
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	b003      	add	sp, #12
 8007c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c92:	6812      	ldr	r2, [r2, #0]
 8007c94:	3b04      	subs	r3, #4
 8007c96:	2a00      	cmp	r2, #0
 8007c98:	d1cc      	bne.n	8007c34 <quorem+0x9c>
 8007c9a:	3c01      	subs	r4, #1
 8007c9c:	e7c7      	b.n	8007c2e <quorem+0x96>
 8007c9e:	6812      	ldr	r2, [r2, #0]
 8007ca0:	3b04      	subs	r3, #4
 8007ca2:	2a00      	cmp	r2, #0
 8007ca4:	d1f0      	bne.n	8007c88 <quorem+0xf0>
 8007ca6:	3c01      	subs	r4, #1
 8007ca8:	e7eb      	b.n	8007c82 <quorem+0xea>
 8007caa:	2000      	movs	r0, #0
 8007cac:	e7ee      	b.n	8007c8c <quorem+0xf4>
	...

08007cb0 <_dtoa_r>:
 8007cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb4:	ed2d 8b04 	vpush	{d8-d9}
 8007cb8:	ec57 6b10 	vmov	r6, r7, d0
 8007cbc:	b093      	sub	sp, #76	; 0x4c
 8007cbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007cc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8007cc4:	9106      	str	r1, [sp, #24]
 8007cc6:	ee10 aa10 	vmov	sl, s0
 8007cca:	4604      	mov	r4, r0
 8007ccc:	9209      	str	r2, [sp, #36]	; 0x24
 8007cce:	930c      	str	r3, [sp, #48]	; 0x30
 8007cd0:	46bb      	mov	fp, r7
 8007cd2:	b975      	cbnz	r5, 8007cf2 <_dtoa_r+0x42>
 8007cd4:	2010      	movs	r0, #16
 8007cd6:	f001 f94d 	bl	8008f74 <malloc>
 8007cda:	4602      	mov	r2, r0
 8007cdc:	6260      	str	r0, [r4, #36]	; 0x24
 8007cde:	b920      	cbnz	r0, 8007cea <_dtoa_r+0x3a>
 8007ce0:	4ba7      	ldr	r3, [pc, #668]	; (8007f80 <_dtoa_r+0x2d0>)
 8007ce2:	21ea      	movs	r1, #234	; 0xea
 8007ce4:	48a7      	ldr	r0, [pc, #668]	; (8007f84 <_dtoa_r+0x2d4>)
 8007ce6:	f002 f8bd 	bl	8009e64 <__assert_func>
 8007cea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007cee:	6005      	str	r5, [r0, #0]
 8007cf0:	60c5      	str	r5, [r0, #12]
 8007cf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	b151      	cbz	r1, 8007d0e <_dtoa_r+0x5e>
 8007cf8:	685a      	ldr	r2, [r3, #4]
 8007cfa:	604a      	str	r2, [r1, #4]
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	4093      	lsls	r3, r2
 8007d00:	608b      	str	r3, [r1, #8]
 8007d02:	4620      	mov	r0, r4
 8007d04:	f001 f99e 	bl	8009044 <_Bfree>
 8007d08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	601a      	str	r2, [r3, #0]
 8007d0e:	1e3b      	subs	r3, r7, #0
 8007d10:	bfaa      	itet	ge
 8007d12:	2300      	movge	r3, #0
 8007d14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8007d18:	f8c8 3000 	strge.w	r3, [r8]
 8007d1c:	4b9a      	ldr	r3, [pc, #616]	; (8007f88 <_dtoa_r+0x2d8>)
 8007d1e:	bfbc      	itt	lt
 8007d20:	2201      	movlt	r2, #1
 8007d22:	f8c8 2000 	strlt.w	r2, [r8]
 8007d26:	ea33 030b 	bics.w	r3, r3, fp
 8007d2a:	d11b      	bne.n	8007d64 <_dtoa_r+0xb4>
 8007d2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d2e:	f242 730f 	movw	r3, #9999	; 0x270f
 8007d32:	6013      	str	r3, [r2, #0]
 8007d34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007d38:	4333      	orrs	r3, r6
 8007d3a:	f000 8592 	beq.w	8008862 <_dtoa_r+0xbb2>
 8007d3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d40:	b963      	cbnz	r3, 8007d5c <_dtoa_r+0xac>
 8007d42:	4b92      	ldr	r3, [pc, #584]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d44:	e022      	b.n	8007d8c <_dtoa_r+0xdc>
 8007d46:	4b92      	ldr	r3, [pc, #584]	; (8007f90 <_dtoa_r+0x2e0>)
 8007d48:	9301      	str	r3, [sp, #4]
 8007d4a:	3308      	adds	r3, #8
 8007d4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007d4e:	6013      	str	r3, [r2, #0]
 8007d50:	9801      	ldr	r0, [sp, #4]
 8007d52:	b013      	add	sp, #76	; 0x4c
 8007d54:	ecbd 8b04 	vpop	{d8-d9}
 8007d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d5c:	4b8b      	ldr	r3, [pc, #556]	; (8007f8c <_dtoa_r+0x2dc>)
 8007d5e:	9301      	str	r3, [sp, #4]
 8007d60:	3303      	adds	r3, #3
 8007d62:	e7f3      	b.n	8007d4c <_dtoa_r+0x9c>
 8007d64:	2200      	movs	r2, #0
 8007d66:	2300      	movs	r3, #0
 8007d68:	4650      	mov	r0, sl
 8007d6a:	4659      	mov	r1, fp
 8007d6c:	f7f8 feac 	bl	8000ac8 <__aeabi_dcmpeq>
 8007d70:	ec4b ab19 	vmov	d9, sl, fp
 8007d74:	4680      	mov	r8, r0
 8007d76:	b158      	cbz	r0, 8007d90 <_dtoa_r+0xe0>
 8007d78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	6013      	str	r3, [r2, #0]
 8007d7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 856b 	beq.w	800885c <_dtoa_r+0xbac>
 8007d86:	4883      	ldr	r0, [pc, #524]	; (8007f94 <_dtoa_r+0x2e4>)
 8007d88:	6018      	str	r0, [r3, #0]
 8007d8a:	1e43      	subs	r3, r0, #1
 8007d8c:	9301      	str	r3, [sp, #4]
 8007d8e:	e7df      	b.n	8007d50 <_dtoa_r+0xa0>
 8007d90:	ec4b ab10 	vmov	d0, sl, fp
 8007d94:	aa10      	add	r2, sp, #64	; 0x40
 8007d96:	a911      	add	r1, sp, #68	; 0x44
 8007d98:	4620      	mov	r0, r4
 8007d9a:	f001 fd01 	bl	80097a0 <__d2b>
 8007d9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8007da2:	ee08 0a10 	vmov	s16, r0
 8007da6:	2d00      	cmp	r5, #0
 8007da8:	f000 8084 	beq.w	8007eb4 <_dtoa_r+0x204>
 8007dac:	ee19 3a90 	vmov	r3, s19
 8007db0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007db4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8007db8:	4656      	mov	r6, sl
 8007dba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8007dbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007dc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8007dc6:	4b74      	ldr	r3, [pc, #464]	; (8007f98 <_dtoa_r+0x2e8>)
 8007dc8:	2200      	movs	r2, #0
 8007dca:	4630      	mov	r0, r6
 8007dcc:	4639      	mov	r1, r7
 8007dce:	f7f8 fa5b 	bl	8000288 <__aeabi_dsub>
 8007dd2:	a365      	add	r3, pc, #404	; (adr r3, 8007f68 <_dtoa_r+0x2b8>)
 8007dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd8:	f7f8 fc0e 	bl	80005f8 <__aeabi_dmul>
 8007ddc:	a364      	add	r3, pc, #400	; (adr r3, 8007f70 <_dtoa_r+0x2c0>)
 8007dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007de2:	f7f8 fa53 	bl	800028c <__adddf3>
 8007de6:	4606      	mov	r6, r0
 8007de8:	4628      	mov	r0, r5
 8007dea:	460f      	mov	r7, r1
 8007dec:	f7f8 fb9a 	bl	8000524 <__aeabi_i2d>
 8007df0:	a361      	add	r3, pc, #388	; (adr r3, 8007f78 <_dtoa_r+0x2c8>)
 8007df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007df6:	f7f8 fbff 	bl	80005f8 <__aeabi_dmul>
 8007dfa:	4602      	mov	r2, r0
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	4630      	mov	r0, r6
 8007e00:	4639      	mov	r1, r7
 8007e02:	f7f8 fa43 	bl	800028c <__adddf3>
 8007e06:	4606      	mov	r6, r0
 8007e08:	460f      	mov	r7, r1
 8007e0a:	f7f8 fea5 	bl	8000b58 <__aeabi_d2iz>
 8007e0e:	2200      	movs	r2, #0
 8007e10:	9000      	str	r0, [sp, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	4630      	mov	r0, r6
 8007e16:	4639      	mov	r1, r7
 8007e18:	f7f8 fe60 	bl	8000adc <__aeabi_dcmplt>
 8007e1c:	b150      	cbz	r0, 8007e34 <_dtoa_r+0x184>
 8007e1e:	9800      	ldr	r0, [sp, #0]
 8007e20:	f7f8 fb80 	bl	8000524 <__aeabi_i2d>
 8007e24:	4632      	mov	r2, r6
 8007e26:	463b      	mov	r3, r7
 8007e28:	f7f8 fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e2c:	b910      	cbnz	r0, 8007e34 <_dtoa_r+0x184>
 8007e2e:	9b00      	ldr	r3, [sp, #0]
 8007e30:	3b01      	subs	r3, #1
 8007e32:	9300      	str	r3, [sp, #0]
 8007e34:	9b00      	ldr	r3, [sp, #0]
 8007e36:	2b16      	cmp	r3, #22
 8007e38:	d85a      	bhi.n	8007ef0 <_dtoa_r+0x240>
 8007e3a:	9a00      	ldr	r2, [sp, #0]
 8007e3c:	4b57      	ldr	r3, [pc, #348]	; (8007f9c <_dtoa_r+0x2ec>)
 8007e3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007e42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e46:	ec51 0b19 	vmov	r0, r1, d9
 8007e4a:	f7f8 fe47 	bl	8000adc <__aeabi_dcmplt>
 8007e4e:	2800      	cmp	r0, #0
 8007e50:	d050      	beq.n	8007ef4 <_dtoa_r+0x244>
 8007e52:	9b00      	ldr	r3, [sp, #0]
 8007e54:	3b01      	subs	r3, #1
 8007e56:	9300      	str	r3, [sp, #0]
 8007e58:	2300      	movs	r3, #0
 8007e5a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007e5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007e5e:	1b5d      	subs	r5, r3, r5
 8007e60:	1e6b      	subs	r3, r5, #1
 8007e62:	9305      	str	r3, [sp, #20]
 8007e64:	bf45      	ittet	mi
 8007e66:	f1c5 0301 	rsbmi	r3, r5, #1
 8007e6a:	9304      	strmi	r3, [sp, #16]
 8007e6c:	2300      	movpl	r3, #0
 8007e6e:	2300      	movmi	r3, #0
 8007e70:	bf4c      	ite	mi
 8007e72:	9305      	strmi	r3, [sp, #20]
 8007e74:	9304      	strpl	r3, [sp, #16]
 8007e76:	9b00      	ldr	r3, [sp, #0]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db3d      	blt.n	8007ef8 <_dtoa_r+0x248>
 8007e7c:	9b05      	ldr	r3, [sp, #20]
 8007e7e:	9a00      	ldr	r2, [sp, #0]
 8007e80:	920a      	str	r2, [sp, #40]	; 0x28
 8007e82:	4413      	add	r3, r2
 8007e84:	9305      	str	r3, [sp, #20]
 8007e86:	2300      	movs	r3, #0
 8007e88:	9307      	str	r3, [sp, #28]
 8007e8a:	9b06      	ldr	r3, [sp, #24]
 8007e8c:	2b09      	cmp	r3, #9
 8007e8e:	f200 8089 	bhi.w	8007fa4 <_dtoa_r+0x2f4>
 8007e92:	2b05      	cmp	r3, #5
 8007e94:	bfc4      	itt	gt
 8007e96:	3b04      	subgt	r3, #4
 8007e98:	9306      	strgt	r3, [sp, #24]
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	f1a3 0302 	sub.w	r3, r3, #2
 8007ea0:	bfcc      	ite	gt
 8007ea2:	2500      	movgt	r5, #0
 8007ea4:	2501      	movle	r5, #1
 8007ea6:	2b03      	cmp	r3, #3
 8007ea8:	f200 8087 	bhi.w	8007fba <_dtoa_r+0x30a>
 8007eac:	e8df f003 	tbb	[pc, r3]
 8007eb0:	59383a2d 	.word	0x59383a2d
 8007eb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8007eb8:	441d      	add	r5, r3
 8007eba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8007ebe:	2b20      	cmp	r3, #32
 8007ec0:	bfc1      	itttt	gt
 8007ec2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8007ec6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8007eca:	fa0b f303 	lslgt.w	r3, fp, r3
 8007ece:	fa26 f000 	lsrgt.w	r0, r6, r0
 8007ed2:	bfda      	itte	le
 8007ed4:	f1c3 0320 	rsble	r3, r3, #32
 8007ed8:	fa06 f003 	lslle.w	r0, r6, r3
 8007edc:	4318      	orrgt	r0, r3
 8007ede:	f7f8 fb11 	bl	8000504 <__aeabi_ui2d>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8007eea:	3d01      	subs	r5, #1
 8007eec:	930e      	str	r3, [sp, #56]	; 0x38
 8007eee:	e76a      	b.n	8007dc6 <_dtoa_r+0x116>
 8007ef0:	2301      	movs	r3, #1
 8007ef2:	e7b2      	b.n	8007e5a <_dtoa_r+0x1aa>
 8007ef4:	900b      	str	r0, [sp, #44]	; 0x2c
 8007ef6:	e7b1      	b.n	8007e5c <_dtoa_r+0x1ac>
 8007ef8:	9b04      	ldr	r3, [sp, #16]
 8007efa:	9a00      	ldr	r2, [sp, #0]
 8007efc:	1a9b      	subs	r3, r3, r2
 8007efe:	9304      	str	r3, [sp, #16]
 8007f00:	4253      	negs	r3, r2
 8007f02:	9307      	str	r3, [sp, #28]
 8007f04:	2300      	movs	r3, #0
 8007f06:	930a      	str	r3, [sp, #40]	; 0x28
 8007f08:	e7bf      	b.n	8007e8a <_dtoa_r+0x1da>
 8007f0a:	2300      	movs	r3, #0
 8007f0c:	9308      	str	r3, [sp, #32]
 8007f0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	dc55      	bgt.n	8007fc0 <_dtoa_r+0x310>
 8007f14:	2301      	movs	r3, #1
 8007f16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007f1a:	461a      	mov	r2, r3
 8007f1c:	9209      	str	r2, [sp, #36]	; 0x24
 8007f1e:	e00c      	b.n	8007f3a <_dtoa_r+0x28a>
 8007f20:	2301      	movs	r3, #1
 8007f22:	e7f3      	b.n	8007f0c <_dtoa_r+0x25c>
 8007f24:	2300      	movs	r3, #0
 8007f26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f28:	9308      	str	r3, [sp, #32]
 8007f2a:	9b00      	ldr	r3, [sp, #0]
 8007f2c:	4413      	add	r3, r2
 8007f2e:	9302      	str	r3, [sp, #8]
 8007f30:	3301      	adds	r3, #1
 8007f32:	2b01      	cmp	r3, #1
 8007f34:	9303      	str	r3, [sp, #12]
 8007f36:	bfb8      	it	lt
 8007f38:	2301      	movlt	r3, #1
 8007f3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	6042      	str	r2, [r0, #4]
 8007f40:	2204      	movs	r2, #4
 8007f42:	f102 0614 	add.w	r6, r2, #20
 8007f46:	429e      	cmp	r6, r3
 8007f48:	6841      	ldr	r1, [r0, #4]
 8007f4a:	d93d      	bls.n	8007fc8 <_dtoa_r+0x318>
 8007f4c:	4620      	mov	r0, r4
 8007f4e:	f001 f839 	bl	8008fc4 <_Balloc>
 8007f52:	9001      	str	r0, [sp, #4]
 8007f54:	2800      	cmp	r0, #0
 8007f56:	d13b      	bne.n	8007fd0 <_dtoa_r+0x320>
 8007f58:	4b11      	ldr	r3, [pc, #68]	; (8007fa0 <_dtoa_r+0x2f0>)
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8007f60:	e6c0      	b.n	8007ce4 <_dtoa_r+0x34>
 8007f62:	2301      	movs	r3, #1
 8007f64:	e7df      	b.n	8007f26 <_dtoa_r+0x276>
 8007f66:	bf00      	nop
 8007f68:	636f4361 	.word	0x636f4361
 8007f6c:	3fd287a7 	.word	0x3fd287a7
 8007f70:	8b60c8b3 	.word	0x8b60c8b3
 8007f74:	3fc68a28 	.word	0x3fc68a28
 8007f78:	509f79fb 	.word	0x509f79fb
 8007f7c:	3fd34413 	.word	0x3fd34413
 8007f80:	0800c036 	.word	0x0800c036
 8007f84:	0800c04d 	.word	0x0800c04d
 8007f88:	7ff00000 	.word	0x7ff00000
 8007f8c:	0800c032 	.word	0x0800c032
 8007f90:	0800c029 	.word	0x0800c029
 8007f94:	0800bead 	.word	0x0800bead
 8007f98:	3ff80000 	.word	0x3ff80000
 8007f9c:	0800c1b8 	.word	0x0800c1b8
 8007fa0:	0800c0a8 	.word	0x0800c0a8
 8007fa4:	2501      	movs	r5, #1
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	9306      	str	r3, [sp, #24]
 8007faa:	9508      	str	r5, [sp, #32]
 8007fac:	f04f 33ff 	mov.w	r3, #4294967295
 8007fb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2312      	movs	r3, #18
 8007fb8:	e7b0      	b.n	8007f1c <_dtoa_r+0x26c>
 8007fba:	2301      	movs	r3, #1
 8007fbc:	9308      	str	r3, [sp, #32]
 8007fbe:	e7f5      	b.n	8007fac <_dtoa_r+0x2fc>
 8007fc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8007fc6:	e7b8      	b.n	8007f3a <_dtoa_r+0x28a>
 8007fc8:	3101      	adds	r1, #1
 8007fca:	6041      	str	r1, [r0, #4]
 8007fcc:	0052      	lsls	r2, r2, #1
 8007fce:	e7b8      	b.n	8007f42 <_dtoa_r+0x292>
 8007fd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007fd2:	9a01      	ldr	r2, [sp, #4]
 8007fd4:	601a      	str	r2, [r3, #0]
 8007fd6:	9b03      	ldr	r3, [sp, #12]
 8007fd8:	2b0e      	cmp	r3, #14
 8007fda:	f200 809d 	bhi.w	8008118 <_dtoa_r+0x468>
 8007fde:	2d00      	cmp	r5, #0
 8007fe0:	f000 809a 	beq.w	8008118 <_dtoa_r+0x468>
 8007fe4:	9b00      	ldr	r3, [sp, #0]
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	dd32      	ble.n	8008050 <_dtoa_r+0x3a0>
 8007fea:	4ab7      	ldr	r2, [pc, #732]	; (80082c8 <_dtoa_r+0x618>)
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8007ff4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ff8:	9b00      	ldr	r3, [sp, #0]
 8007ffa:	05d8      	lsls	r0, r3, #23
 8007ffc:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008000:	d516      	bpl.n	8008030 <_dtoa_r+0x380>
 8008002:	4bb2      	ldr	r3, [pc, #712]	; (80082cc <_dtoa_r+0x61c>)
 8008004:	ec51 0b19 	vmov	r0, r1, d9
 8008008:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800800c:	f7f8 fc1e 	bl	800084c <__aeabi_ddiv>
 8008010:	f007 070f 	and.w	r7, r7, #15
 8008014:	4682      	mov	sl, r0
 8008016:	468b      	mov	fp, r1
 8008018:	2503      	movs	r5, #3
 800801a:	4eac      	ldr	r6, [pc, #688]	; (80082cc <_dtoa_r+0x61c>)
 800801c:	b957      	cbnz	r7, 8008034 <_dtoa_r+0x384>
 800801e:	4642      	mov	r2, r8
 8008020:	464b      	mov	r3, r9
 8008022:	4650      	mov	r0, sl
 8008024:	4659      	mov	r1, fp
 8008026:	f7f8 fc11 	bl	800084c <__aeabi_ddiv>
 800802a:	4682      	mov	sl, r0
 800802c:	468b      	mov	fp, r1
 800802e:	e028      	b.n	8008082 <_dtoa_r+0x3d2>
 8008030:	2502      	movs	r5, #2
 8008032:	e7f2      	b.n	800801a <_dtoa_r+0x36a>
 8008034:	07f9      	lsls	r1, r7, #31
 8008036:	d508      	bpl.n	800804a <_dtoa_r+0x39a>
 8008038:	4640      	mov	r0, r8
 800803a:	4649      	mov	r1, r9
 800803c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008040:	f7f8 fada 	bl	80005f8 <__aeabi_dmul>
 8008044:	3501      	adds	r5, #1
 8008046:	4680      	mov	r8, r0
 8008048:	4689      	mov	r9, r1
 800804a:	107f      	asrs	r7, r7, #1
 800804c:	3608      	adds	r6, #8
 800804e:	e7e5      	b.n	800801c <_dtoa_r+0x36c>
 8008050:	f000 809b 	beq.w	800818a <_dtoa_r+0x4da>
 8008054:	9b00      	ldr	r3, [sp, #0]
 8008056:	4f9d      	ldr	r7, [pc, #628]	; (80082cc <_dtoa_r+0x61c>)
 8008058:	425e      	negs	r6, r3
 800805a:	4b9b      	ldr	r3, [pc, #620]	; (80082c8 <_dtoa_r+0x618>)
 800805c:	f006 020f 	and.w	r2, r6, #15
 8008060:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008068:	ec51 0b19 	vmov	r0, r1, d9
 800806c:	f7f8 fac4 	bl	80005f8 <__aeabi_dmul>
 8008070:	1136      	asrs	r6, r6, #4
 8008072:	4682      	mov	sl, r0
 8008074:	468b      	mov	fp, r1
 8008076:	2300      	movs	r3, #0
 8008078:	2502      	movs	r5, #2
 800807a:	2e00      	cmp	r6, #0
 800807c:	d17a      	bne.n	8008174 <_dtoa_r+0x4c4>
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1d3      	bne.n	800802a <_dtoa_r+0x37a>
 8008082:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008084:	2b00      	cmp	r3, #0
 8008086:	f000 8082 	beq.w	800818e <_dtoa_r+0x4de>
 800808a:	4b91      	ldr	r3, [pc, #580]	; (80082d0 <_dtoa_r+0x620>)
 800808c:	2200      	movs	r2, #0
 800808e:	4650      	mov	r0, sl
 8008090:	4659      	mov	r1, fp
 8008092:	f7f8 fd23 	bl	8000adc <__aeabi_dcmplt>
 8008096:	2800      	cmp	r0, #0
 8008098:	d079      	beq.n	800818e <_dtoa_r+0x4de>
 800809a:	9b03      	ldr	r3, [sp, #12]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d076      	beq.n	800818e <_dtoa_r+0x4de>
 80080a0:	9b02      	ldr	r3, [sp, #8]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	dd36      	ble.n	8008114 <_dtoa_r+0x464>
 80080a6:	9b00      	ldr	r3, [sp, #0]
 80080a8:	4650      	mov	r0, sl
 80080aa:	4659      	mov	r1, fp
 80080ac:	1e5f      	subs	r7, r3, #1
 80080ae:	2200      	movs	r2, #0
 80080b0:	4b88      	ldr	r3, [pc, #544]	; (80082d4 <_dtoa_r+0x624>)
 80080b2:	f7f8 faa1 	bl	80005f8 <__aeabi_dmul>
 80080b6:	9e02      	ldr	r6, [sp, #8]
 80080b8:	4682      	mov	sl, r0
 80080ba:	468b      	mov	fp, r1
 80080bc:	3501      	adds	r5, #1
 80080be:	4628      	mov	r0, r5
 80080c0:	f7f8 fa30 	bl	8000524 <__aeabi_i2d>
 80080c4:	4652      	mov	r2, sl
 80080c6:	465b      	mov	r3, fp
 80080c8:	f7f8 fa96 	bl	80005f8 <__aeabi_dmul>
 80080cc:	4b82      	ldr	r3, [pc, #520]	; (80082d8 <_dtoa_r+0x628>)
 80080ce:	2200      	movs	r2, #0
 80080d0:	f7f8 f8dc 	bl	800028c <__adddf3>
 80080d4:	46d0      	mov	r8, sl
 80080d6:	46d9      	mov	r9, fp
 80080d8:	4682      	mov	sl, r0
 80080da:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 80080de:	2e00      	cmp	r6, #0
 80080e0:	d158      	bne.n	8008194 <_dtoa_r+0x4e4>
 80080e2:	4b7e      	ldr	r3, [pc, #504]	; (80082dc <_dtoa_r+0x62c>)
 80080e4:	2200      	movs	r2, #0
 80080e6:	4640      	mov	r0, r8
 80080e8:	4649      	mov	r1, r9
 80080ea:	f7f8 f8cd 	bl	8000288 <__aeabi_dsub>
 80080ee:	4652      	mov	r2, sl
 80080f0:	465b      	mov	r3, fp
 80080f2:	4680      	mov	r8, r0
 80080f4:	4689      	mov	r9, r1
 80080f6:	f7f8 fd0f 	bl	8000b18 <__aeabi_dcmpgt>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	f040 8295 	bne.w	800862a <_dtoa_r+0x97a>
 8008100:	4652      	mov	r2, sl
 8008102:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008106:	4640      	mov	r0, r8
 8008108:	4649      	mov	r1, r9
 800810a:	f7f8 fce7 	bl	8000adc <__aeabi_dcmplt>
 800810e:	2800      	cmp	r0, #0
 8008110:	f040 8289 	bne.w	8008626 <_dtoa_r+0x976>
 8008114:	ec5b ab19 	vmov	sl, fp, d9
 8008118:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800811a:	2b00      	cmp	r3, #0
 800811c:	f2c0 8148 	blt.w	80083b0 <_dtoa_r+0x700>
 8008120:	9a00      	ldr	r2, [sp, #0]
 8008122:	2a0e      	cmp	r2, #14
 8008124:	f300 8144 	bgt.w	80083b0 <_dtoa_r+0x700>
 8008128:	4b67      	ldr	r3, [pc, #412]	; (80082c8 <_dtoa_r+0x618>)
 800812a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800812e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008132:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008134:	2b00      	cmp	r3, #0
 8008136:	f280 80d5 	bge.w	80082e4 <_dtoa_r+0x634>
 800813a:	9b03      	ldr	r3, [sp, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	f300 80d1 	bgt.w	80082e4 <_dtoa_r+0x634>
 8008142:	f040 826f 	bne.w	8008624 <_dtoa_r+0x974>
 8008146:	4b65      	ldr	r3, [pc, #404]	; (80082dc <_dtoa_r+0x62c>)
 8008148:	2200      	movs	r2, #0
 800814a:	4640      	mov	r0, r8
 800814c:	4649      	mov	r1, r9
 800814e:	f7f8 fa53 	bl	80005f8 <__aeabi_dmul>
 8008152:	4652      	mov	r2, sl
 8008154:	465b      	mov	r3, fp
 8008156:	f7f8 fcd5 	bl	8000b04 <__aeabi_dcmpge>
 800815a:	9e03      	ldr	r6, [sp, #12]
 800815c:	4637      	mov	r7, r6
 800815e:	2800      	cmp	r0, #0
 8008160:	f040 8245 	bne.w	80085ee <_dtoa_r+0x93e>
 8008164:	9d01      	ldr	r5, [sp, #4]
 8008166:	2331      	movs	r3, #49	; 0x31
 8008168:	f805 3b01 	strb.w	r3, [r5], #1
 800816c:	9b00      	ldr	r3, [sp, #0]
 800816e:	3301      	adds	r3, #1
 8008170:	9300      	str	r3, [sp, #0]
 8008172:	e240      	b.n	80085f6 <_dtoa_r+0x946>
 8008174:	07f2      	lsls	r2, r6, #31
 8008176:	d505      	bpl.n	8008184 <_dtoa_r+0x4d4>
 8008178:	e9d7 2300 	ldrd	r2, r3, [r7]
 800817c:	f7f8 fa3c 	bl	80005f8 <__aeabi_dmul>
 8008180:	3501      	adds	r5, #1
 8008182:	2301      	movs	r3, #1
 8008184:	1076      	asrs	r6, r6, #1
 8008186:	3708      	adds	r7, #8
 8008188:	e777      	b.n	800807a <_dtoa_r+0x3ca>
 800818a:	2502      	movs	r5, #2
 800818c:	e779      	b.n	8008082 <_dtoa_r+0x3d2>
 800818e:	9f00      	ldr	r7, [sp, #0]
 8008190:	9e03      	ldr	r6, [sp, #12]
 8008192:	e794      	b.n	80080be <_dtoa_r+0x40e>
 8008194:	9901      	ldr	r1, [sp, #4]
 8008196:	4b4c      	ldr	r3, [pc, #304]	; (80082c8 <_dtoa_r+0x618>)
 8008198:	4431      	add	r1, r6
 800819a:	910d      	str	r1, [sp, #52]	; 0x34
 800819c:	9908      	ldr	r1, [sp, #32]
 800819e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80081a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80081a6:	2900      	cmp	r1, #0
 80081a8:	d043      	beq.n	8008232 <_dtoa_r+0x582>
 80081aa:	494d      	ldr	r1, [pc, #308]	; (80082e0 <_dtoa_r+0x630>)
 80081ac:	2000      	movs	r0, #0
 80081ae:	f7f8 fb4d 	bl	800084c <__aeabi_ddiv>
 80081b2:	4652      	mov	r2, sl
 80081b4:	465b      	mov	r3, fp
 80081b6:	f7f8 f867 	bl	8000288 <__aeabi_dsub>
 80081ba:	9d01      	ldr	r5, [sp, #4]
 80081bc:	4682      	mov	sl, r0
 80081be:	468b      	mov	fp, r1
 80081c0:	4649      	mov	r1, r9
 80081c2:	4640      	mov	r0, r8
 80081c4:	f7f8 fcc8 	bl	8000b58 <__aeabi_d2iz>
 80081c8:	4606      	mov	r6, r0
 80081ca:	f7f8 f9ab 	bl	8000524 <__aeabi_i2d>
 80081ce:	4602      	mov	r2, r0
 80081d0:	460b      	mov	r3, r1
 80081d2:	4640      	mov	r0, r8
 80081d4:	4649      	mov	r1, r9
 80081d6:	f7f8 f857 	bl	8000288 <__aeabi_dsub>
 80081da:	3630      	adds	r6, #48	; 0x30
 80081dc:	f805 6b01 	strb.w	r6, [r5], #1
 80081e0:	4652      	mov	r2, sl
 80081e2:	465b      	mov	r3, fp
 80081e4:	4680      	mov	r8, r0
 80081e6:	4689      	mov	r9, r1
 80081e8:	f7f8 fc78 	bl	8000adc <__aeabi_dcmplt>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d163      	bne.n	80082b8 <_dtoa_r+0x608>
 80081f0:	4642      	mov	r2, r8
 80081f2:	464b      	mov	r3, r9
 80081f4:	4936      	ldr	r1, [pc, #216]	; (80082d0 <_dtoa_r+0x620>)
 80081f6:	2000      	movs	r0, #0
 80081f8:	f7f8 f846 	bl	8000288 <__aeabi_dsub>
 80081fc:	4652      	mov	r2, sl
 80081fe:	465b      	mov	r3, fp
 8008200:	f7f8 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8008204:	2800      	cmp	r0, #0
 8008206:	f040 80b5 	bne.w	8008374 <_dtoa_r+0x6c4>
 800820a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800820c:	429d      	cmp	r5, r3
 800820e:	d081      	beq.n	8008114 <_dtoa_r+0x464>
 8008210:	4b30      	ldr	r3, [pc, #192]	; (80082d4 <_dtoa_r+0x624>)
 8008212:	2200      	movs	r2, #0
 8008214:	4650      	mov	r0, sl
 8008216:	4659      	mov	r1, fp
 8008218:	f7f8 f9ee 	bl	80005f8 <__aeabi_dmul>
 800821c:	4b2d      	ldr	r3, [pc, #180]	; (80082d4 <_dtoa_r+0x624>)
 800821e:	4682      	mov	sl, r0
 8008220:	468b      	mov	fp, r1
 8008222:	4640      	mov	r0, r8
 8008224:	4649      	mov	r1, r9
 8008226:	2200      	movs	r2, #0
 8008228:	f7f8 f9e6 	bl	80005f8 <__aeabi_dmul>
 800822c:	4680      	mov	r8, r0
 800822e:	4689      	mov	r9, r1
 8008230:	e7c6      	b.n	80081c0 <_dtoa_r+0x510>
 8008232:	4650      	mov	r0, sl
 8008234:	4659      	mov	r1, fp
 8008236:	f7f8 f9df 	bl	80005f8 <__aeabi_dmul>
 800823a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800823c:	9d01      	ldr	r5, [sp, #4]
 800823e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008240:	4682      	mov	sl, r0
 8008242:	468b      	mov	fp, r1
 8008244:	4649      	mov	r1, r9
 8008246:	4640      	mov	r0, r8
 8008248:	f7f8 fc86 	bl	8000b58 <__aeabi_d2iz>
 800824c:	4606      	mov	r6, r0
 800824e:	f7f8 f969 	bl	8000524 <__aeabi_i2d>
 8008252:	3630      	adds	r6, #48	; 0x30
 8008254:	4602      	mov	r2, r0
 8008256:	460b      	mov	r3, r1
 8008258:	4640      	mov	r0, r8
 800825a:	4649      	mov	r1, r9
 800825c:	f7f8 f814 	bl	8000288 <__aeabi_dsub>
 8008260:	f805 6b01 	strb.w	r6, [r5], #1
 8008264:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008266:	429d      	cmp	r5, r3
 8008268:	4680      	mov	r8, r0
 800826a:	4689      	mov	r9, r1
 800826c:	f04f 0200 	mov.w	r2, #0
 8008270:	d124      	bne.n	80082bc <_dtoa_r+0x60c>
 8008272:	4b1b      	ldr	r3, [pc, #108]	; (80082e0 <_dtoa_r+0x630>)
 8008274:	4650      	mov	r0, sl
 8008276:	4659      	mov	r1, fp
 8008278:	f7f8 f808 	bl	800028c <__adddf3>
 800827c:	4602      	mov	r2, r0
 800827e:	460b      	mov	r3, r1
 8008280:	4640      	mov	r0, r8
 8008282:	4649      	mov	r1, r9
 8008284:	f7f8 fc48 	bl	8000b18 <__aeabi_dcmpgt>
 8008288:	2800      	cmp	r0, #0
 800828a:	d173      	bne.n	8008374 <_dtoa_r+0x6c4>
 800828c:	4652      	mov	r2, sl
 800828e:	465b      	mov	r3, fp
 8008290:	4913      	ldr	r1, [pc, #76]	; (80082e0 <_dtoa_r+0x630>)
 8008292:	2000      	movs	r0, #0
 8008294:	f7f7 fff8 	bl	8000288 <__aeabi_dsub>
 8008298:	4602      	mov	r2, r0
 800829a:	460b      	mov	r3, r1
 800829c:	4640      	mov	r0, r8
 800829e:	4649      	mov	r1, r9
 80082a0:	f7f8 fc1c 	bl	8000adc <__aeabi_dcmplt>
 80082a4:	2800      	cmp	r0, #0
 80082a6:	f43f af35 	beq.w	8008114 <_dtoa_r+0x464>
 80082aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 80082ac:	1e6b      	subs	r3, r5, #1
 80082ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80082b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80082b4:	2b30      	cmp	r3, #48	; 0x30
 80082b6:	d0f8      	beq.n	80082aa <_dtoa_r+0x5fa>
 80082b8:	9700      	str	r7, [sp, #0]
 80082ba:	e049      	b.n	8008350 <_dtoa_r+0x6a0>
 80082bc:	4b05      	ldr	r3, [pc, #20]	; (80082d4 <_dtoa_r+0x624>)
 80082be:	f7f8 f99b 	bl	80005f8 <__aeabi_dmul>
 80082c2:	4680      	mov	r8, r0
 80082c4:	4689      	mov	r9, r1
 80082c6:	e7bd      	b.n	8008244 <_dtoa_r+0x594>
 80082c8:	0800c1b8 	.word	0x0800c1b8
 80082cc:	0800c190 	.word	0x0800c190
 80082d0:	3ff00000 	.word	0x3ff00000
 80082d4:	40240000 	.word	0x40240000
 80082d8:	401c0000 	.word	0x401c0000
 80082dc:	40140000 	.word	0x40140000
 80082e0:	3fe00000 	.word	0x3fe00000
 80082e4:	9d01      	ldr	r5, [sp, #4]
 80082e6:	4656      	mov	r6, sl
 80082e8:	465f      	mov	r7, fp
 80082ea:	4642      	mov	r2, r8
 80082ec:	464b      	mov	r3, r9
 80082ee:	4630      	mov	r0, r6
 80082f0:	4639      	mov	r1, r7
 80082f2:	f7f8 faab 	bl	800084c <__aeabi_ddiv>
 80082f6:	f7f8 fc2f 	bl	8000b58 <__aeabi_d2iz>
 80082fa:	4682      	mov	sl, r0
 80082fc:	f7f8 f912 	bl	8000524 <__aeabi_i2d>
 8008300:	4642      	mov	r2, r8
 8008302:	464b      	mov	r3, r9
 8008304:	f7f8 f978 	bl	80005f8 <__aeabi_dmul>
 8008308:	4602      	mov	r2, r0
 800830a:	460b      	mov	r3, r1
 800830c:	4630      	mov	r0, r6
 800830e:	4639      	mov	r1, r7
 8008310:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8008314:	f7f7 ffb8 	bl	8000288 <__aeabi_dsub>
 8008318:	f805 6b01 	strb.w	r6, [r5], #1
 800831c:	9e01      	ldr	r6, [sp, #4]
 800831e:	9f03      	ldr	r7, [sp, #12]
 8008320:	1bae      	subs	r6, r5, r6
 8008322:	42b7      	cmp	r7, r6
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	d135      	bne.n	8008396 <_dtoa_r+0x6e6>
 800832a:	f7f7 ffaf 	bl	800028c <__adddf3>
 800832e:	4642      	mov	r2, r8
 8008330:	464b      	mov	r3, r9
 8008332:	4606      	mov	r6, r0
 8008334:	460f      	mov	r7, r1
 8008336:	f7f8 fbef 	bl	8000b18 <__aeabi_dcmpgt>
 800833a:	b9d0      	cbnz	r0, 8008372 <_dtoa_r+0x6c2>
 800833c:	4642      	mov	r2, r8
 800833e:	464b      	mov	r3, r9
 8008340:	4630      	mov	r0, r6
 8008342:	4639      	mov	r1, r7
 8008344:	f7f8 fbc0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008348:	b110      	cbz	r0, 8008350 <_dtoa_r+0x6a0>
 800834a:	f01a 0f01 	tst.w	sl, #1
 800834e:	d110      	bne.n	8008372 <_dtoa_r+0x6c2>
 8008350:	4620      	mov	r0, r4
 8008352:	ee18 1a10 	vmov	r1, s16
 8008356:	f000 fe75 	bl	8009044 <_Bfree>
 800835a:	2300      	movs	r3, #0
 800835c:	9800      	ldr	r0, [sp, #0]
 800835e:	702b      	strb	r3, [r5, #0]
 8008360:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008362:	3001      	adds	r0, #1
 8008364:	6018      	str	r0, [r3, #0]
 8008366:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008368:	2b00      	cmp	r3, #0
 800836a:	f43f acf1 	beq.w	8007d50 <_dtoa_r+0xa0>
 800836e:	601d      	str	r5, [r3, #0]
 8008370:	e4ee      	b.n	8007d50 <_dtoa_r+0xa0>
 8008372:	9f00      	ldr	r7, [sp, #0]
 8008374:	462b      	mov	r3, r5
 8008376:	461d      	mov	r5, r3
 8008378:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800837c:	2a39      	cmp	r2, #57	; 0x39
 800837e:	d106      	bne.n	800838e <_dtoa_r+0x6de>
 8008380:	9a01      	ldr	r2, [sp, #4]
 8008382:	429a      	cmp	r2, r3
 8008384:	d1f7      	bne.n	8008376 <_dtoa_r+0x6c6>
 8008386:	9901      	ldr	r1, [sp, #4]
 8008388:	2230      	movs	r2, #48	; 0x30
 800838a:	3701      	adds	r7, #1
 800838c:	700a      	strb	r2, [r1, #0]
 800838e:	781a      	ldrb	r2, [r3, #0]
 8008390:	3201      	adds	r2, #1
 8008392:	701a      	strb	r2, [r3, #0]
 8008394:	e790      	b.n	80082b8 <_dtoa_r+0x608>
 8008396:	4ba6      	ldr	r3, [pc, #664]	; (8008630 <_dtoa_r+0x980>)
 8008398:	2200      	movs	r2, #0
 800839a:	f7f8 f92d 	bl	80005f8 <__aeabi_dmul>
 800839e:	2200      	movs	r2, #0
 80083a0:	2300      	movs	r3, #0
 80083a2:	4606      	mov	r6, r0
 80083a4:	460f      	mov	r7, r1
 80083a6:	f7f8 fb8f 	bl	8000ac8 <__aeabi_dcmpeq>
 80083aa:	2800      	cmp	r0, #0
 80083ac:	d09d      	beq.n	80082ea <_dtoa_r+0x63a>
 80083ae:	e7cf      	b.n	8008350 <_dtoa_r+0x6a0>
 80083b0:	9a08      	ldr	r2, [sp, #32]
 80083b2:	2a00      	cmp	r2, #0
 80083b4:	f000 80d7 	beq.w	8008566 <_dtoa_r+0x8b6>
 80083b8:	9a06      	ldr	r2, [sp, #24]
 80083ba:	2a01      	cmp	r2, #1
 80083bc:	f300 80ba 	bgt.w	8008534 <_dtoa_r+0x884>
 80083c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083c2:	2a00      	cmp	r2, #0
 80083c4:	f000 80b2 	beq.w	800852c <_dtoa_r+0x87c>
 80083c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80083cc:	9e07      	ldr	r6, [sp, #28]
 80083ce:	9d04      	ldr	r5, [sp, #16]
 80083d0:	9a04      	ldr	r2, [sp, #16]
 80083d2:	441a      	add	r2, r3
 80083d4:	9204      	str	r2, [sp, #16]
 80083d6:	9a05      	ldr	r2, [sp, #20]
 80083d8:	2101      	movs	r1, #1
 80083da:	441a      	add	r2, r3
 80083dc:	4620      	mov	r0, r4
 80083de:	9205      	str	r2, [sp, #20]
 80083e0:	f000 ff32 	bl	8009248 <__i2b>
 80083e4:	4607      	mov	r7, r0
 80083e6:	2d00      	cmp	r5, #0
 80083e8:	dd0c      	ble.n	8008404 <_dtoa_r+0x754>
 80083ea:	9b05      	ldr	r3, [sp, #20]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	dd09      	ble.n	8008404 <_dtoa_r+0x754>
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	9a04      	ldr	r2, [sp, #16]
 80083f4:	bfa8      	it	ge
 80083f6:	462b      	movge	r3, r5
 80083f8:	1ad2      	subs	r2, r2, r3
 80083fa:	9204      	str	r2, [sp, #16]
 80083fc:	9a05      	ldr	r2, [sp, #20]
 80083fe:	1aed      	subs	r5, r5, r3
 8008400:	1ad3      	subs	r3, r2, r3
 8008402:	9305      	str	r3, [sp, #20]
 8008404:	9b07      	ldr	r3, [sp, #28]
 8008406:	b31b      	cbz	r3, 8008450 <_dtoa_r+0x7a0>
 8008408:	9b08      	ldr	r3, [sp, #32]
 800840a:	2b00      	cmp	r3, #0
 800840c:	f000 80af 	beq.w	800856e <_dtoa_r+0x8be>
 8008410:	2e00      	cmp	r6, #0
 8008412:	dd13      	ble.n	800843c <_dtoa_r+0x78c>
 8008414:	4639      	mov	r1, r7
 8008416:	4632      	mov	r2, r6
 8008418:	4620      	mov	r0, r4
 800841a:	f000 ffd5 	bl	80093c8 <__pow5mult>
 800841e:	ee18 2a10 	vmov	r2, s16
 8008422:	4601      	mov	r1, r0
 8008424:	4607      	mov	r7, r0
 8008426:	4620      	mov	r0, r4
 8008428:	f000 ff24 	bl	8009274 <__multiply>
 800842c:	ee18 1a10 	vmov	r1, s16
 8008430:	4680      	mov	r8, r0
 8008432:	4620      	mov	r0, r4
 8008434:	f000 fe06 	bl	8009044 <_Bfree>
 8008438:	ee08 8a10 	vmov	s16, r8
 800843c:	9b07      	ldr	r3, [sp, #28]
 800843e:	1b9a      	subs	r2, r3, r6
 8008440:	d006      	beq.n	8008450 <_dtoa_r+0x7a0>
 8008442:	ee18 1a10 	vmov	r1, s16
 8008446:	4620      	mov	r0, r4
 8008448:	f000 ffbe 	bl	80093c8 <__pow5mult>
 800844c:	ee08 0a10 	vmov	s16, r0
 8008450:	2101      	movs	r1, #1
 8008452:	4620      	mov	r0, r4
 8008454:	f000 fef8 	bl	8009248 <__i2b>
 8008458:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800845a:	2b00      	cmp	r3, #0
 800845c:	4606      	mov	r6, r0
 800845e:	f340 8088 	ble.w	8008572 <_dtoa_r+0x8c2>
 8008462:	461a      	mov	r2, r3
 8008464:	4601      	mov	r1, r0
 8008466:	4620      	mov	r0, r4
 8008468:	f000 ffae 	bl	80093c8 <__pow5mult>
 800846c:	9b06      	ldr	r3, [sp, #24]
 800846e:	2b01      	cmp	r3, #1
 8008470:	4606      	mov	r6, r0
 8008472:	f340 8081 	ble.w	8008578 <_dtoa_r+0x8c8>
 8008476:	f04f 0800 	mov.w	r8, #0
 800847a:	6933      	ldr	r3, [r6, #16]
 800847c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008480:	6918      	ldr	r0, [r3, #16]
 8008482:	f000 fe91 	bl	80091a8 <__hi0bits>
 8008486:	f1c0 0020 	rsb	r0, r0, #32
 800848a:	9b05      	ldr	r3, [sp, #20]
 800848c:	4418      	add	r0, r3
 800848e:	f010 001f 	ands.w	r0, r0, #31
 8008492:	f000 8092 	beq.w	80085ba <_dtoa_r+0x90a>
 8008496:	f1c0 0320 	rsb	r3, r0, #32
 800849a:	2b04      	cmp	r3, #4
 800849c:	f340 808a 	ble.w	80085b4 <_dtoa_r+0x904>
 80084a0:	f1c0 001c 	rsb	r0, r0, #28
 80084a4:	9b04      	ldr	r3, [sp, #16]
 80084a6:	4403      	add	r3, r0
 80084a8:	9304      	str	r3, [sp, #16]
 80084aa:	9b05      	ldr	r3, [sp, #20]
 80084ac:	4403      	add	r3, r0
 80084ae:	4405      	add	r5, r0
 80084b0:	9305      	str	r3, [sp, #20]
 80084b2:	9b04      	ldr	r3, [sp, #16]
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	dd07      	ble.n	80084c8 <_dtoa_r+0x818>
 80084b8:	ee18 1a10 	vmov	r1, s16
 80084bc:	461a      	mov	r2, r3
 80084be:	4620      	mov	r0, r4
 80084c0:	f000 ffdc 	bl	800947c <__lshift>
 80084c4:	ee08 0a10 	vmov	s16, r0
 80084c8:	9b05      	ldr	r3, [sp, #20]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	dd05      	ble.n	80084da <_dtoa_r+0x82a>
 80084ce:	4631      	mov	r1, r6
 80084d0:	461a      	mov	r2, r3
 80084d2:	4620      	mov	r0, r4
 80084d4:	f000 ffd2 	bl	800947c <__lshift>
 80084d8:	4606      	mov	r6, r0
 80084da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80084dc:	2b00      	cmp	r3, #0
 80084de:	d06e      	beq.n	80085be <_dtoa_r+0x90e>
 80084e0:	ee18 0a10 	vmov	r0, s16
 80084e4:	4631      	mov	r1, r6
 80084e6:	f001 f839 	bl	800955c <__mcmp>
 80084ea:	2800      	cmp	r0, #0
 80084ec:	da67      	bge.n	80085be <_dtoa_r+0x90e>
 80084ee:	9b00      	ldr	r3, [sp, #0]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	ee18 1a10 	vmov	r1, s16
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	220a      	movs	r2, #10
 80084fa:	2300      	movs	r3, #0
 80084fc:	4620      	mov	r0, r4
 80084fe:	f000 fdc3 	bl	8009088 <__multadd>
 8008502:	9b08      	ldr	r3, [sp, #32]
 8008504:	ee08 0a10 	vmov	s16, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	f000 81b1 	beq.w	8008870 <_dtoa_r+0xbc0>
 800850e:	2300      	movs	r3, #0
 8008510:	4639      	mov	r1, r7
 8008512:	220a      	movs	r2, #10
 8008514:	4620      	mov	r0, r4
 8008516:	f000 fdb7 	bl	8009088 <__multadd>
 800851a:	9b02      	ldr	r3, [sp, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	4607      	mov	r7, r0
 8008520:	f300 808e 	bgt.w	8008640 <_dtoa_r+0x990>
 8008524:	9b06      	ldr	r3, [sp, #24]
 8008526:	2b02      	cmp	r3, #2
 8008528:	dc51      	bgt.n	80085ce <_dtoa_r+0x91e>
 800852a:	e089      	b.n	8008640 <_dtoa_r+0x990>
 800852c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800852e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008532:	e74b      	b.n	80083cc <_dtoa_r+0x71c>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1e5e      	subs	r6, r3, #1
 8008538:	9b07      	ldr	r3, [sp, #28]
 800853a:	42b3      	cmp	r3, r6
 800853c:	bfbf      	itttt	lt
 800853e:	9b07      	ldrlt	r3, [sp, #28]
 8008540:	9607      	strlt	r6, [sp, #28]
 8008542:	1af2      	sublt	r2, r6, r3
 8008544:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008546:	bfb6      	itet	lt
 8008548:	189b      	addlt	r3, r3, r2
 800854a:	1b9e      	subge	r6, r3, r6
 800854c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800854e:	9b03      	ldr	r3, [sp, #12]
 8008550:	bfb8      	it	lt
 8008552:	2600      	movlt	r6, #0
 8008554:	2b00      	cmp	r3, #0
 8008556:	bfb7      	itett	lt
 8008558:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800855c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008560:	1a9d      	sublt	r5, r3, r2
 8008562:	2300      	movlt	r3, #0
 8008564:	e734      	b.n	80083d0 <_dtoa_r+0x720>
 8008566:	9e07      	ldr	r6, [sp, #28]
 8008568:	9d04      	ldr	r5, [sp, #16]
 800856a:	9f08      	ldr	r7, [sp, #32]
 800856c:	e73b      	b.n	80083e6 <_dtoa_r+0x736>
 800856e:	9a07      	ldr	r2, [sp, #28]
 8008570:	e767      	b.n	8008442 <_dtoa_r+0x792>
 8008572:	9b06      	ldr	r3, [sp, #24]
 8008574:	2b01      	cmp	r3, #1
 8008576:	dc18      	bgt.n	80085aa <_dtoa_r+0x8fa>
 8008578:	f1ba 0f00 	cmp.w	sl, #0
 800857c:	d115      	bne.n	80085aa <_dtoa_r+0x8fa>
 800857e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008582:	b993      	cbnz	r3, 80085aa <_dtoa_r+0x8fa>
 8008584:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008588:	0d1b      	lsrs	r3, r3, #20
 800858a:	051b      	lsls	r3, r3, #20
 800858c:	b183      	cbz	r3, 80085b0 <_dtoa_r+0x900>
 800858e:	9b04      	ldr	r3, [sp, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9b05      	ldr	r3, [sp, #20]
 8008596:	3301      	adds	r3, #1
 8008598:	9305      	str	r3, [sp, #20]
 800859a:	f04f 0801 	mov.w	r8, #1
 800859e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	f47f af6a 	bne.w	800847a <_dtoa_r+0x7ca>
 80085a6:	2001      	movs	r0, #1
 80085a8:	e76f      	b.n	800848a <_dtoa_r+0x7da>
 80085aa:	f04f 0800 	mov.w	r8, #0
 80085ae:	e7f6      	b.n	800859e <_dtoa_r+0x8ee>
 80085b0:	4698      	mov	r8, r3
 80085b2:	e7f4      	b.n	800859e <_dtoa_r+0x8ee>
 80085b4:	f43f af7d 	beq.w	80084b2 <_dtoa_r+0x802>
 80085b8:	4618      	mov	r0, r3
 80085ba:	301c      	adds	r0, #28
 80085bc:	e772      	b.n	80084a4 <_dtoa_r+0x7f4>
 80085be:	9b03      	ldr	r3, [sp, #12]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	dc37      	bgt.n	8008634 <_dtoa_r+0x984>
 80085c4:	9b06      	ldr	r3, [sp, #24]
 80085c6:	2b02      	cmp	r3, #2
 80085c8:	dd34      	ble.n	8008634 <_dtoa_r+0x984>
 80085ca:	9b03      	ldr	r3, [sp, #12]
 80085cc:	9302      	str	r3, [sp, #8]
 80085ce:	9b02      	ldr	r3, [sp, #8]
 80085d0:	b96b      	cbnz	r3, 80085ee <_dtoa_r+0x93e>
 80085d2:	4631      	mov	r1, r6
 80085d4:	2205      	movs	r2, #5
 80085d6:	4620      	mov	r0, r4
 80085d8:	f000 fd56 	bl	8009088 <__multadd>
 80085dc:	4601      	mov	r1, r0
 80085de:	4606      	mov	r6, r0
 80085e0:	ee18 0a10 	vmov	r0, s16
 80085e4:	f000 ffba 	bl	800955c <__mcmp>
 80085e8:	2800      	cmp	r0, #0
 80085ea:	f73f adbb 	bgt.w	8008164 <_dtoa_r+0x4b4>
 80085ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80085f0:	9d01      	ldr	r5, [sp, #4]
 80085f2:	43db      	mvns	r3, r3
 80085f4:	9300      	str	r3, [sp, #0]
 80085f6:	f04f 0800 	mov.w	r8, #0
 80085fa:	4631      	mov	r1, r6
 80085fc:	4620      	mov	r0, r4
 80085fe:	f000 fd21 	bl	8009044 <_Bfree>
 8008602:	2f00      	cmp	r7, #0
 8008604:	f43f aea4 	beq.w	8008350 <_dtoa_r+0x6a0>
 8008608:	f1b8 0f00 	cmp.w	r8, #0
 800860c:	d005      	beq.n	800861a <_dtoa_r+0x96a>
 800860e:	45b8      	cmp	r8, r7
 8008610:	d003      	beq.n	800861a <_dtoa_r+0x96a>
 8008612:	4641      	mov	r1, r8
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fd15 	bl	8009044 <_Bfree>
 800861a:	4639      	mov	r1, r7
 800861c:	4620      	mov	r0, r4
 800861e:	f000 fd11 	bl	8009044 <_Bfree>
 8008622:	e695      	b.n	8008350 <_dtoa_r+0x6a0>
 8008624:	2600      	movs	r6, #0
 8008626:	4637      	mov	r7, r6
 8008628:	e7e1      	b.n	80085ee <_dtoa_r+0x93e>
 800862a:	9700      	str	r7, [sp, #0]
 800862c:	4637      	mov	r7, r6
 800862e:	e599      	b.n	8008164 <_dtoa_r+0x4b4>
 8008630:	40240000 	.word	0x40240000
 8008634:	9b08      	ldr	r3, [sp, #32]
 8008636:	2b00      	cmp	r3, #0
 8008638:	f000 80ca 	beq.w	80087d0 <_dtoa_r+0xb20>
 800863c:	9b03      	ldr	r3, [sp, #12]
 800863e:	9302      	str	r3, [sp, #8]
 8008640:	2d00      	cmp	r5, #0
 8008642:	dd05      	ble.n	8008650 <_dtoa_r+0x9a0>
 8008644:	4639      	mov	r1, r7
 8008646:	462a      	mov	r2, r5
 8008648:	4620      	mov	r0, r4
 800864a:	f000 ff17 	bl	800947c <__lshift>
 800864e:	4607      	mov	r7, r0
 8008650:	f1b8 0f00 	cmp.w	r8, #0
 8008654:	d05b      	beq.n	800870e <_dtoa_r+0xa5e>
 8008656:	6879      	ldr	r1, [r7, #4]
 8008658:	4620      	mov	r0, r4
 800865a:	f000 fcb3 	bl	8008fc4 <_Balloc>
 800865e:	4605      	mov	r5, r0
 8008660:	b928      	cbnz	r0, 800866e <_dtoa_r+0x9be>
 8008662:	4b87      	ldr	r3, [pc, #540]	; (8008880 <_dtoa_r+0xbd0>)
 8008664:	4602      	mov	r2, r0
 8008666:	f240 21ea 	movw	r1, #746	; 0x2ea
 800866a:	f7ff bb3b 	b.w	8007ce4 <_dtoa_r+0x34>
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	3202      	adds	r2, #2
 8008672:	0092      	lsls	r2, r2, #2
 8008674:	f107 010c 	add.w	r1, r7, #12
 8008678:	300c      	adds	r0, #12
 800867a:	f000 fc95 	bl	8008fa8 <memcpy>
 800867e:	2201      	movs	r2, #1
 8008680:	4629      	mov	r1, r5
 8008682:	4620      	mov	r0, r4
 8008684:	f000 fefa 	bl	800947c <__lshift>
 8008688:	9b01      	ldr	r3, [sp, #4]
 800868a:	f103 0901 	add.w	r9, r3, #1
 800868e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008692:	4413      	add	r3, r2
 8008694:	9305      	str	r3, [sp, #20]
 8008696:	f00a 0301 	and.w	r3, sl, #1
 800869a:	46b8      	mov	r8, r7
 800869c:	9304      	str	r3, [sp, #16]
 800869e:	4607      	mov	r7, r0
 80086a0:	4631      	mov	r1, r6
 80086a2:	ee18 0a10 	vmov	r0, s16
 80086a6:	f7ff fa77 	bl	8007b98 <quorem>
 80086aa:	4641      	mov	r1, r8
 80086ac:	9002      	str	r0, [sp, #8]
 80086ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80086b2:	ee18 0a10 	vmov	r0, s16
 80086b6:	f000 ff51 	bl	800955c <__mcmp>
 80086ba:	463a      	mov	r2, r7
 80086bc:	9003      	str	r0, [sp, #12]
 80086be:	4631      	mov	r1, r6
 80086c0:	4620      	mov	r0, r4
 80086c2:	f000 ff67 	bl	8009594 <__mdiff>
 80086c6:	68c2      	ldr	r2, [r0, #12]
 80086c8:	f109 3bff 	add.w	fp, r9, #4294967295
 80086cc:	4605      	mov	r5, r0
 80086ce:	bb02      	cbnz	r2, 8008712 <_dtoa_r+0xa62>
 80086d0:	4601      	mov	r1, r0
 80086d2:	ee18 0a10 	vmov	r0, s16
 80086d6:	f000 ff41 	bl	800955c <__mcmp>
 80086da:	4602      	mov	r2, r0
 80086dc:	4629      	mov	r1, r5
 80086de:	4620      	mov	r0, r4
 80086e0:	9207      	str	r2, [sp, #28]
 80086e2:	f000 fcaf 	bl	8009044 <_Bfree>
 80086e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80086ea:	ea43 0102 	orr.w	r1, r3, r2
 80086ee:	9b04      	ldr	r3, [sp, #16]
 80086f0:	430b      	orrs	r3, r1
 80086f2:	464d      	mov	r5, r9
 80086f4:	d10f      	bne.n	8008716 <_dtoa_r+0xa66>
 80086f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80086fa:	d02a      	beq.n	8008752 <_dtoa_r+0xaa2>
 80086fc:	9b03      	ldr	r3, [sp, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	dd02      	ble.n	8008708 <_dtoa_r+0xa58>
 8008702:	9b02      	ldr	r3, [sp, #8]
 8008704:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008708:	f88b a000 	strb.w	sl, [fp]
 800870c:	e775      	b.n	80085fa <_dtoa_r+0x94a>
 800870e:	4638      	mov	r0, r7
 8008710:	e7ba      	b.n	8008688 <_dtoa_r+0x9d8>
 8008712:	2201      	movs	r2, #1
 8008714:	e7e2      	b.n	80086dc <_dtoa_r+0xa2c>
 8008716:	9b03      	ldr	r3, [sp, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	db04      	blt.n	8008726 <_dtoa_r+0xa76>
 800871c:	9906      	ldr	r1, [sp, #24]
 800871e:	430b      	orrs	r3, r1
 8008720:	9904      	ldr	r1, [sp, #16]
 8008722:	430b      	orrs	r3, r1
 8008724:	d122      	bne.n	800876c <_dtoa_r+0xabc>
 8008726:	2a00      	cmp	r2, #0
 8008728:	ddee      	ble.n	8008708 <_dtoa_r+0xa58>
 800872a:	ee18 1a10 	vmov	r1, s16
 800872e:	2201      	movs	r2, #1
 8008730:	4620      	mov	r0, r4
 8008732:	f000 fea3 	bl	800947c <__lshift>
 8008736:	4631      	mov	r1, r6
 8008738:	ee08 0a10 	vmov	s16, r0
 800873c:	f000 ff0e 	bl	800955c <__mcmp>
 8008740:	2800      	cmp	r0, #0
 8008742:	dc03      	bgt.n	800874c <_dtoa_r+0xa9c>
 8008744:	d1e0      	bne.n	8008708 <_dtoa_r+0xa58>
 8008746:	f01a 0f01 	tst.w	sl, #1
 800874a:	d0dd      	beq.n	8008708 <_dtoa_r+0xa58>
 800874c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008750:	d1d7      	bne.n	8008702 <_dtoa_r+0xa52>
 8008752:	2339      	movs	r3, #57	; 0x39
 8008754:	f88b 3000 	strb.w	r3, [fp]
 8008758:	462b      	mov	r3, r5
 800875a:	461d      	mov	r5, r3
 800875c:	3b01      	subs	r3, #1
 800875e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008762:	2a39      	cmp	r2, #57	; 0x39
 8008764:	d071      	beq.n	800884a <_dtoa_r+0xb9a>
 8008766:	3201      	adds	r2, #1
 8008768:	701a      	strb	r2, [r3, #0]
 800876a:	e746      	b.n	80085fa <_dtoa_r+0x94a>
 800876c:	2a00      	cmp	r2, #0
 800876e:	dd07      	ble.n	8008780 <_dtoa_r+0xad0>
 8008770:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008774:	d0ed      	beq.n	8008752 <_dtoa_r+0xaa2>
 8008776:	f10a 0301 	add.w	r3, sl, #1
 800877a:	f88b 3000 	strb.w	r3, [fp]
 800877e:	e73c      	b.n	80085fa <_dtoa_r+0x94a>
 8008780:	9b05      	ldr	r3, [sp, #20]
 8008782:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008786:	4599      	cmp	r9, r3
 8008788:	d047      	beq.n	800881a <_dtoa_r+0xb6a>
 800878a:	ee18 1a10 	vmov	r1, s16
 800878e:	2300      	movs	r3, #0
 8008790:	220a      	movs	r2, #10
 8008792:	4620      	mov	r0, r4
 8008794:	f000 fc78 	bl	8009088 <__multadd>
 8008798:	45b8      	cmp	r8, r7
 800879a:	ee08 0a10 	vmov	s16, r0
 800879e:	f04f 0300 	mov.w	r3, #0
 80087a2:	f04f 020a 	mov.w	r2, #10
 80087a6:	4641      	mov	r1, r8
 80087a8:	4620      	mov	r0, r4
 80087aa:	d106      	bne.n	80087ba <_dtoa_r+0xb0a>
 80087ac:	f000 fc6c 	bl	8009088 <__multadd>
 80087b0:	4680      	mov	r8, r0
 80087b2:	4607      	mov	r7, r0
 80087b4:	f109 0901 	add.w	r9, r9, #1
 80087b8:	e772      	b.n	80086a0 <_dtoa_r+0x9f0>
 80087ba:	f000 fc65 	bl	8009088 <__multadd>
 80087be:	4639      	mov	r1, r7
 80087c0:	4680      	mov	r8, r0
 80087c2:	2300      	movs	r3, #0
 80087c4:	220a      	movs	r2, #10
 80087c6:	4620      	mov	r0, r4
 80087c8:	f000 fc5e 	bl	8009088 <__multadd>
 80087cc:	4607      	mov	r7, r0
 80087ce:	e7f1      	b.n	80087b4 <_dtoa_r+0xb04>
 80087d0:	9b03      	ldr	r3, [sp, #12]
 80087d2:	9302      	str	r3, [sp, #8]
 80087d4:	9d01      	ldr	r5, [sp, #4]
 80087d6:	ee18 0a10 	vmov	r0, s16
 80087da:	4631      	mov	r1, r6
 80087dc:	f7ff f9dc 	bl	8007b98 <quorem>
 80087e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80087e4:	9b01      	ldr	r3, [sp, #4]
 80087e6:	f805 ab01 	strb.w	sl, [r5], #1
 80087ea:	1aea      	subs	r2, r5, r3
 80087ec:	9b02      	ldr	r3, [sp, #8]
 80087ee:	4293      	cmp	r3, r2
 80087f0:	dd09      	ble.n	8008806 <_dtoa_r+0xb56>
 80087f2:	ee18 1a10 	vmov	r1, s16
 80087f6:	2300      	movs	r3, #0
 80087f8:	220a      	movs	r2, #10
 80087fa:	4620      	mov	r0, r4
 80087fc:	f000 fc44 	bl	8009088 <__multadd>
 8008800:	ee08 0a10 	vmov	s16, r0
 8008804:	e7e7      	b.n	80087d6 <_dtoa_r+0xb26>
 8008806:	9b02      	ldr	r3, [sp, #8]
 8008808:	2b00      	cmp	r3, #0
 800880a:	bfc8      	it	gt
 800880c:	461d      	movgt	r5, r3
 800880e:	9b01      	ldr	r3, [sp, #4]
 8008810:	bfd8      	it	le
 8008812:	2501      	movle	r5, #1
 8008814:	441d      	add	r5, r3
 8008816:	f04f 0800 	mov.w	r8, #0
 800881a:	ee18 1a10 	vmov	r1, s16
 800881e:	2201      	movs	r2, #1
 8008820:	4620      	mov	r0, r4
 8008822:	f000 fe2b 	bl	800947c <__lshift>
 8008826:	4631      	mov	r1, r6
 8008828:	ee08 0a10 	vmov	s16, r0
 800882c:	f000 fe96 	bl	800955c <__mcmp>
 8008830:	2800      	cmp	r0, #0
 8008832:	dc91      	bgt.n	8008758 <_dtoa_r+0xaa8>
 8008834:	d102      	bne.n	800883c <_dtoa_r+0xb8c>
 8008836:	f01a 0f01 	tst.w	sl, #1
 800883a:	d18d      	bne.n	8008758 <_dtoa_r+0xaa8>
 800883c:	462b      	mov	r3, r5
 800883e:	461d      	mov	r5, r3
 8008840:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008844:	2a30      	cmp	r2, #48	; 0x30
 8008846:	d0fa      	beq.n	800883e <_dtoa_r+0xb8e>
 8008848:	e6d7      	b.n	80085fa <_dtoa_r+0x94a>
 800884a:	9a01      	ldr	r2, [sp, #4]
 800884c:	429a      	cmp	r2, r3
 800884e:	d184      	bne.n	800875a <_dtoa_r+0xaaa>
 8008850:	9b00      	ldr	r3, [sp, #0]
 8008852:	3301      	adds	r3, #1
 8008854:	9300      	str	r3, [sp, #0]
 8008856:	2331      	movs	r3, #49	; 0x31
 8008858:	7013      	strb	r3, [r2, #0]
 800885a:	e6ce      	b.n	80085fa <_dtoa_r+0x94a>
 800885c:	4b09      	ldr	r3, [pc, #36]	; (8008884 <_dtoa_r+0xbd4>)
 800885e:	f7ff ba95 	b.w	8007d8c <_dtoa_r+0xdc>
 8008862:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008864:	2b00      	cmp	r3, #0
 8008866:	f47f aa6e 	bne.w	8007d46 <_dtoa_r+0x96>
 800886a:	4b07      	ldr	r3, [pc, #28]	; (8008888 <_dtoa_r+0xbd8>)
 800886c:	f7ff ba8e 	b.w	8007d8c <_dtoa_r+0xdc>
 8008870:	9b02      	ldr	r3, [sp, #8]
 8008872:	2b00      	cmp	r3, #0
 8008874:	dcae      	bgt.n	80087d4 <_dtoa_r+0xb24>
 8008876:	9b06      	ldr	r3, [sp, #24]
 8008878:	2b02      	cmp	r3, #2
 800887a:	f73f aea8 	bgt.w	80085ce <_dtoa_r+0x91e>
 800887e:	e7a9      	b.n	80087d4 <_dtoa_r+0xb24>
 8008880:	0800c0a8 	.word	0x0800c0a8
 8008884:	0800beac 	.word	0x0800beac
 8008888:	0800c029 	.word	0x0800c029

0800888c <rshift>:
 800888c:	6903      	ldr	r3, [r0, #16]
 800888e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008892:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008896:	ea4f 1261 	mov.w	r2, r1, asr #5
 800889a:	f100 0414 	add.w	r4, r0, #20
 800889e:	dd45      	ble.n	800892c <rshift+0xa0>
 80088a0:	f011 011f 	ands.w	r1, r1, #31
 80088a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80088a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80088ac:	d10c      	bne.n	80088c8 <rshift+0x3c>
 80088ae:	f100 0710 	add.w	r7, r0, #16
 80088b2:	4629      	mov	r1, r5
 80088b4:	42b1      	cmp	r1, r6
 80088b6:	d334      	bcc.n	8008922 <rshift+0x96>
 80088b8:	1a9b      	subs	r3, r3, r2
 80088ba:	009b      	lsls	r3, r3, #2
 80088bc:	1eea      	subs	r2, r5, #3
 80088be:	4296      	cmp	r6, r2
 80088c0:	bf38      	it	cc
 80088c2:	2300      	movcc	r3, #0
 80088c4:	4423      	add	r3, r4
 80088c6:	e015      	b.n	80088f4 <rshift+0x68>
 80088c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80088cc:	f1c1 0820 	rsb	r8, r1, #32
 80088d0:	40cf      	lsrs	r7, r1
 80088d2:	f105 0e04 	add.w	lr, r5, #4
 80088d6:	46a1      	mov	r9, r4
 80088d8:	4576      	cmp	r6, lr
 80088da:	46f4      	mov	ip, lr
 80088dc:	d815      	bhi.n	800890a <rshift+0x7e>
 80088de:	1a9a      	subs	r2, r3, r2
 80088e0:	0092      	lsls	r2, r2, #2
 80088e2:	3a04      	subs	r2, #4
 80088e4:	3501      	adds	r5, #1
 80088e6:	42ae      	cmp	r6, r5
 80088e8:	bf38      	it	cc
 80088ea:	2200      	movcc	r2, #0
 80088ec:	18a3      	adds	r3, r4, r2
 80088ee:	50a7      	str	r7, [r4, r2]
 80088f0:	b107      	cbz	r7, 80088f4 <rshift+0x68>
 80088f2:	3304      	adds	r3, #4
 80088f4:	1b1a      	subs	r2, r3, r4
 80088f6:	42a3      	cmp	r3, r4
 80088f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80088fc:	bf08      	it	eq
 80088fe:	2300      	moveq	r3, #0
 8008900:	6102      	str	r2, [r0, #16]
 8008902:	bf08      	it	eq
 8008904:	6143      	streq	r3, [r0, #20]
 8008906:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800890a:	f8dc c000 	ldr.w	ip, [ip]
 800890e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008912:	ea4c 0707 	orr.w	r7, ip, r7
 8008916:	f849 7b04 	str.w	r7, [r9], #4
 800891a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800891e:	40cf      	lsrs	r7, r1
 8008920:	e7da      	b.n	80088d8 <rshift+0x4c>
 8008922:	f851 cb04 	ldr.w	ip, [r1], #4
 8008926:	f847 cf04 	str.w	ip, [r7, #4]!
 800892a:	e7c3      	b.n	80088b4 <rshift+0x28>
 800892c:	4623      	mov	r3, r4
 800892e:	e7e1      	b.n	80088f4 <rshift+0x68>

08008930 <__hexdig_fun>:
 8008930:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008934:	2b09      	cmp	r3, #9
 8008936:	d802      	bhi.n	800893e <__hexdig_fun+0xe>
 8008938:	3820      	subs	r0, #32
 800893a:	b2c0      	uxtb	r0, r0
 800893c:	4770      	bx	lr
 800893e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008942:	2b05      	cmp	r3, #5
 8008944:	d801      	bhi.n	800894a <__hexdig_fun+0x1a>
 8008946:	3847      	subs	r0, #71	; 0x47
 8008948:	e7f7      	b.n	800893a <__hexdig_fun+0xa>
 800894a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800894e:	2b05      	cmp	r3, #5
 8008950:	d801      	bhi.n	8008956 <__hexdig_fun+0x26>
 8008952:	3827      	subs	r0, #39	; 0x27
 8008954:	e7f1      	b.n	800893a <__hexdig_fun+0xa>
 8008956:	2000      	movs	r0, #0
 8008958:	4770      	bx	lr
	...

0800895c <__gethex>:
 800895c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008960:	ed2d 8b02 	vpush	{d8}
 8008964:	b089      	sub	sp, #36	; 0x24
 8008966:	ee08 0a10 	vmov	s16, r0
 800896a:	9304      	str	r3, [sp, #16]
 800896c:	4bb4      	ldr	r3, [pc, #720]	; (8008c40 <__gethex+0x2e4>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	9301      	str	r3, [sp, #4]
 8008972:	4618      	mov	r0, r3
 8008974:	468b      	mov	fp, r1
 8008976:	4690      	mov	r8, r2
 8008978:	f7f7 fc2a 	bl	80001d0 <strlen>
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f8db 2000 	ldr.w	r2, [fp]
 8008982:	4403      	add	r3, r0
 8008984:	4682      	mov	sl, r0
 8008986:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800898a:	9305      	str	r3, [sp, #20]
 800898c:	1c93      	adds	r3, r2, #2
 800898e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008992:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008996:	32fe      	adds	r2, #254	; 0xfe
 8008998:	18d1      	adds	r1, r2, r3
 800899a:	461f      	mov	r7, r3
 800899c:	f813 0b01 	ldrb.w	r0, [r3], #1
 80089a0:	9100      	str	r1, [sp, #0]
 80089a2:	2830      	cmp	r0, #48	; 0x30
 80089a4:	d0f8      	beq.n	8008998 <__gethex+0x3c>
 80089a6:	f7ff ffc3 	bl	8008930 <__hexdig_fun>
 80089aa:	4604      	mov	r4, r0
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d13a      	bne.n	8008a26 <__gethex+0xca>
 80089b0:	9901      	ldr	r1, [sp, #4]
 80089b2:	4652      	mov	r2, sl
 80089b4:	4638      	mov	r0, r7
 80089b6:	f001 fa33 	bl	8009e20 <strncmp>
 80089ba:	4605      	mov	r5, r0
 80089bc:	2800      	cmp	r0, #0
 80089be:	d168      	bne.n	8008a92 <__gethex+0x136>
 80089c0:	f817 000a 	ldrb.w	r0, [r7, sl]
 80089c4:	eb07 060a 	add.w	r6, r7, sl
 80089c8:	f7ff ffb2 	bl	8008930 <__hexdig_fun>
 80089cc:	2800      	cmp	r0, #0
 80089ce:	d062      	beq.n	8008a96 <__gethex+0x13a>
 80089d0:	4633      	mov	r3, r6
 80089d2:	7818      	ldrb	r0, [r3, #0]
 80089d4:	2830      	cmp	r0, #48	; 0x30
 80089d6:	461f      	mov	r7, r3
 80089d8:	f103 0301 	add.w	r3, r3, #1
 80089dc:	d0f9      	beq.n	80089d2 <__gethex+0x76>
 80089de:	f7ff ffa7 	bl	8008930 <__hexdig_fun>
 80089e2:	2301      	movs	r3, #1
 80089e4:	fab0 f480 	clz	r4, r0
 80089e8:	0964      	lsrs	r4, r4, #5
 80089ea:	4635      	mov	r5, r6
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	463a      	mov	r2, r7
 80089f0:	4616      	mov	r6, r2
 80089f2:	3201      	adds	r2, #1
 80089f4:	7830      	ldrb	r0, [r6, #0]
 80089f6:	f7ff ff9b 	bl	8008930 <__hexdig_fun>
 80089fa:	2800      	cmp	r0, #0
 80089fc:	d1f8      	bne.n	80089f0 <__gethex+0x94>
 80089fe:	9901      	ldr	r1, [sp, #4]
 8008a00:	4652      	mov	r2, sl
 8008a02:	4630      	mov	r0, r6
 8008a04:	f001 fa0c 	bl	8009e20 <strncmp>
 8008a08:	b980      	cbnz	r0, 8008a2c <__gethex+0xd0>
 8008a0a:	b94d      	cbnz	r5, 8008a20 <__gethex+0xc4>
 8008a0c:	eb06 050a 	add.w	r5, r6, sl
 8008a10:	462a      	mov	r2, r5
 8008a12:	4616      	mov	r6, r2
 8008a14:	3201      	adds	r2, #1
 8008a16:	7830      	ldrb	r0, [r6, #0]
 8008a18:	f7ff ff8a 	bl	8008930 <__hexdig_fun>
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d1f8      	bne.n	8008a12 <__gethex+0xb6>
 8008a20:	1bad      	subs	r5, r5, r6
 8008a22:	00ad      	lsls	r5, r5, #2
 8008a24:	e004      	b.n	8008a30 <__gethex+0xd4>
 8008a26:	2400      	movs	r4, #0
 8008a28:	4625      	mov	r5, r4
 8008a2a:	e7e0      	b.n	80089ee <__gethex+0x92>
 8008a2c:	2d00      	cmp	r5, #0
 8008a2e:	d1f7      	bne.n	8008a20 <__gethex+0xc4>
 8008a30:	7833      	ldrb	r3, [r6, #0]
 8008a32:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008a36:	2b50      	cmp	r3, #80	; 0x50
 8008a38:	d13b      	bne.n	8008ab2 <__gethex+0x156>
 8008a3a:	7873      	ldrb	r3, [r6, #1]
 8008a3c:	2b2b      	cmp	r3, #43	; 0x2b
 8008a3e:	d02c      	beq.n	8008a9a <__gethex+0x13e>
 8008a40:	2b2d      	cmp	r3, #45	; 0x2d
 8008a42:	d02e      	beq.n	8008aa2 <__gethex+0x146>
 8008a44:	1c71      	adds	r1, r6, #1
 8008a46:	f04f 0900 	mov.w	r9, #0
 8008a4a:	7808      	ldrb	r0, [r1, #0]
 8008a4c:	f7ff ff70 	bl	8008930 <__hexdig_fun>
 8008a50:	1e43      	subs	r3, r0, #1
 8008a52:	b2db      	uxtb	r3, r3
 8008a54:	2b18      	cmp	r3, #24
 8008a56:	d82c      	bhi.n	8008ab2 <__gethex+0x156>
 8008a58:	f1a0 0210 	sub.w	r2, r0, #16
 8008a5c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008a60:	f7ff ff66 	bl	8008930 <__hexdig_fun>
 8008a64:	1e43      	subs	r3, r0, #1
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b18      	cmp	r3, #24
 8008a6a:	d91d      	bls.n	8008aa8 <__gethex+0x14c>
 8008a6c:	f1b9 0f00 	cmp.w	r9, #0
 8008a70:	d000      	beq.n	8008a74 <__gethex+0x118>
 8008a72:	4252      	negs	r2, r2
 8008a74:	4415      	add	r5, r2
 8008a76:	f8cb 1000 	str.w	r1, [fp]
 8008a7a:	b1e4      	cbz	r4, 8008ab6 <__gethex+0x15a>
 8008a7c:	9b00      	ldr	r3, [sp, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	bf14      	ite	ne
 8008a82:	2700      	movne	r7, #0
 8008a84:	2706      	moveq	r7, #6
 8008a86:	4638      	mov	r0, r7
 8008a88:	b009      	add	sp, #36	; 0x24
 8008a8a:	ecbd 8b02 	vpop	{d8}
 8008a8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a92:	463e      	mov	r6, r7
 8008a94:	4625      	mov	r5, r4
 8008a96:	2401      	movs	r4, #1
 8008a98:	e7ca      	b.n	8008a30 <__gethex+0xd4>
 8008a9a:	f04f 0900 	mov.w	r9, #0
 8008a9e:	1cb1      	adds	r1, r6, #2
 8008aa0:	e7d3      	b.n	8008a4a <__gethex+0xee>
 8008aa2:	f04f 0901 	mov.w	r9, #1
 8008aa6:	e7fa      	b.n	8008a9e <__gethex+0x142>
 8008aa8:	230a      	movs	r3, #10
 8008aaa:	fb03 0202 	mla	r2, r3, r2, r0
 8008aae:	3a10      	subs	r2, #16
 8008ab0:	e7d4      	b.n	8008a5c <__gethex+0x100>
 8008ab2:	4631      	mov	r1, r6
 8008ab4:	e7df      	b.n	8008a76 <__gethex+0x11a>
 8008ab6:	1bf3      	subs	r3, r6, r7
 8008ab8:	3b01      	subs	r3, #1
 8008aba:	4621      	mov	r1, r4
 8008abc:	2b07      	cmp	r3, #7
 8008abe:	dc0b      	bgt.n	8008ad8 <__gethex+0x17c>
 8008ac0:	ee18 0a10 	vmov	r0, s16
 8008ac4:	f000 fa7e 	bl	8008fc4 <_Balloc>
 8008ac8:	4604      	mov	r4, r0
 8008aca:	b940      	cbnz	r0, 8008ade <__gethex+0x182>
 8008acc:	4b5d      	ldr	r3, [pc, #372]	; (8008c44 <__gethex+0x2e8>)
 8008ace:	4602      	mov	r2, r0
 8008ad0:	21de      	movs	r1, #222	; 0xde
 8008ad2:	485d      	ldr	r0, [pc, #372]	; (8008c48 <__gethex+0x2ec>)
 8008ad4:	f001 f9c6 	bl	8009e64 <__assert_func>
 8008ad8:	3101      	adds	r1, #1
 8008ada:	105b      	asrs	r3, r3, #1
 8008adc:	e7ee      	b.n	8008abc <__gethex+0x160>
 8008ade:	f100 0914 	add.w	r9, r0, #20
 8008ae2:	f04f 0b00 	mov.w	fp, #0
 8008ae6:	f1ca 0301 	rsb	r3, sl, #1
 8008aea:	f8cd 9008 	str.w	r9, [sp, #8]
 8008aee:	f8cd b000 	str.w	fp, [sp]
 8008af2:	9306      	str	r3, [sp, #24]
 8008af4:	42b7      	cmp	r7, r6
 8008af6:	d340      	bcc.n	8008b7a <__gethex+0x21e>
 8008af8:	9802      	ldr	r0, [sp, #8]
 8008afa:	9b00      	ldr	r3, [sp, #0]
 8008afc:	f840 3b04 	str.w	r3, [r0], #4
 8008b00:	eba0 0009 	sub.w	r0, r0, r9
 8008b04:	1080      	asrs	r0, r0, #2
 8008b06:	0146      	lsls	r6, r0, #5
 8008b08:	6120      	str	r0, [r4, #16]
 8008b0a:	4618      	mov	r0, r3
 8008b0c:	f000 fb4c 	bl	80091a8 <__hi0bits>
 8008b10:	1a30      	subs	r0, r6, r0
 8008b12:	f8d8 6000 	ldr.w	r6, [r8]
 8008b16:	42b0      	cmp	r0, r6
 8008b18:	dd63      	ble.n	8008be2 <__gethex+0x286>
 8008b1a:	1b87      	subs	r7, r0, r6
 8008b1c:	4639      	mov	r1, r7
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 fef0 	bl	8009904 <__any_on>
 8008b24:	4682      	mov	sl, r0
 8008b26:	b1a8      	cbz	r0, 8008b54 <__gethex+0x1f8>
 8008b28:	1e7b      	subs	r3, r7, #1
 8008b2a:	1159      	asrs	r1, r3, #5
 8008b2c:	f003 021f 	and.w	r2, r3, #31
 8008b30:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8008b34:	f04f 0a01 	mov.w	sl, #1
 8008b38:	fa0a f202 	lsl.w	r2, sl, r2
 8008b3c:	420a      	tst	r2, r1
 8008b3e:	d009      	beq.n	8008b54 <__gethex+0x1f8>
 8008b40:	4553      	cmp	r3, sl
 8008b42:	dd05      	ble.n	8008b50 <__gethex+0x1f4>
 8008b44:	1eb9      	subs	r1, r7, #2
 8008b46:	4620      	mov	r0, r4
 8008b48:	f000 fedc 	bl	8009904 <__any_on>
 8008b4c:	2800      	cmp	r0, #0
 8008b4e:	d145      	bne.n	8008bdc <__gethex+0x280>
 8008b50:	f04f 0a02 	mov.w	sl, #2
 8008b54:	4639      	mov	r1, r7
 8008b56:	4620      	mov	r0, r4
 8008b58:	f7ff fe98 	bl	800888c <rshift>
 8008b5c:	443d      	add	r5, r7
 8008b5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008b62:	42ab      	cmp	r3, r5
 8008b64:	da4c      	bge.n	8008c00 <__gethex+0x2a4>
 8008b66:	ee18 0a10 	vmov	r0, s16
 8008b6a:	4621      	mov	r1, r4
 8008b6c:	f000 fa6a 	bl	8009044 <_Bfree>
 8008b70:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008b72:	2300      	movs	r3, #0
 8008b74:	6013      	str	r3, [r2, #0]
 8008b76:	27a3      	movs	r7, #163	; 0xa3
 8008b78:	e785      	b.n	8008a86 <__gethex+0x12a>
 8008b7a:	1e73      	subs	r3, r6, #1
 8008b7c:	9a05      	ldr	r2, [sp, #20]
 8008b7e:	9303      	str	r3, [sp, #12]
 8008b80:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d019      	beq.n	8008bbc <__gethex+0x260>
 8008b88:	f1bb 0f20 	cmp.w	fp, #32
 8008b8c:	d107      	bne.n	8008b9e <__gethex+0x242>
 8008b8e:	9b02      	ldr	r3, [sp, #8]
 8008b90:	9a00      	ldr	r2, [sp, #0]
 8008b92:	f843 2b04 	str.w	r2, [r3], #4
 8008b96:	9302      	str	r3, [sp, #8]
 8008b98:	2300      	movs	r3, #0
 8008b9a:	9300      	str	r3, [sp, #0]
 8008b9c:	469b      	mov	fp, r3
 8008b9e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8008ba2:	f7ff fec5 	bl	8008930 <__hexdig_fun>
 8008ba6:	9b00      	ldr	r3, [sp, #0]
 8008ba8:	f000 000f 	and.w	r0, r0, #15
 8008bac:	fa00 f00b 	lsl.w	r0, r0, fp
 8008bb0:	4303      	orrs	r3, r0
 8008bb2:	9300      	str	r3, [sp, #0]
 8008bb4:	f10b 0b04 	add.w	fp, fp, #4
 8008bb8:	9b03      	ldr	r3, [sp, #12]
 8008bba:	e00d      	b.n	8008bd8 <__gethex+0x27c>
 8008bbc:	9b03      	ldr	r3, [sp, #12]
 8008bbe:	9a06      	ldr	r2, [sp, #24]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	42bb      	cmp	r3, r7
 8008bc4:	d3e0      	bcc.n	8008b88 <__gethex+0x22c>
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	9901      	ldr	r1, [sp, #4]
 8008bca:	9307      	str	r3, [sp, #28]
 8008bcc:	4652      	mov	r2, sl
 8008bce:	f001 f927 	bl	8009e20 <strncmp>
 8008bd2:	9b07      	ldr	r3, [sp, #28]
 8008bd4:	2800      	cmp	r0, #0
 8008bd6:	d1d7      	bne.n	8008b88 <__gethex+0x22c>
 8008bd8:	461e      	mov	r6, r3
 8008bda:	e78b      	b.n	8008af4 <__gethex+0x198>
 8008bdc:	f04f 0a03 	mov.w	sl, #3
 8008be0:	e7b8      	b.n	8008b54 <__gethex+0x1f8>
 8008be2:	da0a      	bge.n	8008bfa <__gethex+0x29e>
 8008be4:	1a37      	subs	r7, r6, r0
 8008be6:	4621      	mov	r1, r4
 8008be8:	ee18 0a10 	vmov	r0, s16
 8008bec:	463a      	mov	r2, r7
 8008bee:	f000 fc45 	bl	800947c <__lshift>
 8008bf2:	1bed      	subs	r5, r5, r7
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	f100 0914 	add.w	r9, r0, #20
 8008bfa:	f04f 0a00 	mov.w	sl, #0
 8008bfe:	e7ae      	b.n	8008b5e <__gethex+0x202>
 8008c00:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8008c04:	42a8      	cmp	r0, r5
 8008c06:	dd72      	ble.n	8008cee <__gethex+0x392>
 8008c08:	1b45      	subs	r5, r0, r5
 8008c0a:	42ae      	cmp	r6, r5
 8008c0c:	dc36      	bgt.n	8008c7c <__gethex+0x320>
 8008c0e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008c12:	2b02      	cmp	r3, #2
 8008c14:	d02a      	beq.n	8008c6c <__gethex+0x310>
 8008c16:	2b03      	cmp	r3, #3
 8008c18:	d02c      	beq.n	8008c74 <__gethex+0x318>
 8008c1a:	2b01      	cmp	r3, #1
 8008c1c:	d11c      	bne.n	8008c58 <__gethex+0x2fc>
 8008c1e:	42ae      	cmp	r6, r5
 8008c20:	d11a      	bne.n	8008c58 <__gethex+0x2fc>
 8008c22:	2e01      	cmp	r6, #1
 8008c24:	d112      	bne.n	8008c4c <__gethex+0x2f0>
 8008c26:	9a04      	ldr	r2, [sp, #16]
 8008c28:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008c2c:	6013      	str	r3, [r2, #0]
 8008c2e:	2301      	movs	r3, #1
 8008c30:	6123      	str	r3, [r4, #16]
 8008c32:	f8c9 3000 	str.w	r3, [r9]
 8008c36:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008c38:	2762      	movs	r7, #98	; 0x62
 8008c3a:	601c      	str	r4, [r3, #0]
 8008c3c:	e723      	b.n	8008a86 <__gethex+0x12a>
 8008c3e:	bf00      	nop
 8008c40:	0800c120 	.word	0x0800c120
 8008c44:	0800c0a8 	.word	0x0800c0a8
 8008c48:	0800c0b9 	.word	0x0800c0b9
 8008c4c:	1e71      	subs	r1, r6, #1
 8008c4e:	4620      	mov	r0, r4
 8008c50:	f000 fe58 	bl	8009904 <__any_on>
 8008c54:	2800      	cmp	r0, #0
 8008c56:	d1e6      	bne.n	8008c26 <__gethex+0x2ca>
 8008c58:	ee18 0a10 	vmov	r0, s16
 8008c5c:	4621      	mov	r1, r4
 8008c5e:	f000 f9f1 	bl	8009044 <_Bfree>
 8008c62:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8008c64:	2300      	movs	r3, #0
 8008c66:	6013      	str	r3, [r2, #0]
 8008c68:	2750      	movs	r7, #80	; 0x50
 8008c6a:	e70c      	b.n	8008a86 <__gethex+0x12a>
 8008c6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f2      	bne.n	8008c58 <__gethex+0x2fc>
 8008c72:	e7d8      	b.n	8008c26 <__gethex+0x2ca>
 8008c74:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d1d5      	bne.n	8008c26 <__gethex+0x2ca>
 8008c7a:	e7ed      	b.n	8008c58 <__gethex+0x2fc>
 8008c7c:	1e6f      	subs	r7, r5, #1
 8008c7e:	f1ba 0f00 	cmp.w	sl, #0
 8008c82:	d131      	bne.n	8008ce8 <__gethex+0x38c>
 8008c84:	b127      	cbz	r7, 8008c90 <__gethex+0x334>
 8008c86:	4639      	mov	r1, r7
 8008c88:	4620      	mov	r0, r4
 8008c8a:	f000 fe3b 	bl	8009904 <__any_on>
 8008c8e:	4682      	mov	sl, r0
 8008c90:	117b      	asrs	r3, r7, #5
 8008c92:	2101      	movs	r1, #1
 8008c94:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008c98:	f007 071f 	and.w	r7, r7, #31
 8008c9c:	fa01 f707 	lsl.w	r7, r1, r7
 8008ca0:	421f      	tst	r7, r3
 8008ca2:	4629      	mov	r1, r5
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	bf18      	it	ne
 8008ca8:	f04a 0a02 	orrne.w	sl, sl, #2
 8008cac:	1b76      	subs	r6, r6, r5
 8008cae:	f7ff fded 	bl	800888c <rshift>
 8008cb2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008cb6:	2702      	movs	r7, #2
 8008cb8:	f1ba 0f00 	cmp.w	sl, #0
 8008cbc:	d048      	beq.n	8008d50 <__gethex+0x3f4>
 8008cbe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008cc2:	2b02      	cmp	r3, #2
 8008cc4:	d015      	beq.n	8008cf2 <__gethex+0x396>
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d017      	beq.n	8008cfa <__gethex+0x39e>
 8008cca:	2b01      	cmp	r3, #1
 8008ccc:	d109      	bne.n	8008ce2 <__gethex+0x386>
 8008cce:	f01a 0f02 	tst.w	sl, #2
 8008cd2:	d006      	beq.n	8008ce2 <__gethex+0x386>
 8008cd4:	f8d9 0000 	ldr.w	r0, [r9]
 8008cd8:	ea4a 0a00 	orr.w	sl, sl, r0
 8008cdc:	f01a 0f01 	tst.w	sl, #1
 8008ce0:	d10e      	bne.n	8008d00 <__gethex+0x3a4>
 8008ce2:	f047 0710 	orr.w	r7, r7, #16
 8008ce6:	e033      	b.n	8008d50 <__gethex+0x3f4>
 8008ce8:	f04f 0a01 	mov.w	sl, #1
 8008cec:	e7d0      	b.n	8008c90 <__gethex+0x334>
 8008cee:	2701      	movs	r7, #1
 8008cf0:	e7e2      	b.n	8008cb8 <__gethex+0x35c>
 8008cf2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cf4:	f1c3 0301 	rsb	r3, r3, #1
 8008cf8:	9315      	str	r3, [sp, #84]	; 0x54
 8008cfa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d0f0      	beq.n	8008ce2 <__gethex+0x386>
 8008d00:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008d04:	f104 0314 	add.w	r3, r4, #20
 8008d08:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008d0c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008d10:	f04f 0c00 	mov.w	ip, #0
 8008d14:	4618      	mov	r0, r3
 8008d16:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008d1e:	d01c      	beq.n	8008d5a <__gethex+0x3fe>
 8008d20:	3201      	adds	r2, #1
 8008d22:	6002      	str	r2, [r0, #0]
 8008d24:	2f02      	cmp	r7, #2
 8008d26:	f104 0314 	add.w	r3, r4, #20
 8008d2a:	d13f      	bne.n	8008dac <__gethex+0x450>
 8008d2c:	f8d8 2000 	ldr.w	r2, [r8]
 8008d30:	3a01      	subs	r2, #1
 8008d32:	42b2      	cmp	r2, r6
 8008d34:	d10a      	bne.n	8008d4c <__gethex+0x3f0>
 8008d36:	1171      	asrs	r1, r6, #5
 8008d38:	2201      	movs	r2, #1
 8008d3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008d3e:	f006 061f 	and.w	r6, r6, #31
 8008d42:	fa02 f606 	lsl.w	r6, r2, r6
 8008d46:	421e      	tst	r6, r3
 8008d48:	bf18      	it	ne
 8008d4a:	4617      	movne	r7, r2
 8008d4c:	f047 0720 	orr.w	r7, r7, #32
 8008d50:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008d52:	601c      	str	r4, [r3, #0]
 8008d54:	9b04      	ldr	r3, [sp, #16]
 8008d56:	601d      	str	r5, [r3, #0]
 8008d58:	e695      	b.n	8008a86 <__gethex+0x12a>
 8008d5a:	4299      	cmp	r1, r3
 8008d5c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008d60:	d8d8      	bhi.n	8008d14 <__gethex+0x3b8>
 8008d62:	68a3      	ldr	r3, [r4, #8]
 8008d64:	459b      	cmp	fp, r3
 8008d66:	db19      	blt.n	8008d9c <__gethex+0x440>
 8008d68:	6861      	ldr	r1, [r4, #4]
 8008d6a:	ee18 0a10 	vmov	r0, s16
 8008d6e:	3101      	adds	r1, #1
 8008d70:	f000 f928 	bl	8008fc4 <_Balloc>
 8008d74:	4681      	mov	r9, r0
 8008d76:	b918      	cbnz	r0, 8008d80 <__gethex+0x424>
 8008d78:	4b1a      	ldr	r3, [pc, #104]	; (8008de4 <__gethex+0x488>)
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	2184      	movs	r1, #132	; 0x84
 8008d7e:	e6a8      	b.n	8008ad2 <__gethex+0x176>
 8008d80:	6922      	ldr	r2, [r4, #16]
 8008d82:	3202      	adds	r2, #2
 8008d84:	f104 010c 	add.w	r1, r4, #12
 8008d88:	0092      	lsls	r2, r2, #2
 8008d8a:	300c      	adds	r0, #12
 8008d8c:	f000 f90c 	bl	8008fa8 <memcpy>
 8008d90:	4621      	mov	r1, r4
 8008d92:	ee18 0a10 	vmov	r0, s16
 8008d96:	f000 f955 	bl	8009044 <_Bfree>
 8008d9a:	464c      	mov	r4, r9
 8008d9c:	6923      	ldr	r3, [r4, #16]
 8008d9e:	1c5a      	adds	r2, r3, #1
 8008da0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008da4:	6122      	str	r2, [r4, #16]
 8008da6:	2201      	movs	r2, #1
 8008da8:	615a      	str	r2, [r3, #20]
 8008daa:	e7bb      	b.n	8008d24 <__gethex+0x3c8>
 8008dac:	6922      	ldr	r2, [r4, #16]
 8008dae:	455a      	cmp	r2, fp
 8008db0:	dd0b      	ble.n	8008dca <__gethex+0x46e>
 8008db2:	2101      	movs	r1, #1
 8008db4:	4620      	mov	r0, r4
 8008db6:	f7ff fd69 	bl	800888c <rshift>
 8008dba:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008dbe:	3501      	adds	r5, #1
 8008dc0:	42ab      	cmp	r3, r5
 8008dc2:	f6ff aed0 	blt.w	8008b66 <__gethex+0x20a>
 8008dc6:	2701      	movs	r7, #1
 8008dc8:	e7c0      	b.n	8008d4c <__gethex+0x3f0>
 8008dca:	f016 061f 	ands.w	r6, r6, #31
 8008dce:	d0fa      	beq.n	8008dc6 <__gethex+0x46a>
 8008dd0:	4453      	add	r3, sl
 8008dd2:	f1c6 0620 	rsb	r6, r6, #32
 8008dd6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008dda:	f000 f9e5 	bl	80091a8 <__hi0bits>
 8008dde:	42b0      	cmp	r0, r6
 8008de0:	dbe7      	blt.n	8008db2 <__gethex+0x456>
 8008de2:	e7f0      	b.n	8008dc6 <__gethex+0x46a>
 8008de4:	0800c0a8 	.word	0x0800c0a8

08008de8 <L_shift>:
 8008de8:	f1c2 0208 	rsb	r2, r2, #8
 8008dec:	0092      	lsls	r2, r2, #2
 8008dee:	b570      	push	{r4, r5, r6, lr}
 8008df0:	f1c2 0620 	rsb	r6, r2, #32
 8008df4:	6843      	ldr	r3, [r0, #4]
 8008df6:	6804      	ldr	r4, [r0, #0]
 8008df8:	fa03 f506 	lsl.w	r5, r3, r6
 8008dfc:	432c      	orrs	r4, r5
 8008dfe:	40d3      	lsrs	r3, r2
 8008e00:	6004      	str	r4, [r0, #0]
 8008e02:	f840 3f04 	str.w	r3, [r0, #4]!
 8008e06:	4288      	cmp	r0, r1
 8008e08:	d3f4      	bcc.n	8008df4 <L_shift+0xc>
 8008e0a:	bd70      	pop	{r4, r5, r6, pc}

08008e0c <__match>:
 8008e0c:	b530      	push	{r4, r5, lr}
 8008e0e:	6803      	ldr	r3, [r0, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e16:	b914      	cbnz	r4, 8008e1e <__match+0x12>
 8008e18:	6003      	str	r3, [r0, #0]
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	bd30      	pop	{r4, r5, pc}
 8008e1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e22:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008e26:	2d19      	cmp	r5, #25
 8008e28:	bf98      	it	ls
 8008e2a:	3220      	addls	r2, #32
 8008e2c:	42a2      	cmp	r2, r4
 8008e2e:	d0f0      	beq.n	8008e12 <__match+0x6>
 8008e30:	2000      	movs	r0, #0
 8008e32:	e7f3      	b.n	8008e1c <__match+0x10>

08008e34 <__hexnan>:
 8008e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e38:	680b      	ldr	r3, [r1, #0]
 8008e3a:	115e      	asrs	r6, r3, #5
 8008e3c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008e40:	f013 031f 	ands.w	r3, r3, #31
 8008e44:	b087      	sub	sp, #28
 8008e46:	bf18      	it	ne
 8008e48:	3604      	addne	r6, #4
 8008e4a:	2500      	movs	r5, #0
 8008e4c:	1f37      	subs	r7, r6, #4
 8008e4e:	4690      	mov	r8, r2
 8008e50:	6802      	ldr	r2, [r0, #0]
 8008e52:	9301      	str	r3, [sp, #4]
 8008e54:	4682      	mov	sl, r0
 8008e56:	f846 5c04 	str.w	r5, [r6, #-4]
 8008e5a:	46b9      	mov	r9, r7
 8008e5c:	463c      	mov	r4, r7
 8008e5e:	9502      	str	r5, [sp, #8]
 8008e60:	46ab      	mov	fp, r5
 8008e62:	7851      	ldrb	r1, [r2, #1]
 8008e64:	1c53      	adds	r3, r2, #1
 8008e66:	9303      	str	r3, [sp, #12]
 8008e68:	b341      	cbz	r1, 8008ebc <__hexnan+0x88>
 8008e6a:	4608      	mov	r0, r1
 8008e6c:	9205      	str	r2, [sp, #20]
 8008e6e:	9104      	str	r1, [sp, #16]
 8008e70:	f7ff fd5e 	bl	8008930 <__hexdig_fun>
 8008e74:	2800      	cmp	r0, #0
 8008e76:	d14f      	bne.n	8008f18 <__hexnan+0xe4>
 8008e78:	9904      	ldr	r1, [sp, #16]
 8008e7a:	9a05      	ldr	r2, [sp, #20]
 8008e7c:	2920      	cmp	r1, #32
 8008e7e:	d818      	bhi.n	8008eb2 <__hexnan+0x7e>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	459b      	cmp	fp, r3
 8008e84:	dd13      	ble.n	8008eae <__hexnan+0x7a>
 8008e86:	454c      	cmp	r4, r9
 8008e88:	d206      	bcs.n	8008e98 <__hexnan+0x64>
 8008e8a:	2d07      	cmp	r5, #7
 8008e8c:	dc04      	bgt.n	8008e98 <__hexnan+0x64>
 8008e8e:	462a      	mov	r2, r5
 8008e90:	4649      	mov	r1, r9
 8008e92:	4620      	mov	r0, r4
 8008e94:	f7ff ffa8 	bl	8008de8 <L_shift>
 8008e98:	4544      	cmp	r4, r8
 8008e9a:	d950      	bls.n	8008f3e <__hexnan+0x10a>
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	f1a4 0904 	sub.w	r9, r4, #4
 8008ea2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ea6:	f8cd b008 	str.w	fp, [sp, #8]
 8008eaa:	464c      	mov	r4, r9
 8008eac:	461d      	mov	r5, r3
 8008eae:	9a03      	ldr	r2, [sp, #12]
 8008eb0:	e7d7      	b.n	8008e62 <__hexnan+0x2e>
 8008eb2:	2929      	cmp	r1, #41	; 0x29
 8008eb4:	d156      	bne.n	8008f64 <__hexnan+0x130>
 8008eb6:	3202      	adds	r2, #2
 8008eb8:	f8ca 2000 	str.w	r2, [sl]
 8008ebc:	f1bb 0f00 	cmp.w	fp, #0
 8008ec0:	d050      	beq.n	8008f64 <__hexnan+0x130>
 8008ec2:	454c      	cmp	r4, r9
 8008ec4:	d206      	bcs.n	8008ed4 <__hexnan+0xa0>
 8008ec6:	2d07      	cmp	r5, #7
 8008ec8:	dc04      	bgt.n	8008ed4 <__hexnan+0xa0>
 8008eca:	462a      	mov	r2, r5
 8008ecc:	4649      	mov	r1, r9
 8008ece:	4620      	mov	r0, r4
 8008ed0:	f7ff ff8a 	bl	8008de8 <L_shift>
 8008ed4:	4544      	cmp	r4, r8
 8008ed6:	d934      	bls.n	8008f42 <__hexnan+0x10e>
 8008ed8:	f1a8 0204 	sub.w	r2, r8, #4
 8008edc:	4623      	mov	r3, r4
 8008ede:	f853 1b04 	ldr.w	r1, [r3], #4
 8008ee2:	f842 1f04 	str.w	r1, [r2, #4]!
 8008ee6:	429f      	cmp	r7, r3
 8008ee8:	d2f9      	bcs.n	8008ede <__hexnan+0xaa>
 8008eea:	1b3b      	subs	r3, r7, r4
 8008eec:	f023 0303 	bic.w	r3, r3, #3
 8008ef0:	3304      	adds	r3, #4
 8008ef2:	3401      	adds	r4, #1
 8008ef4:	3e03      	subs	r6, #3
 8008ef6:	42b4      	cmp	r4, r6
 8008ef8:	bf88      	it	hi
 8008efa:	2304      	movhi	r3, #4
 8008efc:	4443      	add	r3, r8
 8008efe:	2200      	movs	r2, #0
 8008f00:	f843 2b04 	str.w	r2, [r3], #4
 8008f04:	429f      	cmp	r7, r3
 8008f06:	d2fb      	bcs.n	8008f00 <__hexnan+0xcc>
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	b91b      	cbnz	r3, 8008f14 <__hexnan+0xe0>
 8008f0c:	4547      	cmp	r7, r8
 8008f0e:	d127      	bne.n	8008f60 <__hexnan+0x12c>
 8008f10:	2301      	movs	r3, #1
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	2005      	movs	r0, #5
 8008f16:	e026      	b.n	8008f66 <__hexnan+0x132>
 8008f18:	3501      	adds	r5, #1
 8008f1a:	2d08      	cmp	r5, #8
 8008f1c:	f10b 0b01 	add.w	fp, fp, #1
 8008f20:	dd06      	ble.n	8008f30 <__hexnan+0xfc>
 8008f22:	4544      	cmp	r4, r8
 8008f24:	d9c3      	bls.n	8008eae <__hexnan+0x7a>
 8008f26:	2300      	movs	r3, #0
 8008f28:	f844 3c04 	str.w	r3, [r4, #-4]
 8008f2c:	2501      	movs	r5, #1
 8008f2e:	3c04      	subs	r4, #4
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	f000 000f 	and.w	r0, r0, #15
 8008f36:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 8008f3a:	6022      	str	r2, [r4, #0]
 8008f3c:	e7b7      	b.n	8008eae <__hexnan+0x7a>
 8008f3e:	2508      	movs	r5, #8
 8008f40:	e7b5      	b.n	8008eae <__hexnan+0x7a>
 8008f42:	9b01      	ldr	r3, [sp, #4]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d0df      	beq.n	8008f08 <__hexnan+0xd4>
 8008f48:	f04f 32ff 	mov.w	r2, #4294967295
 8008f4c:	f1c3 0320 	rsb	r3, r3, #32
 8008f50:	fa22 f303 	lsr.w	r3, r2, r3
 8008f54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008f58:	401a      	ands	r2, r3
 8008f5a:	f846 2c04 	str.w	r2, [r6, #-4]
 8008f5e:	e7d3      	b.n	8008f08 <__hexnan+0xd4>
 8008f60:	3f04      	subs	r7, #4
 8008f62:	e7d1      	b.n	8008f08 <__hexnan+0xd4>
 8008f64:	2004      	movs	r0, #4
 8008f66:	b007      	add	sp, #28
 8008f68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f6c <_localeconv_r>:
 8008f6c:	4800      	ldr	r0, [pc, #0]	; (8008f70 <_localeconv_r+0x4>)
 8008f6e:	4770      	bx	lr
 8008f70:	200001a0 	.word	0x200001a0

08008f74 <malloc>:
 8008f74:	4b02      	ldr	r3, [pc, #8]	; (8008f80 <malloc+0xc>)
 8008f76:	4601      	mov	r1, r0
 8008f78:	6818      	ldr	r0, [r3, #0]
 8008f7a:	f000 bd67 	b.w	8009a4c <_malloc_r>
 8008f7e:	bf00      	nop
 8008f80:	20000048 	.word	0x20000048

08008f84 <__ascii_mbtowc>:
 8008f84:	b082      	sub	sp, #8
 8008f86:	b901      	cbnz	r1, 8008f8a <__ascii_mbtowc+0x6>
 8008f88:	a901      	add	r1, sp, #4
 8008f8a:	b142      	cbz	r2, 8008f9e <__ascii_mbtowc+0x1a>
 8008f8c:	b14b      	cbz	r3, 8008fa2 <__ascii_mbtowc+0x1e>
 8008f8e:	7813      	ldrb	r3, [r2, #0]
 8008f90:	600b      	str	r3, [r1, #0]
 8008f92:	7812      	ldrb	r2, [r2, #0]
 8008f94:	1e10      	subs	r0, r2, #0
 8008f96:	bf18      	it	ne
 8008f98:	2001      	movne	r0, #1
 8008f9a:	b002      	add	sp, #8
 8008f9c:	4770      	bx	lr
 8008f9e:	4610      	mov	r0, r2
 8008fa0:	e7fb      	b.n	8008f9a <__ascii_mbtowc+0x16>
 8008fa2:	f06f 0001 	mvn.w	r0, #1
 8008fa6:	e7f8      	b.n	8008f9a <__ascii_mbtowc+0x16>

08008fa8 <memcpy>:
 8008fa8:	440a      	add	r2, r1
 8008faa:	4291      	cmp	r1, r2
 8008fac:	f100 33ff 	add.w	r3, r0, #4294967295
 8008fb0:	d100      	bne.n	8008fb4 <memcpy+0xc>
 8008fb2:	4770      	bx	lr
 8008fb4:	b510      	push	{r4, lr}
 8008fb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008fba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008fbe:	4291      	cmp	r1, r2
 8008fc0:	d1f9      	bne.n	8008fb6 <memcpy+0xe>
 8008fc2:	bd10      	pop	{r4, pc}

08008fc4 <_Balloc>:
 8008fc4:	b570      	push	{r4, r5, r6, lr}
 8008fc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8008fc8:	4604      	mov	r4, r0
 8008fca:	460d      	mov	r5, r1
 8008fcc:	b976      	cbnz	r6, 8008fec <_Balloc+0x28>
 8008fce:	2010      	movs	r0, #16
 8008fd0:	f7ff ffd0 	bl	8008f74 <malloc>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	6260      	str	r0, [r4, #36]	; 0x24
 8008fd8:	b920      	cbnz	r0, 8008fe4 <_Balloc+0x20>
 8008fda:	4b18      	ldr	r3, [pc, #96]	; (800903c <_Balloc+0x78>)
 8008fdc:	4818      	ldr	r0, [pc, #96]	; (8009040 <_Balloc+0x7c>)
 8008fde:	2166      	movs	r1, #102	; 0x66
 8008fe0:	f000 ff40 	bl	8009e64 <__assert_func>
 8008fe4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008fe8:	6006      	str	r6, [r0, #0]
 8008fea:	60c6      	str	r6, [r0, #12]
 8008fec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008fee:	68f3      	ldr	r3, [r6, #12]
 8008ff0:	b183      	cbz	r3, 8009014 <_Balloc+0x50>
 8008ff2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008ff4:	68db      	ldr	r3, [r3, #12]
 8008ff6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008ffa:	b9b8      	cbnz	r0, 800902c <_Balloc+0x68>
 8008ffc:	2101      	movs	r1, #1
 8008ffe:	fa01 f605 	lsl.w	r6, r1, r5
 8009002:	1d72      	adds	r2, r6, #5
 8009004:	0092      	lsls	r2, r2, #2
 8009006:	4620      	mov	r0, r4
 8009008:	f000 fc9d 	bl	8009946 <_calloc_r>
 800900c:	b160      	cbz	r0, 8009028 <_Balloc+0x64>
 800900e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009012:	e00e      	b.n	8009032 <_Balloc+0x6e>
 8009014:	2221      	movs	r2, #33	; 0x21
 8009016:	2104      	movs	r1, #4
 8009018:	4620      	mov	r0, r4
 800901a:	f000 fc94 	bl	8009946 <_calloc_r>
 800901e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009020:	60f0      	str	r0, [r6, #12]
 8009022:	68db      	ldr	r3, [r3, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d1e4      	bne.n	8008ff2 <_Balloc+0x2e>
 8009028:	2000      	movs	r0, #0
 800902a:	bd70      	pop	{r4, r5, r6, pc}
 800902c:	6802      	ldr	r2, [r0, #0]
 800902e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009032:	2300      	movs	r3, #0
 8009034:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009038:	e7f7      	b.n	800902a <_Balloc+0x66>
 800903a:	bf00      	nop
 800903c:	0800c036 	.word	0x0800c036
 8009040:	0800c134 	.word	0x0800c134

08009044 <_Bfree>:
 8009044:	b570      	push	{r4, r5, r6, lr}
 8009046:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009048:	4605      	mov	r5, r0
 800904a:	460c      	mov	r4, r1
 800904c:	b976      	cbnz	r6, 800906c <_Bfree+0x28>
 800904e:	2010      	movs	r0, #16
 8009050:	f7ff ff90 	bl	8008f74 <malloc>
 8009054:	4602      	mov	r2, r0
 8009056:	6268      	str	r0, [r5, #36]	; 0x24
 8009058:	b920      	cbnz	r0, 8009064 <_Bfree+0x20>
 800905a:	4b09      	ldr	r3, [pc, #36]	; (8009080 <_Bfree+0x3c>)
 800905c:	4809      	ldr	r0, [pc, #36]	; (8009084 <_Bfree+0x40>)
 800905e:	218a      	movs	r1, #138	; 0x8a
 8009060:	f000 ff00 	bl	8009e64 <__assert_func>
 8009064:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009068:	6006      	str	r6, [r0, #0]
 800906a:	60c6      	str	r6, [r0, #12]
 800906c:	b13c      	cbz	r4, 800907e <_Bfree+0x3a>
 800906e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8009070:	6862      	ldr	r2, [r4, #4]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009078:	6021      	str	r1, [r4, #0]
 800907a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	0800c036 	.word	0x0800c036
 8009084:	0800c134 	.word	0x0800c134

08009088 <__multadd>:
 8009088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800908c:	690d      	ldr	r5, [r1, #16]
 800908e:	4607      	mov	r7, r0
 8009090:	460c      	mov	r4, r1
 8009092:	461e      	mov	r6, r3
 8009094:	f101 0c14 	add.w	ip, r1, #20
 8009098:	2000      	movs	r0, #0
 800909a:	f8dc 3000 	ldr.w	r3, [ip]
 800909e:	b299      	uxth	r1, r3
 80090a0:	fb02 6101 	mla	r1, r2, r1, r6
 80090a4:	0c1e      	lsrs	r6, r3, #16
 80090a6:	0c0b      	lsrs	r3, r1, #16
 80090a8:	fb02 3306 	mla	r3, r2, r6, r3
 80090ac:	b289      	uxth	r1, r1
 80090ae:	3001      	adds	r0, #1
 80090b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80090b4:	4285      	cmp	r5, r0
 80090b6:	f84c 1b04 	str.w	r1, [ip], #4
 80090ba:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80090be:	dcec      	bgt.n	800909a <__multadd+0x12>
 80090c0:	b30e      	cbz	r6, 8009106 <__multadd+0x7e>
 80090c2:	68a3      	ldr	r3, [r4, #8]
 80090c4:	42ab      	cmp	r3, r5
 80090c6:	dc19      	bgt.n	80090fc <__multadd+0x74>
 80090c8:	6861      	ldr	r1, [r4, #4]
 80090ca:	4638      	mov	r0, r7
 80090cc:	3101      	adds	r1, #1
 80090ce:	f7ff ff79 	bl	8008fc4 <_Balloc>
 80090d2:	4680      	mov	r8, r0
 80090d4:	b928      	cbnz	r0, 80090e2 <__multadd+0x5a>
 80090d6:	4602      	mov	r2, r0
 80090d8:	4b0c      	ldr	r3, [pc, #48]	; (800910c <__multadd+0x84>)
 80090da:	480d      	ldr	r0, [pc, #52]	; (8009110 <__multadd+0x88>)
 80090dc:	21b5      	movs	r1, #181	; 0xb5
 80090de:	f000 fec1 	bl	8009e64 <__assert_func>
 80090e2:	6922      	ldr	r2, [r4, #16]
 80090e4:	3202      	adds	r2, #2
 80090e6:	f104 010c 	add.w	r1, r4, #12
 80090ea:	0092      	lsls	r2, r2, #2
 80090ec:	300c      	adds	r0, #12
 80090ee:	f7ff ff5b 	bl	8008fa8 <memcpy>
 80090f2:	4621      	mov	r1, r4
 80090f4:	4638      	mov	r0, r7
 80090f6:	f7ff ffa5 	bl	8009044 <_Bfree>
 80090fa:	4644      	mov	r4, r8
 80090fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009100:	3501      	adds	r5, #1
 8009102:	615e      	str	r6, [r3, #20]
 8009104:	6125      	str	r5, [r4, #16]
 8009106:	4620      	mov	r0, r4
 8009108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800910c:	0800c0a8 	.word	0x0800c0a8
 8009110:	0800c134 	.word	0x0800c134

08009114 <__s2b>:
 8009114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009118:	460c      	mov	r4, r1
 800911a:	4615      	mov	r5, r2
 800911c:	461f      	mov	r7, r3
 800911e:	2209      	movs	r2, #9
 8009120:	3308      	adds	r3, #8
 8009122:	4606      	mov	r6, r0
 8009124:	fb93 f3f2 	sdiv	r3, r3, r2
 8009128:	2100      	movs	r1, #0
 800912a:	2201      	movs	r2, #1
 800912c:	429a      	cmp	r2, r3
 800912e:	db09      	blt.n	8009144 <__s2b+0x30>
 8009130:	4630      	mov	r0, r6
 8009132:	f7ff ff47 	bl	8008fc4 <_Balloc>
 8009136:	b940      	cbnz	r0, 800914a <__s2b+0x36>
 8009138:	4602      	mov	r2, r0
 800913a:	4b19      	ldr	r3, [pc, #100]	; (80091a0 <__s2b+0x8c>)
 800913c:	4819      	ldr	r0, [pc, #100]	; (80091a4 <__s2b+0x90>)
 800913e:	21ce      	movs	r1, #206	; 0xce
 8009140:	f000 fe90 	bl	8009e64 <__assert_func>
 8009144:	0052      	lsls	r2, r2, #1
 8009146:	3101      	adds	r1, #1
 8009148:	e7f0      	b.n	800912c <__s2b+0x18>
 800914a:	9b08      	ldr	r3, [sp, #32]
 800914c:	6143      	str	r3, [r0, #20]
 800914e:	2d09      	cmp	r5, #9
 8009150:	f04f 0301 	mov.w	r3, #1
 8009154:	6103      	str	r3, [r0, #16]
 8009156:	dd16      	ble.n	8009186 <__s2b+0x72>
 8009158:	f104 0909 	add.w	r9, r4, #9
 800915c:	46c8      	mov	r8, r9
 800915e:	442c      	add	r4, r5
 8009160:	f818 3b01 	ldrb.w	r3, [r8], #1
 8009164:	4601      	mov	r1, r0
 8009166:	3b30      	subs	r3, #48	; 0x30
 8009168:	220a      	movs	r2, #10
 800916a:	4630      	mov	r0, r6
 800916c:	f7ff ff8c 	bl	8009088 <__multadd>
 8009170:	45a0      	cmp	r8, r4
 8009172:	d1f5      	bne.n	8009160 <__s2b+0x4c>
 8009174:	f1a5 0408 	sub.w	r4, r5, #8
 8009178:	444c      	add	r4, r9
 800917a:	1b2d      	subs	r5, r5, r4
 800917c:	1963      	adds	r3, r4, r5
 800917e:	42bb      	cmp	r3, r7
 8009180:	db04      	blt.n	800918c <__s2b+0x78>
 8009182:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009186:	340a      	adds	r4, #10
 8009188:	2509      	movs	r5, #9
 800918a:	e7f6      	b.n	800917a <__s2b+0x66>
 800918c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009190:	4601      	mov	r1, r0
 8009192:	3b30      	subs	r3, #48	; 0x30
 8009194:	220a      	movs	r2, #10
 8009196:	4630      	mov	r0, r6
 8009198:	f7ff ff76 	bl	8009088 <__multadd>
 800919c:	e7ee      	b.n	800917c <__s2b+0x68>
 800919e:	bf00      	nop
 80091a0:	0800c0a8 	.word	0x0800c0a8
 80091a4:	0800c134 	.word	0x0800c134

080091a8 <__hi0bits>:
 80091a8:	0c03      	lsrs	r3, r0, #16
 80091aa:	041b      	lsls	r3, r3, #16
 80091ac:	b9d3      	cbnz	r3, 80091e4 <__hi0bits+0x3c>
 80091ae:	0400      	lsls	r0, r0, #16
 80091b0:	2310      	movs	r3, #16
 80091b2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80091b6:	bf04      	itt	eq
 80091b8:	0200      	lsleq	r0, r0, #8
 80091ba:	3308      	addeq	r3, #8
 80091bc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80091c0:	bf04      	itt	eq
 80091c2:	0100      	lsleq	r0, r0, #4
 80091c4:	3304      	addeq	r3, #4
 80091c6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80091ca:	bf04      	itt	eq
 80091cc:	0080      	lsleq	r0, r0, #2
 80091ce:	3302      	addeq	r3, #2
 80091d0:	2800      	cmp	r0, #0
 80091d2:	db05      	blt.n	80091e0 <__hi0bits+0x38>
 80091d4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80091d8:	f103 0301 	add.w	r3, r3, #1
 80091dc:	bf08      	it	eq
 80091de:	2320      	moveq	r3, #32
 80091e0:	4618      	mov	r0, r3
 80091e2:	4770      	bx	lr
 80091e4:	2300      	movs	r3, #0
 80091e6:	e7e4      	b.n	80091b2 <__hi0bits+0xa>

080091e8 <__lo0bits>:
 80091e8:	6803      	ldr	r3, [r0, #0]
 80091ea:	f013 0207 	ands.w	r2, r3, #7
 80091ee:	4601      	mov	r1, r0
 80091f0:	d00b      	beq.n	800920a <__lo0bits+0x22>
 80091f2:	07da      	lsls	r2, r3, #31
 80091f4:	d423      	bmi.n	800923e <__lo0bits+0x56>
 80091f6:	0798      	lsls	r0, r3, #30
 80091f8:	bf49      	itett	mi
 80091fa:	085b      	lsrmi	r3, r3, #1
 80091fc:	089b      	lsrpl	r3, r3, #2
 80091fe:	2001      	movmi	r0, #1
 8009200:	600b      	strmi	r3, [r1, #0]
 8009202:	bf5c      	itt	pl
 8009204:	600b      	strpl	r3, [r1, #0]
 8009206:	2002      	movpl	r0, #2
 8009208:	4770      	bx	lr
 800920a:	b298      	uxth	r0, r3
 800920c:	b9a8      	cbnz	r0, 800923a <__lo0bits+0x52>
 800920e:	0c1b      	lsrs	r3, r3, #16
 8009210:	2010      	movs	r0, #16
 8009212:	b2da      	uxtb	r2, r3
 8009214:	b90a      	cbnz	r2, 800921a <__lo0bits+0x32>
 8009216:	3008      	adds	r0, #8
 8009218:	0a1b      	lsrs	r3, r3, #8
 800921a:	071a      	lsls	r2, r3, #28
 800921c:	bf04      	itt	eq
 800921e:	091b      	lsreq	r3, r3, #4
 8009220:	3004      	addeq	r0, #4
 8009222:	079a      	lsls	r2, r3, #30
 8009224:	bf04      	itt	eq
 8009226:	089b      	lsreq	r3, r3, #2
 8009228:	3002      	addeq	r0, #2
 800922a:	07da      	lsls	r2, r3, #31
 800922c:	d403      	bmi.n	8009236 <__lo0bits+0x4e>
 800922e:	085b      	lsrs	r3, r3, #1
 8009230:	f100 0001 	add.w	r0, r0, #1
 8009234:	d005      	beq.n	8009242 <__lo0bits+0x5a>
 8009236:	600b      	str	r3, [r1, #0]
 8009238:	4770      	bx	lr
 800923a:	4610      	mov	r0, r2
 800923c:	e7e9      	b.n	8009212 <__lo0bits+0x2a>
 800923e:	2000      	movs	r0, #0
 8009240:	4770      	bx	lr
 8009242:	2020      	movs	r0, #32
 8009244:	4770      	bx	lr
	...

08009248 <__i2b>:
 8009248:	b510      	push	{r4, lr}
 800924a:	460c      	mov	r4, r1
 800924c:	2101      	movs	r1, #1
 800924e:	f7ff feb9 	bl	8008fc4 <_Balloc>
 8009252:	4602      	mov	r2, r0
 8009254:	b928      	cbnz	r0, 8009262 <__i2b+0x1a>
 8009256:	4b05      	ldr	r3, [pc, #20]	; (800926c <__i2b+0x24>)
 8009258:	4805      	ldr	r0, [pc, #20]	; (8009270 <__i2b+0x28>)
 800925a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800925e:	f000 fe01 	bl	8009e64 <__assert_func>
 8009262:	2301      	movs	r3, #1
 8009264:	6144      	str	r4, [r0, #20]
 8009266:	6103      	str	r3, [r0, #16]
 8009268:	bd10      	pop	{r4, pc}
 800926a:	bf00      	nop
 800926c:	0800c0a8 	.word	0x0800c0a8
 8009270:	0800c134 	.word	0x0800c134

08009274 <__multiply>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	4691      	mov	r9, r2
 800927a:	690a      	ldr	r2, [r1, #16]
 800927c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009280:	429a      	cmp	r2, r3
 8009282:	bfb8      	it	lt
 8009284:	460b      	movlt	r3, r1
 8009286:	460c      	mov	r4, r1
 8009288:	bfbc      	itt	lt
 800928a:	464c      	movlt	r4, r9
 800928c:	4699      	movlt	r9, r3
 800928e:	6927      	ldr	r7, [r4, #16]
 8009290:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8009294:	68a3      	ldr	r3, [r4, #8]
 8009296:	6861      	ldr	r1, [r4, #4]
 8009298:	eb07 060a 	add.w	r6, r7, sl
 800929c:	42b3      	cmp	r3, r6
 800929e:	b085      	sub	sp, #20
 80092a0:	bfb8      	it	lt
 80092a2:	3101      	addlt	r1, #1
 80092a4:	f7ff fe8e 	bl	8008fc4 <_Balloc>
 80092a8:	b930      	cbnz	r0, 80092b8 <__multiply+0x44>
 80092aa:	4602      	mov	r2, r0
 80092ac:	4b44      	ldr	r3, [pc, #272]	; (80093c0 <__multiply+0x14c>)
 80092ae:	4845      	ldr	r0, [pc, #276]	; (80093c4 <__multiply+0x150>)
 80092b0:	f240 115d 	movw	r1, #349	; 0x15d
 80092b4:	f000 fdd6 	bl	8009e64 <__assert_func>
 80092b8:	f100 0514 	add.w	r5, r0, #20
 80092bc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80092c0:	462b      	mov	r3, r5
 80092c2:	2200      	movs	r2, #0
 80092c4:	4543      	cmp	r3, r8
 80092c6:	d321      	bcc.n	800930c <__multiply+0x98>
 80092c8:	f104 0314 	add.w	r3, r4, #20
 80092cc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80092d0:	f109 0314 	add.w	r3, r9, #20
 80092d4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80092d8:	9202      	str	r2, [sp, #8]
 80092da:	1b3a      	subs	r2, r7, r4
 80092dc:	3a15      	subs	r2, #21
 80092de:	f022 0203 	bic.w	r2, r2, #3
 80092e2:	3204      	adds	r2, #4
 80092e4:	f104 0115 	add.w	r1, r4, #21
 80092e8:	428f      	cmp	r7, r1
 80092ea:	bf38      	it	cc
 80092ec:	2204      	movcc	r2, #4
 80092ee:	9201      	str	r2, [sp, #4]
 80092f0:	9a02      	ldr	r2, [sp, #8]
 80092f2:	9303      	str	r3, [sp, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d80c      	bhi.n	8009312 <__multiply+0x9e>
 80092f8:	2e00      	cmp	r6, #0
 80092fa:	dd03      	ble.n	8009304 <__multiply+0x90>
 80092fc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009300:	2b00      	cmp	r3, #0
 8009302:	d05a      	beq.n	80093ba <__multiply+0x146>
 8009304:	6106      	str	r6, [r0, #16]
 8009306:	b005      	add	sp, #20
 8009308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800930c:	f843 2b04 	str.w	r2, [r3], #4
 8009310:	e7d8      	b.n	80092c4 <__multiply+0x50>
 8009312:	f8b3 a000 	ldrh.w	sl, [r3]
 8009316:	f1ba 0f00 	cmp.w	sl, #0
 800931a:	d024      	beq.n	8009366 <__multiply+0xf2>
 800931c:	f104 0e14 	add.w	lr, r4, #20
 8009320:	46a9      	mov	r9, r5
 8009322:	f04f 0c00 	mov.w	ip, #0
 8009326:	f85e 2b04 	ldr.w	r2, [lr], #4
 800932a:	f8d9 1000 	ldr.w	r1, [r9]
 800932e:	fa1f fb82 	uxth.w	fp, r2
 8009332:	b289      	uxth	r1, r1
 8009334:	fb0a 110b 	mla	r1, sl, fp, r1
 8009338:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800933c:	f8d9 2000 	ldr.w	r2, [r9]
 8009340:	4461      	add	r1, ip
 8009342:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009346:	fb0a c20b 	mla	r2, sl, fp, ip
 800934a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800934e:	b289      	uxth	r1, r1
 8009350:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009354:	4577      	cmp	r7, lr
 8009356:	f849 1b04 	str.w	r1, [r9], #4
 800935a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800935e:	d8e2      	bhi.n	8009326 <__multiply+0xb2>
 8009360:	9a01      	ldr	r2, [sp, #4]
 8009362:	f845 c002 	str.w	ip, [r5, r2]
 8009366:	9a03      	ldr	r2, [sp, #12]
 8009368:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800936c:	3304      	adds	r3, #4
 800936e:	f1b9 0f00 	cmp.w	r9, #0
 8009372:	d020      	beq.n	80093b6 <__multiply+0x142>
 8009374:	6829      	ldr	r1, [r5, #0]
 8009376:	f104 0c14 	add.w	ip, r4, #20
 800937a:	46ae      	mov	lr, r5
 800937c:	f04f 0a00 	mov.w	sl, #0
 8009380:	f8bc b000 	ldrh.w	fp, [ip]
 8009384:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009388:	fb09 220b 	mla	r2, r9, fp, r2
 800938c:	4492      	add	sl, r2
 800938e:	b289      	uxth	r1, r1
 8009390:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8009394:	f84e 1b04 	str.w	r1, [lr], #4
 8009398:	f85c 2b04 	ldr.w	r2, [ip], #4
 800939c:	f8be 1000 	ldrh.w	r1, [lr]
 80093a0:	0c12      	lsrs	r2, r2, #16
 80093a2:	fb09 1102 	mla	r1, r9, r2, r1
 80093a6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80093aa:	4567      	cmp	r7, ip
 80093ac:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80093b0:	d8e6      	bhi.n	8009380 <__multiply+0x10c>
 80093b2:	9a01      	ldr	r2, [sp, #4]
 80093b4:	50a9      	str	r1, [r5, r2]
 80093b6:	3504      	adds	r5, #4
 80093b8:	e79a      	b.n	80092f0 <__multiply+0x7c>
 80093ba:	3e01      	subs	r6, #1
 80093bc:	e79c      	b.n	80092f8 <__multiply+0x84>
 80093be:	bf00      	nop
 80093c0:	0800c0a8 	.word	0x0800c0a8
 80093c4:	0800c134 	.word	0x0800c134

080093c8 <__pow5mult>:
 80093c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80093cc:	4615      	mov	r5, r2
 80093ce:	f012 0203 	ands.w	r2, r2, #3
 80093d2:	4606      	mov	r6, r0
 80093d4:	460f      	mov	r7, r1
 80093d6:	d007      	beq.n	80093e8 <__pow5mult+0x20>
 80093d8:	4c25      	ldr	r4, [pc, #148]	; (8009470 <__pow5mult+0xa8>)
 80093da:	3a01      	subs	r2, #1
 80093dc:	2300      	movs	r3, #0
 80093de:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80093e2:	f7ff fe51 	bl	8009088 <__multadd>
 80093e6:	4607      	mov	r7, r0
 80093e8:	10ad      	asrs	r5, r5, #2
 80093ea:	d03d      	beq.n	8009468 <__pow5mult+0xa0>
 80093ec:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80093ee:	b97c      	cbnz	r4, 8009410 <__pow5mult+0x48>
 80093f0:	2010      	movs	r0, #16
 80093f2:	f7ff fdbf 	bl	8008f74 <malloc>
 80093f6:	4602      	mov	r2, r0
 80093f8:	6270      	str	r0, [r6, #36]	; 0x24
 80093fa:	b928      	cbnz	r0, 8009408 <__pow5mult+0x40>
 80093fc:	4b1d      	ldr	r3, [pc, #116]	; (8009474 <__pow5mult+0xac>)
 80093fe:	481e      	ldr	r0, [pc, #120]	; (8009478 <__pow5mult+0xb0>)
 8009400:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8009404:	f000 fd2e 	bl	8009e64 <__assert_func>
 8009408:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800940c:	6004      	str	r4, [r0, #0]
 800940e:	60c4      	str	r4, [r0, #12]
 8009410:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009414:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009418:	b94c      	cbnz	r4, 800942e <__pow5mult+0x66>
 800941a:	f240 2171 	movw	r1, #625	; 0x271
 800941e:	4630      	mov	r0, r6
 8009420:	f7ff ff12 	bl	8009248 <__i2b>
 8009424:	2300      	movs	r3, #0
 8009426:	f8c8 0008 	str.w	r0, [r8, #8]
 800942a:	4604      	mov	r4, r0
 800942c:	6003      	str	r3, [r0, #0]
 800942e:	f04f 0900 	mov.w	r9, #0
 8009432:	07eb      	lsls	r3, r5, #31
 8009434:	d50a      	bpl.n	800944c <__pow5mult+0x84>
 8009436:	4639      	mov	r1, r7
 8009438:	4622      	mov	r2, r4
 800943a:	4630      	mov	r0, r6
 800943c:	f7ff ff1a 	bl	8009274 <__multiply>
 8009440:	4639      	mov	r1, r7
 8009442:	4680      	mov	r8, r0
 8009444:	4630      	mov	r0, r6
 8009446:	f7ff fdfd 	bl	8009044 <_Bfree>
 800944a:	4647      	mov	r7, r8
 800944c:	106d      	asrs	r5, r5, #1
 800944e:	d00b      	beq.n	8009468 <__pow5mult+0xa0>
 8009450:	6820      	ldr	r0, [r4, #0]
 8009452:	b938      	cbnz	r0, 8009464 <__pow5mult+0x9c>
 8009454:	4622      	mov	r2, r4
 8009456:	4621      	mov	r1, r4
 8009458:	4630      	mov	r0, r6
 800945a:	f7ff ff0b 	bl	8009274 <__multiply>
 800945e:	6020      	str	r0, [r4, #0]
 8009460:	f8c0 9000 	str.w	r9, [r0]
 8009464:	4604      	mov	r4, r0
 8009466:	e7e4      	b.n	8009432 <__pow5mult+0x6a>
 8009468:	4638      	mov	r0, r7
 800946a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800946e:	bf00      	nop
 8009470:	0800c280 	.word	0x0800c280
 8009474:	0800c036 	.word	0x0800c036
 8009478:	0800c134 	.word	0x0800c134

0800947c <__lshift>:
 800947c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009480:	460c      	mov	r4, r1
 8009482:	6849      	ldr	r1, [r1, #4]
 8009484:	6923      	ldr	r3, [r4, #16]
 8009486:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800948a:	68a3      	ldr	r3, [r4, #8]
 800948c:	4607      	mov	r7, r0
 800948e:	4691      	mov	r9, r2
 8009490:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009494:	f108 0601 	add.w	r6, r8, #1
 8009498:	42b3      	cmp	r3, r6
 800949a:	db0b      	blt.n	80094b4 <__lshift+0x38>
 800949c:	4638      	mov	r0, r7
 800949e:	f7ff fd91 	bl	8008fc4 <_Balloc>
 80094a2:	4605      	mov	r5, r0
 80094a4:	b948      	cbnz	r0, 80094ba <__lshift+0x3e>
 80094a6:	4602      	mov	r2, r0
 80094a8:	4b2a      	ldr	r3, [pc, #168]	; (8009554 <__lshift+0xd8>)
 80094aa:	482b      	ldr	r0, [pc, #172]	; (8009558 <__lshift+0xdc>)
 80094ac:	f240 11d9 	movw	r1, #473	; 0x1d9
 80094b0:	f000 fcd8 	bl	8009e64 <__assert_func>
 80094b4:	3101      	adds	r1, #1
 80094b6:	005b      	lsls	r3, r3, #1
 80094b8:	e7ee      	b.n	8009498 <__lshift+0x1c>
 80094ba:	2300      	movs	r3, #0
 80094bc:	f100 0114 	add.w	r1, r0, #20
 80094c0:	f100 0210 	add.w	r2, r0, #16
 80094c4:	4618      	mov	r0, r3
 80094c6:	4553      	cmp	r3, sl
 80094c8:	db37      	blt.n	800953a <__lshift+0xbe>
 80094ca:	6920      	ldr	r0, [r4, #16]
 80094cc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80094d0:	f104 0314 	add.w	r3, r4, #20
 80094d4:	f019 091f 	ands.w	r9, r9, #31
 80094d8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80094dc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80094e0:	d02f      	beq.n	8009542 <__lshift+0xc6>
 80094e2:	f1c9 0e20 	rsb	lr, r9, #32
 80094e6:	468a      	mov	sl, r1
 80094e8:	f04f 0c00 	mov.w	ip, #0
 80094ec:	681a      	ldr	r2, [r3, #0]
 80094ee:	fa02 f209 	lsl.w	r2, r2, r9
 80094f2:	ea42 020c 	orr.w	r2, r2, ip
 80094f6:	f84a 2b04 	str.w	r2, [sl], #4
 80094fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80094fe:	4298      	cmp	r0, r3
 8009500:	fa22 fc0e 	lsr.w	ip, r2, lr
 8009504:	d8f2      	bhi.n	80094ec <__lshift+0x70>
 8009506:	1b03      	subs	r3, r0, r4
 8009508:	3b15      	subs	r3, #21
 800950a:	f023 0303 	bic.w	r3, r3, #3
 800950e:	3304      	adds	r3, #4
 8009510:	f104 0215 	add.w	r2, r4, #21
 8009514:	4290      	cmp	r0, r2
 8009516:	bf38      	it	cc
 8009518:	2304      	movcc	r3, #4
 800951a:	f841 c003 	str.w	ip, [r1, r3]
 800951e:	f1bc 0f00 	cmp.w	ip, #0
 8009522:	d001      	beq.n	8009528 <__lshift+0xac>
 8009524:	f108 0602 	add.w	r6, r8, #2
 8009528:	3e01      	subs	r6, #1
 800952a:	4638      	mov	r0, r7
 800952c:	612e      	str	r6, [r5, #16]
 800952e:	4621      	mov	r1, r4
 8009530:	f7ff fd88 	bl	8009044 <_Bfree>
 8009534:	4628      	mov	r0, r5
 8009536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800953a:	f842 0f04 	str.w	r0, [r2, #4]!
 800953e:	3301      	adds	r3, #1
 8009540:	e7c1      	b.n	80094c6 <__lshift+0x4a>
 8009542:	3904      	subs	r1, #4
 8009544:	f853 2b04 	ldr.w	r2, [r3], #4
 8009548:	f841 2f04 	str.w	r2, [r1, #4]!
 800954c:	4298      	cmp	r0, r3
 800954e:	d8f9      	bhi.n	8009544 <__lshift+0xc8>
 8009550:	e7ea      	b.n	8009528 <__lshift+0xac>
 8009552:	bf00      	nop
 8009554:	0800c0a8 	.word	0x0800c0a8
 8009558:	0800c134 	.word	0x0800c134

0800955c <__mcmp>:
 800955c:	b530      	push	{r4, r5, lr}
 800955e:	6902      	ldr	r2, [r0, #16]
 8009560:	690c      	ldr	r4, [r1, #16]
 8009562:	1b12      	subs	r2, r2, r4
 8009564:	d10e      	bne.n	8009584 <__mcmp+0x28>
 8009566:	f100 0314 	add.w	r3, r0, #20
 800956a:	3114      	adds	r1, #20
 800956c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009570:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8009574:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009578:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800957c:	42a5      	cmp	r5, r4
 800957e:	d003      	beq.n	8009588 <__mcmp+0x2c>
 8009580:	d305      	bcc.n	800958e <__mcmp+0x32>
 8009582:	2201      	movs	r2, #1
 8009584:	4610      	mov	r0, r2
 8009586:	bd30      	pop	{r4, r5, pc}
 8009588:	4283      	cmp	r3, r0
 800958a:	d3f3      	bcc.n	8009574 <__mcmp+0x18>
 800958c:	e7fa      	b.n	8009584 <__mcmp+0x28>
 800958e:	f04f 32ff 	mov.w	r2, #4294967295
 8009592:	e7f7      	b.n	8009584 <__mcmp+0x28>

08009594 <__mdiff>:
 8009594:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009598:	460c      	mov	r4, r1
 800959a:	4606      	mov	r6, r0
 800959c:	4611      	mov	r1, r2
 800959e:	4620      	mov	r0, r4
 80095a0:	4690      	mov	r8, r2
 80095a2:	f7ff ffdb 	bl	800955c <__mcmp>
 80095a6:	1e05      	subs	r5, r0, #0
 80095a8:	d110      	bne.n	80095cc <__mdiff+0x38>
 80095aa:	4629      	mov	r1, r5
 80095ac:	4630      	mov	r0, r6
 80095ae:	f7ff fd09 	bl	8008fc4 <_Balloc>
 80095b2:	b930      	cbnz	r0, 80095c2 <__mdiff+0x2e>
 80095b4:	4b3a      	ldr	r3, [pc, #232]	; (80096a0 <__mdiff+0x10c>)
 80095b6:	4602      	mov	r2, r0
 80095b8:	f240 2132 	movw	r1, #562	; 0x232
 80095bc:	4839      	ldr	r0, [pc, #228]	; (80096a4 <__mdiff+0x110>)
 80095be:	f000 fc51 	bl	8009e64 <__assert_func>
 80095c2:	2301      	movs	r3, #1
 80095c4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80095c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095cc:	bfa4      	itt	ge
 80095ce:	4643      	movge	r3, r8
 80095d0:	46a0      	movge	r8, r4
 80095d2:	4630      	mov	r0, r6
 80095d4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80095d8:	bfa6      	itte	ge
 80095da:	461c      	movge	r4, r3
 80095dc:	2500      	movge	r5, #0
 80095de:	2501      	movlt	r5, #1
 80095e0:	f7ff fcf0 	bl	8008fc4 <_Balloc>
 80095e4:	b920      	cbnz	r0, 80095f0 <__mdiff+0x5c>
 80095e6:	4b2e      	ldr	r3, [pc, #184]	; (80096a0 <__mdiff+0x10c>)
 80095e8:	4602      	mov	r2, r0
 80095ea:	f44f 7110 	mov.w	r1, #576	; 0x240
 80095ee:	e7e5      	b.n	80095bc <__mdiff+0x28>
 80095f0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80095f4:	6926      	ldr	r6, [r4, #16]
 80095f6:	60c5      	str	r5, [r0, #12]
 80095f8:	f104 0914 	add.w	r9, r4, #20
 80095fc:	f108 0514 	add.w	r5, r8, #20
 8009600:	f100 0e14 	add.w	lr, r0, #20
 8009604:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009608:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800960c:	f108 0210 	add.w	r2, r8, #16
 8009610:	46f2      	mov	sl, lr
 8009612:	2100      	movs	r1, #0
 8009614:	f859 3b04 	ldr.w	r3, [r9], #4
 8009618:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800961c:	fa1f f883 	uxth.w	r8, r3
 8009620:	fa11 f18b 	uxtah	r1, r1, fp
 8009624:	0c1b      	lsrs	r3, r3, #16
 8009626:	eba1 0808 	sub.w	r8, r1, r8
 800962a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800962e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8009632:	fa1f f888 	uxth.w	r8, r8
 8009636:	1419      	asrs	r1, r3, #16
 8009638:	454e      	cmp	r6, r9
 800963a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800963e:	f84a 3b04 	str.w	r3, [sl], #4
 8009642:	d8e7      	bhi.n	8009614 <__mdiff+0x80>
 8009644:	1b33      	subs	r3, r6, r4
 8009646:	3b15      	subs	r3, #21
 8009648:	f023 0303 	bic.w	r3, r3, #3
 800964c:	3304      	adds	r3, #4
 800964e:	3415      	adds	r4, #21
 8009650:	42a6      	cmp	r6, r4
 8009652:	bf38      	it	cc
 8009654:	2304      	movcc	r3, #4
 8009656:	441d      	add	r5, r3
 8009658:	4473      	add	r3, lr
 800965a:	469e      	mov	lr, r3
 800965c:	462e      	mov	r6, r5
 800965e:	4566      	cmp	r6, ip
 8009660:	d30e      	bcc.n	8009680 <__mdiff+0xec>
 8009662:	f10c 0203 	add.w	r2, ip, #3
 8009666:	1b52      	subs	r2, r2, r5
 8009668:	f022 0203 	bic.w	r2, r2, #3
 800966c:	3d03      	subs	r5, #3
 800966e:	45ac      	cmp	ip, r5
 8009670:	bf38      	it	cc
 8009672:	2200      	movcc	r2, #0
 8009674:	441a      	add	r2, r3
 8009676:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800967a:	b17b      	cbz	r3, 800969c <__mdiff+0x108>
 800967c:	6107      	str	r7, [r0, #16]
 800967e:	e7a3      	b.n	80095c8 <__mdiff+0x34>
 8009680:	f856 8b04 	ldr.w	r8, [r6], #4
 8009684:	fa11 f288 	uxtah	r2, r1, r8
 8009688:	1414      	asrs	r4, r2, #16
 800968a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800968e:	b292      	uxth	r2, r2
 8009690:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8009694:	f84e 2b04 	str.w	r2, [lr], #4
 8009698:	1421      	asrs	r1, r4, #16
 800969a:	e7e0      	b.n	800965e <__mdiff+0xca>
 800969c:	3f01      	subs	r7, #1
 800969e:	e7ea      	b.n	8009676 <__mdiff+0xe2>
 80096a0:	0800c0a8 	.word	0x0800c0a8
 80096a4:	0800c134 	.word	0x0800c134

080096a8 <__ulp>:
 80096a8:	b082      	sub	sp, #8
 80096aa:	ed8d 0b00 	vstr	d0, [sp]
 80096ae:	9b01      	ldr	r3, [sp, #4]
 80096b0:	4912      	ldr	r1, [pc, #72]	; (80096fc <__ulp+0x54>)
 80096b2:	4019      	ands	r1, r3
 80096b4:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 80096b8:	2900      	cmp	r1, #0
 80096ba:	dd05      	ble.n	80096c8 <__ulp+0x20>
 80096bc:	2200      	movs	r2, #0
 80096be:	460b      	mov	r3, r1
 80096c0:	ec43 2b10 	vmov	d0, r2, r3
 80096c4:	b002      	add	sp, #8
 80096c6:	4770      	bx	lr
 80096c8:	4249      	negs	r1, r1
 80096ca:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 80096ce:	ea4f 5021 	mov.w	r0, r1, asr #20
 80096d2:	f04f 0200 	mov.w	r2, #0
 80096d6:	f04f 0300 	mov.w	r3, #0
 80096da:	da04      	bge.n	80096e6 <__ulp+0x3e>
 80096dc:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 80096e0:	fa41 f300 	asr.w	r3, r1, r0
 80096e4:	e7ec      	b.n	80096c0 <__ulp+0x18>
 80096e6:	f1a0 0114 	sub.w	r1, r0, #20
 80096ea:	291e      	cmp	r1, #30
 80096ec:	bfda      	itte	le
 80096ee:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 80096f2:	fa20 f101 	lsrle.w	r1, r0, r1
 80096f6:	2101      	movgt	r1, #1
 80096f8:	460a      	mov	r2, r1
 80096fa:	e7e1      	b.n	80096c0 <__ulp+0x18>
 80096fc:	7ff00000 	.word	0x7ff00000

08009700 <__b2d>:
 8009700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009702:	6905      	ldr	r5, [r0, #16]
 8009704:	f100 0714 	add.w	r7, r0, #20
 8009708:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800970c:	1f2e      	subs	r6, r5, #4
 800970e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8009712:	4620      	mov	r0, r4
 8009714:	f7ff fd48 	bl	80091a8 <__hi0bits>
 8009718:	f1c0 0320 	rsb	r3, r0, #32
 800971c:	280a      	cmp	r0, #10
 800971e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800979c <__b2d+0x9c>
 8009722:	600b      	str	r3, [r1, #0]
 8009724:	dc14      	bgt.n	8009750 <__b2d+0x50>
 8009726:	f1c0 0e0b 	rsb	lr, r0, #11
 800972a:	fa24 f10e 	lsr.w	r1, r4, lr
 800972e:	42b7      	cmp	r7, r6
 8009730:	ea41 030c 	orr.w	r3, r1, ip
 8009734:	bf34      	ite	cc
 8009736:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800973a:	2100      	movcs	r1, #0
 800973c:	3015      	adds	r0, #21
 800973e:	fa04 f000 	lsl.w	r0, r4, r0
 8009742:	fa21 f10e 	lsr.w	r1, r1, lr
 8009746:	ea40 0201 	orr.w	r2, r0, r1
 800974a:	ec43 2b10 	vmov	d0, r2, r3
 800974e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009750:	42b7      	cmp	r7, r6
 8009752:	bf3a      	itte	cc
 8009754:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8009758:	f1a5 0608 	subcc.w	r6, r5, #8
 800975c:	2100      	movcs	r1, #0
 800975e:	380b      	subs	r0, #11
 8009760:	d017      	beq.n	8009792 <__b2d+0x92>
 8009762:	f1c0 0c20 	rsb	ip, r0, #32
 8009766:	fa04 f500 	lsl.w	r5, r4, r0
 800976a:	42be      	cmp	r6, r7
 800976c:	fa21 f40c 	lsr.w	r4, r1, ip
 8009770:	ea45 0504 	orr.w	r5, r5, r4
 8009774:	bf8c      	ite	hi
 8009776:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800977a:	2400      	movls	r4, #0
 800977c:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8009780:	fa01 f000 	lsl.w	r0, r1, r0
 8009784:	fa24 f40c 	lsr.w	r4, r4, ip
 8009788:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800978c:	ea40 0204 	orr.w	r2, r0, r4
 8009790:	e7db      	b.n	800974a <__b2d+0x4a>
 8009792:	ea44 030c 	orr.w	r3, r4, ip
 8009796:	460a      	mov	r2, r1
 8009798:	e7d7      	b.n	800974a <__b2d+0x4a>
 800979a:	bf00      	nop
 800979c:	3ff00000 	.word	0x3ff00000

080097a0 <__d2b>:
 80097a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80097a4:	4689      	mov	r9, r1
 80097a6:	2101      	movs	r1, #1
 80097a8:	ec57 6b10 	vmov	r6, r7, d0
 80097ac:	4690      	mov	r8, r2
 80097ae:	f7ff fc09 	bl	8008fc4 <_Balloc>
 80097b2:	4604      	mov	r4, r0
 80097b4:	b930      	cbnz	r0, 80097c4 <__d2b+0x24>
 80097b6:	4602      	mov	r2, r0
 80097b8:	4b25      	ldr	r3, [pc, #148]	; (8009850 <__d2b+0xb0>)
 80097ba:	4826      	ldr	r0, [pc, #152]	; (8009854 <__d2b+0xb4>)
 80097bc:	f240 310a 	movw	r1, #778	; 0x30a
 80097c0:	f000 fb50 	bl	8009e64 <__assert_func>
 80097c4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80097c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80097cc:	bb35      	cbnz	r5, 800981c <__d2b+0x7c>
 80097ce:	2e00      	cmp	r6, #0
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	d028      	beq.n	8009826 <__d2b+0x86>
 80097d4:	4668      	mov	r0, sp
 80097d6:	9600      	str	r6, [sp, #0]
 80097d8:	f7ff fd06 	bl	80091e8 <__lo0bits>
 80097dc:	9900      	ldr	r1, [sp, #0]
 80097de:	b300      	cbz	r0, 8009822 <__d2b+0x82>
 80097e0:	9a01      	ldr	r2, [sp, #4]
 80097e2:	f1c0 0320 	rsb	r3, r0, #32
 80097e6:	fa02 f303 	lsl.w	r3, r2, r3
 80097ea:	430b      	orrs	r3, r1
 80097ec:	40c2      	lsrs	r2, r0
 80097ee:	6163      	str	r3, [r4, #20]
 80097f0:	9201      	str	r2, [sp, #4]
 80097f2:	9b01      	ldr	r3, [sp, #4]
 80097f4:	61a3      	str	r3, [r4, #24]
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	bf14      	ite	ne
 80097fa:	2202      	movne	r2, #2
 80097fc:	2201      	moveq	r2, #1
 80097fe:	6122      	str	r2, [r4, #16]
 8009800:	b1d5      	cbz	r5, 8009838 <__d2b+0x98>
 8009802:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009806:	4405      	add	r5, r0
 8009808:	f8c9 5000 	str.w	r5, [r9]
 800980c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009810:	f8c8 0000 	str.w	r0, [r8]
 8009814:	4620      	mov	r0, r4
 8009816:	b003      	add	sp, #12
 8009818:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800981c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009820:	e7d5      	b.n	80097ce <__d2b+0x2e>
 8009822:	6161      	str	r1, [r4, #20]
 8009824:	e7e5      	b.n	80097f2 <__d2b+0x52>
 8009826:	a801      	add	r0, sp, #4
 8009828:	f7ff fcde 	bl	80091e8 <__lo0bits>
 800982c:	9b01      	ldr	r3, [sp, #4]
 800982e:	6163      	str	r3, [r4, #20]
 8009830:	2201      	movs	r2, #1
 8009832:	6122      	str	r2, [r4, #16]
 8009834:	3020      	adds	r0, #32
 8009836:	e7e3      	b.n	8009800 <__d2b+0x60>
 8009838:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800983c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009840:	f8c9 0000 	str.w	r0, [r9]
 8009844:	6918      	ldr	r0, [r3, #16]
 8009846:	f7ff fcaf 	bl	80091a8 <__hi0bits>
 800984a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800984e:	e7df      	b.n	8009810 <__d2b+0x70>
 8009850:	0800c0a8 	.word	0x0800c0a8
 8009854:	0800c134 	.word	0x0800c134

08009858 <__ratio>:
 8009858:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800985c:	4688      	mov	r8, r1
 800985e:	4669      	mov	r1, sp
 8009860:	4681      	mov	r9, r0
 8009862:	f7ff ff4d 	bl	8009700 <__b2d>
 8009866:	a901      	add	r1, sp, #4
 8009868:	4640      	mov	r0, r8
 800986a:	ec55 4b10 	vmov	r4, r5, d0
 800986e:	f7ff ff47 	bl	8009700 <__b2d>
 8009872:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009876:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800987a:	eba3 0c02 	sub.w	ip, r3, r2
 800987e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8009882:	1a9b      	subs	r3, r3, r2
 8009884:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8009888:	ec51 0b10 	vmov	r0, r1, d0
 800988c:	2b00      	cmp	r3, #0
 800988e:	bfd6      	itet	le
 8009890:	460a      	movle	r2, r1
 8009892:	462a      	movgt	r2, r5
 8009894:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009898:	468b      	mov	fp, r1
 800989a:	462f      	mov	r7, r5
 800989c:	bfd4      	ite	le
 800989e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80098a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80098a6:	4620      	mov	r0, r4
 80098a8:	ee10 2a10 	vmov	r2, s0
 80098ac:	465b      	mov	r3, fp
 80098ae:	4639      	mov	r1, r7
 80098b0:	f7f6 ffcc 	bl	800084c <__aeabi_ddiv>
 80098b4:	ec41 0b10 	vmov	d0, r0, r1
 80098b8:	b003      	add	sp, #12
 80098ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080098be <__copybits>:
 80098be:	3901      	subs	r1, #1
 80098c0:	b570      	push	{r4, r5, r6, lr}
 80098c2:	1149      	asrs	r1, r1, #5
 80098c4:	6914      	ldr	r4, [r2, #16]
 80098c6:	3101      	adds	r1, #1
 80098c8:	f102 0314 	add.w	r3, r2, #20
 80098cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80098d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80098d4:	1f05      	subs	r5, r0, #4
 80098d6:	42a3      	cmp	r3, r4
 80098d8:	d30c      	bcc.n	80098f4 <__copybits+0x36>
 80098da:	1aa3      	subs	r3, r4, r2
 80098dc:	3b11      	subs	r3, #17
 80098de:	f023 0303 	bic.w	r3, r3, #3
 80098e2:	3211      	adds	r2, #17
 80098e4:	42a2      	cmp	r2, r4
 80098e6:	bf88      	it	hi
 80098e8:	2300      	movhi	r3, #0
 80098ea:	4418      	add	r0, r3
 80098ec:	2300      	movs	r3, #0
 80098ee:	4288      	cmp	r0, r1
 80098f0:	d305      	bcc.n	80098fe <__copybits+0x40>
 80098f2:	bd70      	pop	{r4, r5, r6, pc}
 80098f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80098f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80098fc:	e7eb      	b.n	80098d6 <__copybits+0x18>
 80098fe:	f840 3b04 	str.w	r3, [r0], #4
 8009902:	e7f4      	b.n	80098ee <__copybits+0x30>

08009904 <__any_on>:
 8009904:	f100 0214 	add.w	r2, r0, #20
 8009908:	6900      	ldr	r0, [r0, #16]
 800990a:	114b      	asrs	r3, r1, #5
 800990c:	4298      	cmp	r0, r3
 800990e:	b510      	push	{r4, lr}
 8009910:	db11      	blt.n	8009936 <__any_on+0x32>
 8009912:	dd0a      	ble.n	800992a <__any_on+0x26>
 8009914:	f011 011f 	ands.w	r1, r1, #31
 8009918:	d007      	beq.n	800992a <__any_on+0x26>
 800991a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800991e:	fa24 f001 	lsr.w	r0, r4, r1
 8009922:	fa00 f101 	lsl.w	r1, r0, r1
 8009926:	428c      	cmp	r4, r1
 8009928:	d10b      	bne.n	8009942 <__any_on+0x3e>
 800992a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800992e:	4293      	cmp	r3, r2
 8009930:	d803      	bhi.n	800993a <__any_on+0x36>
 8009932:	2000      	movs	r0, #0
 8009934:	bd10      	pop	{r4, pc}
 8009936:	4603      	mov	r3, r0
 8009938:	e7f7      	b.n	800992a <__any_on+0x26>
 800993a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800993e:	2900      	cmp	r1, #0
 8009940:	d0f5      	beq.n	800992e <__any_on+0x2a>
 8009942:	2001      	movs	r0, #1
 8009944:	e7f6      	b.n	8009934 <__any_on+0x30>

08009946 <_calloc_r>:
 8009946:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009948:	fba1 2402 	umull	r2, r4, r1, r2
 800994c:	b94c      	cbnz	r4, 8009962 <_calloc_r+0x1c>
 800994e:	4611      	mov	r1, r2
 8009950:	9201      	str	r2, [sp, #4]
 8009952:	f000 f87b 	bl	8009a4c <_malloc_r>
 8009956:	9a01      	ldr	r2, [sp, #4]
 8009958:	4605      	mov	r5, r0
 800995a:	b930      	cbnz	r0, 800996a <_calloc_r+0x24>
 800995c:	4628      	mov	r0, r5
 800995e:	b003      	add	sp, #12
 8009960:	bd30      	pop	{r4, r5, pc}
 8009962:	220c      	movs	r2, #12
 8009964:	6002      	str	r2, [r0, #0]
 8009966:	2500      	movs	r5, #0
 8009968:	e7f8      	b.n	800995c <_calloc_r+0x16>
 800996a:	4621      	mov	r1, r4
 800996c:	f7fc fbbe 	bl	80060ec <memset>
 8009970:	e7f4      	b.n	800995c <_calloc_r+0x16>
	...

08009974 <_free_r>:
 8009974:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009976:	2900      	cmp	r1, #0
 8009978:	d044      	beq.n	8009a04 <_free_r+0x90>
 800997a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800997e:	9001      	str	r0, [sp, #4]
 8009980:	2b00      	cmp	r3, #0
 8009982:	f1a1 0404 	sub.w	r4, r1, #4
 8009986:	bfb8      	it	lt
 8009988:	18e4      	addlt	r4, r4, r3
 800998a:	f000 fab5 	bl	8009ef8 <__malloc_lock>
 800998e:	4a1e      	ldr	r2, [pc, #120]	; (8009a08 <_free_r+0x94>)
 8009990:	9801      	ldr	r0, [sp, #4]
 8009992:	6813      	ldr	r3, [r2, #0]
 8009994:	b933      	cbnz	r3, 80099a4 <_free_r+0x30>
 8009996:	6063      	str	r3, [r4, #4]
 8009998:	6014      	str	r4, [r2, #0]
 800999a:	b003      	add	sp, #12
 800999c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80099a0:	f000 bab0 	b.w	8009f04 <__malloc_unlock>
 80099a4:	42a3      	cmp	r3, r4
 80099a6:	d908      	bls.n	80099ba <_free_r+0x46>
 80099a8:	6825      	ldr	r5, [r4, #0]
 80099aa:	1961      	adds	r1, r4, r5
 80099ac:	428b      	cmp	r3, r1
 80099ae:	bf01      	itttt	eq
 80099b0:	6819      	ldreq	r1, [r3, #0]
 80099b2:	685b      	ldreq	r3, [r3, #4]
 80099b4:	1949      	addeq	r1, r1, r5
 80099b6:	6021      	streq	r1, [r4, #0]
 80099b8:	e7ed      	b.n	8009996 <_free_r+0x22>
 80099ba:	461a      	mov	r2, r3
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	b10b      	cbz	r3, 80099c4 <_free_r+0x50>
 80099c0:	42a3      	cmp	r3, r4
 80099c2:	d9fa      	bls.n	80099ba <_free_r+0x46>
 80099c4:	6811      	ldr	r1, [r2, #0]
 80099c6:	1855      	adds	r5, r2, r1
 80099c8:	42a5      	cmp	r5, r4
 80099ca:	d10b      	bne.n	80099e4 <_free_r+0x70>
 80099cc:	6824      	ldr	r4, [r4, #0]
 80099ce:	4421      	add	r1, r4
 80099d0:	1854      	adds	r4, r2, r1
 80099d2:	42a3      	cmp	r3, r4
 80099d4:	6011      	str	r1, [r2, #0]
 80099d6:	d1e0      	bne.n	800999a <_free_r+0x26>
 80099d8:	681c      	ldr	r4, [r3, #0]
 80099da:	685b      	ldr	r3, [r3, #4]
 80099dc:	6053      	str	r3, [r2, #4]
 80099de:	4421      	add	r1, r4
 80099e0:	6011      	str	r1, [r2, #0]
 80099e2:	e7da      	b.n	800999a <_free_r+0x26>
 80099e4:	d902      	bls.n	80099ec <_free_r+0x78>
 80099e6:	230c      	movs	r3, #12
 80099e8:	6003      	str	r3, [r0, #0]
 80099ea:	e7d6      	b.n	800999a <_free_r+0x26>
 80099ec:	6825      	ldr	r5, [r4, #0]
 80099ee:	1961      	adds	r1, r4, r5
 80099f0:	428b      	cmp	r3, r1
 80099f2:	bf04      	itt	eq
 80099f4:	6819      	ldreq	r1, [r3, #0]
 80099f6:	685b      	ldreq	r3, [r3, #4]
 80099f8:	6063      	str	r3, [r4, #4]
 80099fa:	bf04      	itt	eq
 80099fc:	1949      	addeq	r1, r1, r5
 80099fe:	6021      	streq	r1, [r4, #0]
 8009a00:	6054      	str	r4, [r2, #4]
 8009a02:	e7ca      	b.n	800999a <_free_r+0x26>
 8009a04:	b003      	add	sp, #12
 8009a06:	bd30      	pop	{r4, r5, pc}
 8009a08:	200003b8 	.word	0x200003b8

08009a0c <sbrk_aligned>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	4e0e      	ldr	r6, [pc, #56]	; (8009a48 <sbrk_aligned+0x3c>)
 8009a10:	460c      	mov	r4, r1
 8009a12:	6831      	ldr	r1, [r6, #0]
 8009a14:	4605      	mov	r5, r0
 8009a16:	b911      	cbnz	r1, 8009a1e <sbrk_aligned+0x12>
 8009a18:	f000 f9f2 	bl	8009e00 <_sbrk_r>
 8009a1c:	6030      	str	r0, [r6, #0]
 8009a1e:	4621      	mov	r1, r4
 8009a20:	4628      	mov	r0, r5
 8009a22:	f000 f9ed 	bl	8009e00 <_sbrk_r>
 8009a26:	1c43      	adds	r3, r0, #1
 8009a28:	d00a      	beq.n	8009a40 <sbrk_aligned+0x34>
 8009a2a:	1cc4      	adds	r4, r0, #3
 8009a2c:	f024 0403 	bic.w	r4, r4, #3
 8009a30:	42a0      	cmp	r0, r4
 8009a32:	d007      	beq.n	8009a44 <sbrk_aligned+0x38>
 8009a34:	1a21      	subs	r1, r4, r0
 8009a36:	4628      	mov	r0, r5
 8009a38:	f000 f9e2 	bl	8009e00 <_sbrk_r>
 8009a3c:	3001      	adds	r0, #1
 8009a3e:	d101      	bne.n	8009a44 <sbrk_aligned+0x38>
 8009a40:	f04f 34ff 	mov.w	r4, #4294967295
 8009a44:	4620      	mov	r0, r4
 8009a46:	bd70      	pop	{r4, r5, r6, pc}
 8009a48:	200003bc 	.word	0x200003bc

08009a4c <_malloc_r>:
 8009a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a50:	1ccd      	adds	r5, r1, #3
 8009a52:	f025 0503 	bic.w	r5, r5, #3
 8009a56:	3508      	adds	r5, #8
 8009a58:	2d0c      	cmp	r5, #12
 8009a5a:	bf38      	it	cc
 8009a5c:	250c      	movcc	r5, #12
 8009a5e:	2d00      	cmp	r5, #0
 8009a60:	4607      	mov	r7, r0
 8009a62:	db01      	blt.n	8009a68 <_malloc_r+0x1c>
 8009a64:	42a9      	cmp	r1, r5
 8009a66:	d905      	bls.n	8009a74 <_malloc_r+0x28>
 8009a68:	230c      	movs	r3, #12
 8009a6a:	603b      	str	r3, [r7, #0]
 8009a6c:	2600      	movs	r6, #0
 8009a6e:	4630      	mov	r0, r6
 8009a70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a74:	4e2e      	ldr	r6, [pc, #184]	; (8009b30 <_malloc_r+0xe4>)
 8009a76:	f000 fa3f 	bl	8009ef8 <__malloc_lock>
 8009a7a:	6833      	ldr	r3, [r6, #0]
 8009a7c:	461c      	mov	r4, r3
 8009a7e:	bb34      	cbnz	r4, 8009ace <_malloc_r+0x82>
 8009a80:	4629      	mov	r1, r5
 8009a82:	4638      	mov	r0, r7
 8009a84:	f7ff ffc2 	bl	8009a0c <sbrk_aligned>
 8009a88:	1c43      	adds	r3, r0, #1
 8009a8a:	4604      	mov	r4, r0
 8009a8c:	d14d      	bne.n	8009b2a <_malloc_r+0xde>
 8009a8e:	6834      	ldr	r4, [r6, #0]
 8009a90:	4626      	mov	r6, r4
 8009a92:	2e00      	cmp	r6, #0
 8009a94:	d140      	bne.n	8009b18 <_malloc_r+0xcc>
 8009a96:	6823      	ldr	r3, [r4, #0]
 8009a98:	4631      	mov	r1, r6
 8009a9a:	4638      	mov	r0, r7
 8009a9c:	eb04 0803 	add.w	r8, r4, r3
 8009aa0:	f000 f9ae 	bl	8009e00 <_sbrk_r>
 8009aa4:	4580      	cmp	r8, r0
 8009aa6:	d13a      	bne.n	8009b1e <_malloc_r+0xd2>
 8009aa8:	6821      	ldr	r1, [r4, #0]
 8009aaa:	3503      	adds	r5, #3
 8009aac:	1a6d      	subs	r5, r5, r1
 8009aae:	f025 0503 	bic.w	r5, r5, #3
 8009ab2:	3508      	adds	r5, #8
 8009ab4:	2d0c      	cmp	r5, #12
 8009ab6:	bf38      	it	cc
 8009ab8:	250c      	movcc	r5, #12
 8009aba:	4629      	mov	r1, r5
 8009abc:	4638      	mov	r0, r7
 8009abe:	f7ff ffa5 	bl	8009a0c <sbrk_aligned>
 8009ac2:	3001      	adds	r0, #1
 8009ac4:	d02b      	beq.n	8009b1e <_malloc_r+0xd2>
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	442b      	add	r3, r5
 8009aca:	6023      	str	r3, [r4, #0]
 8009acc:	e00e      	b.n	8009aec <_malloc_r+0xa0>
 8009ace:	6822      	ldr	r2, [r4, #0]
 8009ad0:	1b52      	subs	r2, r2, r5
 8009ad2:	d41e      	bmi.n	8009b12 <_malloc_r+0xc6>
 8009ad4:	2a0b      	cmp	r2, #11
 8009ad6:	d916      	bls.n	8009b06 <_malloc_r+0xba>
 8009ad8:	1961      	adds	r1, r4, r5
 8009ada:	42a3      	cmp	r3, r4
 8009adc:	6025      	str	r5, [r4, #0]
 8009ade:	bf18      	it	ne
 8009ae0:	6059      	strne	r1, [r3, #4]
 8009ae2:	6863      	ldr	r3, [r4, #4]
 8009ae4:	bf08      	it	eq
 8009ae6:	6031      	streq	r1, [r6, #0]
 8009ae8:	5162      	str	r2, [r4, r5]
 8009aea:	604b      	str	r3, [r1, #4]
 8009aec:	4638      	mov	r0, r7
 8009aee:	f104 060b 	add.w	r6, r4, #11
 8009af2:	f000 fa07 	bl	8009f04 <__malloc_unlock>
 8009af6:	f026 0607 	bic.w	r6, r6, #7
 8009afa:	1d23      	adds	r3, r4, #4
 8009afc:	1af2      	subs	r2, r6, r3
 8009afe:	d0b6      	beq.n	8009a6e <_malloc_r+0x22>
 8009b00:	1b9b      	subs	r3, r3, r6
 8009b02:	50a3      	str	r3, [r4, r2]
 8009b04:	e7b3      	b.n	8009a6e <_malloc_r+0x22>
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	42a3      	cmp	r3, r4
 8009b0a:	bf0c      	ite	eq
 8009b0c:	6032      	streq	r2, [r6, #0]
 8009b0e:	605a      	strne	r2, [r3, #4]
 8009b10:	e7ec      	b.n	8009aec <_malloc_r+0xa0>
 8009b12:	4623      	mov	r3, r4
 8009b14:	6864      	ldr	r4, [r4, #4]
 8009b16:	e7b2      	b.n	8009a7e <_malloc_r+0x32>
 8009b18:	4634      	mov	r4, r6
 8009b1a:	6876      	ldr	r6, [r6, #4]
 8009b1c:	e7b9      	b.n	8009a92 <_malloc_r+0x46>
 8009b1e:	230c      	movs	r3, #12
 8009b20:	603b      	str	r3, [r7, #0]
 8009b22:	4638      	mov	r0, r7
 8009b24:	f000 f9ee 	bl	8009f04 <__malloc_unlock>
 8009b28:	e7a1      	b.n	8009a6e <_malloc_r+0x22>
 8009b2a:	6025      	str	r5, [r4, #0]
 8009b2c:	e7de      	b.n	8009aec <_malloc_r+0xa0>
 8009b2e:	bf00      	nop
 8009b30:	200003b8 	.word	0x200003b8

08009b34 <__ssputs_r>:
 8009b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009b38:	688e      	ldr	r6, [r1, #8]
 8009b3a:	429e      	cmp	r6, r3
 8009b3c:	4682      	mov	sl, r0
 8009b3e:	460c      	mov	r4, r1
 8009b40:	4690      	mov	r8, r2
 8009b42:	461f      	mov	r7, r3
 8009b44:	d838      	bhi.n	8009bb8 <__ssputs_r+0x84>
 8009b46:	898a      	ldrh	r2, [r1, #12]
 8009b48:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009b4c:	d032      	beq.n	8009bb4 <__ssputs_r+0x80>
 8009b4e:	6825      	ldr	r5, [r4, #0]
 8009b50:	6909      	ldr	r1, [r1, #16]
 8009b52:	eba5 0901 	sub.w	r9, r5, r1
 8009b56:	6965      	ldr	r5, [r4, #20]
 8009b58:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009b5c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009b60:	3301      	adds	r3, #1
 8009b62:	444b      	add	r3, r9
 8009b64:	106d      	asrs	r5, r5, #1
 8009b66:	429d      	cmp	r5, r3
 8009b68:	bf38      	it	cc
 8009b6a:	461d      	movcc	r5, r3
 8009b6c:	0553      	lsls	r3, r2, #21
 8009b6e:	d531      	bpl.n	8009bd4 <__ssputs_r+0xa0>
 8009b70:	4629      	mov	r1, r5
 8009b72:	f7ff ff6b 	bl	8009a4c <_malloc_r>
 8009b76:	4606      	mov	r6, r0
 8009b78:	b950      	cbnz	r0, 8009b90 <__ssputs_r+0x5c>
 8009b7a:	230c      	movs	r3, #12
 8009b7c:	f8ca 3000 	str.w	r3, [sl]
 8009b80:	89a3      	ldrh	r3, [r4, #12]
 8009b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009b86:	81a3      	strh	r3, [r4, #12]
 8009b88:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b90:	6921      	ldr	r1, [r4, #16]
 8009b92:	464a      	mov	r2, r9
 8009b94:	f7ff fa08 	bl	8008fa8 <memcpy>
 8009b98:	89a3      	ldrh	r3, [r4, #12]
 8009b9a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009b9e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ba2:	81a3      	strh	r3, [r4, #12]
 8009ba4:	6126      	str	r6, [r4, #16]
 8009ba6:	6165      	str	r5, [r4, #20]
 8009ba8:	444e      	add	r6, r9
 8009baa:	eba5 0509 	sub.w	r5, r5, r9
 8009bae:	6026      	str	r6, [r4, #0]
 8009bb0:	60a5      	str	r5, [r4, #8]
 8009bb2:	463e      	mov	r6, r7
 8009bb4:	42be      	cmp	r6, r7
 8009bb6:	d900      	bls.n	8009bba <__ssputs_r+0x86>
 8009bb8:	463e      	mov	r6, r7
 8009bba:	6820      	ldr	r0, [r4, #0]
 8009bbc:	4632      	mov	r2, r6
 8009bbe:	4641      	mov	r1, r8
 8009bc0:	f000 f980 	bl	8009ec4 <memmove>
 8009bc4:	68a3      	ldr	r3, [r4, #8]
 8009bc6:	1b9b      	subs	r3, r3, r6
 8009bc8:	60a3      	str	r3, [r4, #8]
 8009bca:	6823      	ldr	r3, [r4, #0]
 8009bcc:	4433      	add	r3, r6
 8009bce:	6023      	str	r3, [r4, #0]
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	e7db      	b.n	8009b8c <__ssputs_r+0x58>
 8009bd4:	462a      	mov	r2, r5
 8009bd6:	f000 f99b 	bl	8009f10 <_realloc_r>
 8009bda:	4606      	mov	r6, r0
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d1e1      	bne.n	8009ba4 <__ssputs_r+0x70>
 8009be0:	6921      	ldr	r1, [r4, #16]
 8009be2:	4650      	mov	r0, sl
 8009be4:	f7ff fec6 	bl	8009974 <_free_r>
 8009be8:	e7c7      	b.n	8009b7a <__ssputs_r+0x46>
	...

08009bec <_svfiprintf_r>:
 8009bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bf0:	4698      	mov	r8, r3
 8009bf2:	898b      	ldrh	r3, [r1, #12]
 8009bf4:	061b      	lsls	r3, r3, #24
 8009bf6:	b09d      	sub	sp, #116	; 0x74
 8009bf8:	4607      	mov	r7, r0
 8009bfa:	460d      	mov	r5, r1
 8009bfc:	4614      	mov	r4, r2
 8009bfe:	d50e      	bpl.n	8009c1e <_svfiprintf_r+0x32>
 8009c00:	690b      	ldr	r3, [r1, #16]
 8009c02:	b963      	cbnz	r3, 8009c1e <_svfiprintf_r+0x32>
 8009c04:	2140      	movs	r1, #64	; 0x40
 8009c06:	f7ff ff21 	bl	8009a4c <_malloc_r>
 8009c0a:	6028      	str	r0, [r5, #0]
 8009c0c:	6128      	str	r0, [r5, #16]
 8009c0e:	b920      	cbnz	r0, 8009c1a <_svfiprintf_r+0x2e>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	f04f 30ff 	mov.w	r0, #4294967295
 8009c18:	e0d1      	b.n	8009dbe <_svfiprintf_r+0x1d2>
 8009c1a:	2340      	movs	r3, #64	; 0x40
 8009c1c:	616b      	str	r3, [r5, #20]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	9309      	str	r3, [sp, #36]	; 0x24
 8009c22:	2320      	movs	r3, #32
 8009c24:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009c28:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c2c:	2330      	movs	r3, #48	; 0x30
 8009c2e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009dd8 <_svfiprintf_r+0x1ec>
 8009c32:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009c36:	f04f 0901 	mov.w	r9, #1
 8009c3a:	4623      	mov	r3, r4
 8009c3c:	469a      	mov	sl, r3
 8009c3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009c42:	b10a      	cbz	r2, 8009c48 <_svfiprintf_r+0x5c>
 8009c44:	2a25      	cmp	r2, #37	; 0x25
 8009c46:	d1f9      	bne.n	8009c3c <_svfiprintf_r+0x50>
 8009c48:	ebba 0b04 	subs.w	fp, sl, r4
 8009c4c:	d00b      	beq.n	8009c66 <_svfiprintf_r+0x7a>
 8009c4e:	465b      	mov	r3, fp
 8009c50:	4622      	mov	r2, r4
 8009c52:	4629      	mov	r1, r5
 8009c54:	4638      	mov	r0, r7
 8009c56:	f7ff ff6d 	bl	8009b34 <__ssputs_r>
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f000 80aa 	beq.w	8009db4 <_svfiprintf_r+0x1c8>
 8009c60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c62:	445a      	add	r2, fp
 8009c64:	9209      	str	r2, [sp, #36]	; 0x24
 8009c66:	f89a 3000 	ldrb.w	r3, [sl]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	f000 80a2 	beq.w	8009db4 <_svfiprintf_r+0x1c8>
 8009c70:	2300      	movs	r3, #0
 8009c72:	f04f 32ff 	mov.w	r2, #4294967295
 8009c76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009c7a:	f10a 0a01 	add.w	sl, sl, #1
 8009c7e:	9304      	str	r3, [sp, #16]
 8009c80:	9307      	str	r3, [sp, #28]
 8009c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009c86:	931a      	str	r3, [sp, #104]	; 0x68
 8009c88:	4654      	mov	r4, sl
 8009c8a:	2205      	movs	r2, #5
 8009c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c90:	4851      	ldr	r0, [pc, #324]	; (8009dd8 <_svfiprintf_r+0x1ec>)
 8009c92:	f7f6 faa5 	bl	80001e0 <memchr>
 8009c96:	9a04      	ldr	r2, [sp, #16]
 8009c98:	b9d8      	cbnz	r0, 8009cd2 <_svfiprintf_r+0xe6>
 8009c9a:	06d0      	lsls	r0, r2, #27
 8009c9c:	bf44      	itt	mi
 8009c9e:	2320      	movmi	r3, #32
 8009ca0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ca4:	0711      	lsls	r1, r2, #28
 8009ca6:	bf44      	itt	mi
 8009ca8:	232b      	movmi	r3, #43	; 0x2b
 8009caa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009cae:	f89a 3000 	ldrb.w	r3, [sl]
 8009cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8009cb4:	d015      	beq.n	8009ce2 <_svfiprintf_r+0xf6>
 8009cb6:	9a07      	ldr	r2, [sp, #28]
 8009cb8:	4654      	mov	r4, sl
 8009cba:	2000      	movs	r0, #0
 8009cbc:	f04f 0c0a 	mov.w	ip, #10
 8009cc0:	4621      	mov	r1, r4
 8009cc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009cc6:	3b30      	subs	r3, #48	; 0x30
 8009cc8:	2b09      	cmp	r3, #9
 8009cca:	d94e      	bls.n	8009d6a <_svfiprintf_r+0x17e>
 8009ccc:	b1b0      	cbz	r0, 8009cfc <_svfiprintf_r+0x110>
 8009cce:	9207      	str	r2, [sp, #28]
 8009cd0:	e014      	b.n	8009cfc <_svfiprintf_r+0x110>
 8009cd2:	eba0 0308 	sub.w	r3, r0, r8
 8009cd6:	fa09 f303 	lsl.w	r3, r9, r3
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	9304      	str	r3, [sp, #16]
 8009cde:	46a2      	mov	sl, r4
 8009ce0:	e7d2      	b.n	8009c88 <_svfiprintf_r+0x9c>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	1d19      	adds	r1, r3, #4
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	9103      	str	r1, [sp, #12]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	bfbb      	ittet	lt
 8009cee:	425b      	neglt	r3, r3
 8009cf0:	f042 0202 	orrlt.w	r2, r2, #2
 8009cf4:	9307      	strge	r3, [sp, #28]
 8009cf6:	9307      	strlt	r3, [sp, #28]
 8009cf8:	bfb8      	it	lt
 8009cfa:	9204      	strlt	r2, [sp, #16]
 8009cfc:	7823      	ldrb	r3, [r4, #0]
 8009cfe:	2b2e      	cmp	r3, #46	; 0x2e
 8009d00:	d10c      	bne.n	8009d1c <_svfiprintf_r+0x130>
 8009d02:	7863      	ldrb	r3, [r4, #1]
 8009d04:	2b2a      	cmp	r3, #42	; 0x2a
 8009d06:	d135      	bne.n	8009d74 <_svfiprintf_r+0x188>
 8009d08:	9b03      	ldr	r3, [sp, #12]
 8009d0a:	1d1a      	adds	r2, r3, #4
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	9203      	str	r2, [sp, #12]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	bfb8      	it	lt
 8009d14:	f04f 33ff 	movlt.w	r3, #4294967295
 8009d18:	3402      	adds	r4, #2
 8009d1a:	9305      	str	r3, [sp, #20]
 8009d1c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009de8 <_svfiprintf_r+0x1fc>
 8009d20:	7821      	ldrb	r1, [r4, #0]
 8009d22:	2203      	movs	r2, #3
 8009d24:	4650      	mov	r0, sl
 8009d26:	f7f6 fa5b 	bl	80001e0 <memchr>
 8009d2a:	b140      	cbz	r0, 8009d3e <_svfiprintf_r+0x152>
 8009d2c:	2340      	movs	r3, #64	; 0x40
 8009d2e:	eba0 000a 	sub.w	r0, r0, sl
 8009d32:	fa03 f000 	lsl.w	r0, r3, r0
 8009d36:	9b04      	ldr	r3, [sp, #16]
 8009d38:	4303      	orrs	r3, r0
 8009d3a:	3401      	adds	r4, #1
 8009d3c:	9304      	str	r3, [sp, #16]
 8009d3e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d42:	4826      	ldr	r0, [pc, #152]	; (8009ddc <_svfiprintf_r+0x1f0>)
 8009d44:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009d48:	2206      	movs	r2, #6
 8009d4a:	f7f6 fa49 	bl	80001e0 <memchr>
 8009d4e:	2800      	cmp	r0, #0
 8009d50:	d038      	beq.n	8009dc4 <_svfiprintf_r+0x1d8>
 8009d52:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <_svfiprintf_r+0x1f4>)
 8009d54:	bb1b      	cbnz	r3, 8009d9e <_svfiprintf_r+0x1b2>
 8009d56:	9b03      	ldr	r3, [sp, #12]
 8009d58:	3307      	adds	r3, #7
 8009d5a:	f023 0307 	bic.w	r3, r3, #7
 8009d5e:	3308      	adds	r3, #8
 8009d60:	9303      	str	r3, [sp, #12]
 8009d62:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d64:	4433      	add	r3, r6
 8009d66:	9309      	str	r3, [sp, #36]	; 0x24
 8009d68:	e767      	b.n	8009c3a <_svfiprintf_r+0x4e>
 8009d6a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009d6e:	460c      	mov	r4, r1
 8009d70:	2001      	movs	r0, #1
 8009d72:	e7a5      	b.n	8009cc0 <_svfiprintf_r+0xd4>
 8009d74:	2300      	movs	r3, #0
 8009d76:	3401      	adds	r4, #1
 8009d78:	9305      	str	r3, [sp, #20]
 8009d7a:	4619      	mov	r1, r3
 8009d7c:	f04f 0c0a 	mov.w	ip, #10
 8009d80:	4620      	mov	r0, r4
 8009d82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d86:	3a30      	subs	r2, #48	; 0x30
 8009d88:	2a09      	cmp	r2, #9
 8009d8a:	d903      	bls.n	8009d94 <_svfiprintf_r+0x1a8>
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d0c5      	beq.n	8009d1c <_svfiprintf_r+0x130>
 8009d90:	9105      	str	r1, [sp, #20]
 8009d92:	e7c3      	b.n	8009d1c <_svfiprintf_r+0x130>
 8009d94:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d98:	4604      	mov	r4, r0
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	e7f0      	b.n	8009d80 <_svfiprintf_r+0x194>
 8009d9e:	ab03      	add	r3, sp, #12
 8009da0:	9300      	str	r3, [sp, #0]
 8009da2:	462a      	mov	r2, r5
 8009da4:	4b0f      	ldr	r3, [pc, #60]	; (8009de4 <_svfiprintf_r+0x1f8>)
 8009da6:	a904      	add	r1, sp, #16
 8009da8:	4638      	mov	r0, r7
 8009daa:	f7fc fa47 	bl	800623c <_printf_float>
 8009dae:	1c42      	adds	r2, r0, #1
 8009db0:	4606      	mov	r6, r0
 8009db2:	d1d6      	bne.n	8009d62 <_svfiprintf_r+0x176>
 8009db4:	89ab      	ldrh	r3, [r5, #12]
 8009db6:	065b      	lsls	r3, r3, #25
 8009db8:	f53f af2c 	bmi.w	8009c14 <_svfiprintf_r+0x28>
 8009dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009dbe:	b01d      	add	sp, #116	; 0x74
 8009dc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dc4:	ab03      	add	r3, sp, #12
 8009dc6:	9300      	str	r3, [sp, #0]
 8009dc8:	462a      	mov	r2, r5
 8009dca:	4b06      	ldr	r3, [pc, #24]	; (8009de4 <_svfiprintf_r+0x1f8>)
 8009dcc:	a904      	add	r1, sp, #16
 8009dce:	4638      	mov	r0, r7
 8009dd0:	f7fc fcd8 	bl	8006784 <_printf_i>
 8009dd4:	e7eb      	b.n	8009dae <_svfiprintf_r+0x1c2>
 8009dd6:	bf00      	nop
 8009dd8:	0800c28c 	.word	0x0800c28c
 8009ddc:	0800c296 	.word	0x0800c296
 8009de0:	0800623d 	.word	0x0800623d
 8009de4:	08009b35 	.word	0x08009b35
 8009de8:	0800c292 	.word	0x0800c292
 8009dec:	00000000 	.word	0x00000000

08009df0 <nan>:
 8009df0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009df8 <nan+0x8>
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop
 8009df8:	00000000 	.word	0x00000000
 8009dfc:	7ff80000 	.word	0x7ff80000

08009e00 <_sbrk_r>:
 8009e00:	b538      	push	{r3, r4, r5, lr}
 8009e02:	4d06      	ldr	r5, [pc, #24]	; (8009e1c <_sbrk_r+0x1c>)
 8009e04:	2300      	movs	r3, #0
 8009e06:	4604      	mov	r4, r0
 8009e08:	4608      	mov	r0, r1
 8009e0a:	602b      	str	r3, [r5, #0]
 8009e0c:	f7f7 fee2 	bl	8001bd4 <_sbrk>
 8009e10:	1c43      	adds	r3, r0, #1
 8009e12:	d102      	bne.n	8009e1a <_sbrk_r+0x1a>
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	b103      	cbz	r3, 8009e1a <_sbrk_r+0x1a>
 8009e18:	6023      	str	r3, [r4, #0]
 8009e1a:	bd38      	pop	{r3, r4, r5, pc}
 8009e1c:	200003c0 	.word	0x200003c0

08009e20 <strncmp>:
 8009e20:	b510      	push	{r4, lr}
 8009e22:	b17a      	cbz	r2, 8009e44 <strncmp+0x24>
 8009e24:	4603      	mov	r3, r0
 8009e26:	3901      	subs	r1, #1
 8009e28:	1884      	adds	r4, r0, r2
 8009e2a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009e2e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8009e32:	4290      	cmp	r0, r2
 8009e34:	d101      	bne.n	8009e3a <strncmp+0x1a>
 8009e36:	42a3      	cmp	r3, r4
 8009e38:	d101      	bne.n	8009e3e <strncmp+0x1e>
 8009e3a:	1a80      	subs	r0, r0, r2
 8009e3c:	bd10      	pop	{r4, pc}
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d1f3      	bne.n	8009e2a <strncmp+0xa>
 8009e42:	e7fa      	b.n	8009e3a <strncmp+0x1a>
 8009e44:	4610      	mov	r0, r2
 8009e46:	e7f9      	b.n	8009e3c <strncmp+0x1c>

08009e48 <__ascii_wctomb>:
 8009e48:	b149      	cbz	r1, 8009e5e <__ascii_wctomb+0x16>
 8009e4a:	2aff      	cmp	r2, #255	; 0xff
 8009e4c:	bf85      	ittet	hi
 8009e4e:	238a      	movhi	r3, #138	; 0x8a
 8009e50:	6003      	strhi	r3, [r0, #0]
 8009e52:	700a      	strbls	r2, [r1, #0]
 8009e54:	f04f 30ff 	movhi.w	r0, #4294967295
 8009e58:	bf98      	it	ls
 8009e5a:	2001      	movls	r0, #1
 8009e5c:	4770      	bx	lr
 8009e5e:	4608      	mov	r0, r1
 8009e60:	4770      	bx	lr
	...

08009e64 <__assert_func>:
 8009e64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009e66:	4614      	mov	r4, r2
 8009e68:	461a      	mov	r2, r3
 8009e6a:	4b09      	ldr	r3, [pc, #36]	; (8009e90 <__assert_func+0x2c>)
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4605      	mov	r5, r0
 8009e70:	68d8      	ldr	r0, [r3, #12]
 8009e72:	b14c      	cbz	r4, 8009e88 <__assert_func+0x24>
 8009e74:	4b07      	ldr	r3, [pc, #28]	; (8009e94 <__assert_func+0x30>)
 8009e76:	9100      	str	r1, [sp, #0]
 8009e78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009e7c:	4906      	ldr	r1, [pc, #24]	; (8009e98 <__assert_func+0x34>)
 8009e7e:	462b      	mov	r3, r5
 8009e80:	f000 f80e 	bl	8009ea0 <fiprintf>
 8009e84:	f000 fa8c 	bl	800a3a0 <abort>
 8009e88:	4b04      	ldr	r3, [pc, #16]	; (8009e9c <__assert_func+0x38>)
 8009e8a:	461c      	mov	r4, r3
 8009e8c:	e7f3      	b.n	8009e76 <__assert_func+0x12>
 8009e8e:	bf00      	nop
 8009e90:	20000048 	.word	0x20000048
 8009e94:	0800c29d 	.word	0x0800c29d
 8009e98:	0800c2aa 	.word	0x0800c2aa
 8009e9c:	0800c2d8 	.word	0x0800c2d8

08009ea0 <fiprintf>:
 8009ea0:	b40e      	push	{r1, r2, r3}
 8009ea2:	b503      	push	{r0, r1, lr}
 8009ea4:	4601      	mov	r1, r0
 8009ea6:	ab03      	add	r3, sp, #12
 8009ea8:	4805      	ldr	r0, [pc, #20]	; (8009ec0 <fiprintf+0x20>)
 8009eaa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009eae:	6800      	ldr	r0, [r0, #0]
 8009eb0:	9301      	str	r3, [sp, #4]
 8009eb2:	f000 f885 	bl	8009fc0 <_vfiprintf_r>
 8009eb6:	b002      	add	sp, #8
 8009eb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009ebc:	b003      	add	sp, #12
 8009ebe:	4770      	bx	lr
 8009ec0:	20000048 	.word	0x20000048

08009ec4 <memmove>:
 8009ec4:	4288      	cmp	r0, r1
 8009ec6:	b510      	push	{r4, lr}
 8009ec8:	eb01 0402 	add.w	r4, r1, r2
 8009ecc:	d902      	bls.n	8009ed4 <memmove+0x10>
 8009ece:	4284      	cmp	r4, r0
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	d807      	bhi.n	8009ee4 <memmove+0x20>
 8009ed4:	1e43      	subs	r3, r0, #1
 8009ed6:	42a1      	cmp	r1, r4
 8009ed8:	d008      	beq.n	8009eec <memmove+0x28>
 8009eda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009ede:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009ee2:	e7f8      	b.n	8009ed6 <memmove+0x12>
 8009ee4:	4402      	add	r2, r0
 8009ee6:	4601      	mov	r1, r0
 8009ee8:	428a      	cmp	r2, r1
 8009eea:	d100      	bne.n	8009eee <memmove+0x2a>
 8009eec:	bd10      	pop	{r4, pc}
 8009eee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009ef2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009ef6:	e7f7      	b.n	8009ee8 <memmove+0x24>

08009ef8 <__malloc_lock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_lock+0x8>)
 8009efa:	f000 bc11 	b.w	800a720 <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	200003c4 	.word	0x200003c4

08009f04 <__malloc_unlock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_unlock+0x8>)
 8009f06:	f000 bc0c 	b.w	800a722 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	200003c4 	.word	0x200003c4

08009f10 <_realloc_r>:
 8009f10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f14:	4680      	mov	r8, r0
 8009f16:	4614      	mov	r4, r2
 8009f18:	460e      	mov	r6, r1
 8009f1a:	b921      	cbnz	r1, 8009f26 <_realloc_r+0x16>
 8009f1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009f20:	4611      	mov	r1, r2
 8009f22:	f7ff bd93 	b.w	8009a4c <_malloc_r>
 8009f26:	b92a      	cbnz	r2, 8009f34 <_realloc_r+0x24>
 8009f28:	f7ff fd24 	bl	8009974 <_free_r>
 8009f2c:	4625      	mov	r5, r4
 8009f2e:	4628      	mov	r0, r5
 8009f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f34:	f000 fc5c 	bl	800a7f0 <_malloc_usable_size_r>
 8009f38:	4284      	cmp	r4, r0
 8009f3a:	4607      	mov	r7, r0
 8009f3c:	d802      	bhi.n	8009f44 <_realloc_r+0x34>
 8009f3e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009f42:	d812      	bhi.n	8009f6a <_realloc_r+0x5a>
 8009f44:	4621      	mov	r1, r4
 8009f46:	4640      	mov	r0, r8
 8009f48:	f7ff fd80 	bl	8009a4c <_malloc_r>
 8009f4c:	4605      	mov	r5, r0
 8009f4e:	2800      	cmp	r0, #0
 8009f50:	d0ed      	beq.n	8009f2e <_realloc_r+0x1e>
 8009f52:	42bc      	cmp	r4, r7
 8009f54:	4622      	mov	r2, r4
 8009f56:	4631      	mov	r1, r6
 8009f58:	bf28      	it	cs
 8009f5a:	463a      	movcs	r2, r7
 8009f5c:	f7ff f824 	bl	8008fa8 <memcpy>
 8009f60:	4631      	mov	r1, r6
 8009f62:	4640      	mov	r0, r8
 8009f64:	f7ff fd06 	bl	8009974 <_free_r>
 8009f68:	e7e1      	b.n	8009f2e <_realloc_r+0x1e>
 8009f6a:	4635      	mov	r5, r6
 8009f6c:	e7df      	b.n	8009f2e <_realloc_r+0x1e>

08009f6e <__sfputc_r>:
 8009f6e:	6893      	ldr	r3, [r2, #8]
 8009f70:	3b01      	subs	r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	b410      	push	{r4}
 8009f76:	6093      	str	r3, [r2, #8]
 8009f78:	da08      	bge.n	8009f8c <__sfputc_r+0x1e>
 8009f7a:	6994      	ldr	r4, [r2, #24]
 8009f7c:	42a3      	cmp	r3, r4
 8009f7e:	db01      	blt.n	8009f84 <__sfputc_r+0x16>
 8009f80:	290a      	cmp	r1, #10
 8009f82:	d103      	bne.n	8009f8c <__sfputc_r+0x1e>
 8009f84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f88:	f000 b94a 	b.w	800a220 <__swbuf_r>
 8009f8c:	6813      	ldr	r3, [r2, #0]
 8009f8e:	1c58      	adds	r0, r3, #1
 8009f90:	6010      	str	r0, [r2, #0]
 8009f92:	7019      	strb	r1, [r3, #0]
 8009f94:	4608      	mov	r0, r1
 8009f96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f9a:	4770      	bx	lr

08009f9c <__sfputs_r>:
 8009f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	460f      	mov	r7, r1
 8009fa2:	4614      	mov	r4, r2
 8009fa4:	18d5      	adds	r5, r2, r3
 8009fa6:	42ac      	cmp	r4, r5
 8009fa8:	d101      	bne.n	8009fae <__sfputs_r+0x12>
 8009faa:	2000      	movs	r0, #0
 8009fac:	e007      	b.n	8009fbe <__sfputs_r+0x22>
 8009fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fb2:	463a      	mov	r2, r7
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	f7ff ffda 	bl	8009f6e <__sfputc_r>
 8009fba:	1c43      	adds	r3, r0, #1
 8009fbc:	d1f3      	bne.n	8009fa6 <__sfputs_r+0xa>
 8009fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009fc0 <_vfiprintf_r>:
 8009fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	460d      	mov	r5, r1
 8009fc6:	b09d      	sub	sp, #116	; 0x74
 8009fc8:	4614      	mov	r4, r2
 8009fca:	4698      	mov	r8, r3
 8009fcc:	4606      	mov	r6, r0
 8009fce:	b118      	cbz	r0, 8009fd8 <_vfiprintf_r+0x18>
 8009fd0:	6983      	ldr	r3, [r0, #24]
 8009fd2:	b90b      	cbnz	r3, 8009fd8 <_vfiprintf_r+0x18>
 8009fd4:	f000 fb06 	bl	800a5e4 <__sinit>
 8009fd8:	4b89      	ldr	r3, [pc, #548]	; (800a200 <_vfiprintf_r+0x240>)
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	d11b      	bne.n	800a016 <_vfiprintf_r+0x56>
 8009fde:	6875      	ldr	r5, [r6, #4]
 8009fe0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fe2:	07d9      	lsls	r1, r3, #31
 8009fe4:	d405      	bmi.n	8009ff2 <_vfiprintf_r+0x32>
 8009fe6:	89ab      	ldrh	r3, [r5, #12]
 8009fe8:	059a      	lsls	r2, r3, #22
 8009fea:	d402      	bmi.n	8009ff2 <_vfiprintf_r+0x32>
 8009fec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fee:	f000 fb97 	bl	800a720 <__retarget_lock_acquire_recursive>
 8009ff2:	89ab      	ldrh	r3, [r5, #12]
 8009ff4:	071b      	lsls	r3, r3, #28
 8009ff6:	d501      	bpl.n	8009ffc <_vfiprintf_r+0x3c>
 8009ff8:	692b      	ldr	r3, [r5, #16]
 8009ffa:	b9eb      	cbnz	r3, 800a038 <_vfiprintf_r+0x78>
 8009ffc:	4629      	mov	r1, r5
 8009ffe:	4630      	mov	r0, r6
 800a000:	f000 f960 	bl	800a2c4 <__swsetup_r>
 800a004:	b1c0      	cbz	r0, 800a038 <_vfiprintf_r+0x78>
 800a006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a008:	07dc      	lsls	r4, r3, #31
 800a00a:	d50e      	bpl.n	800a02a <_vfiprintf_r+0x6a>
 800a00c:	f04f 30ff 	mov.w	r0, #4294967295
 800a010:	b01d      	add	sp, #116	; 0x74
 800a012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a016:	4b7b      	ldr	r3, [pc, #492]	; (800a204 <_vfiprintf_r+0x244>)
 800a018:	429d      	cmp	r5, r3
 800a01a:	d101      	bne.n	800a020 <_vfiprintf_r+0x60>
 800a01c:	68b5      	ldr	r5, [r6, #8]
 800a01e:	e7df      	b.n	8009fe0 <_vfiprintf_r+0x20>
 800a020:	4b79      	ldr	r3, [pc, #484]	; (800a208 <_vfiprintf_r+0x248>)
 800a022:	429d      	cmp	r5, r3
 800a024:	bf08      	it	eq
 800a026:	68f5      	ldreq	r5, [r6, #12]
 800a028:	e7da      	b.n	8009fe0 <_vfiprintf_r+0x20>
 800a02a:	89ab      	ldrh	r3, [r5, #12]
 800a02c:	0598      	lsls	r0, r3, #22
 800a02e:	d4ed      	bmi.n	800a00c <_vfiprintf_r+0x4c>
 800a030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a032:	f000 fb76 	bl	800a722 <__retarget_lock_release_recursive>
 800a036:	e7e9      	b.n	800a00c <_vfiprintf_r+0x4c>
 800a038:	2300      	movs	r3, #0
 800a03a:	9309      	str	r3, [sp, #36]	; 0x24
 800a03c:	2320      	movs	r3, #32
 800a03e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a042:	f8cd 800c 	str.w	r8, [sp, #12]
 800a046:	2330      	movs	r3, #48	; 0x30
 800a048:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a20c <_vfiprintf_r+0x24c>
 800a04c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a050:	f04f 0901 	mov.w	r9, #1
 800a054:	4623      	mov	r3, r4
 800a056:	469a      	mov	sl, r3
 800a058:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a05c:	b10a      	cbz	r2, 800a062 <_vfiprintf_r+0xa2>
 800a05e:	2a25      	cmp	r2, #37	; 0x25
 800a060:	d1f9      	bne.n	800a056 <_vfiprintf_r+0x96>
 800a062:	ebba 0b04 	subs.w	fp, sl, r4
 800a066:	d00b      	beq.n	800a080 <_vfiprintf_r+0xc0>
 800a068:	465b      	mov	r3, fp
 800a06a:	4622      	mov	r2, r4
 800a06c:	4629      	mov	r1, r5
 800a06e:	4630      	mov	r0, r6
 800a070:	f7ff ff94 	bl	8009f9c <__sfputs_r>
 800a074:	3001      	adds	r0, #1
 800a076:	f000 80aa 	beq.w	800a1ce <_vfiprintf_r+0x20e>
 800a07a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a07c:	445a      	add	r2, fp
 800a07e:	9209      	str	r2, [sp, #36]	; 0x24
 800a080:	f89a 3000 	ldrb.w	r3, [sl]
 800a084:	2b00      	cmp	r3, #0
 800a086:	f000 80a2 	beq.w	800a1ce <_vfiprintf_r+0x20e>
 800a08a:	2300      	movs	r3, #0
 800a08c:	f04f 32ff 	mov.w	r2, #4294967295
 800a090:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a094:	f10a 0a01 	add.w	sl, sl, #1
 800a098:	9304      	str	r3, [sp, #16]
 800a09a:	9307      	str	r3, [sp, #28]
 800a09c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0a0:	931a      	str	r3, [sp, #104]	; 0x68
 800a0a2:	4654      	mov	r4, sl
 800a0a4:	2205      	movs	r2, #5
 800a0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a0aa:	4858      	ldr	r0, [pc, #352]	; (800a20c <_vfiprintf_r+0x24c>)
 800a0ac:	f7f6 f898 	bl	80001e0 <memchr>
 800a0b0:	9a04      	ldr	r2, [sp, #16]
 800a0b2:	b9d8      	cbnz	r0, 800a0ec <_vfiprintf_r+0x12c>
 800a0b4:	06d1      	lsls	r1, r2, #27
 800a0b6:	bf44      	itt	mi
 800a0b8:	2320      	movmi	r3, #32
 800a0ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0be:	0713      	lsls	r3, r2, #28
 800a0c0:	bf44      	itt	mi
 800a0c2:	232b      	movmi	r3, #43	; 0x2b
 800a0c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0c8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0cc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0ce:	d015      	beq.n	800a0fc <_vfiprintf_r+0x13c>
 800a0d0:	9a07      	ldr	r2, [sp, #28]
 800a0d2:	4654      	mov	r4, sl
 800a0d4:	2000      	movs	r0, #0
 800a0d6:	f04f 0c0a 	mov.w	ip, #10
 800a0da:	4621      	mov	r1, r4
 800a0dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0e0:	3b30      	subs	r3, #48	; 0x30
 800a0e2:	2b09      	cmp	r3, #9
 800a0e4:	d94e      	bls.n	800a184 <_vfiprintf_r+0x1c4>
 800a0e6:	b1b0      	cbz	r0, 800a116 <_vfiprintf_r+0x156>
 800a0e8:	9207      	str	r2, [sp, #28]
 800a0ea:	e014      	b.n	800a116 <_vfiprintf_r+0x156>
 800a0ec:	eba0 0308 	sub.w	r3, r0, r8
 800a0f0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0f4:	4313      	orrs	r3, r2
 800a0f6:	9304      	str	r3, [sp, #16]
 800a0f8:	46a2      	mov	sl, r4
 800a0fa:	e7d2      	b.n	800a0a2 <_vfiprintf_r+0xe2>
 800a0fc:	9b03      	ldr	r3, [sp, #12]
 800a0fe:	1d19      	adds	r1, r3, #4
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	9103      	str	r1, [sp, #12]
 800a104:	2b00      	cmp	r3, #0
 800a106:	bfbb      	ittet	lt
 800a108:	425b      	neglt	r3, r3
 800a10a:	f042 0202 	orrlt.w	r2, r2, #2
 800a10e:	9307      	strge	r3, [sp, #28]
 800a110:	9307      	strlt	r3, [sp, #28]
 800a112:	bfb8      	it	lt
 800a114:	9204      	strlt	r2, [sp, #16]
 800a116:	7823      	ldrb	r3, [r4, #0]
 800a118:	2b2e      	cmp	r3, #46	; 0x2e
 800a11a:	d10c      	bne.n	800a136 <_vfiprintf_r+0x176>
 800a11c:	7863      	ldrb	r3, [r4, #1]
 800a11e:	2b2a      	cmp	r3, #42	; 0x2a
 800a120:	d135      	bne.n	800a18e <_vfiprintf_r+0x1ce>
 800a122:	9b03      	ldr	r3, [sp, #12]
 800a124:	1d1a      	adds	r2, r3, #4
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	9203      	str	r2, [sp, #12]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfb8      	it	lt
 800a12e:	f04f 33ff 	movlt.w	r3, #4294967295
 800a132:	3402      	adds	r4, #2
 800a134:	9305      	str	r3, [sp, #20]
 800a136:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a21c <_vfiprintf_r+0x25c>
 800a13a:	7821      	ldrb	r1, [r4, #0]
 800a13c:	2203      	movs	r2, #3
 800a13e:	4650      	mov	r0, sl
 800a140:	f7f6 f84e 	bl	80001e0 <memchr>
 800a144:	b140      	cbz	r0, 800a158 <_vfiprintf_r+0x198>
 800a146:	2340      	movs	r3, #64	; 0x40
 800a148:	eba0 000a 	sub.w	r0, r0, sl
 800a14c:	fa03 f000 	lsl.w	r0, r3, r0
 800a150:	9b04      	ldr	r3, [sp, #16]
 800a152:	4303      	orrs	r3, r0
 800a154:	3401      	adds	r4, #1
 800a156:	9304      	str	r3, [sp, #16]
 800a158:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a15c:	482c      	ldr	r0, [pc, #176]	; (800a210 <_vfiprintf_r+0x250>)
 800a15e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a162:	2206      	movs	r2, #6
 800a164:	f7f6 f83c 	bl	80001e0 <memchr>
 800a168:	2800      	cmp	r0, #0
 800a16a:	d03f      	beq.n	800a1ec <_vfiprintf_r+0x22c>
 800a16c:	4b29      	ldr	r3, [pc, #164]	; (800a214 <_vfiprintf_r+0x254>)
 800a16e:	bb1b      	cbnz	r3, 800a1b8 <_vfiprintf_r+0x1f8>
 800a170:	9b03      	ldr	r3, [sp, #12]
 800a172:	3307      	adds	r3, #7
 800a174:	f023 0307 	bic.w	r3, r3, #7
 800a178:	3308      	adds	r3, #8
 800a17a:	9303      	str	r3, [sp, #12]
 800a17c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a17e:	443b      	add	r3, r7
 800a180:	9309      	str	r3, [sp, #36]	; 0x24
 800a182:	e767      	b.n	800a054 <_vfiprintf_r+0x94>
 800a184:	fb0c 3202 	mla	r2, ip, r2, r3
 800a188:	460c      	mov	r4, r1
 800a18a:	2001      	movs	r0, #1
 800a18c:	e7a5      	b.n	800a0da <_vfiprintf_r+0x11a>
 800a18e:	2300      	movs	r3, #0
 800a190:	3401      	adds	r4, #1
 800a192:	9305      	str	r3, [sp, #20]
 800a194:	4619      	mov	r1, r3
 800a196:	f04f 0c0a 	mov.w	ip, #10
 800a19a:	4620      	mov	r0, r4
 800a19c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1a0:	3a30      	subs	r2, #48	; 0x30
 800a1a2:	2a09      	cmp	r2, #9
 800a1a4:	d903      	bls.n	800a1ae <_vfiprintf_r+0x1ee>
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0c5      	beq.n	800a136 <_vfiprintf_r+0x176>
 800a1aa:	9105      	str	r1, [sp, #20]
 800a1ac:	e7c3      	b.n	800a136 <_vfiprintf_r+0x176>
 800a1ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1b2:	4604      	mov	r4, r0
 800a1b4:	2301      	movs	r3, #1
 800a1b6:	e7f0      	b.n	800a19a <_vfiprintf_r+0x1da>
 800a1b8:	ab03      	add	r3, sp, #12
 800a1ba:	9300      	str	r3, [sp, #0]
 800a1bc:	462a      	mov	r2, r5
 800a1be:	4b16      	ldr	r3, [pc, #88]	; (800a218 <_vfiprintf_r+0x258>)
 800a1c0:	a904      	add	r1, sp, #16
 800a1c2:	4630      	mov	r0, r6
 800a1c4:	f7fc f83a 	bl	800623c <_printf_float>
 800a1c8:	4607      	mov	r7, r0
 800a1ca:	1c78      	adds	r0, r7, #1
 800a1cc:	d1d6      	bne.n	800a17c <_vfiprintf_r+0x1bc>
 800a1ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1d0:	07d9      	lsls	r1, r3, #31
 800a1d2:	d405      	bmi.n	800a1e0 <_vfiprintf_r+0x220>
 800a1d4:	89ab      	ldrh	r3, [r5, #12]
 800a1d6:	059a      	lsls	r2, r3, #22
 800a1d8:	d402      	bmi.n	800a1e0 <_vfiprintf_r+0x220>
 800a1da:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1dc:	f000 faa1 	bl	800a722 <__retarget_lock_release_recursive>
 800a1e0:	89ab      	ldrh	r3, [r5, #12]
 800a1e2:	065b      	lsls	r3, r3, #25
 800a1e4:	f53f af12 	bmi.w	800a00c <_vfiprintf_r+0x4c>
 800a1e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1ea:	e711      	b.n	800a010 <_vfiprintf_r+0x50>
 800a1ec:	ab03      	add	r3, sp, #12
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	462a      	mov	r2, r5
 800a1f2:	4b09      	ldr	r3, [pc, #36]	; (800a218 <_vfiprintf_r+0x258>)
 800a1f4:	a904      	add	r1, sp, #16
 800a1f6:	4630      	mov	r0, r6
 800a1f8:	f7fc fac4 	bl	8006784 <_printf_i>
 800a1fc:	e7e4      	b.n	800a1c8 <_vfiprintf_r+0x208>
 800a1fe:	bf00      	nop
 800a200:	0800c2fc 	.word	0x0800c2fc
 800a204:	0800c31c 	.word	0x0800c31c
 800a208:	0800c2dc 	.word	0x0800c2dc
 800a20c:	0800c28c 	.word	0x0800c28c
 800a210:	0800c296 	.word	0x0800c296
 800a214:	0800623d 	.word	0x0800623d
 800a218:	08009f9d 	.word	0x08009f9d
 800a21c:	0800c292 	.word	0x0800c292

0800a220 <__swbuf_r>:
 800a220:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a222:	460e      	mov	r6, r1
 800a224:	4614      	mov	r4, r2
 800a226:	4605      	mov	r5, r0
 800a228:	b118      	cbz	r0, 800a232 <__swbuf_r+0x12>
 800a22a:	6983      	ldr	r3, [r0, #24]
 800a22c:	b90b      	cbnz	r3, 800a232 <__swbuf_r+0x12>
 800a22e:	f000 f9d9 	bl	800a5e4 <__sinit>
 800a232:	4b21      	ldr	r3, [pc, #132]	; (800a2b8 <__swbuf_r+0x98>)
 800a234:	429c      	cmp	r4, r3
 800a236:	d12b      	bne.n	800a290 <__swbuf_r+0x70>
 800a238:	686c      	ldr	r4, [r5, #4]
 800a23a:	69a3      	ldr	r3, [r4, #24]
 800a23c:	60a3      	str	r3, [r4, #8]
 800a23e:	89a3      	ldrh	r3, [r4, #12]
 800a240:	071a      	lsls	r2, r3, #28
 800a242:	d52f      	bpl.n	800a2a4 <__swbuf_r+0x84>
 800a244:	6923      	ldr	r3, [r4, #16]
 800a246:	b36b      	cbz	r3, 800a2a4 <__swbuf_r+0x84>
 800a248:	6923      	ldr	r3, [r4, #16]
 800a24a:	6820      	ldr	r0, [r4, #0]
 800a24c:	1ac0      	subs	r0, r0, r3
 800a24e:	6963      	ldr	r3, [r4, #20]
 800a250:	b2f6      	uxtb	r6, r6
 800a252:	4283      	cmp	r3, r0
 800a254:	4637      	mov	r7, r6
 800a256:	dc04      	bgt.n	800a262 <__swbuf_r+0x42>
 800a258:	4621      	mov	r1, r4
 800a25a:	4628      	mov	r0, r5
 800a25c:	f000 f92e 	bl	800a4bc <_fflush_r>
 800a260:	bb30      	cbnz	r0, 800a2b0 <__swbuf_r+0x90>
 800a262:	68a3      	ldr	r3, [r4, #8]
 800a264:	3b01      	subs	r3, #1
 800a266:	60a3      	str	r3, [r4, #8]
 800a268:	6823      	ldr	r3, [r4, #0]
 800a26a:	1c5a      	adds	r2, r3, #1
 800a26c:	6022      	str	r2, [r4, #0]
 800a26e:	701e      	strb	r6, [r3, #0]
 800a270:	6963      	ldr	r3, [r4, #20]
 800a272:	3001      	adds	r0, #1
 800a274:	4283      	cmp	r3, r0
 800a276:	d004      	beq.n	800a282 <__swbuf_r+0x62>
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	07db      	lsls	r3, r3, #31
 800a27c:	d506      	bpl.n	800a28c <__swbuf_r+0x6c>
 800a27e:	2e0a      	cmp	r6, #10
 800a280:	d104      	bne.n	800a28c <__swbuf_r+0x6c>
 800a282:	4621      	mov	r1, r4
 800a284:	4628      	mov	r0, r5
 800a286:	f000 f919 	bl	800a4bc <_fflush_r>
 800a28a:	b988      	cbnz	r0, 800a2b0 <__swbuf_r+0x90>
 800a28c:	4638      	mov	r0, r7
 800a28e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a290:	4b0a      	ldr	r3, [pc, #40]	; (800a2bc <__swbuf_r+0x9c>)
 800a292:	429c      	cmp	r4, r3
 800a294:	d101      	bne.n	800a29a <__swbuf_r+0x7a>
 800a296:	68ac      	ldr	r4, [r5, #8]
 800a298:	e7cf      	b.n	800a23a <__swbuf_r+0x1a>
 800a29a:	4b09      	ldr	r3, [pc, #36]	; (800a2c0 <__swbuf_r+0xa0>)
 800a29c:	429c      	cmp	r4, r3
 800a29e:	bf08      	it	eq
 800a2a0:	68ec      	ldreq	r4, [r5, #12]
 800a2a2:	e7ca      	b.n	800a23a <__swbuf_r+0x1a>
 800a2a4:	4621      	mov	r1, r4
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	f000 f80c 	bl	800a2c4 <__swsetup_r>
 800a2ac:	2800      	cmp	r0, #0
 800a2ae:	d0cb      	beq.n	800a248 <__swbuf_r+0x28>
 800a2b0:	f04f 37ff 	mov.w	r7, #4294967295
 800a2b4:	e7ea      	b.n	800a28c <__swbuf_r+0x6c>
 800a2b6:	bf00      	nop
 800a2b8:	0800c2fc 	.word	0x0800c2fc
 800a2bc:	0800c31c 	.word	0x0800c31c
 800a2c0:	0800c2dc 	.word	0x0800c2dc

0800a2c4 <__swsetup_r>:
 800a2c4:	4b32      	ldr	r3, [pc, #200]	; (800a390 <__swsetup_r+0xcc>)
 800a2c6:	b570      	push	{r4, r5, r6, lr}
 800a2c8:	681d      	ldr	r5, [r3, #0]
 800a2ca:	4606      	mov	r6, r0
 800a2cc:	460c      	mov	r4, r1
 800a2ce:	b125      	cbz	r5, 800a2da <__swsetup_r+0x16>
 800a2d0:	69ab      	ldr	r3, [r5, #24]
 800a2d2:	b913      	cbnz	r3, 800a2da <__swsetup_r+0x16>
 800a2d4:	4628      	mov	r0, r5
 800a2d6:	f000 f985 	bl	800a5e4 <__sinit>
 800a2da:	4b2e      	ldr	r3, [pc, #184]	; (800a394 <__swsetup_r+0xd0>)
 800a2dc:	429c      	cmp	r4, r3
 800a2de:	d10f      	bne.n	800a300 <__swsetup_r+0x3c>
 800a2e0:	686c      	ldr	r4, [r5, #4]
 800a2e2:	89a3      	ldrh	r3, [r4, #12]
 800a2e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a2e8:	0719      	lsls	r1, r3, #28
 800a2ea:	d42c      	bmi.n	800a346 <__swsetup_r+0x82>
 800a2ec:	06dd      	lsls	r5, r3, #27
 800a2ee:	d411      	bmi.n	800a314 <__swsetup_r+0x50>
 800a2f0:	2309      	movs	r3, #9
 800a2f2:	6033      	str	r3, [r6, #0]
 800a2f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a2f8:	81a3      	strh	r3, [r4, #12]
 800a2fa:	f04f 30ff 	mov.w	r0, #4294967295
 800a2fe:	e03e      	b.n	800a37e <__swsetup_r+0xba>
 800a300:	4b25      	ldr	r3, [pc, #148]	; (800a398 <__swsetup_r+0xd4>)
 800a302:	429c      	cmp	r4, r3
 800a304:	d101      	bne.n	800a30a <__swsetup_r+0x46>
 800a306:	68ac      	ldr	r4, [r5, #8]
 800a308:	e7eb      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a30a:	4b24      	ldr	r3, [pc, #144]	; (800a39c <__swsetup_r+0xd8>)
 800a30c:	429c      	cmp	r4, r3
 800a30e:	bf08      	it	eq
 800a310:	68ec      	ldreq	r4, [r5, #12]
 800a312:	e7e6      	b.n	800a2e2 <__swsetup_r+0x1e>
 800a314:	0758      	lsls	r0, r3, #29
 800a316:	d512      	bpl.n	800a33e <__swsetup_r+0x7a>
 800a318:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a31a:	b141      	cbz	r1, 800a32e <__swsetup_r+0x6a>
 800a31c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a320:	4299      	cmp	r1, r3
 800a322:	d002      	beq.n	800a32a <__swsetup_r+0x66>
 800a324:	4630      	mov	r0, r6
 800a326:	f7ff fb25 	bl	8009974 <_free_r>
 800a32a:	2300      	movs	r3, #0
 800a32c:	6363      	str	r3, [r4, #52]	; 0x34
 800a32e:	89a3      	ldrh	r3, [r4, #12]
 800a330:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a334:	81a3      	strh	r3, [r4, #12]
 800a336:	2300      	movs	r3, #0
 800a338:	6063      	str	r3, [r4, #4]
 800a33a:	6923      	ldr	r3, [r4, #16]
 800a33c:	6023      	str	r3, [r4, #0]
 800a33e:	89a3      	ldrh	r3, [r4, #12]
 800a340:	f043 0308 	orr.w	r3, r3, #8
 800a344:	81a3      	strh	r3, [r4, #12]
 800a346:	6923      	ldr	r3, [r4, #16]
 800a348:	b94b      	cbnz	r3, 800a35e <__swsetup_r+0x9a>
 800a34a:	89a3      	ldrh	r3, [r4, #12]
 800a34c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a350:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a354:	d003      	beq.n	800a35e <__swsetup_r+0x9a>
 800a356:	4621      	mov	r1, r4
 800a358:	4630      	mov	r0, r6
 800a35a:	f000 fa09 	bl	800a770 <__smakebuf_r>
 800a35e:	89a0      	ldrh	r0, [r4, #12]
 800a360:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a364:	f010 0301 	ands.w	r3, r0, #1
 800a368:	d00a      	beq.n	800a380 <__swsetup_r+0xbc>
 800a36a:	2300      	movs	r3, #0
 800a36c:	60a3      	str	r3, [r4, #8]
 800a36e:	6963      	ldr	r3, [r4, #20]
 800a370:	425b      	negs	r3, r3
 800a372:	61a3      	str	r3, [r4, #24]
 800a374:	6923      	ldr	r3, [r4, #16]
 800a376:	b943      	cbnz	r3, 800a38a <__swsetup_r+0xc6>
 800a378:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a37c:	d1ba      	bne.n	800a2f4 <__swsetup_r+0x30>
 800a37e:	bd70      	pop	{r4, r5, r6, pc}
 800a380:	0781      	lsls	r1, r0, #30
 800a382:	bf58      	it	pl
 800a384:	6963      	ldrpl	r3, [r4, #20]
 800a386:	60a3      	str	r3, [r4, #8]
 800a388:	e7f4      	b.n	800a374 <__swsetup_r+0xb0>
 800a38a:	2000      	movs	r0, #0
 800a38c:	e7f7      	b.n	800a37e <__swsetup_r+0xba>
 800a38e:	bf00      	nop
 800a390:	20000048 	.word	0x20000048
 800a394:	0800c2fc 	.word	0x0800c2fc
 800a398:	0800c31c 	.word	0x0800c31c
 800a39c:	0800c2dc 	.word	0x0800c2dc

0800a3a0 <abort>:
 800a3a0:	b508      	push	{r3, lr}
 800a3a2:	2006      	movs	r0, #6
 800a3a4:	f000 fa54 	bl	800a850 <raise>
 800a3a8:	2001      	movs	r0, #1
 800a3aa:	f7f7 fb9b 	bl	8001ae4 <_exit>
	...

0800a3b0 <__sflush_r>:
 800a3b0:	898a      	ldrh	r2, [r1, #12]
 800a3b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3b6:	4605      	mov	r5, r0
 800a3b8:	0710      	lsls	r0, r2, #28
 800a3ba:	460c      	mov	r4, r1
 800a3bc:	d458      	bmi.n	800a470 <__sflush_r+0xc0>
 800a3be:	684b      	ldr	r3, [r1, #4]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	dc05      	bgt.n	800a3d0 <__sflush_r+0x20>
 800a3c4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	dc02      	bgt.n	800a3d0 <__sflush_r+0x20>
 800a3ca:	2000      	movs	r0, #0
 800a3cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3d0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3d2:	2e00      	cmp	r6, #0
 800a3d4:	d0f9      	beq.n	800a3ca <__sflush_r+0x1a>
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a3dc:	682f      	ldr	r7, [r5, #0]
 800a3de:	602b      	str	r3, [r5, #0]
 800a3e0:	d032      	beq.n	800a448 <__sflush_r+0x98>
 800a3e2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	075a      	lsls	r2, r3, #29
 800a3e8:	d505      	bpl.n	800a3f6 <__sflush_r+0x46>
 800a3ea:	6863      	ldr	r3, [r4, #4]
 800a3ec:	1ac0      	subs	r0, r0, r3
 800a3ee:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a3f0:	b10b      	cbz	r3, 800a3f6 <__sflush_r+0x46>
 800a3f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a3f4:	1ac0      	subs	r0, r0, r3
 800a3f6:	2300      	movs	r3, #0
 800a3f8:	4602      	mov	r2, r0
 800a3fa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a3fc:	6a21      	ldr	r1, [r4, #32]
 800a3fe:	4628      	mov	r0, r5
 800a400:	47b0      	blx	r6
 800a402:	1c43      	adds	r3, r0, #1
 800a404:	89a3      	ldrh	r3, [r4, #12]
 800a406:	d106      	bne.n	800a416 <__sflush_r+0x66>
 800a408:	6829      	ldr	r1, [r5, #0]
 800a40a:	291d      	cmp	r1, #29
 800a40c:	d82c      	bhi.n	800a468 <__sflush_r+0xb8>
 800a40e:	4a2a      	ldr	r2, [pc, #168]	; (800a4b8 <__sflush_r+0x108>)
 800a410:	40ca      	lsrs	r2, r1
 800a412:	07d6      	lsls	r6, r2, #31
 800a414:	d528      	bpl.n	800a468 <__sflush_r+0xb8>
 800a416:	2200      	movs	r2, #0
 800a418:	6062      	str	r2, [r4, #4]
 800a41a:	04d9      	lsls	r1, r3, #19
 800a41c:	6922      	ldr	r2, [r4, #16]
 800a41e:	6022      	str	r2, [r4, #0]
 800a420:	d504      	bpl.n	800a42c <__sflush_r+0x7c>
 800a422:	1c42      	adds	r2, r0, #1
 800a424:	d101      	bne.n	800a42a <__sflush_r+0x7a>
 800a426:	682b      	ldr	r3, [r5, #0]
 800a428:	b903      	cbnz	r3, 800a42c <__sflush_r+0x7c>
 800a42a:	6560      	str	r0, [r4, #84]	; 0x54
 800a42c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a42e:	602f      	str	r7, [r5, #0]
 800a430:	2900      	cmp	r1, #0
 800a432:	d0ca      	beq.n	800a3ca <__sflush_r+0x1a>
 800a434:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a438:	4299      	cmp	r1, r3
 800a43a:	d002      	beq.n	800a442 <__sflush_r+0x92>
 800a43c:	4628      	mov	r0, r5
 800a43e:	f7ff fa99 	bl	8009974 <_free_r>
 800a442:	2000      	movs	r0, #0
 800a444:	6360      	str	r0, [r4, #52]	; 0x34
 800a446:	e7c1      	b.n	800a3cc <__sflush_r+0x1c>
 800a448:	6a21      	ldr	r1, [r4, #32]
 800a44a:	2301      	movs	r3, #1
 800a44c:	4628      	mov	r0, r5
 800a44e:	47b0      	blx	r6
 800a450:	1c41      	adds	r1, r0, #1
 800a452:	d1c7      	bne.n	800a3e4 <__sflush_r+0x34>
 800a454:	682b      	ldr	r3, [r5, #0]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d0c4      	beq.n	800a3e4 <__sflush_r+0x34>
 800a45a:	2b1d      	cmp	r3, #29
 800a45c:	d001      	beq.n	800a462 <__sflush_r+0xb2>
 800a45e:	2b16      	cmp	r3, #22
 800a460:	d101      	bne.n	800a466 <__sflush_r+0xb6>
 800a462:	602f      	str	r7, [r5, #0]
 800a464:	e7b1      	b.n	800a3ca <__sflush_r+0x1a>
 800a466:	89a3      	ldrh	r3, [r4, #12]
 800a468:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a46c:	81a3      	strh	r3, [r4, #12]
 800a46e:	e7ad      	b.n	800a3cc <__sflush_r+0x1c>
 800a470:	690f      	ldr	r7, [r1, #16]
 800a472:	2f00      	cmp	r7, #0
 800a474:	d0a9      	beq.n	800a3ca <__sflush_r+0x1a>
 800a476:	0793      	lsls	r3, r2, #30
 800a478:	680e      	ldr	r6, [r1, #0]
 800a47a:	bf08      	it	eq
 800a47c:	694b      	ldreq	r3, [r1, #20]
 800a47e:	600f      	str	r7, [r1, #0]
 800a480:	bf18      	it	ne
 800a482:	2300      	movne	r3, #0
 800a484:	eba6 0807 	sub.w	r8, r6, r7
 800a488:	608b      	str	r3, [r1, #8]
 800a48a:	f1b8 0f00 	cmp.w	r8, #0
 800a48e:	dd9c      	ble.n	800a3ca <__sflush_r+0x1a>
 800a490:	6a21      	ldr	r1, [r4, #32]
 800a492:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a494:	4643      	mov	r3, r8
 800a496:	463a      	mov	r2, r7
 800a498:	4628      	mov	r0, r5
 800a49a:	47b0      	blx	r6
 800a49c:	2800      	cmp	r0, #0
 800a49e:	dc06      	bgt.n	800a4ae <__sflush_r+0xfe>
 800a4a0:	89a3      	ldrh	r3, [r4, #12]
 800a4a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4a6:	81a3      	strh	r3, [r4, #12]
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e78e      	b.n	800a3cc <__sflush_r+0x1c>
 800a4ae:	4407      	add	r7, r0
 800a4b0:	eba8 0800 	sub.w	r8, r8, r0
 800a4b4:	e7e9      	b.n	800a48a <__sflush_r+0xda>
 800a4b6:	bf00      	nop
 800a4b8:	20400001 	.word	0x20400001

0800a4bc <_fflush_r>:
 800a4bc:	b538      	push	{r3, r4, r5, lr}
 800a4be:	690b      	ldr	r3, [r1, #16]
 800a4c0:	4605      	mov	r5, r0
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	b913      	cbnz	r3, 800a4cc <_fflush_r+0x10>
 800a4c6:	2500      	movs	r5, #0
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	bd38      	pop	{r3, r4, r5, pc}
 800a4cc:	b118      	cbz	r0, 800a4d6 <_fflush_r+0x1a>
 800a4ce:	6983      	ldr	r3, [r0, #24]
 800a4d0:	b90b      	cbnz	r3, 800a4d6 <_fflush_r+0x1a>
 800a4d2:	f000 f887 	bl	800a5e4 <__sinit>
 800a4d6:	4b14      	ldr	r3, [pc, #80]	; (800a528 <_fflush_r+0x6c>)
 800a4d8:	429c      	cmp	r4, r3
 800a4da:	d11b      	bne.n	800a514 <_fflush_r+0x58>
 800a4dc:	686c      	ldr	r4, [r5, #4]
 800a4de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0ef      	beq.n	800a4c6 <_fflush_r+0xa>
 800a4e6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a4e8:	07d0      	lsls	r0, r2, #31
 800a4ea:	d404      	bmi.n	800a4f6 <_fflush_r+0x3a>
 800a4ec:	0599      	lsls	r1, r3, #22
 800a4ee:	d402      	bmi.n	800a4f6 <_fflush_r+0x3a>
 800a4f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a4f2:	f000 f915 	bl	800a720 <__retarget_lock_acquire_recursive>
 800a4f6:	4628      	mov	r0, r5
 800a4f8:	4621      	mov	r1, r4
 800a4fa:	f7ff ff59 	bl	800a3b0 <__sflush_r>
 800a4fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a500:	07da      	lsls	r2, r3, #31
 800a502:	4605      	mov	r5, r0
 800a504:	d4e0      	bmi.n	800a4c8 <_fflush_r+0xc>
 800a506:	89a3      	ldrh	r3, [r4, #12]
 800a508:	059b      	lsls	r3, r3, #22
 800a50a:	d4dd      	bmi.n	800a4c8 <_fflush_r+0xc>
 800a50c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a50e:	f000 f908 	bl	800a722 <__retarget_lock_release_recursive>
 800a512:	e7d9      	b.n	800a4c8 <_fflush_r+0xc>
 800a514:	4b05      	ldr	r3, [pc, #20]	; (800a52c <_fflush_r+0x70>)
 800a516:	429c      	cmp	r4, r3
 800a518:	d101      	bne.n	800a51e <_fflush_r+0x62>
 800a51a:	68ac      	ldr	r4, [r5, #8]
 800a51c:	e7df      	b.n	800a4de <_fflush_r+0x22>
 800a51e:	4b04      	ldr	r3, [pc, #16]	; (800a530 <_fflush_r+0x74>)
 800a520:	429c      	cmp	r4, r3
 800a522:	bf08      	it	eq
 800a524:	68ec      	ldreq	r4, [r5, #12]
 800a526:	e7da      	b.n	800a4de <_fflush_r+0x22>
 800a528:	0800c2fc 	.word	0x0800c2fc
 800a52c:	0800c31c 	.word	0x0800c31c
 800a530:	0800c2dc 	.word	0x0800c2dc

0800a534 <std>:
 800a534:	2300      	movs	r3, #0
 800a536:	b510      	push	{r4, lr}
 800a538:	4604      	mov	r4, r0
 800a53a:	e9c0 3300 	strd	r3, r3, [r0]
 800a53e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a542:	6083      	str	r3, [r0, #8]
 800a544:	8181      	strh	r1, [r0, #12]
 800a546:	6643      	str	r3, [r0, #100]	; 0x64
 800a548:	81c2      	strh	r2, [r0, #14]
 800a54a:	6183      	str	r3, [r0, #24]
 800a54c:	4619      	mov	r1, r3
 800a54e:	2208      	movs	r2, #8
 800a550:	305c      	adds	r0, #92	; 0x5c
 800a552:	f7fb fdcb 	bl	80060ec <memset>
 800a556:	4b05      	ldr	r3, [pc, #20]	; (800a56c <std+0x38>)
 800a558:	6263      	str	r3, [r4, #36]	; 0x24
 800a55a:	4b05      	ldr	r3, [pc, #20]	; (800a570 <std+0x3c>)
 800a55c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a55e:	4b05      	ldr	r3, [pc, #20]	; (800a574 <std+0x40>)
 800a560:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a562:	4b05      	ldr	r3, [pc, #20]	; (800a578 <std+0x44>)
 800a564:	6224      	str	r4, [r4, #32]
 800a566:	6323      	str	r3, [r4, #48]	; 0x30
 800a568:	bd10      	pop	{r4, pc}
 800a56a:	bf00      	nop
 800a56c:	0800a889 	.word	0x0800a889
 800a570:	0800a8ab 	.word	0x0800a8ab
 800a574:	0800a8e3 	.word	0x0800a8e3
 800a578:	0800a907 	.word	0x0800a907

0800a57c <_cleanup_r>:
 800a57c:	4901      	ldr	r1, [pc, #4]	; (800a584 <_cleanup_r+0x8>)
 800a57e:	f000 b8af 	b.w	800a6e0 <_fwalk_reent>
 800a582:	bf00      	nop
 800a584:	0800a4bd 	.word	0x0800a4bd

0800a588 <__sfmoreglue>:
 800a588:	b570      	push	{r4, r5, r6, lr}
 800a58a:	2268      	movs	r2, #104	; 0x68
 800a58c:	1e4d      	subs	r5, r1, #1
 800a58e:	4355      	muls	r5, r2
 800a590:	460e      	mov	r6, r1
 800a592:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a596:	f7ff fa59 	bl	8009a4c <_malloc_r>
 800a59a:	4604      	mov	r4, r0
 800a59c:	b140      	cbz	r0, 800a5b0 <__sfmoreglue+0x28>
 800a59e:	2100      	movs	r1, #0
 800a5a0:	e9c0 1600 	strd	r1, r6, [r0]
 800a5a4:	300c      	adds	r0, #12
 800a5a6:	60a0      	str	r0, [r4, #8]
 800a5a8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a5ac:	f7fb fd9e 	bl	80060ec <memset>
 800a5b0:	4620      	mov	r0, r4
 800a5b2:	bd70      	pop	{r4, r5, r6, pc}

0800a5b4 <__sfp_lock_acquire>:
 800a5b4:	4801      	ldr	r0, [pc, #4]	; (800a5bc <__sfp_lock_acquire+0x8>)
 800a5b6:	f000 b8b3 	b.w	800a720 <__retarget_lock_acquire_recursive>
 800a5ba:	bf00      	nop
 800a5bc:	200003c5 	.word	0x200003c5

0800a5c0 <__sfp_lock_release>:
 800a5c0:	4801      	ldr	r0, [pc, #4]	; (800a5c8 <__sfp_lock_release+0x8>)
 800a5c2:	f000 b8ae 	b.w	800a722 <__retarget_lock_release_recursive>
 800a5c6:	bf00      	nop
 800a5c8:	200003c5 	.word	0x200003c5

0800a5cc <__sinit_lock_acquire>:
 800a5cc:	4801      	ldr	r0, [pc, #4]	; (800a5d4 <__sinit_lock_acquire+0x8>)
 800a5ce:	f000 b8a7 	b.w	800a720 <__retarget_lock_acquire_recursive>
 800a5d2:	bf00      	nop
 800a5d4:	200003c6 	.word	0x200003c6

0800a5d8 <__sinit_lock_release>:
 800a5d8:	4801      	ldr	r0, [pc, #4]	; (800a5e0 <__sinit_lock_release+0x8>)
 800a5da:	f000 b8a2 	b.w	800a722 <__retarget_lock_release_recursive>
 800a5de:	bf00      	nop
 800a5e0:	200003c6 	.word	0x200003c6

0800a5e4 <__sinit>:
 800a5e4:	b510      	push	{r4, lr}
 800a5e6:	4604      	mov	r4, r0
 800a5e8:	f7ff fff0 	bl	800a5cc <__sinit_lock_acquire>
 800a5ec:	69a3      	ldr	r3, [r4, #24]
 800a5ee:	b11b      	cbz	r3, 800a5f8 <__sinit+0x14>
 800a5f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a5f4:	f7ff bff0 	b.w	800a5d8 <__sinit_lock_release>
 800a5f8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a5fc:	6523      	str	r3, [r4, #80]	; 0x50
 800a5fe:	4b13      	ldr	r3, [pc, #76]	; (800a64c <__sinit+0x68>)
 800a600:	4a13      	ldr	r2, [pc, #76]	; (800a650 <__sinit+0x6c>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	62a2      	str	r2, [r4, #40]	; 0x28
 800a606:	42a3      	cmp	r3, r4
 800a608:	bf04      	itt	eq
 800a60a:	2301      	moveq	r3, #1
 800a60c:	61a3      	streq	r3, [r4, #24]
 800a60e:	4620      	mov	r0, r4
 800a610:	f000 f820 	bl	800a654 <__sfp>
 800a614:	6060      	str	r0, [r4, #4]
 800a616:	4620      	mov	r0, r4
 800a618:	f000 f81c 	bl	800a654 <__sfp>
 800a61c:	60a0      	str	r0, [r4, #8]
 800a61e:	4620      	mov	r0, r4
 800a620:	f000 f818 	bl	800a654 <__sfp>
 800a624:	2200      	movs	r2, #0
 800a626:	60e0      	str	r0, [r4, #12]
 800a628:	2104      	movs	r1, #4
 800a62a:	6860      	ldr	r0, [r4, #4]
 800a62c:	f7ff ff82 	bl	800a534 <std>
 800a630:	68a0      	ldr	r0, [r4, #8]
 800a632:	2201      	movs	r2, #1
 800a634:	2109      	movs	r1, #9
 800a636:	f7ff ff7d 	bl	800a534 <std>
 800a63a:	68e0      	ldr	r0, [r4, #12]
 800a63c:	2202      	movs	r2, #2
 800a63e:	2112      	movs	r1, #18
 800a640:	f7ff ff78 	bl	800a534 <std>
 800a644:	2301      	movs	r3, #1
 800a646:	61a3      	str	r3, [r4, #24]
 800a648:	e7d2      	b.n	800a5f0 <__sinit+0xc>
 800a64a:	bf00      	nop
 800a64c:	0800be98 	.word	0x0800be98
 800a650:	0800a57d 	.word	0x0800a57d

0800a654 <__sfp>:
 800a654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a656:	4607      	mov	r7, r0
 800a658:	f7ff ffac 	bl	800a5b4 <__sfp_lock_acquire>
 800a65c:	4b1e      	ldr	r3, [pc, #120]	; (800a6d8 <__sfp+0x84>)
 800a65e:	681e      	ldr	r6, [r3, #0]
 800a660:	69b3      	ldr	r3, [r6, #24]
 800a662:	b913      	cbnz	r3, 800a66a <__sfp+0x16>
 800a664:	4630      	mov	r0, r6
 800a666:	f7ff ffbd 	bl	800a5e4 <__sinit>
 800a66a:	3648      	adds	r6, #72	; 0x48
 800a66c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a670:	3b01      	subs	r3, #1
 800a672:	d503      	bpl.n	800a67c <__sfp+0x28>
 800a674:	6833      	ldr	r3, [r6, #0]
 800a676:	b30b      	cbz	r3, 800a6bc <__sfp+0x68>
 800a678:	6836      	ldr	r6, [r6, #0]
 800a67a:	e7f7      	b.n	800a66c <__sfp+0x18>
 800a67c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a680:	b9d5      	cbnz	r5, 800a6b8 <__sfp+0x64>
 800a682:	4b16      	ldr	r3, [pc, #88]	; (800a6dc <__sfp+0x88>)
 800a684:	60e3      	str	r3, [r4, #12]
 800a686:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a68a:	6665      	str	r5, [r4, #100]	; 0x64
 800a68c:	f000 f847 	bl	800a71e <__retarget_lock_init_recursive>
 800a690:	f7ff ff96 	bl	800a5c0 <__sfp_lock_release>
 800a694:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a698:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a69c:	6025      	str	r5, [r4, #0]
 800a69e:	61a5      	str	r5, [r4, #24]
 800a6a0:	2208      	movs	r2, #8
 800a6a2:	4629      	mov	r1, r5
 800a6a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a6a8:	f7fb fd20 	bl	80060ec <memset>
 800a6ac:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a6b0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a6b4:	4620      	mov	r0, r4
 800a6b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6b8:	3468      	adds	r4, #104	; 0x68
 800a6ba:	e7d9      	b.n	800a670 <__sfp+0x1c>
 800a6bc:	2104      	movs	r1, #4
 800a6be:	4638      	mov	r0, r7
 800a6c0:	f7ff ff62 	bl	800a588 <__sfmoreglue>
 800a6c4:	4604      	mov	r4, r0
 800a6c6:	6030      	str	r0, [r6, #0]
 800a6c8:	2800      	cmp	r0, #0
 800a6ca:	d1d5      	bne.n	800a678 <__sfp+0x24>
 800a6cc:	f7ff ff78 	bl	800a5c0 <__sfp_lock_release>
 800a6d0:	230c      	movs	r3, #12
 800a6d2:	603b      	str	r3, [r7, #0]
 800a6d4:	e7ee      	b.n	800a6b4 <__sfp+0x60>
 800a6d6:	bf00      	nop
 800a6d8:	0800be98 	.word	0x0800be98
 800a6dc:	ffff0001 	.word	0xffff0001

0800a6e0 <_fwalk_reent>:
 800a6e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e4:	4606      	mov	r6, r0
 800a6e6:	4688      	mov	r8, r1
 800a6e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a6ec:	2700      	movs	r7, #0
 800a6ee:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a6f2:	f1b9 0901 	subs.w	r9, r9, #1
 800a6f6:	d505      	bpl.n	800a704 <_fwalk_reent+0x24>
 800a6f8:	6824      	ldr	r4, [r4, #0]
 800a6fa:	2c00      	cmp	r4, #0
 800a6fc:	d1f7      	bne.n	800a6ee <_fwalk_reent+0xe>
 800a6fe:	4638      	mov	r0, r7
 800a700:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a704:	89ab      	ldrh	r3, [r5, #12]
 800a706:	2b01      	cmp	r3, #1
 800a708:	d907      	bls.n	800a71a <_fwalk_reent+0x3a>
 800a70a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a70e:	3301      	adds	r3, #1
 800a710:	d003      	beq.n	800a71a <_fwalk_reent+0x3a>
 800a712:	4629      	mov	r1, r5
 800a714:	4630      	mov	r0, r6
 800a716:	47c0      	blx	r8
 800a718:	4307      	orrs	r7, r0
 800a71a:	3568      	adds	r5, #104	; 0x68
 800a71c:	e7e9      	b.n	800a6f2 <_fwalk_reent+0x12>

0800a71e <__retarget_lock_init_recursive>:
 800a71e:	4770      	bx	lr

0800a720 <__retarget_lock_acquire_recursive>:
 800a720:	4770      	bx	lr

0800a722 <__retarget_lock_release_recursive>:
 800a722:	4770      	bx	lr

0800a724 <__swhatbuf_r>:
 800a724:	b570      	push	{r4, r5, r6, lr}
 800a726:	460e      	mov	r6, r1
 800a728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a72c:	2900      	cmp	r1, #0
 800a72e:	b096      	sub	sp, #88	; 0x58
 800a730:	4614      	mov	r4, r2
 800a732:	461d      	mov	r5, r3
 800a734:	da08      	bge.n	800a748 <__swhatbuf_r+0x24>
 800a736:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	602a      	str	r2, [r5, #0]
 800a73e:	061a      	lsls	r2, r3, #24
 800a740:	d410      	bmi.n	800a764 <__swhatbuf_r+0x40>
 800a742:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a746:	e00e      	b.n	800a766 <__swhatbuf_r+0x42>
 800a748:	466a      	mov	r2, sp
 800a74a:	f000 f903 	bl	800a954 <_fstat_r>
 800a74e:	2800      	cmp	r0, #0
 800a750:	dbf1      	blt.n	800a736 <__swhatbuf_r+0x12>
 800a752:	9a01      	ldr	r2, [sp, #4]
 800a754:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a758:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a75c:	425a      	negs	r2, r3
 800a75e:	415a      	adcs	r2, r3
 800a760:	602a      	str	r2, [r5, #0]
 800a762:	e7ee      	b.n	800a742 <__swhatbuf_r+0x1e>
 800a764:	2340      	movs	r3, #64	; 0x40
 800a766:	2000      	movs	r0, #0
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	b016      	add	sp, #88	; 0x58
 800a76c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a770 <__smakebuf_r>:
 800a770:	898b      	ldrh	r3, [r1, #12]
 800a772:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a774:	079d      	lsls	r5, r3, #30
 800a776:	4606      	mov	r6, r0
 800a778:	460c      	mov	r4, r1
 800a77a:	d507      	bpl.n	800a78c <__smakebuf_r+0x1c>
 800a77c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a780:	6023      	str	r3, [r4, #0]
 800a782:	6123      	str	r3, [r4, #16]
 800a784:	2301      	movs	r3, #1
 800a786:	6163      	str	r3, [r4, #20]
 800a788:	b002      	add	sp, #8
 800a78a:	bd70      	pop	{r4, r5, r6, pc}
 800a78c:	ab01      	add	r3, sp, #4
 800a78e:	466a      	mov	r2, sp
 800a790:	f7ff ffc8 	bl	800a724 <__swhatbuf_r>
 800a794:	9900      	ldr	r1, [sp, #0]
 800a796:	4605      	mov	r5, r0
 800a798:	4630      	mov	r0, r6
 800a79a:	f7ff f957 	bl	8009a4c <_malloc_r>
 800a79e:	b948      	cbnz	r0, 800a7b4 <__smakebuf_r+0x44>
 800a7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a4:	059a      	lsls	r2, r3, #22
 800a7a6:	d4ef      	bmi.n	800a788 <__smakebuf_r+0x18>
 800a7a8:	f023 0303 	bic.w	r3, r3, #3
 800a7ac:	f043 0302 	orr.w	r3, r3, #2
 800a7b0:	81a3      	strh	r3, [r4, #12]
 800a7b2:	e7e3      	b.n	800a77c <__smakebuf_r+0xc>
 800a7b4:	4b0d      	ldr	r3, [pc, #52]	; (800a7ec <__smakebuf_r+0x7c>)
 800a7b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a7b8:	89a3      	ldrh	r3, [r4, #12]
 800a7ba:	6020      	str	r0, [r4, #0]
 800a7bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7c0:	81a3      	strh	r3, [r4, #12]
 800a7c2:	9b00      	ldr	r3, [sp, #0]
 800a7c4:	6163      	str	r3, [r4, #20]
 800a7c6:	9b01      	ldr	r3, [sp, #4]
 800a7c8:	6120      	str	r0, [r4, #16]
 800a7ca:	b15b      	cbz	r3, 800a7e4 <__smakebuf_r+0x74>
 800a7cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f8d1 	bl	800a978 <_isatty_r>
 800a7d6:	b128      	cbz	r0, 800a7e4 <__smakebuf_r+0x74>
 800a7d8:	89a3      	ldrh	r3, [r4, #12]
 800a7da:	f023 0303 	bic.w	r3, r3, #3
 800a7de:	f043 0301 	orr.w	r3, r3, #1
 800a7e2:	81a3      	strh	r3, [r4, #12]
 800a7e4:	89a0      	ldrh	r0, [r4, #12]
 800a7e6:	4305      	orrs	r5, r0
 800a7e8:	81a5      	strh	r5, [r4, #12]
 800a7ea:	e7cd      	b.n	800a788 <__smakebuf_r+0x18>
 800a7ec:	0800a57d 	.word	0x0800a57d

0800a7f0 <_malloc_usable_size_r>:
 800a7f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a7f4:	1f18      	subs	r0, r3, #4
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	bfbc      	itt	lt
 800a7fa:	580b      	ldrlt	r3, [r1, r0]
 800a7fc:	18c0      	addlt	r0, r0, r3
 800a7fe:	4770      	bx	lr

0800a800 <_raise_r>:
 800a800:	291f      	cmp	r1, #31
 800a802:	b538      	push	{r3, r4, r5, lr}
 800a804:	4604      	mov	r4, r0
 800a806:	460d      	mov	r5, r1
 800a808:	d904      	bls.n	800a814 <_raise_r+0x14>
 800a80a:	2316      	movs	r3, #22
 800a80c:	6003      	str	r3, [r0, #0]
 800a80e:	f04f 30ff 	mov.w	r0, #4294967295
 800a812:	bd38      	pop	{r3, r4, r5, pc}
 800a814:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a816:	b112      	cbz	r2, 800a81e <_raise_r+0x1e>
 800a818:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a81c:	b94b      	cbnz	r3, 800a832 <_raise_r+0x32>
 800a81e:	4620      	mov	r0, r4
 800a820:	f000 f830 	bl	800a884 <_getpid_r>
 800a824:	462a      	mov	r2, r5
 800a826:	4601      	mov	r1, r0
 800a828:	4620      	mov	r0, r4
 800a82a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a82e:	f000 b817 	b.w	800a860 <_kill_r>
 800a832:	2b01      	cmp	r3, #1
 800a834:	d00a      	beq.n	800a84c <_raise_r+0x4c>
 800a836:	1c59      	adds	r1, r3, #1
 800a838:	d103      	bne.n	800a842 <_raise_r+0x42>
 800a83a:	2316      	movs	r3, #22
 800a83c:	6003      	str	r3, [r0, #0]
 800a83e:	2001      	movs	r0, #1
 800a840:	e7e7      	b.n	800a812 <_raise_r+0x12>
 800a842:	2400      	movs	r4, #0
 800a844:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a848:	4628      	mov	r0, r5
 800a84a:	4798      	blx	r3
 800a84c:	2000      	movs	r0, #0
 800a84e:	e7e0      	b.n	800a812 <_raise_r+0x12>

0800a850 <raise>:
 800a850:	4b02      	ldr	r3, [pc, #8]	; (800a85c <raise+0xc>)
 800a852:	4601      	mov	r1, r0
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	f7ff bfd3 	b.w	800a800 <_raise_r>
 800a85a:	bf00      	nop
 800a85c:	20000048 	.word	0x20000048

0800a860 <_kill_r>:
 800a860:	b538      	push	{r3, r4, r5, lr}
 800a862:	4d07      	ldr	r5, [pc, #28]	; (800a880 <_kill_r+0x20>)
 800a864:	2300      	movs	r3, #0
 800a866:	4604      	mov	r4, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	4611      	mov	r1, r2
 800a86c:	602b      	str	r3, [r5, #0]
 800a86e:	f7f7 f929 	bl	8001ac4 <_kill>
 800a872:	1c43      	adds	r3, r0, #1
 800a874:	d102      	bne.n	800a87c <_kill_r+0x1c>
 800a876:	682b      	ldr	r3, [r5, #0]
 800a878:	b103      	cbz	r3, 800a87c <_kill_r+0x1c>
 800a87a:	6023      	str	r3, [r4, #0]
 800a87c:	bd38      	pop	{r3, r4, r5, pc}
 800a87e:	bf00      	nop
 800a880:	200003c0 	.word	0x200003c0

0800a884 <_getpid_r>:
 800a884:	f7f7 b916 	b.w	8001ab4 <_getpid>

0800a888 <__sread>:
 800a888:	b510      	push	{r4, lr}
 800a88a:	460c      	mov	r4, r1
 800a88c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a890:	f000 f894 	bl	800a9bc <_read_r>
 800a894:	2800      	cmp	r0, #0
 800a896:	bfab      	itete	ge
 800a898:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a89a:	89a3      	ldrhlt	r3, [r4, #12]
 800a89c:	181b      	addge	r3, r3, r0
 800a89e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a8a2:	bfac      	ite	ge
 800a8a4:	6563      	strge	r3, [r4, #84]	; 0x54
 800a8a6:	81a3      	strhlt	r3, [r4, #12]
 800a8a8:	bd10      	pop	{r4, pc}

0800a8aa <__swrite>:
 800a8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8ae:	461f      	mov	r7, r3
 800a8b0:	898b      	ldrh	r3, [r1, #12]
 800a8b2:	05db      	lsls	r3, r3, #23
 800a8b4:	4605      	mov	r5, r0
 800a8b6:	460c      	mov	r4, r1
 800a8b8:	4616      	mov	r6, r2
 800a8ba:	d505      	bpl.n	800a8c8 <__swrite+0x1e>
 800a8bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8c0:	2302      	movs	r3, #2
 800a8c2:	2200      	movs	r2, #0
 800a8c4:	f000 f868 	bl	800a998 <_lseek_r>
 800a8c8:	89a3      	ldrh	r3, [r4, #12]
 800a8ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8ce:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8d2:	81a3      	strh	r3, [r4, #12]
 800a8d4:	4632      	mov	r2, r6
 800a8d6:	463b      	mov	r3, r7
 800a8d8:	4628      	mov	r0, r5
 800a8da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8de:	f000 b817 	b.w	800a910 <_write_r>

0800a8e2 <__sseek>:
 800a8e2:	b510      	push	{r4, lr}
 800a8e4:	460c      	mov	r4, r1
 800a8e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8ea:	f000 f855 	bl	800a998 <_lseek_r>
 800a8ee:	1c43      	adds	r3, r0, #1
 800a8f0:	89a3      	ldrh	r3, [r4, #12]
 800a8f2:	bf15      	itete	ne
 800a8f4:	6560      	strne	r0, [r4, #84]	; 0x54
 800a8f6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a8fa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a8fe:	81a3      	strheq	r3, [r4, #12]
 800a900:	bf18      	it	ne
 800a902:	81a3      	strhne	r3, [r4, #12]
 800a904:	bd10      	pop	{r4, pc}

0800a906 <__sclose>:
 800a906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a90a:	f000 b813 	b.w	800a934 <_close_r>
	...

0800a910 <_write_r>:
 800a910:	b538      	push	{r3, r4, r5, lr}
 800a912:	4d07      	ldr	r5, [pc, #28]	; (800a930 <_write_r+0x20>)
 800a914:	4604      	mov	r4, r0
 800a916:	4608      	mov	r0, r1
 800a918:	4611      	mov	r1, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	602a      	str	r2, [r5, #0]
 800a91e:	461a      	mov	r2, r3
 800a920:	f7f7 f907 	bl	8001b32 <_write>
 800a924:	1c43      	adds	r3, r0, #1
 800a926:	d102      	bne.n	800a92e <_write_r+0x1e>
 800a928:	682b      	ldr	r3, [r5, #0]
 800a92a:	b103      	cbz	r3, 800a92e <_write_r+0x1e>
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	bd38      	pop	{r3, r4, r5, pc}
 800a930:	200003c0 	.word	0x200003c0

0800a934 <_close_r>:
 800a934:	b538      	push	{r3, r4, r5, lr}
 800a936:	4d06      	ldr	r5, [pc, #24]	; (800a950 <_close_r+0x1c>)
 800a938:	2300      	movs	r3, #0
 800a93a:	4604      	mov	r4, r0
 800a93c:	4608      	mov	r0, r1
 800a93e:	602b      	str	r3, [r5, #0]
 800a940:	f7f7 f913 	bl	8001b6a <_close>
 800a944:	1c43      	adds	r3, r0, #1
 800a946:	d102      	bne.n	800a94e <_close_r+0x1a>
 800a948:	682b      	ldr	r3, [r5, #0]
 800a94a:	b103      	cbz	r3, 800a94e <_close_r+0x1a>
 800a94c:	6023      	str	r3, [r4, #0]
 800a94e:	bd38      	pop	{r3, r4, r5, pc}
 800a950:	200003c0 	.word	0x200003c0

0800a954 <_fstat_r>:
 800a954:	b538      	push	{r3, r4, r5, lr}
 800a956:	4d07      	ldr	r5, [pc, #28]	; (800a974 <_fstat_r+0x20>)
 800a958:	2300      	movs	r3, #0
 800a95a:	4604      	mov	r4, r0
 800a95c:	4608      	mov	r0, r1
 800a95e:	4611      	mov	r1, r2
 800a960:	602b      	str	r3, [r5, #0]
 800a962:	f7f7 f90e 	bl	8001b82 <_fstat>
 800a966:	1c43      	adds	r3, r0, #1
 800a968:	d102      	bne.n	800a970 <_fstat_r+0x1c>
 800a96a:	682b      	ldr	r3, [r5, #0]
 800a96c:	b103      	cbz	r3, 800a970 <_fstat_r+0x1c>
 800a96e:	6023      	str	r3, [r4, #0]
 800a970:	bd38      	pop	{r3, r4, r5, pc}
 800a972:	bf00      	nop
 800a974:	200003c0 	.word	0x200003c0

0800a978 <_isatty_r>:
 800a978:	b538      	push	{r3, r4, r5, lr}
 800a97a:	4d06      	ldr	r5, [pc, #24]	; (800a994 <_isatty_r+0x1c>)
 800a97c:	2300      	movs	r3, #0
 800a97e:	4604      	mov	r4, r0
 800a980:	4608      	mov	r0, r1
 800a982:	602b      	str	r3, [r5, #0]
 800a984:	f7f7 f90d 	bl	8001ba2 <_isatty>
 800a988:	1c43      	adds	r3, r0, #1
 800a98a:	d102      	bne.n	800a992 <_isatty_r+0x1a>
 800a98c:	682b      	ldr	r3, [r5, #0]
 800a98e:	b103      	cbz	r3, 800a992 <_isatty_r+0x1a>
 800a990:	6023      	str	r3, [r4, #0]
 800a992:	bd38      	pop	{r3, r4, r5, pc}
 800a994:	200003c0 	.word	0x200003c0

0800a998 <_lseek_r>:
 800a998:	b538      	push	{r3, r4, r5, lr}
 800a99a:	4d07      	ldr	r5, [pc, #28]	; (800a9b8 <_lseek_r+0x20>)
 800a99c:	4604      	mov	r4, r0
 800a99e:	4608      	mov	r0, r1
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	602a      	str	r2, [r5, #0]
 800a9a6:	461a      	mov	r2, r3
 800a9a8:	f7f7 f906 	bl	8001bb8 <_lseek>
 800a9ac:	1c43      	adds	r3, r0, #1
 800a9ae:	d102      	bne.n	800a9b6 <_lseek_r+0x1e>
 800a9b0:	682b      	ldr	r3, [r5, #0]
 800a9b2:	b103      	cbz	r3, 800a9b6 <_lseek_r+0x1e>
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	bd38      	pop	{r3, r4, r5, pc}
 800a9b8:	200003c0 	.word	0x200003c0

0800a9bc <_read_r>:
 800a9bc:	b538      	push	{r3, r4, r5, lr}
 800a9be:	4d07      	ldr	r5, [pc, #28]	; (800a9dc <_read_r+0x20>)
 800a9c0:	4604      	mov	r4, r0
 800a9c2:	4608      	mov	r0, r1
 800a9c4:	4611      	mov	r1, r2
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	602a      	str	r2, [r5, #0]
 800a9ca:	461a      	mov	r2, r3
 800a9cc:	f7f7 f894 	bl	8001af8 <_read>
 800a9d0:	1c43      	adds	r3, r0, #1
 800a9d2:	d102      	bne.n	800a9da <_read_r+0x1e>
 800a9d4:	682b      	ldr	r3, [r5, #0]
 800a9d6:	b103      	cbz	r3, 800a9da <_read_r+0x1e>
 800a9d8:	6023      	str	r3, [r4, #0]
 800a9da:	bd38      	pop	{r3, r4, r5, pc}
 800a9dc:	200003c0 	.word	0x200003c0

0800a9e0 <round>:
 800a9e0:	ec51 0b10 	vmov	r0, r1, d0
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800a9ea:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800a9ee:	2c13      	cmp	r4, #19
 800a9f0:	ee10 2a10 	vmov	r2, s0
 800a9f4:	460b      	mov	r3, r1
 800a9f6:	dc19      	bgt.n	800aa2c <round+0x4c>
 800a9f8:	2c00      	cmp	r4, #0
 800a9fa:	da09      	bge.n	800aa10 <round+0x30>
 800a9fc:	3401      	adds	r4, #1
 800a9fe:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800aa02:	d103      	bne.n	800aa0c <round+0x2c>
 800aa04:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800aa08:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800aa0c:	2200      	movs	r2, #0
 800aa0e:	e028      	b.n	800aa62 <round+0x82>
 800aa10:	4d15      	ldr	r5, [pc, #84]	; (800aa68 <round+0x88>)
 800aa12:	4125      	asrs	r5, r4
 800aa14:	ea01 0605 	and.w	r6, r1, r5
 800aa18:	4332      	orrs	r2, r6
 800aa1a:	d00e      	beq.n	800aa3a <round+0x5a>
 800aa1c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800aa20:	fa42 f404 	asr.w	r4, r2, r4
 800aa24:	4423      	add	r3, r4
 800aa26:	ea23 0305 	bic.w	r3, r3, r5
 800aa2a:	e7ef      	b.n	800aa0c <round+0x2c>
 800aa2c:	2c33      	cmp	r4, #51	; 0x33
 800aa2e:	dd07      	ble.n	800aa40 <round+0x60>
 800aa30:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800aa34:	d101      	bne.n	800aa3a <round+0x5a>
 800aa36:	f7f5 fc29 	bl	800028c <__adddf3>
 800aa3a:	ec41 0b10 	vmov	d0, r0, r1
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800aa44:	f04f 35ff 	mov.w	r5, #4294967295
 800aa48:	40f5      	lsrs	r5, r6
 800aa4a:	4228      	tst	r0, r5
 800aa4c:	d0f5      	beq.n	800aa3a <round+0x5a>
 800aa4e:	2101      	movs	r1, #1
 800aa50:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800aa54:	fa01 f404 	lsl.w	r4, r1, r4
 800aa58:	1912      	adds	r2, r2, r4
 800aa5a:	bf28      	it	cs
 800aa5c:	185b      	addcs	r3, r3, r1
 800aa5e:	ea22 0205 	bic.w	r2, r2, r5
 800aa62:	4619      	mov	r1, r3
 800aa64:	4610      	mov	r0, r2
 800aa66:	e7e8      	b.n	800aa3a <round+0x5a>
 800aa68:	000fffff 	.word	0x000fffff

0800aa6c <atanf>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	ee10 5a10 	vmov	r5, s0
 800aa72:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800aa76:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800aa7a:	eef0 7a40 	vmov.f32	s15, s0
 800aa7e:	db10      	blt.n	800aaa2 <atanf+0x36>
 800aa80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800aa84:	dd04      	ble.n	800aa90 <atanf+0x24>
 800aa86:	ee70 7a00 	vadd.f32	s15, s0, s0
 800aa8a:	eeb0 0a67 	vmov.f32	s0, s15
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800abc8 <atanf+0x15c>
 800aa94:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800abcc <atanf+0x160>
 800aa98:	2d00      	cmp	r5, #0
 800aa9a:	bfd8      	it	le
 800aa9c:	eef0 7a40 	vmovle.f32	s15, s0
 800aaa0:	e7f3      	b.n	800aa8a <atanf+0x1e>
 800aaa2:	4b4b      	ldr	r3, [pc, #300]	; (800abd0 <atanf+0x164>)
 800aaa4:	429c      	cmp	r4, r3
 800aaa6:	dc10      	bgt.n	800aaca <atanf+0x5e>
 800aaa8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800aaac:	da0a      	bge.n	800aac4 <atanf+0x58>
 800aaae:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800abd4 <atanf+0x168>
 800aab2:	ee30 7a07 	vadd.f32	s14, s0, s14
 800aab6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aaba:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800aabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aac2:	dce2      	bgt.n	800aa8a <atanf+0x1e>
 800aac4:	f04f 33ff 	mov.w	r3, #4294967295
 800aac8:	e013      	b.n	800aaf2 <atanf+0x86>
 800aaca:	f000 f8e7 	bl	800ac9c <fabsf>
 800aace:	4b42      	ldr	r3, [pc, #264]	; (800abd8 <atanf+0x16c>)
 800aad0:	429c      	cmp	r4, r3
 800aad2:	dc4f      	bgt.n	800ab74 <atanf+0x108>
 800aad4:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800aad8:	429c      	cmp	r4, r3
 800aada:	dc41      	bgt.n	800ab60 <atanf+0xf4>
 800aadc:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800aae0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800aae4:	eea0 7a27 	vfma.f32	s14, s0, s15
 800aae8:	2300      	movs	r3, #0
 800aaea:	ee30 0a27 	vadd.f32	s0, s0, s15
 800aaee:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800aaf2:	1c5a      	adds	r2, r3, #1
 800aaf4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800aaf8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800abdc <atanf+0x170>
 800aafc:	eddf 5a38 	vldr	s11, [pc, #224]	; 800abe0 <atanf+0x174>
 800ab00:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800abe4 <atanf+0x178>
 800ab04:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ab08:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ab0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800abe8 <atanf+0x17c>
 800ab10:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab14:	eddf 5a35 	vldr	s11, [pc, #212]	; 800abec <atanf+0x180>
 800ab18:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab1c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800abf0 <atanf+0x184>
 800ab20:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ab24:	eddf 5a33 	vldr	s11, [pc, #204]	; 800abf4 <atanf+0x188>
 800ab28:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ab2c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800abf8 <atanf+0x18c>
 800ab30:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ab34:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800abfc <atanf+0x190>
 800ab38:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab3c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800ac00 <atanf+0x194>
 800ab40:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ab44:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800ac04 <atanf+0x198>
 800ab48:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ab4c:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ab50:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ab54:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ab58:	d121      	bne.n	800ab9e <atanf+0x132>
 800ab5a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ab5e:	e794      	b.n	800aa8a <atanf+0x1e>
 800ab60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ab64:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ab68:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab72:	e7be      	b.n	800aaf2 <atanf+0x86>
 800ab74:	4b24      	ldr	r3, [pc, #144]	; (800ac08 <atanf+0x19c>)
 800ab76:	429c      	cmp	r4, r3
 800ab78:	dc0b      	bgt.n	800ab92 <atanf+0x126>
 800ab7a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800ab7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ab82:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ab86:	2302      	movs	r3, #2
 800ab88:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ab8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ab90:	e7af      	b.n	800aaf2 <atanf+0x86>
 800ab92:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800ab96:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ab9a:	2303      	movs	r3, #3
 800ab9c:	e7a9      	b.n	800aaf2 <atanf+0x86>
 800ab9e:	4a1b      	ldr	r2, [pc, #108]	; (800ac0c <atanf+0x1a0>)
 800aba0:	491b      	ldr	r1, [pc, #108]	; (800ac10 <atanf+0x1a4>)
 800aba2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800aba6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800abaa:	ed93 0a00 	vldr	s0, [r3]
 800abae:	ee37 7a40 	vsub.f32	s14, s14, s0
 800abb2:	ed92 0a00 	vldr	s0, [r2]
 800abb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abba:	2d00      	cmp	r5, #0
 800abbc:	ee70 7a67 	vsub.f32	s15, s0, s15
 800abc0:	bfb8      	it	lt
 800abc2:	eef1 7a67 	vneglt.f32	s15, s15
 800abc6:	e760      	b.n	800aa8a <atanf+0x1e>
 800abc8:	3fc90fdb 	.word	0x3fc90fdb
 800abcc:	bfc90fdb 	.word	0xbfc90fdb
 800abd0:	3edfffff 	.word	0x3edfffff
 800abd4:	7149f2ca 	.word	0x7149f2ca
 800abd8:	3f97ffff 	.word	0x3f97ffff
 800abdc:	3c8569d7 	.word	0x3c8569d7
 800abe0:	3d4bda59 	.word	0x3d4bda59
 800abe4:	bd6ef16b 	.word	0xbd6ef16b
 800abe8:	3d886b35 	.word	0x3d886b35
 800abec:	3dba2e6e 	.word	0x3dba2e6e
 800abf0:	3e124925 	.word	0x3e124925
 800abf4:	3eaaaaab 	.word	0x3eaaaaab
 800abf8:	bd15a221 	.word	0xbd15a221
 800abfc:	bd9d8795 	.word	0xbd9d8795
 800ac00:	bde38e38 	.word	0xbde38e38
 800ac04:	be4ccccd 	.word	0xbe4ccccd
 800ac08:	401bffff 	.word	0x401bffff
 800ac0c:	0800c33c 	.word	0x0800c33c
 800ac10:	0800c34c 	.word	0x0800c34c

0800ac14 <cosf>:
 800ac14:	ee10 3a10 	vmov	r3, s0
 800ac18:	b507      	push	{r0, r1, r2, lr}
 800ac1a:	4a1e      	ldr	r2, [pc, #120]	; (800ac94 <cosf+0x80>)
 800ac1c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ac20:	4293      	cmp	r3, r2
 800ac22:	dc06      	bgt.n	800ac32 <cosf+0x1e>
 800ac24:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800ac98 <cosf+0x84>
 800ac28:	b003      	add	sp, #12
 800ac2a:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac2e:	f000 bd07 	b.w	800b640 <__kernel_cosf>
 800ac32:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ac36:	db04      	blt.n	800ac42 <cosf+0x2e>
 800ac38:	ee30 0a40 	vsub.f32	s0, s0, s0
 800ac3c:	b003      	add	sp, #12
 800ac3e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ac42:	4668      	mov	r0, sp
 800ac44:	f000 fbbc 	bl	800b3c0 <__ieee754_rem_pio2f>
 800ac48:	f000 0003 	and.w	r0, r0, #3
 800ac4c:	2801      	cmp	r0, #1
 800ac4e:	d009      	beq.n	800ac64 <cosf+0x50>
 800ac50:	2802      	cmp	r0, #2
 800ac52:	d010      	beq.n	800ac76 <cosf+0x62>
 800ac54:	b9b0      	cbnz	r0, 800ac84 <cosf+0x70>
 800ac56:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac5a:	ed9d 0a00 	vldr	s0, [sp]
 800ac5e:	f000 fcef 	bl	800b640 <__kernel_cosf>
 800ac62:	e7eb      	b.n	800ac3c <cosf+0x28>
 800ac64:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac68:	ed9d 0a00 	vldr	s0, [sp]
 800ac6c:	f000 ffbe 	bl	800bbec <__kernel_sinf>
 800ac70:	eeb1 0a40 	vneg.f32	s0, s0
 800ac74:	e7e2      	b.n	800ac3c <cosf+0x28>
 800ac76:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac7a:	ed9d 0a00 	vldr	s0, [sp]
 800ac7e:	f000 fcdf 	bl	800b640 <__kernel_cosf>
 800ac82:	e7f5      	b.n	800ac70 <cosf+0x5c>
 800ac84:	eddd 0a01 	vldr	s1, [sp, #4]
 800ac88:	ed9d 0a00 	vldr	s0, [sp]
 800ac8c:	2001      	movs	r0, #1
 800ac8e:	f000 ffad 	bl	800bbec <__kernel_sinf>
 800ac92:	e7d3      	b.n	800ac3c <cosf+0x28>
 800ac94:	3f490fd8 	.word	0x3f490fd8
 800ac98:	00000000 	.word	0x00000000

0800ac9c <fabsf>:
 800ac9c:	ee10 3a10 	vmov	r3, s0
 800aca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca4:	ee00 3a10 	vmov	s0, r3
 800aca8:	4770      	bx	lr
	...

0800acac <sinf>:
 800acac:	ee10 3a10 	vmov	r3, s0
 800acb0:	b507      	push	{r0, r1, r2, lr}
 800acb2:	4a1f      	ldr	r2, [pc, #124]	; (800ad30 <sinf+0x84>)
 800acb4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800acb8:	4293      	cmp	r3, r2
 800acba:	dc07      	bgt.n	800accc <sinf+0x20>
 800acbc:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800ad34 <sinf+0x88>
 800acc0:	2000      	movs	r0, #0
 800acc2:	b003      	add	sp, #12
 800acc4:	f85d eb04 	ldr.w	lr, [sp], #4
 800acc8:	f000 bf90 	b.w	800bbec <__kernel_sinf>
 800accc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800acd0:	db04      	blt.n	800acdc <sinf+0x30>
 800acd2:	ee30 0a40 	vsub.f32	s0, s0, s0
 800acd6:	b003      	add	sp, #12
 800acd8:	f85d fb04 	ldr.w	pc, [sp], #4
 800acdc:	4668      	mov	r0, sp
 800acde:	f000 fb6f 	bl	800b3c0 <__ieee754_rem_pio2f>
 800ace2:	f000 0003 	and.w	r0, r0, #3
 800ace6:	2801      	cmp	r0, #1
 800ace8:	d00a      	beq.n	800ad00 <sinf+0x54>
 800acea:	2802      	cmp	r0, #2
 800acec:	d00f      	beq.n	800ad0e <sinf+0x62>
 800acee:	b9c0      	cbnz	r0, 800ad22 <sinf+0x76>
 800acf0:	eddd 0a01 	vldr	s1, [sp, #4]
 800acf4:	ed9d 0a00 	vldr	s0, [sp]
 800acf8:	2001      	movs	r0, #1
 800acfa:	f000 ff77 	bl	800bbec <__kernel_sinf>
 800acfe:	e7ea      	b.n	800acd6 <sinf+0x2a>
 800ad00:	eddd 0a01 	vldr	s1, [sp, #4]
 800ad04:	ed9d 0a00 	vldr	s0, [sp]
 800ad08:	f000 fc9a 	bl	800b640 <__kernel_cosf>
 800ad0c:	e7e3      	b.n	800acd6 <sinf+0x2a>
 800ad0e:	eddd 0a01 	vldr	s1, [sp, #4]
 800ad12:	ed9d 0a00 	vldr	s0, [sp]
 800ad16:	2001      	movs	r0, #1
 800ad18:	f000 ff68 	bl	800bbec <__kernel_sinf>
 800ad1c:	eeb1 0a40 	vneg.f32	s0, s0
 800ad20:	e7d9      	b.n	800acd6 <sinf+0x2a>
 800ad22:	eddd 0a01 	vldr	s1, [sp, #4]
 800ad26:	ed9d 0a00 	vldr	s0, [sp]
 800ad2a:	f000 fc89 	bl	800b640 <__kernel_cosf>
 800ad2e:	e7f5      	b.n	800ad1c <sinf+0x70>
 800ad30:	3f490fd8 	.word	0x3f490fd8
 800ad34:	00000000 	.word	0x00000000

0800ad38 <powf>:
 800ad38:	b508      	push	{r3, lr}
 800ad3a:	ed2d 8b04 	vpush	{d8-d9}
 800ad3e:	eeb0 8a60 	vmov.f32	s16, s1
 800ad42:	eeb0 9a40 	vmov.f32	s18, s0
 800ad46:	f000 f86d 	bl	800ae24 <__ieee754_powf>
 800ad4a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ad4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad52:	eef0 8a40 	vmov.f32	s17, s0
 800ad56:	d63e      	bvs.n	800add6 <powf+0x9e>
 800ad58:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ad5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad60:	d112      	bne.n	800ad88 <powf+0x50>
 800ad62:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ad66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad6a:	d039      	beq.n	800ade0 <powf+0xa8>
 800ad6c:	eeb0 0a48 	vmov.f32	s0, s16
 800ad70:	f000 ffa6 	bl	800bcc0 <finitef>
 800ad74:	b378      	cbz	r0, 800add6 <powf+0x9e>
 800ad76:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ad7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ad7e:	d52a      	bpl.n	800add6 <powf+0x9e>
 800ad80:	f7fb f98a 	bl	8006098 <__errno>
 800ad84:	2322      	movs	r3, #34	; 0x22
 800ad86:	e014      	b.n	800adb2 <powf+0x7a>
 800ad88:	f000 ff9a 	bl	800bcc0 <finitef>
 800ad8c:	b998      	cbnz	r0, 800adb6 <powf+0x7e>
 800ad8e:	eeb0 0a49 	vmov.f32	s0, s18
 800ad92:	f000 ff95 	bl	800bcc0 <finitef>
 800ad96:	b170      	cbz	r0, 800adb6 <powf+0x7e>
 800ad98:	eeb0 0a48 	vmov.f32	s0, s16
 800ad9c:	f000 ff90 	bl	800bcc0 <finitef>
 800ada0:	b148      	cbz	r0, 800adb6 <powf+0x7e>
 800ada2:	eef4 8a68 	vcmp.f32	s17, s17
 800ada6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adaa:	d7e9      	bvc.n	800ad80 <powf+0x48>
 800adac:	f7fb f974 	bl	8006098 <__errno>
 800adb0:	2321      	movs	r3, #33	; 0x21
 800adb2:	6003      	str	r3, [r0, #0]
 800adb4:	e00f      	b.n	800add6 <powf+0x9e>
 800adb6:	eef5 8a40 	vcmp.f32	s17, #0.0
 800adba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adbe:	d10a      	bne.n	800add6 <powf+0x9e>
 800adc0:	eeb0 0a49 	vmov.f32	s0, s18
 800adc4:	f000 ff7c 	bl	800bcc0 <finitef>
 800adc8:	b128      	cbz	r0, 800add6 <powf+0x9e>
 800adca:	eeb0 0a48 	vmov.f32	s0, s16
 800adce:	f000 ff77 	bl	800bcc0 <finitef>
 800add2:	2800      	cmp	r0, #0
 800add4:	d1d4      	bne.n	800ad80 <powf+0x48>
 800add6:	eeb0 0a68 	vmov.f32	s0, s17
 800adda:	ecbd 8b04 	vpop	{d8-d9}
 800adde:	bd08      	pop	{r3, pc}
 800ade0:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800ade4:	e7f7      	b.n	800add6 <powf+0x9e>
	...

0800ade8 <sqrtf>:
 800ade8:	b508      	push	{r3, lr}
 800adea:	ed2d 8b02 	vpush	{d8}
 800adee:	eeb0 8a40 	vmov.f32	s16, s0
 800adf2:	f000 fc21 	bl	800b638 <__ieee754_sqrtf>
 800adf6:	eeb4 8a48 	vcmp.f32	s16, s16
 800adfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800adfe:	d60c      	bvs.n	800ae1a <sqrtf+0x32>
 800ae00:	eddf 8a07 	vldr	s17, [pc, #28]	; 800ae20 <sqrtf+0x38>
 800ae04:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ae08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae0c:	d505      	bpl.n	800ae1a <sqrtf+0x32>
 800ae0e:	f7fb f943 	bl	8006098 <__errno>
 800ae12:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ae16:	2321      	movs	r3, #33	; 0x21
 800ae18:	6003      	str	r3, [r0, #0]
 800ae1a:	ecbd 8b02 	vpop	{d8}
 800ae1e:	bd08      	pop	{r3, pc}
 800ae20:	00000000 	.word	0x00000000

0800ae24 <__ieee754_powf>:
 800ae24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae28:	ee10 4a90 	vmov	r4, s1
 800ae2c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 800ae30:	ed2d 8b02 	vpush	{d8}
 800ae34:	ee10 6a10 	vmov	r6, s0
 800ae38:	eeb0 8a40 	vmov.f32	s16, s0
 800ae3c:	eef0 8a60 	vmov.f32	s17, s1
 800ae40:	d10c      	bne.n	800ae5c <__ieee754_powf+0x38>
 800ae42:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 800ae46:	0076      	lsls	r6, r6, #1
 800ae48:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800ae4c:	f240 8296 	bls.w	800b37c <__ieee754_powf+0x558>
 800ae50:	ee38 0a28 	vadd.f32	s0, s16, s17
 800ae54:	ecbd 8b02 	vpop	{d8}
 800ae58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae5c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800ae60:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800ae64:	dcf4      	bgt.n	800ae50 <__ieee754_powf+0x2c>
 800ae66:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800ae6a:	dd08      	ble.n	800ae7e <__ieee754_powf+0x5a>
 800ae6c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 800ae70:	d1ee      	bne.n	800ae50 <__ieee754_powf+0x2c>
 800ae72:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 800ae76:	0064      	lsls	r4, r4, #1
 800ae78:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 800ae7c:	e7e6      	b.n	800ae4c <__ieee754_powf+0x28>
 800ae7e:	2e00      	cmp	r6, #0
 800ae80:	da20      	bge.n	800aec4 <__ieee754_powf+0xa0>
 800ae82:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 800ae86:	da2d      	bge.n	800aee4 <__ieee754_powf+0xc0>
 800ae88:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800ae8c:	f2c0 827f 	blt.w	800b38e <__ieee754_powf+0x56a>
 800ae90:	ea4f 53e8 	mov.w	r3, r8, asr #23
 800ae94:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ae98:	fa48 f703 	asr.w	r7, r8, r3
 800ae9c:	fa07 f303 	lsl.w	r3, r7, r3
 800aea0:	4543      	cmp	r3, r8
 800aea2:	f040 8274 	bne.w	800b38e <__ieee754_powf+0x56a>
 800aea6:	f007 0701 	and.w	r7, r7, #1
 800aeaa:	f1c7 0702 	rsb	r7, r7, #2
 800aeae:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 800aeb2:	d11f      	bne.n	800aef4 <__ieee754_powf+0xd0>
 800aeb4:	2c00      	cmp	r4, #0
 800aeb6:	f280 8267 	bge.w	800b388 <__ieee754_powf+0x564>
 800aeba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800aebe:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800aec2:	e7c7      	b.n	800ae54 <__ieee754_powf+0x30>
 800aec4:	2700      	movs	r7, #0
 800aec6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800aeca:	d1f0      	bne.n	800aeae <__ieee754_powf+0x8a>
 800aecc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 800aed0:	f000 8254 	beq.w	800b37c <__ieee754_powf+0x558>
 800aed4:	dd08      	ble.n	800aee8 <__ieee754_powf+0xc4>
 800aed6:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 800b1e0 <__ieee754_powf+0x3bc>
 800aeda:	2c00      	cmp	r4, #0
 800aedc:	bfa8      	it	ge
 800aede:	eeb0 0a68 	vmovge.f32	s0, s17
 800aee2:	e7b7      	b.n	800ae54 <__ieee754_powf+0x30>
 800aee4:	2702      	movs	r7, #2
 800aee6:	e7ee      	b.n	800aec6 <__ieee754_powf+0xa2>
 800aee8:	2c00      	cmp	r4, #0
 800aeea:	f280 824a 	bge.w	800b382 <__ieee754_powf+0x55e>
 800aeee:	eeb1 0a68 	vneg.f32	s0, s17
 800aef2:	e7af      	b.n	800ae54 <__ieee754_powf+0x30>
 800aef4:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800aef8:	d102      	bne.n	800af00 <__ieee754_powf+0xdc>
 800aefa:	ee28 0a08 	vmul.f32	s0, s16, s16
 800aefe:	e7a9      	b.n	800ae54 <__ieee754_powf+0x30>
 800af00:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800af04:	eeb0 0a48 	vmov.f32	s0, s16
 800af08:	d107      	bne.n	800af1a <__ieee754_powf+0xf6>
 800af0a:	2e00      	cmp	r6, #0
 800af0c:	db05      	blt.n	800af1a <__ieee754_powf+0xf6>
 800af0e:	ecbd 8b02 	vpop	{d8}
 800af12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af16:	f000 bb8f 	b.w	800b638 <__ieee754_sqrtf>
 800af1a:	f7ff febf 	bl	800ac9c <fabsf>
 800af1e:	b125      	cbz	r5, 800af2a <__ieee754_powf+0x106>
 800af20:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 800af24:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800af28:	d116      	bne.n	800af58 <__ieee754_powf+0x134>
 800af2a:	2c00      	cmp	r4, #0
 800af2c:	bfbc      	itt	lt
 800af2e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800af32:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800af36:	2e00      	cmp	r6, #0
 800af38:	da8c      	bge.n	800ae54 <__ieee754_powf+0x30>
 800af3a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800af3e:	ea55 0307 	orrs.w	r3, r5, r7
 800af42:	d104      	bne.n	800af4e <__ieee754_powf+0x12a>
 800af44:	ee70 7a40 	vsub.f32	s15, s0, s0
 800af48:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800af4c:	e782      	b.n	800ae54 <__ieee754_powf+0x30>
 800af4e:	2f01      	cmp	r7, #1
 800af50:	d180      	bne.n	800ae54 <__ieee754_powf+0x30>
 800af52:	eeb1 0a40 	vneg.f32	s0, s0
 800af56:	e77d      	b.n	800ae54 <__ieee754_powf+0x30>
 800af58:	0ff0      	lsrs	r0, r6, #31
 800af5a:	3801      	subs	r0, #1
 800af5c:	ea57 0300 	orrs.w	r3, r7, r0
 800af60:	d104      	bne.n	800af6c <__ieee754_powf+0x148>
 800af62:	ee38 8a48 	vsub.f32	s16, s16, s16
 800af66:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800af6a:	e773      	b.n	800ae54 <__ieee754_powf+0x30>
 800af6c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800af70:	dd74      	ble.n	800b05c <__ieee754_powf+0x238>
 800af72:	4b9c      	ldr	r3, [pc, #624]	; (800b1e4 <__ieee754_powf+0x3c0>)
 800af74:	429d      	cmp	r5, r3
 800af76:	dc08      	bgt.n	800af8a <__ieee754_powf+0x166>
 800af78:	2c00      	cmp	r4, #0
 800af7a:	da0b      	bge.n	800af94 <__ieee754_powf+0x170>
 800af7c:	2000      	movs	r0, #0
 800af7e:	ecbd 8b02 	vpop	{d8}
 800af82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af86:	f000 be95 	b.w	800bcb4 <__math_oflowf>
 800af8a:	4b97      	ldr	r3, [pc, #604]	; (800b1e8 <__ieee754_powf+0x3c4>)
 800af8c:	429d      	cmp	r5, r3
 800af8e:	dd08      	ble.n	800afa2 <__ieee754_powf+0x17e>
 800af90:	2c00      	cmp	r4, #0
 800af92:	dcf3      	bgt.n	800af7c <__ieee754_powf+0x158>
 800af94:	2000      	movs	r0, #0
 800af96:	ecbd 8b02 	vpop	{d8}
 800af9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800af9e:	f000 be83 	b.w	800bca8 <__math_uflowf>
 800afa2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800afa6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800afaa:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b1ec <__ieee754_powf+0x3c8>
 800afae:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800afb2:	eee0 6a67 	vfms.f32	s13, s0, s15
 800afb6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800afba:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800afbe:	ee20 7a00 	vmul.f32	s14, s0, s0
 800afc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afc6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800b1f0 <__ieee754_powf+0x3cc>
 800afca:	ee67 7a67 	vnmul.f32	s15, s14, s15
 800afce:	ed9f 7a89 	vldr	s14, [pc, #548]	; 800b1f4 <__ieee754_powf+0x3d0>
 800afd2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800afd6:	ed9f 7a88 	vldr	s14, [pc, #544]	; 800b1f8 <__ieee754_powf+0x3d4>
 800afda:	eef0 6a67 	vmov.f32	s13, s15
 800afde:	eee0 6a07 	vfma.f32	s13, s0, s14
 800afe2:	ee16 3a90 	vmov	r3, s13
 800afe6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800afea:	f023 030f 	bic.w	r3, r3, #15
 800afee:	ee00 3a90 	vmov	s1, r3
 800aff2:	eee0 0a47 	vfms.f32	s1, s0, s14
 800aff6:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800affa:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800affe:	f024 040f 	bic.w	r4, r4, #15
 800b002:	ee07 4a10 	vmov	s14, r4
 800b006:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800b00a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800b00e:	ee07 3a90 	vmov	s15, r3
 800b012:	eee7 0a27 	vfma.f32	s1, s14, s15
 800b016:	3f01      	subs	r7, #1
 800b018:	ea57 0200 	orrs.w	r2, r7, r0
 800b01c:	ee07 4a10 	vmov	s14, r4
 800b020:	ee67 7a87 	vmul.f32	s15, s15, s14
 800b024:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800b028:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800b02c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800b030:	ee17 4a10 	vmov	r4, s14
 800b034:	bf08      	it	eq
 800b036:	eeb0 8a40 	vmoveq.f32	s16, s0
 800b03a:	2c00      	cmp	r4, #0
 800b03c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b040:	f340 817e 	ble.w	800b340 <__ieee754_powf+0x51c>
 800b044:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800b048:	f340 80f8 	ble.w	800b23c <__ieee754_powf+0x418>
 800b04c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b054:	bf4c      	ite	mi
 800b056:	2001      	movmi	r0, #1
 800b058:	2000      	movpl	r0, #0
 800b05a:	e790      	b.n	800af7e <__ieee754_powf+0x15a>
 800b05c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800b060:	bf01      	itttt	eq
 800b062:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800b1fc <__ieee754_powf+0x3d8>
 800b066:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800b06a:	f06f 0217 	mvneq.w	r2, #23
 800b06e:	ee17 5a90 	vmoveq	r5, s15
 800b072:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800b076:	bf18      	it	ne
 800b078:	2200      	movne	r2, #0
 800b07a:	3b7f      	subs	r3, #127	; 0x7f
 800b07c:	4413      	add	r3, r2
 800b07e:	4a60      	ldr	r2, [pc, #384]	; (800b200 <__ieee754_powf+0x3dc>)
 800b080:	f3c5 0516 	ubfx	r5, r5, #0, #23
 800b084:	4295      	cmp	r5, r2
 800b086:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 800b08a:	dd06      	ble.n	800b09a <__ieee754_powf+0x276>
 800b08c:	4a5d      	ldr	r2, [pc, #372]	; (800b204 <__ieee754_powf+0x3e0>)
 800b08e:	4295      	cmp	r5, r2
 800b090:	f340 80a4 	ble.w	800b1dc <__ieee754_powf+0x3b8>
 800b094:	3301      	adds	r3, #1
 800b096:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800b09a:	2500      	movs	r5, #0
 800b09c:	4a5a      	ldr	r2, [pc, #360]	; (800b208 <__ieee754_powf+0x3e4>)
 800b09e:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 800b0a2:	ee07 1a90 	vmov	s15, r1
 800b0a6:	ed92 7a00 	vldr	s14, [r2]
 800b0aa:	4a58      	ldr	r2, [pc, #352]	; (800b20c <__ieee754_powf+0x3e8>)
 800b0ac:	ee37 6a27 	vadd.f32	s12, s14, s15
 800b0b0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800b0b4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800b0b8:	1049      	asrs	r1, r1, #1
 800b0ba:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800b0be:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800b0c2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 800b0c6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 800b0ca:	ee06 1a10 	vmov	s12, r1
 800b0ce:	ee65 4a26 	vmul.f32	s9, s10, s13
 800b0d2:	ee36 7a47 	vsub.f32	s14, s12, s14
 800b0d6:	ee14 6a90 	vmov	r6, s9
 800b0da:	4016      	ands	r6, r2
 800b0dc:	ee05 6a90 	vmov	s11, r6
 800b0e0:	eea5 5ac6 	vfms.f32	s10, s11, s12
 800b0e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b0e8:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b210 <__ieee754_powf+0x3ec>
 800b0ec:	eea5 5ae7 	vfms.f32	s10, s11, s15
 800b0f0:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800b0f4:	ee25 6a26 	vmul.f32	s12, s10, s13
 800b0f8:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b214 <__ieee754_powf+0x3f0>
 800b0fc:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800b100:	eddf 6a45 	vldr	s13, [pc, #276]	; 800b218 <__ieee754_powf+0x3f4>
 800b104:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b108:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b1ec <__ieee754_powf+0x3c8>
 800b10c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b110:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b21c <__ieee754_powf+0x3f8>
 800b114:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b118:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800b220 <__ieee754_powf+0x3fc>
 800b11c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800b120:	ee74 6aa5 	vadd.f32	s13, s9, s11
 800b124:	ee27 5aa7 	vmul.f32	s10, s15, s15
 800b128:	ee66 6a86 	vmul.f32	s13, s13, s12
 800b12c:	eee5 6a07 	vfma.f32	s13, s10, s14
 800b130:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800b134:	eef0 7a45 	vmov.f32	s15, s10
 800b138:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800b13c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b140:	ee17 1a90 	vmov	r1, s15
 800b144:	4011      	ands	r1, r2
 800b146:	ee07 1a90 	vmov	s15, r1
 800b14a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800b14e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 800b152:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b156:	ee27 7a24 	vmul.f32	s14, s14, s9
 800b15a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b15e:	eeb0 6a47 	vmov.f32	s12, s14
 800b162:	eea5 6aa7 	vfma.f32	s12, s11, s15
 800b166:	ee16 1a10 	vmov	r1, s12
 800b16a:	4011      	ands	r1, r2
 800b16c:	ee06 1a90 	vmov	s13, r1
 800b170:	eee5 6ae7 	vfms.f32	s13, s11, s15
 800b174:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800b224 <__ieee754_powf+0x400>
 800b178:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800b228 <__ieee754_powf+0x404>
 800b17c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b180:	ee06 1a10 	vmov	s12, r1
 800b184:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b188:	eddf 7a28 	vldr	s15, [pc, #160]	; 800b22c <__ieee754_powf+0x408>
 800b18c:	4928      	ldr	r1, [pc, #160]	; (800b230 <__ieee754_powf+0x40c>)
 800b18e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800b192:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800b196:	edd1 7a00 	vldr	s15, [r1]
 800b19a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800b19e:	ee07 3a90 	vmov	s15, r3
 800b1a2:	4b24      	ldr	r3, [pc, #144]	; (800b234 <__ieee754_powf+0x410>)
 800b1a4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800b1a8:	eef0 7a47 	vmov.f32	s15, s14
 800b1ac:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b1b0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 800b1b4:	edd5 0a00 	vldr	s1, [r5]
 800b1b8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800b1bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1c0:	ee17 3a90 	vmov	r3, s15
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	ee07 3a90 	vmov	s15, r3
 800b1ca:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800b1ce:	ee76 6ae0 	vsub.f32	s13, s13, s1
 800b1d2:	eee6 6a65 	vfms.f32	s13, s12, s11
 800b1d6:	ee77 7a66 	vsub.f32	s15, s14, s13
 800b1da:	e70e      	b.n	800affa <__ieee754_powf+0x1d6>
 800b1dc:	2501      	movs	r5, #1
 800b1de:	e75d      	b.n	800b09c <__ieee754_powf+0x278>
 800b1e0:	00000000 	.word	0x00000000
 800b1e4:	3f7ffff3 	.word	0x3f7ffff3
 800b1e8:	3f800007 	.word	0x3f800007
 800b1ec:	3eaaaaab 	.word	0x3eaaaaab
 800b1f0:	3fb8aa3b 	.word	0x3fb8aa3b
 800b1f4:	36eca570 	.word	0x36eca570
 800b1f8:	3fb8aa00 	.word	0x3fb8aa00
 800b1fc:	4b800000 	.word	0x4b800000
 800b200:	001cc471 	.word	0x001cc471
 800b204:	005db3d6 	.word	0x005db3d6
 800b208:	0800c35c 	.word	0x0800c35c
 800b20c:	fffff000 	.word	0xfffff000
 800b210:	3e6c3255 	.word	0x3e6c3255
 800b214:	3e53f142 	.word	0x3e53f142
 800b218:	3e8ba305 	.word	0x3e8ba305
 800b21c:	3edb6db7 	.word	0x3edb6db7
 800b220:	3f19999a 	.word	0x3f19999a
 800b224:	3f76384f 	.word	0x3f76384f
 800b228:	3f763800 	.word	0x3f763800
 800b22c:	369dc3a0 	.word	0x369dc3a0
 800b230:	0800c36c 	.word	0x0800c36c
 800b234:	0800c364 	.word	0x0800c364
 800b238:	3338aa3c 	.word	0x3338aa3c
 800b23c:	f040 8095 	bne.w	800b36a <__ieee754_powf+0x546>
 800b240:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800b238 <__ieee754_powf+0x414>
 800b244:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b248:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800b24c:	eef4 6ac7 	vcmpe.f32	s13, s14
 800b250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b254:	f73f aefa 	bgt.w	800b04c <__ieee754_powf+0x228>
 800b258:	15db      	asrs	r3, r3, #23
 800b25a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800b25e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b262:	4103      	asrs	r3, r0
 800b264:	4423      	add	r3, r4
 800b266:	494b      	ldr	r1, [pc, #300]	; (800b394 <__ieee754_powf+0x570>)
 800b268:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800b26c:	3a7f      	subs	r2, #127	; 0x7f
 800b26e:	4111      	asrs	r1, r2
 800b270:	ea23 0101 	bic.w	r1, r3, r1
 800b274:	ee07 1a10 	vmov	s14, r1
 800b278:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800b27c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800b280:	f1c2 0217 	rsb	r2, r2, #23
 800b284:	4110      	asrs	r0, r2
 800b286:	2c00      	cmp	r4, #0
 800b288:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b28c:	bfb8      	it	lt
 800b28e:	4240      	neglt	r0, r0
 800b290:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800b294:	ed9f 0a40 	vldr	s0, [pc, #256]	; 800b398 <__ieee754_powf+0x574>
 800b298:	eddf 6a40 	vldr	s13, [pc, #256]	; 800b39c <__ieee754_powf+0x578>
 800b29c:	ee17 3a10 	vmov	r3, s14
 800b2a0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b2a4:	f023 030f 	bic.w	r3, r3, #15
 800b2a8:	ee07 3a10 	vmov	s14, r3
 800b2ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b2b0:	ee27 0a00 	vmul.f32	s0, s14, s0
 800b2b4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800b2b8:	eddf 7a39 	vldr	s15, [pc, #228]	; 800b3a0 <__ieee754_powf+0x57c>
 800b2bc:	eea0 0aa7 	vfma.f32	s0, s1, s15
 800b2c0:	eef0 7a40 	vmov.f32	s15, s0
 800b2c4:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b2c8:	eeb0 6a67 	vmov.f32	s12, s15
 800b2cc:	eea7 6a66 	vfms.f32	s12, s14, s13
 800b2d0:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800b2d4:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b2d8:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b3a4 <__ieee754_powf+0x580>
 800b2dc:	ed9f 6a32 	vldr	s12, [pc, #200]	; 800b3a8 <__ieee754_powf+0x584>
 800b2e0:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b2e4:	ed9f 6a31 	vldr	s12, [pc, #196]	; 800b3ac <__ieee754_powf+0x588>
 800b2e8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b2ec:	eddf 6a30 	vldr	s13, [pc, #192]	; 800b3b0 <__ieee754_powf+0x58c>
 800b2f0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b2f4:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800b3b4 <__ieee754_powf+0x590>
 800b2f8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b2fc:	eef0 6a67 	vmov.f32	s13, s15
 800b300:	eee6 6a47 	vfms.f32	s13, s12, s14
 800b304:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800b308:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800b30c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800b310:	eea7 0a80 	vfma.f32	s0, s15, s0
 800b314:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800b318:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b31c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800b320:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b324:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b328:	ee10 3a10 	vmov	r3, s0
 800b32c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800b330:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b334:	da1f      	bge.n	800b376 <__ieee754_powf+0x552>
 800b336:	f000 fd13 	bl	800bd60 <scalbnf>
 800b33a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800b33e:	e589      	b.n	800ae54 <__ieee754_powf+0x30>
 800b340:	4a1d      	ldr	r2, [pc, #116]	; (800b3b8 <__ieee754_powf+0x594>)
 800b342:	4293      	cmp	r3, r2
 800b344:	dd07      	ble.n	800b356 <__ieee754_powf+0x532>
 800b346:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800b34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b34e:	bf4c      	ite	mi
 800b350:	2001      	movmi	r0, #1
 800b352:	2000      	movpl	r0, #0
 800b354:	e61f      	b.n	800af96 <__ieee754_powf+0x172>
 800b356:	d108      	bne.n	800b36a <__ieee754_powf+0x546>
 800b358:	ee37 7a67 	vsub.f32	s14, s14, s15
 800b35c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800b360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b364:	f6ff af78 	blt.w	800b258 <__ieee754_powf+0x434>
 800b368:	e7ed      	b.n	800b346 <__ieee754_powf+0x522>
 800b36a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800b36e:	f73f af73 	bgt.w	800b258 <__ieee754_powf+0x434>
 800b372:	2000      	movs	r0, #0
 800b374:	e78c      	b.n	800b290 <__ieee754_powf+0x46c>
 800b376:	ee00 3a10 	vmov	s0, r3
 800b37a:	e7de      	b.n	800b33a <__ieee754_powf+0x516>
 800b37c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b380:	e568      	b.n	800ae54 <__ieee754_powf+0x30>
 800b382:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 800b3bc <__ieee754_powf+0x598>
 800b386:	e565      	b.n	800ae54 <__ieee754_powf+0x30>
 800b388:	eeb0 0a48 	vmov.f32	s0, s16
 800b38c:	e562      	b.n	800ae54 <__ieee754_powf+0x30>
 800b38e:	2700      	movs	r7, #0
 800b390:	e58d      	b.n	800aeae <__ieee754_powf+0x8a>
 800b392:	bf00      	nop
 800b394:	007fffff 	.word	0x007fffff
 800b398:	35bfbe8c 	.word	0x35bfbe8c
 800b39c:	3f317200 	.word	0x3f317200
 800b3a0:	3f317218 	.word	0x3f317218
 800b3a4:	b5ddea0e 	.word	0xb5ddea0e
 800b3a8:	3331bb4c 	.word	0x3331bb4c
 800b3ac:	388ab355 	.word	0x388ab355
 800b3b0:	bb360b61 	.word	0xbb360b61
 800b3b4:	3e2aaaab 	.word	0x3e2aaaab
 800b3b8:	43160000 	.word	0x43160000
 800b3bc:	00000000 	.word	0x00000000

0800b3c0 <__ieee754_rem_pio2f>:
 800b3c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3c2:	ee10 6a10 	vmov	r6, s0
 800b3c6:	4b8e      	ldr	r3, [pc, #568]	; (800b600 <__ieee754_rem_pio2f+0x240>)
 800b3c8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800b3cc:	429d      	cmp	r5, r3
 800b3ce:	b087      	sub	sp, #28
 800b3d0:	eef0 7a40 	vmov.f32	s15, s0
 800b3d4:	4604      	mov	r4, r0
 800b3d6:	dc05      	bgt.n	800b3e4 <__ieee754_rem_pio2f+0x24>
 800b3d8:	2300      	movs	r3, #0
 800b3da:	ed80 0a00 	vstr	s0, [r0]
 800b3de:	6043      	str	r3, [r0, #4]
 800b3e0:	2000      	movs	r0, #0
 800b3e2:	e01a      	b.n	800b41a <__ieee754_rem_pio2f+0x5a>
 800b3e4:	4b87      	ldr	r3, [pc, #540]	; (800b604 <__ieee754_rem_pio2f+0x244>)
 800b3e6:	429d      	cmp	r5, r3
 800b3e8:	dc46      	bgt.n	800b478 <__ieee754_rem_pio2f+0xb8>
 800b3ea:	2e00      	cmp	r6, #0
 800b3ec:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800b608 <__ieee754_rem_pio2f+0x248>
 800b3f0:	4b86      	ldr	r3, [pc, #536]	; (800b60c <__ieee754_rem_pio2f+0x24c>)
 800b3f2:	f025 050f 	bic.w	r5, r5, #15
 800b3f6:	dd1f      	ble.n	800b438 <__ieee754_rem_pio2f+0x78>
 800b3f8:	429d      	cmp	r5, r3
 800b3fa:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b3fe:	d00e      	beq.n	800b41e <__ieee754_rem_pio2f+0x5e>
 800b400:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800b610 <__ieee754_rem_pio2f+0x250>
 800b404:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800b408:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b40c:	ed80 0a00 	vstr	s0, [r0]
 800b410:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b414:	2001      	movs	r0, #1
 800b416:	edc4 7a01 	vstr	s15, [r4, #4]
 800b41a:	b007      	add	sp, #28
 800b41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b41e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800b614 <__ieee754_rem_pio2f+0x254>
 800b422:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800b618 <__ieee754_rem_pio2f+0x258>
 800b426:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b42a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800b42e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b432:	edc0 6a00 	vstr	s13, [r0]
 800b436:	e7eb      	b.n	800b410 <__ieee754_rem_pio2f+0x50>
 800b438:	429d      	cmp	r5, r3
 800b43a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b43e:	d00e      	beq.n	800b45e <__ieee754_rem_pio2f+0x9e>
 800b440:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800b610 <__ieee754_rem_pio2f+0x250>
 800b444:	ee37 0a87 	vadd.f32	s0, s15, s14
 800b448:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800b44c:	ed80 0a00 	vstr	s0, [r0]
 800b450:	ee77 7a87 	vadd.f32	s15, s15, s14
 800b454:	f04f 30ff 	mov.w	r0, #4294967295
 800b458:	edc4 7a01 	vstr	s15, [r4, #4]
 800b45c:	e7dd      	b.n	800b41a <__ieee754_rem_pio2f+0x5a>
 800b45e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800b614 <__ieee754_rem_pio2f+0x254>
 800b462:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800b618 <__ieee754_rem_pio2f+0x258>
 800b466:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b46a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800b46e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b472:	edc0 6a00 	vstr	s13, [r0]
 800b476:	e7eb      	b.n	800b450 <__ieee754_rem_pio2f+0x90>
 800b478:	4b68      	ldr	r3, [pc, #416]	; (800b61c <__ieee754_rem_pio2f+0x25c>)
 800b47a:	429d      	cmp	r5, r3
 800b47c:	dc72      	bgt.n	800b564 <__ieee754_rem_pio2f+0x1a4>
 800b47e:	f7ff fc0d 	bl	800ac9c <fabsf>
 800b482:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800b620 <__ieee754_rem_pio2f+0x260>
 800b486:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b48a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b48e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b492:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b496:	ee17 0a90 	vmov	r0, s15
 800b49a:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800b608 <__ieee754_rem_pio2f+0x248>
 800b49e:	eea7 0a67 	vfms.f32	s0, s14, s15
 800b4a2:	281f      	cmp	r0, #31
 800b4a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800b610 <__ieee754_rem_pio2f+0x250>
 800b4a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b4ac:	eeb1 6a47 	vneg.f32	s12, s14
 800b4b0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b4b4:	ee16 2a90 	vmov	r2, s13
 800b4b8:	dc1c      	bgt.n	800b4f4 <__ieee754_rem_pio2f+0x134>
 800b4ba:	495a      	ldr	r1, [pc, #360]	; (800b624 <__ieee754_rem_pio2f+0x264>)
 800b4bc:	1e47      	subs	r7, r0, #1
 800b4be:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800b4c2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800b4c6:	428b      	cmp	r3, r1
 800b4c8:	d014      	beq.n	800b4f4 <__ieee754_rem_pio2f+0x134>
 800b4ca:	6022      	str	r2, [r4, #0]
 800b4cc:	ed94 7a00 	vldr	s14, [r4]
 800b4d0:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b4d4:	2e00      	cmp	r6, #0
 800b4d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b4da:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4de:	da9c      	bge.n	800b41a <__ieee754_rem_pio2f+0x5a>
 800b4e0:	eeb1 7a47 	vneg.f32	s14, s14
 800b4e4:	eeb1 0a40 	vneg.f32	s0, s0
 800b4e8:	ed84 7a00 	vstr	s14, [r4]
 800b4ec:	ed84 0a01 	vstr	s0, [r4, #4]
 800b4f0:	4240      	negs	r0, r0
 800b4f2:	e792      	b.n	800b41a <__ieee754_rem_pio2f+0x5a>
 800b4f4:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b4f8:	15eb      	asrs	r3, r5, #23
 800b4fa:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800b4fe:	2d08      	cmp	r5, #8
 800b500:	dde3      	ble.n	800b4ca <__ieee754_rem_pio2f+0x10a>
 800b502:	eddf 7a44 	vldr	s15, [pc, #272]	; 800b614 <__ieee754_rem_pio2f+0x254>
 800b506:	eddf 5a44 	vldr	s11, [pc, #272]	; 800b618 <__ieee754_rem_pio2f+0x258>
 800b50a:	eef0 6a40 	vmov.f32	s13, s0
 800b50e:	eee6 6a27 	vfma.f32	s13, s12, s15
 800b512:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b516:	eea6 0a27 	vfma.f32	s0, s12, s15
 800b51a:	eef0 7a40 	vmov.f32	s15, s0
 800b51e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800b522:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800b526:	ee15 2a90 	vmov	r2, s11
 800b52a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800b52e:	1a5b      	subs	r3, r3, r1
 800b530:	2b19      	cmp	r3, #25
 800b532:	dc04      	bgt.n	800b53e <__ieee754_rem_pio2f+0x17e>
 800b534:	edc4 5a00 	vstr	s11, [r4]
 800b538:	eeb0 0a66 	vmov.f32	s0, s13
 800b53c:	e7c6      	b.n	800b4cc <__ieee754_rem_pio2f+0x10c>
 800b53e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800b628 <__ieee754_rem_pio2f+0x268>
 800b542:	eeb0 0a66 	vmov.f32	s0, s13
 800b546:	eea6 0a25 	vfma.f32	s0, s12, s11
 800b54a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800b54e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800b62c <__ieee754_rem_pio2f+0x26c>
 800b552:	eee6 7a25 	vfma.f32	s15, s12, s11
 800b556:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800b55a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b55e:	ed84 7a00 	vstr	s14, [r4]
 800b562:	e7b3      	b.n	800b4cc <__ieee754_rem_pio2f+0x10c>
 800b564:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b568:	db06      	blt.n	800b578 <__ieee754_rem_pio2f+0x1b8>
 800b56a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800b56e:	edc0 7a01 	vstr	s15, [r0, #4]
 800b572:	edc0 7a00 	vstr	s15, [r0]
 800b576:	e733      	b.n	800b3e0 <__ieee754_rem_pio2f+0x20>
 800b578:	15ea      	asrs	r2, r5, #23
 800b57a:	3a86      	subs	r2, #134	; 0x86
 800b57c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800b580:	ee07 3a90 	vmov	s15, r3
 800b584:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b588:	eddf 6a29 	vldr	s13, [pc, #164]	; 800b630 <__ieee754_rem_pio2f+0x270>
 800b58c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b590:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b594:	ed8d 7a03 	vstr	s14, [sp, #12]
 800b598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b59c:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800b5a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b5a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b5a8:	ed8d 7a04 	vstr	s14, [sp, #16]
 800b5ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800b5b0:	eef5 7a40 	vcmp.f32	s15, #0.0
 800b5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b8:	edcd 7a05 	vstr	s15, [sp, #20]
 800b5bc:	d11e      	bne.n	800b5fc <__ieee754_rem_pio2f+0x23c>
 800b5be:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800b5c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5c6:	bf14      	ite	ne
 800b5c8:	2302      	movne	r3, #2
 800b5ca:	2301      	moveq	r3, #1
 800b5cc:	4919      	ldr	r1, [pc, #100]	; (800b634 <__ieee754_rem_pio2f+0x274>)
 800b5ce:	9101      	str	r1, [sp, #4]
 800b5d0:	2102      	movs	r1, #2
 800b5d2:	9100      	str	r1, [sp, #0]
 800b5d4:	a803      	add	r0, sp, #12
 800b5d6:	4621      	mov	r1, r4
 800b5d8:	f000 f892 	bl	800b700 <__kernel_rem_pio2f>
 800b5dc:	2e00      	cmp	r6, #0
 800b5de:	f6bf af1c 	bge.w	800b41a <__ieee754_rem_pio2f+0x5a>
 800b5e2:	edd4 7a00 	vldr	s15, [r4]
 800b5e6:	eef1 7a67 	vneg.f32	s15, s15
 800b5ea:	edc4 7a00 	vstr	s15, [r4]
 800b5ee:	edd4 7a01 	vldr	s15, [r4, #4]
 800b5f2:	eef1 7a67 	vneg.f32	s15, s15
 800b5f6:	edc4 7a01 	vstr	s15, [r4, #4]
 800b5fa:	e779      	b.n	800b4f0 <__ieee754_rem_pio2f+0x130>
 800b5fc:	2303      	movs	r3, #3
 800b5fe:	e7e5      	b.n	800b5cc <__ieee754_rem_pio2f+0x20c>
 800b600:	3f490fd8 	.word	0x3f490fd8
 800b604:	4016cbe3 	.word	0x4016cbe3
 800b608:	3fc90f80 	.word	0x3fc90f80
 800b60c:	3fc90fd0 	.word	0x3fc90fd0
 800b610:	37354443 	.word	0x37354443
 800b614:	37354400 	.word	0x37354400
 800b618:	2e85a308 	.word	0x2e85a308
 800b61c:	43490f80 	.word	0x43490f80
 800b620:	3f22f984 	.word	0x3f22f984
 800b624:	0800c374 	.word	0x0800c374
 800b628:	2e85a300 	.word	0x2e85a300
 800b62c:	248d3132 	.word	0x248d3132
 800b630:	43800000 	.word	0x43800000
 800b634:	0800c3f4 	.word	0x0800c3f4

0800b638 <__ieee754_sqrtf>:
 800b638:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800b63c:	4770      	bx	lr
	...

0800b640 <__kernel_cosf>:
 800b640:	ee10 3a10 	vmov	r3, s0
 800b644:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b648:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800b64c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b650:	da05      	bge.n	800b65e <__kernel_cosf+0x1e>
 800b652:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800b656:	ee17 2a90 	vmov	r2, s15
 800b65a:	2a00      	cmp	r2, #0
 800b65c:	d03d      	beq.n	800b6da <__kernel_cosf+0x9a>
 800b65e:	ee60 5a00 	vmul.f32	s11, s0, s0
 800b662:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800b6e0 <__kernel_cosf+0xa0>
 800b666:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800b6e4 <__kernel_cosf+0xa4>
 800b66a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800b6e8 <__kernel_cosf+0xa8>
 800b66e:	4a1f      	ldr	r2, [pc, #124]	; (800b6ec <__kernel_cosf+0xac>)
 800b670:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800b674:	4293      	cmp	r3, r2
 800b676:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800b6f0 <__kernel_cosf+0xb0>
 800b67a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b67e:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800b6f4 <__kernel_cosf+0xb4>
 800b682:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b686:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800b6f8 <__kernel_cosf+0xb8>
 800b68a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800b68e:	eeb0 7a66 	vmov.f32	s14, s13
 800b692:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800b696:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800b69a:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800b69e:	ee67 6a25 	vmul.f32	s13, s14, s11
 800b6a2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800b6a6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b6aa:	dc04      	bgt.n	800b6b6 <__kernel_cosf+0x76>
 800b6ac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800b6b0:	ee36 0a47 	vsub.f32	s0, s12, s14
 800b6b4:	4770      	bx	lr
 800b6b6:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <__kernel_cosf+0xbc>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	bfda      	itte	le
 800b6bc:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800b6c0:	ee06 3a90 	vmovle	s13, r3
 800b6c4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800b6c8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b6cc:	ee36 0a66 	vsub.f32	s0, s12, s13
 800b6d0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b6d4:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b6d8:	4770      	bx	lr
 800b6da:	eeb0 0a46 	vmov.f32	s0, s12
 800b6de:	4770      	bx	lr
 800b6e0:	ad47d74e 	.word	0xad47d74e
 800b6e4:	310f74f6 	.word	0x310f74f6
 800b6e8:	3d2aaaab 	.word	0x3d2aaaab
 800b6ec:	3e999999 	.word	0x3e999999
 800b6f0:	b493f27c 	.word	0xb493f27c
 800b6f4:	37d00d01 	.word	0x37d00d01
 800b6f8:	bab60b61 	.word	0xbab60b61
 800b6fc:	3f480000 	.word	0x3f480000

0800b700 <__kernel_rem_pio2f>:
 800b700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b704:	ed2d 8b04 	vpush	{d8-d9}
 800b708:	b0d9      	sub	sp, #356	; 0x164
 800b70a:	4688      	mov	r8, r1
 800b70c:	9002      	str	r0, [sp, #8]
 800b70e:	49bb      	ldr	r1, [pc, #748]	; (800b9fc <__kernel_rem_pio2f+0x2fc>)
 800b710:	9866      	ldr	r0, [sp, #408]	; 0x198
 800b712:	9301      	str	r3, [sp, #4]
 800b714:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800b718:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800b71c:	1e59      	subs	r1, r3, #1
 800b71e:	1d13      	adds	r3, r2, #4
 800b720:	db27      	blt.n	800b772 <__kernel_rem_pio2f+0x72>
 800b722:	f1b2 0b03 	subs.w	fp, r2, #3
 800b726:	bf48      	it	mi
 800b728:	f102 0b04 	addmi.w	fp, r2, #4
 800b72c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800b730:	1c45      	adds	r5, r0, #1
 800b732:	00ec      	lsls	r4, r5, #3
 800b734:	1a47      	subs	r7, r0, r1
 800b736:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800b73a:	9403      	str	r4, [sp, #12]
 800b73c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800b740:	eb0a 0c01 	add.w	ip, sl, r1
 800b744:	ae1c      	add	r6, sp, #112	; 0x70
 800b746:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800b74a:	2400      	movs	r4, #0
 800b74c:	4564      	cmp	r4, ip
 800b74e:	dd12      	ble.n	800b776 <__kernel_rem_pio2f+0x76>
 800b750:	9b01      	ldr	r3, [sp, #4]
 800b752:	ac1c      	add	r4, sp, #112	; 0x70
 800b754:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800b758:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800b75c:	f04f 0c00 	mov.w	ip, #0
 800b760:	45d4      	cmp	ip, sl
 800b762:	dc27      	bgt.n	800b7b4 <__kernel_rem_pio2f+0xb4>
 800b764:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800b768:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800b76c:	4627      	mov	r7, r4
 800b76e:	2600      	movs	r6, #0
 800b770:	e016      	b.n	800b7a0 <__kernel_rem_pio2f+0xa0>
 800b772:	2000      	movs	r0, #0
 800b774:	e7dc      	b.n	800b730 <__kernel_rem_pio2f+0x30>
 800b776:	42e7      	cmn	r7, r4
 800b778:	bf5d      	ittte	pl
 800b77a:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800b77e:	ee07 3a90 	vmovpl	s15, r3
 800b782:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800b786:	eef0 7a47 	vmovmi.f32	s15, s14
 800b78a:	ece6 7a01 	vstmia	r6!, {s15}
 800b78e:	3401      	adds	r4, #1
 800b790:	e7dc      	b.n	800b74c <__kernel_rem_pio2f+0x4c>
 800b792:	ecf9 6a01 	vldmia	r9!, {s13}
 800b796:	ed97 7a00 	vldr	s14, [r7]
 800b79a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b79e:	3601      	adds	r6, #1
 800b7a0:	428e      	cmp	r6, r1
 800b7a2:	f1a7 0704 	sub.w	r7, r7, #4
 800b7a6:	ddf4      	ble.n	800b792 <__kernel_rem_pio2f+0x92>
 800b7a8:	eceb 7a01 	vstmia	fp!, {s15}
 800b7ac:	f10c 0c01 	add.w	ip, ip, #1
 800b7b0:	3404      	adds	r4, #4
 800b7b2:	e7d5      	b.n	800b760 <__kernel_rem_pio2f+0x60>
 800b7b4:	ab08      	add	r3, sp, #32
 800b7b6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800b7ba:	eddf 8a93 	vldr	s17, [pc, #588]	; 800ba08 <__kernel_rem_pio2f+0x308>
 800b7be:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800ba04 <__kernel_rem_pio2f+0x304>
 800b7c2:	9304      	str	r3, [sp, #16]
 800b7c4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800b7c8:	4656      	mov	r6, sl
 800b7ca:	00b3      	lsls	r3, r6, #2
 800b7cc:	9305      	str	r3, [sp, #20]
 800b7ce:	ab58      	add	r3, sp, #352	; 0x160
 800b7d0:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b7d4:	ac08      	add	r4, sp, #32
 800b7d6:	ab44      	add	r3, sp, #272	; 0x110
 800b7d8:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800b7dc:	46a4      	mov	ip, r4
 800b7de:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800b7e2:	4637      	mov	r7, r6
 800b7e4:	2f00      	cmp	r7, #0
 800b7e6:	f1a0 0004 	sub.w	r0, r0, #4
 800b7ea:	dc4f      	bgt.n	800b88c <__kernel_rem_pio2f+0x18c>
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b7f2:	f000 fab5 	bl	800bd60 <scalbnf>
 800b7f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b7fa:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b7fe:	ee28 0a00 	vmul.f32	s0, s16, s0
 800b802:	f000 fa6b 	bl	800bcdc <floorf>
 800b806:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800b80a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800b80e:	2d00      	cmp	r5, #0
 800b810:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b814:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800b818:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800b81c:	ee17 9a90 	vmov	r9, s15
 800b820:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b824:	dd44      	ble.n	800b8b0 <__kernel_rem_pio2f+0x1b0>
 800b826:	f106 3cff 	add.w	ip, r6, #4294967295
 800b82a:	ab08      	add	r3, sp, #32
 800b82c:	f1c5 0e08 	rsb	lr, r5, #8
 800b830:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800b834:	fa47 f00e 	asr.w	r0, r7, lr
 800b838:	4481      	add	r9, r0
 800b83a:	fa00 f00e 	lsl.w	r0, r0, lr
 800b83e:	1a3f      	subs	r7, r7, r0
 800b840:	f1c5 0007 	rsb	r0, r5, #7
 800b844:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800b848:	4107      	asrs	r7, r0
 800b84a:	2f00      	cmp	r7, #0
 800b84c:	dd3f      	ble.n	800b8ce <__kernel_rem_pio2f+0x1ce>
 800b84e:	f04f 0e00 	mov.w	lr, #0
 800b852:	f109 0901 	add.w	r9, r9, #1
 800b856:	4673      	mov	r3, lr
 800b858:	4576      	cmp	r6, lr
 800b85a:	dc6b      	bgt.n	800b934 <__kernel_rem_pio2f+0x234>
 800b85c:	2d00      	cmp	r5, #0
 800b85e:	dd04      	ble.n	800b86a <__kernel_rem_pio2f+0x16a>
 800b860:	2d01      	cmp	r5, #1
 800b862:	d078      	beq.n	800b956 <__kernel_rem_pio2f+0x256>
 800b864:	2d02      	cmp	r5, #2
 800b866:	f000 8081 	beq.w	800b96c <__kernel_rem_pio2f+0x26c>
 800b86a:	2f02      	cmp	r7, #2
 800b86c:	d12f      	bne.n	800b8ce <__kernel_rem_pio2f+0x1ce>
 800b86e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b872:	ee30 8a48 	vsub.f32	s16, s0, s16
 800b876:	b353      	cbz	r3, 800b8ce <__kernel_rem_pio2f+0x1ce>
 800b878:	4628      	mov	r0, r5
 800b87a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800b87e:	f000 fa6f 	bl	800bd60 <scalbnf>
 800b882:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800b886:	ee38 8a40 	vsub.f32	s16, s16, s0
 800b88a:	e020      	b.n	800b8ce <__kernel_rem_pio2f+0x1ce>
 800b88c:	ee60 7a28 	vmul.f32	s15, s0, s17
 800b890:	3f01      	subs	r7, #1
 800b892:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800b896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b89a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800b89e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800b8a2:	ecac 0a01 	vstmia	ip!, {s0}
 800b8a6:	ed90 0a00 	vldr	s0, [r0]
 800b8aa:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b8ae:	e799      	b.n	800b7e4 <__kernel_rem_pio2f+0xe4>
 800b8b0:	d105      	bne.n	800b8be <__kernel_rem_pio2f+0x1be>
 800b8b2:	1e70      	subs	r0, r6, #1
 800b8b4:	ab08      	add	r3, sp, #32
 800b8b6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800b8ba:	11ff      	asrs	r7, r7, #7
 800b8bc:	e7c5      	b.n	800b84a <__kernel_rem_pio2f+0x14a>
 800b8be:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b8c2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800b8c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8ca:	da31      	bge.n	800b930 <__kernel_rem_pio2f+0x230>
 800b8cc:	2700      	movs	r7, #0
 800b8ce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800b8d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8d6:	f040 809b 	bne.w	800ba10 <__kernel_rem_pio2f+0x310>
 800b8da:	1e74      	subs	r4, r6, #1
 800b8dc:	46a4      	mov	ip, r4
 800b8de:	2000      	movs	r0, #0
 800b8e0:	45d4      	cmp	ip, sl
 800b8e2:	da4a      	bge.n	800b97a <__kernel_rem_pio2f+0x27a>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d07a      	beq.n	800b9de <__kernel_rem_pio2f+0x2de>
 800b8e8:	ab08      	add	r3, sp, #32
 800b8ea:	3d08      	subs	r5, #8
 800b8ec:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8081 	beq.w	800b9f8 <__kernel_rem_pio2f+0x2f8>
 800b8f6:	4628      	mov	r0, r5
 800b8f8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b8fc:	00a5      	lsls	r5, r4, #2
 800b8fe:	f000 fa2f 	bl	800bd60 <scalbnf>
 800b902:	aa44      	add	r2, sp, #272	; 0x110
 800b904:	1d2b      	adds	r3, r5, #4
 800b906:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800ba08 <__kernel_rem_pio2f+0x308>
 800b90a:	18d1      	adds	r1, r2, r3
 800b90c:	4622      	mov	r2, r4
 800b90e:	2a00      	cmp	r2, #0
 800b910:	f280 80ae 	bge.w	800ba70 <__kernel_rem_pio2f+0x370>
 800b914:	4622      	mov	r2, r4
 800b916:	2a00      	cmp	r2, #0
 800b918:	f2c0 80cc 	blt.w	800bab4 <__kernel_rem_pio2f+0x3b4>
 800b91c:	a944      	add	r1, sp, #272	; 0x110
 800b91e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800b922:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800ba00 <__kernel_rem_pio2f+0x300>
 800b926:	eddf 7a39 	vldr	s15, [pc, #228]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800b92a:	2000      	movs	r0, #0
 800b92c:	1aa1      	subs	r1, r4, r2
 800b92e:	e0b6      	b.n	800ba9e <__kernel_rem_pio2f+0x39e>
 800b930:	2702      	movs	r7, #2
 800b932:	e78c      	b.n	800b84e <__kernel_rem_pio2f+0x14e>
 800b934:	6820      	ldr	r0, [r4, #0]
 800b936:	b94b      	cbnz	r3, 800b94c <__kernel_rem_pio2f+0x24c>
 800b938:	b118      	cbz	r0, 800b942 <__kernel_rem_pio2f+0x242>
 800b93a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800b93e:	6020      	str	r0, [r4, #0]
 800b940:	2001      	movs	r0, #1
 800b942:	f10e 0e01 	add.w	lr, lr, #1
 800b946:	3404      	adds	r4, #4
 800b948:	4603      	mov	r3, r0
 800b94a:	e785      	b.n	800b858 <__kernel_rem_pio2f+0x158>
 800b94c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800b950:	6020      	str	r0, [r4, #0]
 800b952:	4618      	mov	r0, r3
 800b954:	e7f5      	b.n	800b942 <__kernel_rem_pio2f+0x242>
 800b956:	1e74      	subs	r4, r6, #1
 800b958:	a808      	add	r0, sp, #32
 800b95a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b95e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800b962:	f10d 0c20 	add.w	ip, sp, #32
 800b966:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800b96a:	e77e      	b.n	800b86a <__kernel_rem_pio2f+0x16a>
 800b96c:	1e74      	subs	r4, r6, #1
 800b96e:	a808      	add	r0, sp, #32
 800b970:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800b974:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800b978:	e7f3      	b.n	800b962 <__kernel_rem_pio2f+0x262>
 800b97a:	ab08      	add	r3, sp, #32
 800b97c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800b980:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b984:	4318      	orrs	r0, r3
 800b986:	e7ab      	b.n	800b8e0 <__kernel_rem_pio2f+0x1e0>
 800b988:	f10c 0c01 	add.w	ip, ip, #1
 800b98c:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800b990:	2c00      	cmp	r4, #0
 800b992:	d0f9      	beq.n	800b988 <__kernel_rem_pio2f+0x288>
 800b994:	9b05      	ldr	r3, [sp, #20]
 800b996:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800b99a:	eb0d 0003 	add.w	r0, sp, r3
 800b99e:	9b01      	ldr	r3, [sp, #4]
 800b9a0:	18f4      	adds	r4, r6, r3
 800b9a2:	ab1c      	add	r3, sp, #112	; 0x70
 800b9a4:	1c77      	adds	r7, r6, #1
 800b9a6:	384c      	subs	r0, #76	; 0x4c
 800b9a8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b9ac:	4466      	add	r6, ip
 800b9ae:	42be      	cmp	r6, r7
 800b9b0:	f6ff af0b 	blt.w	800b7ca <__kernel_rem_pio2f+0xca>
 800b9b4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800b9b8:	f8dd e008 	ldr.w	lr, [sp, #8]
 800b9bc:	ee07 3a90 	vmov	s15, r3
 800b9c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b9c4:	f04f 0c00 	mov.w	ip, #0
 800b9c8:	ece4 7a01 	vstmia	r4!, {s15}
 800b9cc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800b9d0:	46a1      	mov	r9, r4
 800b9d2:	458c      	cmp	ip, r1
 800b9d4:	dd07      	ble.n	800b9e6 <__kernel_rem_pio2f+0x2e6>
 800b9d6:	ece0 7a01 	vstmia	r0!, {s15}
 800b9da:	3701      	adds	r7, #1
 800b9dc:	e7e7      	b.n	800b9ae <__kernel_rem_pio2f+0x2ae>
 800b9de:	9804      	ldr	r0, [sp, #16]
 800b9e0:	f04f 0c01 	mov.w	ip, #1
 800b9e4:	e7d2      	b.n	800b98c <__kernel_rem_pio2f+0x28c>
 800b9e6:	ecfe 6a01 	vldmia	lr!, {s13}
 800b9ea:	ed39 7a01 	vldmdb	r9!, {s14}
 800b9ee:	f10c 0c01 	add.w	ip, ip, #1
 800b9f2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b9f6:	e7ec      	b.n	800b9d2 <__kernel_rem_pio2f+0x2d2>
 800b9f8:	3c01      	subs	r4, #1
 800b9fa:	e775      	b.n	800b8e8 <__kernel_rem_pio2f+0x1e8>
 800b9fc:	0800c738 	.word	0x0800c738
 800ba00:	0800c70c 	.word	0x0800c70c
 800ba04:	43800000 	.word	0x43800000
 800ba08:	3b800000 	.word	0x3b800000
 800ba0c:	00000000 	.word	0x00000000
 800ba10:	9b03      	ldr	r3, [sp, #12]
 800ba12:	eeb0 0a48 	vmov.f32	s0, s16
 800ba16:	1a98      	subs	r0, r3, r2
 800ba18:	f000 f9a2 	bl	800bd60 <scalbnf>
 800ba1c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800ba04 <__kernel_rem_pio2f+0x304>
 800ba20:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba28:	db19      	blt.n	800ba5e <__kernel_rem_pio2f+0x35e>
 800ba2a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800ba08 <__kernel_rem_pio2f+0x308>
 800ba2e:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ba32:	aa08      	add	r2, sp, #32
 800ba34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba38:	1c74      	adds	r4, r6, #1
 800ba3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba3e:	3508      	adds	r5, #8
 800ba40:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ba44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ba48:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba4c:	ee10 3a10 	vmov	r3, s0
 800ba50:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ba54:	ee17 3a90 	vmov	r3, s15
 800ba58:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ba5c:	e74b      	b.n	800b8f6 <__kernel_rem_pio2f+0x1f6>
 800ba5e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ba62:	aa08      	add	r2, sp, #32
 800ba64:	ee10 3a10 	vmov	r3, s0
 800ba68:	4634      	mov	r4, r6
 800ba6a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800ba6e:	e742      	b.n	800b8f6 <__kernel_rem_pio2f+0x1f6>
 800ba70:	a808      	add	r0, sp, #32
 800ba72:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800ba76:	9001      	str	r0, [sp, #4]
 800ba78:	ee07 0a90 	vmov	s15, r0
 800ba7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ba80:	3a01      	subs	r2, #1
 800ba82:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ba86:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ba8a:	ed61 7a01 	vstmdb	r1!, {s15}
 800ba8e:	e73e      	b.n	800b90e <__kernel_rem_pio2f+0x20e>
 800ba90:	ecfc 6a01 	vldmia	ip!, {s13}
 800ba94:	ecb6 7a01 	vldmia	r6!, {s14}
 800ba98:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ba9c:	3001      	adds	r0, #1
 800ba9e:	4550      	cmp	r0, sl
 800baa0:	dc01      	bgt.n	800baa6 <__kernel_rem_pio2f+0x3a6>
 800baa2:	4288      	cmp	r0, r1
 800baa4:	ddf4      	ble.n	800ba90 <__kernel_rem_pio2f+0x390>
 800baa6:	a858      	add	r0, sp, #352	; 0x160
 800baa8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800baac:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800bab0:	3a01      	subs	r2, #1
 800bab2:	e730      	b.n	800b916 <__kernel_rem_pio2f+0x216>
 800bab4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800bab6:	2a02      	cmp	r2, #2
 800bab8:	dc09      	bgt.n	800bace <__kernel_rem_pio2f+0x3ce>
 800baba:	2a00      	cmp	r2, #0
 800babc:	dc2a      	bgt.n	800bb14 <__kernel_rem_pio2f+0x414>
 800babe:	d043      	beq.n	800bb48 <__kernel_rem_pio2f+0x448>
 800bac0:	f009 0007 	and.w	r0, r9, #7
 800bac4:	b059      	add	sp, #356	; 0x164
 800bac6:	ecbd 8b04 	vpop	{d8-d9}
 800baca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bace:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800bad0:	2b03      	cmp	r3, #3
 800bad2:	d1f5      	bne.n	800bac0 <__kernel_rem_pio2f+0x3c0>
 800bad4:	ab30      	add	r3, sp, #192	; 0xc0
 800bad6:	442b      	add	r3, r5
 800bad8:	461a      	mov	r2, r3
 800bada:	4619      	mov	r1, r3
 800badc:	4620      	mov	r0, r4
 800bade:	2800      	cmp	r0, #0
 800bae0:	f1a1 0104 	sub.w	r1, r1, #4
 800bae4:	dc51      	bgt.n	800bb8a <__kernel_rem_pio2f+0x48a>
 800bae6:	4621      	mov	r1, r4
 800bae8:	2901      	cmp	r1, #1
 800baea:	f1a2 0204 	sub.w	r2, r2, #4
 800baee:	dc5c      	bgt.n	800bbaa <__kernel_rem_pio2f+0x4aa>
 800baf0:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800baf4:	3304      	adds	r3, #4
 800baf6:	2c01      	cmp	r4, #1
 800baf8:	dc67      	bgt.n	800bbca <__kernel_rem_pio2f+0x4ca>
 800bafa:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800bafe:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800bb02:	2f00      	cmp	r7, #0
 800bb04:	d167      	bne.n	800bbd6 <__kernel_rem_pio2f+0x4d6>
 800bb06:	edc8 6a00 	vstr	s13, [r8]
 800bb0a:	ed88 7a01 	vstr	s14, [r8, #4]
 800bb0e:	edc8 7a02 	vstr	s15, [r8, #8]
 800bb12:	e7d5      	b.n	800bac0 <__kernel_rem_pio2f+0x3c0>
 800bb14:	aa30      	add	r2, sp, #192	; 0xc0
 800bb16:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800bb1a:	4413      	add	r3, r2
 800bb1c:	4622      	mov	r2, r4
 800bb1e:	2a00      	cmp	r2, #0
 800bb20:	da24      	bge.n	800bb6c <__kernel_rem_pio2f+0x46c>
 800bb22:	b34f      	cbz	r7, 800bb78 <__kernel_rem_pio2f+0x478>
 800bb24:	eef1 7a47 	vneg.f32	s15, s14
 800bb28:	edc8 7a00 	vstr	s15, [r8]
 800bb2c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800bb30:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb34:	aa31      	add	r2, sp, #196	; 0xc4
 800bb36:	2301      	movs	r3, #1
 800bb38:	429c      	cmp	r4, r3
 800bb3a:	da20      	bge.n	800bb7e <__kernel_rem_pio2f+0x47e>
 800bb3c:	b10f      	cbz	r7, 800bb42 <__kernel_rem_pio2f+0x442>
 800bb3e:	eef1 7a67 	vneg.f32	s15, s15
 800bb42:	edc8 7a01 	vstr	s15, [r8, #4]
 800bb46:	e7bb      	b.n	800bac0 <__kernel_rem_pio2f+0x3c0>
 800bb48:	aa30      	add	r2, sp, #192	; 0xc0
 800bb4a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800ba0c <__kernel_rem_pio2f+0x30c>
 800bb4e:	4413      	add	r3, r2
 800bb50:	2c00      	cmp	r4, #0
 800bb52:	da05      	bge.n	800bb60 <__kernel_rem_pio2f+0x460>
 800bb54:	b10f      	cbz	r7, 800bb5a <__kernel_rem_pio2f+0x45a>
 800bb56:	eef1 7a67 	vneg.f32	s15, s15
 800bb5a:	edc8 7a00 	vstr	s15, [r8]
 800bb5e:	e7af      	b.n	800bac0 <__kernel_rem_pio2f+0x3c0>
 800bb60:	ed33 7a01 	vldmdb	r3!, {s14}
 800bb64:	3c01      	subs	r4, #1
 800bb66:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb6a:	e7f1      	b.n	800bb50 <__kernel_rem_pio2f+0x450>
 800bb6c:	ed73 7a01 	vldmdb	r3!, {s15}
 800bb70:	3a01      	subs	r2, #1
 800bb72:	ee37 7a27 	vadd.f32	s14, s14, s15
 800bb76:	e7d2      	b.n	800bb1e <__kernel_rem_pio2f+0x41e>
 800bb78:	eef0 7a47 	vmov.f32	s15, s14
 800bb7c:	e7d4      	b.n	800bb28 <__kernel_rem_pio2f+0x428>
 800bb7e:	ecb2 7a01 	vldmia	r2!, {s14}
 800bb82:	3301      	adds	r3, #1
 800bb84:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bb88:	e7d6      	b.n	800bb38 <__kernel_rem_pio2f+0x438>
 800bb8a:	edd1 7a00 	vldr	s15, [r1]
 800bb8e:	edd1 6a01 	vldr	s13, [r1, #4]
 800bb92:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bb96:	3801      	subs	r0, #1
 800bb98:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb9c:	ed81 7a00 	vstr	s14, [r1]
 800bba0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba4:	edc1 7a01 	vstr	s15, [r1, #4]
 800bba8:	e799      	b.n	800bade <__kernel_rem_pio2f+0x3de>
 800bbaa:	edd2 7a00 	vldr	s15, [r2]
 800bbae:	edd2 6a01 	vldr	s13, [r2, #4]
 800bbb2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bbb6:	3901      	subs	r1, #1
 800bbb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bbbc:	ed82 7a00 	vstr	s14, [r2]
 800bbc0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbc4:	edc2 7a01 	vstr	s15, [r2, #4]
 800bbc8:	e78e      	b.n	800bae8 <__kernel_rem_pio2f+0x3e8>
 800bbca:	ed33 7a01 	vldmdb	r3!, {s14}
 800bbce:	3c01      	subs	r4, #1
 800bbd0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800bbd4:	e78f      	b.n	800baf6 <__kernel_rem_pio2f+0x3f6>
 800bbd6:	eef1 6a66 	vneg.f32	s13, s13
 800bbda:	eeb1 7a47 	vneg.f32	s14, s14
 800bbde:	edc8 6a00 	vstr	s13, [r8]
 800bbe2:	ed88 7a01 	vstr	s14, [r8, #4]
 800bbe6:	eef1 7a67 	vneg.f32	s15, s15
 800bbea:	e790      	b.n	800bb0e <__kernel_rem_pio2f+0x40e>

0800bbec <__kernel_sinf>:
 800bbec:	ee10 3a10 	vmov	r3, s0
 800bbf0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbf4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800bbf8:	da04      	bge.n	800bc04 <__kernel_sinf+0x18>
 800bbfa:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bbfe:	ee17 3a90 	vmov	r3, s15
 800bc02:	b35b      	cbz	r3, 800bc5c <__kernel_sinf+0x70>
 800bc04:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bc08:	eddf 7a15 	vldr	s15, [pc, #84]	; 800bc60 <__kernel_sinf+0x74>
 800bc0c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800bc64 <__kernel_sinf+0x78>
 800bc10:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bc14:	eddf 7a14 	vldr	s15, [pc, #80]	; 800bc68 <__kernel_sinf+0x7c>
 800bc18:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc1c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800bc6c <__kernel_sinf+0x80>
 800bc20:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bc24:	eddf 7a12 	vldr	s15, [pc, #72]	; 800bc70 <__kernel_sinf+0x84>
 800bc28:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bc2c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bc30:	b930      	cbnz	r0, 800bc40 <__kernel_sinf+0x54>
 800bc32:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800bc74 <__kernel_sinf+0x88>
 800bc36:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bc3a:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bc3e:	4770      	bx	lr
 800bc40:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bc44:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800bc48:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bc4c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bc50:	eddf 7a09 	vldr	s15, [pc, #36]	; 800bc78 <__kernel_sinf+0x8c>
 800bc54:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bc58:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	2f2ec9d3 	.word	0x2f2ec9d3
 800bc64:	b2d72f34 	.word	0xb2d72f34
 800bc68:	3638ef1b 	.word	0x3638ef1b
 800bc6c:	b9500d01 	.word	0xb9500d01
 800bc70:	3c088889 	.word	0x3c088889
 800bc74:	be2aaaab 	.word	0xbe2aaaab
 800bc78:	3e2aaaab 	.word	0x3e2aaaab

0800bc7c <with_errnof>:
 800bc7c:	b513      	push	{r0, r1, r4, lr}
 800bc7e:	4604      	mov	r4, r0
 800bc80:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bc84:	f7fa fa08 	bl	8006098 <__errno>
 800bc88:	ed9d 0a01 	vldr	s0, [sp, #4]
 800bc8c:	6004      	str	r4, [r0, #0]
 800bc8e:	b002      	add	sp, #8
 800bc90:	bd10      	pop	{r4, pc}

0800bc92 <xflowf>:
 800bc92:	b130      	cbz	r0, 800bca2 <xflowf+0x10>
 800bc94:	eef1 7a40 	vneg.f32	s15, s0
 800bc98:	ee27 0a80 	vmul.f32	s0, s15, s0
 800bc9c:	2022      	movs	r0, #34	; 0x22
 800bc9e:	f7ff bfed 	b.w	800bc7c <with_errnof>
 800bca2:	eef0 7a40 	vmov.f32	s15, s0
 800bca6:	e7f7      	b.n	800bc98 <xflowf+0x6>

0800bca8 <__math_uflowf>:
 800bca8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bcb0 <__math_uflowf+0x8>
 800bcac:	f7ff bff1 	b.w	800bc92 <xflowf>
 800bcb0:	10000000 	.word	0x10000000

0800bcb4 <__math_oflowf>:
 800bcb4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800bcbc <__math_oflowf+0x8>
 800bcb8:	f7ff bfeb 	b.w	800bc92 <xflowf>
 800bcbc:	70000000 	.word	0x70000000

0800bcc0 <finitef>:
 800bcc0:	b082      	sub	sp, #8
 800bcc2:	ed8d 0a01 	vstr	s0, [sp, #4]
 800bcc6:	9801      	ldr	r0, [sp, #4]
 800bcc8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800bccc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800bcd0:	bfac      	ite	ge
 800bcd2:	2000      	movge	r0, #0
 800bcd4:	2001      	movlt	r0, #1
 800bcd6:	b002      	add	sp, #8
 800bcd8:	4770      	bx	lr
	...

0800bcdc <floorf>:
 800bcdc:	ee10 3a10 	vmov	r3, s0
 800bce0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bce4:	3a7f      	subs	r2, #127	; 0x7f
 800bce6:	2a16      	cmp	r2, #22
 800bce8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800bcec:	dc2a      	bgt.n	800bd44 <floorf+0x68>
 800bcee:	2a00      	cmp	r2, #0
 800bcf0:	da11      	bge.n	800bd16 <floorf+0x3a>
 800bcf2:	eddf 7a18 	vldr	s15, [pc, #96]	; 800bd54 <floorf+0x78>
 800bcf6:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bcfa:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bcfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd02:	dd05      	ble.n	800bd10 <floorf+0x34>
 800bd04:	2b00      	cmp	r3, #0
 800bd06:	da23      	bge.n	800bd50 <floorf+0x74>
 800bd08:	4a13      	ldr	r2, [pc, #76]	; (800bd58 <floorf+0x7c>)
 800bd0a:	2900      	cmp	r1, #0
 800bd0c:	bf18      	it	ne
 800bd0e:	4613      	movne	r3, r2
 800bd10:	ee00 3a10 	vmov	s0, r3
 800bd14:	4770      	bx	lr
 800bd16:	4911      	ldr	r1, [pc, #68]	; (800bd5c <floorf+0x80>)
 800bd18:	4111      	asrs	r1, r2
 800bd1a:	420b      	tst	r3, r1
 800bd1c:	d0fa      	beq.n	800bd14 <floorf+0x38>
 800bd1e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800bd54 <floorf+0x78>
 800bd22:	ee30 0a27 	vadd.f32	s0, s0, s15
 800bd26:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800bd2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd2e:	ddef      	ble.n	800bd10 <floorf+0x34>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	bfbe      	ittt	lt
 800bd34:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800bd38:	fa40 f202 	asrlt.w	r2, r0, r2
 800bd3c:	189b      	addlt	r3, r3, r2
 800bd3e:	ea23 0301 	bic.w	r3, r3, r1
 800bd42:	e7e5      	b.n	800bd10 <floorf+0x34>
 800bd44:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800bd48:	d3e4      	bcc.n	800bd14 <floorf+0x38>
 800bd4a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd4e:	4770      	bx	lr
 800bd50:	2300      	movs	r3, #0
 800bd52:	e7dd      	b.n	800bd10 <floorf+0x34>
 800bd54:	7149f2ca 	.word	0x7149f2ca
 800bd58:	bf800000 	.word	0xbf800000
 800bd5c:	007fffff 	.word	0x007fffff

0800bd60 <scalbnf>:
 800bd60:	ee10 3a10 	vmov	r3, s0
 800bd64:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800bd68:	d025      	beq.n	800bdb6 <scalbnf+0x56>
 800bd6a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800bd6e:	d302      	bcc.n	800bd76 <scalbnf+0x16>
 800bd70:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bd74:	4770      	bx	lr
 800bd76:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800bd7a:	d122      	bne.n	800bdc2 <scalbnf+0x62>
 800bd7c:	4b2a      	ldr	r3, [pc, #168]	; (800be28 <scalbnf+0xc8>)
 800bd7e:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800be2c <scalbnf+0xcc>
 800bd82:	4298      	cmp	r0, r3
 800bd84:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bd88:	db16      	blt.n	800bdb8 <scalbnf+0x58>
 800bd8a:	ee10 3a10 	vmov	r3, s0
 800bd8e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800bd92:	3a19      	subs	r2, #25
 800bd94:	4402      	add	r2, r0
 800bd96:	2afe      	cmp	r2, #254	; 0xfe
 800bd98:	dd15      	ble.n	800bdc6 <scalbnf+0x66>
 800bd9a:	ee10 3a10 	vmov	r3, s0
 800bd9e:	eddf 7a24 	vldr	s15, [pc, #144]	; 800be30 <scalbnf+0xd0>
 800bda2:	eddf 6a24 	vldr	s13, [pc, #144]	; 800be34 <scalbnf+0xd4>
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	eeb0 7a67 	vmov.f32	s14, s15
 800bdac:	bfb8      	it	lt
 800bdae:	eef0 7a66 	vmovlt.f32	s15, s13
 800bdb2:	ee27 0a27 	vmul.f32	s0, s14, s15
 800bdb6:	4770      	bx	lr
 800bdb8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800be38 <scalbnf+0xd8>
 800bdbc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800bdc0:	4770      	bx	lr
 800bdc2:	0dd2      	lsrs	r2, r2, #23
 800bdc4:	e7e6      	b.n	800bd94 <scalbnf+0x34>
 800bdc6:	2a00      	cmp	r2, #0
 800bdc8:	dd06      	ble.n	800bdd8 <scalbnf+0x78>
 800bdca:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800bdce:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800bdd2:	ee00 3a10 	vmov	s0, r3
 800bdd6:	4770      	bx	lr
 800bdd8:	f112 0f16 	cmn.w	r2, #22
 800bddc:	da1a      	bge.n	800be14 <scalbnf+0xb4>
 800bdde:	f24c 3350 	movw	r3, #50000	; 0xc350
 800bde2:	4298      	cmp	r0, r3
 800bde4:	ee10 3a10 	vmov	r3, s0
 800bde8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bdec:	dd0a      	ble.n	800be04 <scalbnf+0xa4>
 800bdee:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800be30 <scalbnf+0xd0>
 800bdf2:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800be34 <scalbnf+0xd4>
 800bdf6:	eef0 7a40 	vmov.f32	s15, s0
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	bf18      	it	ne
 800bdfe:	eeb0 0a47 	vmovne.f32	s0, s14
 800be02:	e7db      	b.n	800bdbc <scalbnf+0x5c>
 800be04:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800be38 <scalbnf+0xd8>
 800be08:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800be3c <scalbnf+0xdc>
 800be0c:	eef0 7a40 	vmov.f32	s15, s0
 800be10:	2b00      	cmp	r3, #0
 800be12:	e7f3      	b.n	800bdfc <scalbnf+0x9c>
 800be14:	3219      	adds	r2, #25
 800be16:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800be1a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800be1e:	eddf 7a08 	vldr	s15, [pc, #32]	; 800be40 <scalbnf+0xe0>
 800be22:	ee07 3a10 	vmov	s14, r3
 800be26:	e7c4      	b.n	800bdb2 <scalbnf+0x52>
 800be28:	ffff3cb0 	.word	0xffff3cb0
 800be2c:	4c000000 	.word	0x4c000000
 800be30:	7149f2ca 	.word	0x7149f2ca
 800be34:	f149f2ca 	.word	0xf149f2ca
 800be38:	0da24260 	.word	0x0da24260
 800be3c:	8da24260 	.word	0x8da24260
 800be40:	33000000 	.word	0x33000000

0800be44 <_init>:
 800be44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be46:	bf00      	nop
 800be48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be4a:	bc08      	pop	{r3}
 800be4c:	469e      	mov	lr, r3
 800be4e:	4770      	bx	lr

0800be50 <_fini>:
 800be50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800be52:	bf00      	nop
 800be54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800be56:	bc08      	pop	{r3}
 800be58:	469e      	mov	lr, r3
 800be5a:	4770      	bx	lr
