
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049ec  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004b74  08004b74  00014b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bac  08004bac  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004bac  08004bac  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004bac  08004bac  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bac  08004bac  00014bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004bb0  08004bb0  00014bb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004bb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000190  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000019c  2000019c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fbd1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb0  00000000  00000000  0002fc0d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d88  00000000  00000000  000318c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ce0  00000000  00000000  00032648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3b5  00000000  00000000  00033328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001083f  00000000  00000000  0004e6dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000a7ed1  00000000  00000000  0005ef1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00106ded  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003954  00000000  00000000  00106e40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004b5c 	.word	0x08004b5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004b5c 	.word	0x08004b5c

080001c8 <HAL_GPIO_EXTI_Callback>:
/*
 * External switch ISR Handler callback function
 * Check if source is power button, toggle button state
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	4603      	mov	r3, r0
 80001d0:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == POWER_BTN_Pin) { buttonState = !buttonState; }
 80001d2:	88fb      	ldrh	r3, [r7, #6]
 80001d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80001d8:	d109      	bne.n	80001ee <HAL_GPIO_EXTI_Callback+0x26>
 80001da:	4b08      	ldr	r3, [pc, #32]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	2b00      	cmp	r3, #0
 80001e0:	bf0c      	ite	eq
 80001e2:	2301      	moveq	r3, #1
 80001e4:	2300      	movne	r3, #0
 80001e6:	b2db      	uxtb	r3, r3
 80001e8:	461a      	mov	r2, r3
 80001ea:	4b04      	ldr	r3, [pc, #16]	; (80001fc <HAL_GPIO_EXTI_Callback+0x34>)
 80001ec:	601a      	str	r2, [r3, #0]
}
 80001ee:	bf00      	nop
 80001f0:	370c      	adds	r7, #12
 80001f2:	46bd      	mov	sp, r7
 80001f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000194 	.word	0x20000194

08000200 <setMotorSpeed>:
/*
 * Set Motor Speed:
 * motor_speed => 0 -> 100 (in percent)
 */
void setMotorSpeed(int motor_speed)
{
 8000200:	b480      	push	{r7}
 8000202:	b085      	sub	sp, #20
 8000204:	af00      	add	r7, sp, #0
 8000206:	6078      	str	r0, [r7, #4]
	int value = (motor_speed * 255) / 100;
 8000208:	687a      	ldr	r2, [r7, #4]
 800020a:	4613      	mov	r3, r2
 800020c:	021b      	lsls	r3, r3, #8
 800020e:	1a9b      	subs	r3, r3, r2
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <setMotorSpeed+0x3c>)
 8000212:	fb82 1203 	smull	r1, r2, r2, r3
 8000216:	1152      	asrs	r2, r2, #5
 8000218:	17db      	asrs	r3, r3, #31
 800021a:	1ad3      	subs	r3, r2, r3
 800021c:	60fb      	str	r3, [r7, #12]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, value); // RIGHT_DM_PHASE
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <setMotorSpeed+0x40>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	68fa      	ldr	r2, [r7, #12]
 8000224:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, value); // LEFT_DM_PHASE
 8000226:	4b06      	ldr	r3, [pc, #24]	; (8000240 <setMotorSpeed+0x40>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	68fa      	ldr	r2, [r7, #12]
 800022c:	639a      	str	r2, [r3, #56]	; 0x38
}
 800022e:	bf00      	nop
 8000230:	3714      	adds	r7, #20
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	51eb851f 	.word	0x51eb851f
 8000240:	20000078 	.word	0x20000078

08000244 <directionCenter>:

/*
 * Direction Center => Set Servo Motor Center
 */
void directionCenter()
{
 8000244:	b480      	push	{r7}
 8000246:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 1500);
 8000248:	4b04      	ldr	r3, [pc, #16]	; (800025c <directionCenter+0x18>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000250:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000252:	bf00      	nop
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	200000c4 	.word	0x200000c4

08000260 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000264:	f000 fc4c 	bl	8000b00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000268:	f000 f822 	bl	80002b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800026c:	f000 fa46 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000270:	f000 fa14 	bl	800069c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000274:	f000 f8e0 	bl	8000438 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000278:	f000 f86e 	bl	8000358 <MX_ADC1_Init>
  MX_TIM17_Init();
 800027c:	f000 f994 	bl	80005a8 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start(&htim1);
 8000280:	4809      	ldr	r0, [pc, #36]	; (80002a8 <main+0x48>)
 8000282:	f003 f8c7 	bl	8003414 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8000286:	4809      	ldr	r0, [pc, #36]	; (80002ac <main+0x4c>)
 8000288:	f003 f8c4 	bl	8003414 <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800028c:	2100      	movs	r1, #0
 800028e:	4806      	ldr	r0, [pc, #24]	; (80002a8 <main+0x48>)
 8000290:	f003 f976 	bl	8003580 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000294:	2100      	movs	r1, #0
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <main+0x4c>)
 8000298:	f003 f972 	bl	8003580 <HAL_TIM_PWM_Start>

  setMotorSpeed(0);
 800029c:	2000      	movs	r0, #0
 800029e:	f7ff ffaf 	bl	8000200 <setMotorSpeed>
  directionCenter();
 80002a2:	f7ff ffcf 	bl	8000244 <directionCenter>
//		uint16_t ir_left = ADC_Read(&hadc1, ADC_CHANNEL_1);
//		uint16_t ir_center = ADC_Read(&hadc1, ADC_CHANNEL_2);
//		uint16_t ir_right = ADC_Read(&hadc1, ADC_CHANNEL_4);
//	}

	if (buttonState == 1) {
 80002a6:	e7fe      	b.n	80002a6 <main+0x46>
 80002a8:	20000078 	.word	0x20000078
 80002ac:	200000c4 	.word	0x200000c4

080002b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b096      	sub	sp, #88	; 0x58
 80002b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002ba:	2228      	movs	r2, #40	; 0x28
 80002bc:	2100      	movs	r1, #0
 80002be:	4618      	mov	r0, r3
 80002c0:	f004 fc44 	bl	8004b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002c4:	f107 031c 	add.w	r3, r7, #28
 80002c8:	2200      	movs	r2, #0
 80002ca:	601a      	str	r2, [r3, #0]
 80002cc:	605a      	str	r2, [r3, #4]
 80002ce:	609a      	str	r2, [r3, #8]
 80002d0:	60da      	str	r2, [r3, #12]
 80002d2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002d4:	1d3b      	adds	r3, r7, #4
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002e4:	2302      	movs	r3, #2
 80002e6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002ec:	2310      	movs	r3, #16
 80002ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002f0:	2300      	movs	r3, #0
 80002f2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002f8:	4618      	mov	r0, r3
 80002fa:	f001 fc99 	bl	8001c30 <HAL_RCC_OscConfig>
 80002fe:	4603      	mov	r3, r0
 8000300:	2b00      	cmp	r3, #0
 8000302:	d001      	beq.n	8000308 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000304:	f000 fa52 	bl	80007ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000308:	230f      	movs	r3, #15
 800030a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800030c:	2300      	movs	r3, #0
 800030e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000310:	2300      	movs	r3, #0
 8000312:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000314:	2300      	movs	r3, #0
 8000316:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800031c:	f107 031c 	add.w	r3, r7, #28
 8000320:	2100      	movs	r1, #0
 8000322:	4618      	mov	r0, r3
 8000324:	f002 fcc2 	bl	8002cac <HAL_RCC_ClockConfig>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800032e:	f000 fa3d 	bl	80007ac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000332:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000336:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8000338:	2300      	movs	r3, #0
 800033a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800033c:	1d3b      	adds	r3, r7, #4
 800033e:	4618      	mov	r0, r3
 8000340:	f002 feea 	bl	8003118 <HAL_RCCEx_PeriphCLKConfig>
 8000344:	4603      	mov	r3, r0
 8000346:	2b00      	cmp	r3, #0
 8000348:	d001      	beq.n	800034e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800034a:	f000 fa2f 	bl	80007ac <Error_Handler>
  }
}
 800034e:	bf00      	nop
 8000350:	3758      	adds	r7, #88	; 0x58
 8000352:	46bd      	mov	sp, r7
 8000354:	bd80      	pop	{r7, pc}
	...

08000358 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000358:	b580      	push	{r7, lr}
 800035a:	b08a      	sub	sp, #40	; 0x28
 800035c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800035e:	f107 031c 	add.w	r3, r7, #28
 8000362:	2200      	movs	r2, #0
 8000364:	601a      	str	r2, [r3, #0]
 8000366:	605a      	str	r2, [r3, #4]
 8000368:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800036a:	1d3b      	adds	r3, r7, #4
 800036c:	2200      	movs	r2, #0
 800036e:	601a      	str	r2, [r3, #0]
 8000370:	605a      	str	r2, [r3, #4]
 8000372:	609a      	str	r2, [r3, #8]
 8000374:	60da      	str	r2, [r3, #12]
 8000376:	611a      	str	r2, [r3, #16]
 8000378:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800037a:	4b2e      	ldr	r3, [pc, #184]	; (8000434 <MX_ADC1_Init+0xdc>)
 800037c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000380:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8000382:	4b2c      	ldr	r3, [pc, #176]	; (8000434 <MX_ADC1_Init+0xdc>)
 8000384:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000388:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800038a:	4b2a      	ldr	r3, [pc, #168]	; (8000434 <MX_ADC1_Init+0xdc>)
 800038c:	2200      	movs	r2, #0
 800038e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000390:	4b28      	ldr	r3, [pc, #160]	; (8000434 <MX_ADC1_Init+0xdc>)
 8000392:	2200      	movs	r2, #0
 8000394:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000396:	4b27      	ldr	r3, [pc, #156]	; (8000434 <MX_ADC1_Init+0xdc>)
 8000398:	2200      	movs	r2, #0
 800039a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800039c:	4b25      	ldr	r3, [pc, #148]	; (8000434 <MX_ADC1_Init+0xdc>)
 800039e:	2200      	movs	r2, #0
 80003a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003a4:	4b23      	ldr	r3, [pc, #140]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003a6:	2200      	movs	r2, #0
 80003a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003aa:	4b22      	ldr	r3, [pc, #136]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003ac:	2201      	movs	r2, #1
 80003ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003b0:	4b20      	ldr	r3, [pc, #128]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003b2:	2200      	movs	r2, #0
 80003b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003b6:	4b1f      	ldr	r3, [pc, #124]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003bc:	4b1d      	ldr	r3, [pc, #116]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003c4:	4b1b      	ldr	r3, [pc, #108]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003c6:	2204      	movs	r2, #4
 80003c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003d0:	4b18      	ldr	r3, [pc, #96]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003d6:	4817      	ldr	r0, [pc, #92]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003d8:	f000 fbf8 	bl	8000bcc <HAL_ADC_Init>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d001      	beq.n	80003e6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80003e2:	f000 f9e3 	bl	80007ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003e6:	2300      	movs	r3, #0
 80003e8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003ea:	f107 031c 	add.w	r3, r7, #28
 80003ee:	4619      	mov	r1, r3
 80003f0:	4810      	ldr	r0, [pc, #64]	; (8000434 <MX_ADC1_Init+0xdc>)
 80003f2:	f001 f83d 	bl	8001470 <HAL_ADCEx_MultiModeConfigChannel>
 80003f6:	4603      	mov	r3, r0
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	d001      	beq.n	8000400 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80003fc:	f000 f9d6 	bl	80007ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000400:	2301      	movs	r3, #1
 8000402:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000404:	2301      	movs	r3, #1
 8000406:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000408:	2300      	movs	r3, #0
 800040a:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800040c:	2300      	movs	r3, #0
 800040e:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000410:	2300      	movs	r3, #0
 8000412:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000414:	2300      	movs	r3, #0
 8000416:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000418:	1d3b      	adds	r3, r7, #4
 800041a:	4619      	mov	r1, r3
 800041c:	4805      	ldr	r0, [pc, #20]	; (8000434 <MX_ADC1_Init+0xdc>)
 800041e:	f000 fd67 	bl	8000ef0 <HAL_ADC_ConfigChannel>
 8000422:	4603      	mov	r3, r0
 8000424:	2b00      	cmp	r3, #0
 8000426:	d001      	beq.n	800042c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000428:	f000 f9c0 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800042c:	bf00      	nop
 800042e:	3728      	adds	r7, #40	; 0x28
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}
 8000434:	20000028 	.word	0x20000028

08000438 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b09a      	sub	sp, #104	; 0x68
 800043c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800043e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000442:	2200      	movs	r2, #0
 8000444:	601a      	str	r2, [r3, #0]
 8000446:	605a      	str	r2, [r3, #4]
 8000448:	609a      	str	r2, [r3, #8]
 800044a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800044c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000458:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800045c:	2200      	movs	r2, #0
 800045e:	601a      	str	r2, [r3, #0]
 8000460:	605a      	str	r2, [r3, #4]
 8000462:	609a      	str	r2, [r3, #8]
 8000464:	60da      	str	r2, [r3, #12]
 8000466:	611a      	str	r2, [r3, #16]
 8000468:	615a      	str	r2, [r3, #20]
 800046a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800046c:	1d3b      	adds	r3, r7, #4
 800046e:	222c      	movs	r2, #44	; 0x2c
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f004 fb6a 	bl	8004b4c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000478:	4b49      	ldr	r3, [pc, #292]	; (80005a0 <MX_TIM1_Init+0x168>)
 800047a:	4a4a      	ldr	r2, [pc, #296]	; (80005a4 <MX_TIM1_Init+0x16c>)
 800047c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800047e:	4b48      	ldr	r3, [pc, #288]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000480:	f44f 721c 	mov.w	r2, #624	; 0x270
 8000484:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000486:	4b46      	ldr	r3, [pc, #280]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000488:	2200      	movs	r2, #0
 800048a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 800048c:	4b44      	ldr	r3, [pc, #272]	; (80005a0 <MX_TIM1_Init+0x168>)
 800048e:	22ff      	movs	r2, #255	; 0xff
 8000490:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000492:	4b43      	ldr	r3, [pc, #268]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000494:	2200      	movs	r2, #0
 8000496:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000498:	4b41      	ldr	r3, [pc, #260]	; (80005a0 <MX_TIM1_Init+0x168>)
 800049a:	2200      	movs	r2, #0
 800049c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800049e:	4b40      	ldr	r3, [pc, #256]	; (80005a0 <MX_TIM1_Init+0x168>)
 80004a0:	2280      	movs	r2, #128	; 0x80
 80004a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80004a4:	483e      	ldr	r0, [pc, #248]	; (80005a0 <MX_TIM1_Init+0x168>)
 80004a6:	f002 ff5d 	bl	8003364 <HAL_TIM_Base_Init>
 80004aa:	4603      	mov	r3, r0
 80004ac:	2b00      	cmp	r3, #0
 80004ae:	d001      	beq.n	80004b4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80004b0:	f000 f97c 	bl	80007ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80004b8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80004be:	4619      	mov	r1, r3
 80004c0:	4837      	ldr	r0, [pc, #220]	; (80005a0 <MX_TIM1_Init+0x168>)
 80004c2:	f003 fa5d 	bl	8003980 <HAL_TIM_ConfigClockSource>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80004cc:	f000 f96e 	bl	80007ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004d0:	4833      	ldr	r0, [pc, #204]	; (80005a0 <MX_TIM1_Init+0x168>)
 80004d2:	f002 fff3 	bl	80034bc <HAL_TIM_PWM_Init>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b00      	cmp	r3, #0
 80004da:	d001      	beq.n	80004e0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80004dc:	f000 f966 	bl	80007ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004e0:	2300      	movs	r3, #0
 80004e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004e4:	2300      	movs	r3, #0
 80004e6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e8:	2300      	movs	r3, #0
 80004ea:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004ec:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80004f0:	4619      	mov	r1, r3
 80004f2:	482b      	ldr	r0, [pc, #172]	; (80005a0 <MX_TIM1_Init+0x168>)
 80004f4:	f003 feec 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b00      	cmp	r3, #0
 80004fc:	d001      	beq.n	8000502 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80004fe:	f000 f955 	bl	80007ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000502:	2360      	movs	r3, #96	; 0x60
 8000504:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8000506:	2300      	movs	r3, #0
 8000508:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050a:	2300      	movs	r3, #0
 800050c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800050e:	2300      	movs	r3, #0
 8000510:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000512:	2300      	movs	r3, #0
 8000514:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000516:	2300      	movs	r3, #0
 8000518:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800051a:	2300      	movs	r3, #0
 800051c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800051e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000522:	2200      	movs	r2, #0
 8000524:	4619      	mov	r1, r3
 8000526:	481e      	ldr	r0, [pc, #120]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000528:	f003 f916 	bl	8003758 <HAL_TIM_PWM_ConfigChannel>
 800052c:	4603      	mov	r3, r0
 800052e:	2b00      	cmp	r3, #0
 8000530:	d001      	beq.n	8000536 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8000532:	f000 f93b 	bl	80007ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000536:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800053a:	2204      	movs	r2, #4
 800053c:	4619      	mov	r1, r3
 800053e:	4818      	ldr	r0, [pc, #96]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000540:	f003 f90a 	bl	8003758 <HAL_TIM_PWM_ConfigChannel>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800054a:	f000 f92f 	bl	80007ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800054e:	2300      	movs	r3, #0
 8000550:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000552:	2300      	movs	r3, #0
 8000554:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000556:	2300      	movs	r3, #0
 8000558:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800055a:	2300      	movs	r3, #0
 800055c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800055e:	2300      	movs	r3, #0
 8000560:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000562:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000566:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000570:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000574:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000576:	2300      	movs	r3, #0
 8000578:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800057a:	2300      	movs	r3, #0
 800057c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	4807      	ldr	r0, [pc, #28]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000584:	f003 ff12 	bl	80043ac <HAL_TIMEx_ConfigBreakDeadTime>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800058e:	f000 f90d 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000592:	4803      	ldr	r0, [pc, #12]	; (80005a0 <MX_TIM1_Init+0x168>)
 8000594:	f000 f9a4 	bl	80008e0 <HAL_TIM_MspPostInit>

}
 8000598:	bf00      	nop
 800059a:	3768      	adds	r7, #104	; 0x68
 800059c:	46bd      	mov	sp, r7
 800059e:	bd80      	pop	{r7, pc}
 80005a0:	20000078 	.word	0x20000078
 80005a4:	40012c00 	.word	0x40012c00

080005a8 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b092      	sub	sp, #72	; 0x48
 80005ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80005ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]
 80005be:	615a      	str	r2, [r3, #20]
 80005c0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80005c2:	463b      	mov	r3, r7
 80005c4:	222c      	movs	r2, #44	; 0x2c
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f004 fabf 	bl	8004b4c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80005ce:	4b31      	ldr	r3, [pc, #196]	; (8000694 <MX_TIM17_Init+0xec>)
 80005d0:	4a31      	ldr	r2, [pc, #196]	; (8000698 <MX_TIM17_Init+0xf0>)
 80005d2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 80005d4:	4b2f      	ldr	r3, [pc, #188]	; (8000694 <MX_TIM17_Init+0xec>)
 80005d6:	2207      	movs	r2, #7
 80005d8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005da:	4b2e      	ldr	r3, [pc, #184]	; (8000694 <MX_TIM17_Init+0xec>)
 80005dc:	2200      	movs	r2, #0
 80005de:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 80005e0:	4b2c      	ldr	r3, [pc, #176]	; (8000694 <MX_TIM17_Init+0xec>)
 80005e2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80005e6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005e8:	4b2a      	ldr	r3, [pc, #168]	; (8000694 <MX_TIM17_Init+0xec>)
 80005ea:	2200      	movs	r2, #0
 80005ec:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80005ee:	4b29      	ldr	r3, [pc, #164]	; (8000694 <MX_TIM17_Init+0xec>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <MX_TIM17_Init+0xec>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80005fa:	4826      	ldr	r0, [pc, #152]	; (8000694 <MX_TIM17_Init+0xec>)
 80005fc:	f002 feb2 	bl	8003364 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000606:	f000 f8d1 	bl	80007ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 800060a:	4822      	ldr	r0, [pc, #136]	; (8000694 <MX_TIM17_Init+0xec>)
 800060c:	f002 ff56 	bl	80034bc <HAL_TIM_PWM_Init>
 8000610:	4603      	mov	r3, r0
 8000612:	2b00      	cmp	r3, #0
 8000614:	d001      	beq.n	800061a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000616:	f000 f8c9 	bl	80007ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800061a:	2360      	movs	r3, #96	; 0x60
 800061c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800061e:	2300      	movs	r3, #0
 8000620:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000622:	2300      	movs	r3, #0
 8000624:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000626:	2300      	movs	r3, #0
 8000628:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062a:	2300      	movs	r3, #0
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800062e:	2300      	movs	r3, #0
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000632:	2300      	movs	r3, #0
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000636:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800063a:	2200      	movs	r2, #0
 800063c:	4619      	mov	r1, r3
 800063e:	4815      	ldr	r0, [pc, #84]	; (8000694 <MX_TIM17_Init+0xec>)
 8000640:	f003 f88a 	bl	8003758 <HAL_TIM_PWM_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800064a:	f000 f8af 	bl	80007ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800064e:	2300      	movs	r3, #0
 8000650:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000652:	2300      	movs	r3, #0
 8000654:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000662:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000666:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800066c:	2300      	movs	r3, #0
 800066e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4807      	ldr	r0, [pc, #28]	; (8000694 <MX_TIM17_Init+0xec>)
 8000676:	f003 fe99 	bl	80043ac <HAL_TIMEx_ConfigBreakDeadTime>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000680:	f000 f894 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000684:	4803      	ldr	r0, [pc, #12]	; (8000694 <MX_TIM17_Init+0xec>)
 8000686:	f000 f92b 	bl	80008e0 <HAL_TIM_MspPostInit>

}
 800068a:	bf00      	nop
 800068c:	3748      	adds	r7, #72	; 0x48
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	200000c4 	.word	0x200000c4
 8000698:	40014800 	.word	0x40014800

0800069c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a2:	4a15      	ldr	r2, [pc, #84]	; (80006f8 <MX_USART2_UART_Init+0x5c>)
 80006a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006b4:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c2:	220c      	movs	r2, #12
 80006c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006cc:	4b09      	ldr	r3, [pc, #36]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006d8:	4b06      	ldr	r3, [pc, #24]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	; (80006f4 <MX_USART2_UART_Init+0x58>)
 80006e0:	f003 fedc 	bl	800449c <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006ea:	f000 f85f 	bl	80007ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000110 	.word	0x20000110
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b088      	sub	sp, #32
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	f107 030c 	add.w	r3, r7, #12
 8000706:	2200      	movs	r2, #0
 8000708:	601a      	str	r2, [r3, #0]
 800070a:	605a      	str	r2, [r3, #4]
 800070c:	609a      	str	r2, [r3, #8]
 800070e:	60da      	str	r2, [r3, #12]
 8000710:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000712:	4b25      	ldr	r3, [pc, #148]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000714:	695b      	ldr	r3, [r3, #20]
 8000716:	4a24      	ldr	r2, [pc, #144]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800071c:	6153      	str	r3, [r2, #20]
 800071e:	4b22      	ldr	r3, [pc, #136]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800072a:	4b1f      	ldr	r3, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xac>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	4a1e      	ldr	r2, [pc, #120]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000730:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000734:	6153      	str	r3, [r2, #20]
 8000736:	4b1c      	ldr	r3, [pc, #112]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8000748:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800074c:	f001 fa40 	bl	8001bd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8000750:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000754:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	4619      	mov	r1, r3
 8000768:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800076c:	f001 f8be 	bl	80018ec <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8000770:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000774:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000776:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800077a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800077c:	2302      	movs	r3, #2
 800077e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	4619      	mov	r1, r3
 8000786:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800078a:	f001 f8af 	bl	80018ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	2100      	movs	r1, #0
 8000792:	2028      	movs	r0, #40	; 0x28
 8000794:	f001 f873 	bl	800187e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000798:	2028      	movs	r0, #40	; 0x28
 800079a:	f001 f88c 	bl	80018b6 <HAL_NVIC_EnableIRQ>

}
 800079e:	bf00      	nop
 80007a0:	3720      	adds	r7, #32
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	40021000 	.word	0x40021000

080007ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b0:	b672      	cpsid	i
}
 80007b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b4:	e7fe      	b.n	80007b4 <Error_Handler+0x8>
	...

080007b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007be:	4b0f      	ldr	r3, [pc, #60]	; (80007fc <HAL_MspInit+0x44>)
 80007c0:	699b      	ldr	r3, [r3, #24]
 80007c2:	4a0e      	ldr	r2, [pc, #56]	; (80007fc <HAL_MspInit+0x44>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6193      	str	r3, [r2, #24]
 80007ca:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_MspInit+0x44>)
 80007cc:	699b      	ldr	r3, [r3, #24]
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007d6:	4b09      	ldr	r3, [pc, #36]	; (80007fc <HAL_MspInit+0x44>)
 80007d8:	69db      	ldr	r3, [r3, #28]
 80007da:	4a08      	ldr	r2, [pc, #32]	; (80007fc <HAL_MspInit+0x44>)
 80007dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e0:	61d3      	str	r3, [r2, #28]
 80007e2:	4b06      	ldr	r3, [pc, #24]	; (80007fc <HAL_MspInit+0x44>)
 80007e4:	69db      	ldr	r3, [r3, #28]
 80007e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ea:	603b      	str	r3, [r7, #0]
 80007ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007ee:	bf00      	nop
 80007f0:	370c      	adds	r7, #12
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000

08000800 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08a      	sub	sp, #40	; 0x28
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	2200      	movs	r2, #0
 800080e:	601a      	str	r2, [r3, #0]
 8000810:	605a      	str	r2, [r3, #4]
 8000812:	609a      	str	r2, [r3, #8]
 8000814:	60da      	str	r2, [r3, #12]
 8000816:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000820:	d124      	bne.n	800086c <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000822:	4b14      	ldr	r3, [pc, #80]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000824:	695b      	ldr	r3, [r3, #20]
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6153      	str	r3, [r2, #20]
 800082e:	4b11      	ldr	r3, [pc, #68]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000830:	695b      	ldr	r3, [r3, #20]
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	613b      	str	r3, [r7, #16]
 8000838:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_ADC_MspInit+0x74>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a0d      	ldr	r2, [pc, #52]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000844:	6153      	str	r3, [r2, #20]
 8000846:	4b0b      	ldr	r3, [pc, #44]	; (8000874 <HAL_ADC_MspInit+0x74>)
 8000848:	695b      	ldr	r3, [r3, #20]
 800084a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 8000852:	230b      	movs	r3, #11
 8000854:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000856:	2303      	movs	r3, #3
 8000858:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085e:	f107 0314 	add.w	r3, r7, #20
 8000862:	4619      	mov	r1, r3
 8000864:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000868:	f001 f840 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800086c:	bf00      	nop
 800086e:	3728      	adds	r7, #40	; 0x28
 8000870:	46bd      	mov	sp, r7
 8000872:	bd80      	pop	{r7, pc}
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a13      	ldr	r2, [pc, #76]	; (80008d4 <HAL_TIM_Base_MspInit+0x5c>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d10c      	bne.n	80008a4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800088a:	4b13      	ldr	r3, [pc, #76]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	4a12      	ldr	r2, [pc, #72]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 8000890:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000894:	6193      	str	r3, [r2, #24]
 8000896:	4b10      	ldr	r3, [pc, #64]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 8000898:	699b      	ldr	r3, [r3, #24]
 800089a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800089e:	60fb      	str	r3, [r7, #12]
 80008a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80008a2:	e010      	b.n	80008c6 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a0c      	ldr	r2, [pc, #48]	; (80008dc <HAL_TIM_Base_MspInit+0x64>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d10b      	bne.n	80008c6 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008b0:	699b      	ldr	r3, [r3, #24]
 80008b2:	4a09      	ldr	r2, [pc, #36]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b8:	6193      	str	r3, [r2, #24]
 80008ba:	4b07      	ldr	r3, [pc, #28]	; (80008d8 <HAL_TIM_Base_MspInit+0x60>)
 80008bc:	699b      	ldr	r3, [r3, #24]
 80008be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
}
 80008c6:	bf00      	nop
 80008c8:	3714      	adds	r7, #20
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	40012c00 	.word	0x40012c00
 80008d8:	40021000 	.word	0x40021000
 80008dc:	40014800 	.word	0x40014800

080008e0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08a      	sub	sp, #40	; 0x28
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e8:	f107 0314 	add.w	r3, r7, #20
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]
 80008f6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a23      	ldr	r2, [pc, #140]	; (800098c <HAL_TIM_MspPostInit+0xac>)
 80008fe:	4293      	cmp	r3, r2
 8000900:	d11e      	bne.n	8000940 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000902:	4b23      	ldr	r3, [pc, #140]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 8000904:	695b      	ldr	r3, [r3, #20]
 8000906:	4a22      	ldr	r2, [pc, #136]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 8000908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090c:	6153      	str	r3, [r2, #20]
 800090e:	4b20      	ldr	r3, [pc, #128]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 8000910:	695b      	ldr	r3, [r3, #20]
 8000912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 800091a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800091e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800092c:	2306      	movs	r3, #6
 800092e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000930:	f107 0314 	add.w	r3, r7, #20
 8000934:	4619      	mov	r1, r3
 8000936:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093a:	f000 ffd7 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800093e:	e020      	b.n	8000982 <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a13      	ldr	r2, [pc, #76]	; (8000994 <HAL_TIM_MspPostInit+0xb4>)
 8000946:	4293      	cmp	r3, r2
 8000948:	d11b      	bne.n	8000982 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 800094c:	695b      	ldr	r3, [r3, #20]
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 8000950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000954:	6153      	str	r3, [r2, #20]
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_TIM_MspPostInit+0xb0>)
 8000958:	695b      	ldr	r3, [r3, #20]
 800095a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800095e:	60fb      	str	r3, [r7, #12]
 8000960:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 8000962:	2320      	movs	r3, #32
 8000964:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 8000972:	230a      	movs	r3, #10
 8000974:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4806      	ldr	r0, [pc, #24]	; (8000998 <HAL_TIM_MspPostInit+0xb8>)
 800097e:	f000 ffb5 	bl	80018ec <HAL_GPIO_Init>
}
 8000982:	bf00      	nop
 8000984:	3728      	adds	r7, #40	; 0x28
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	40012c00 	.word	0x40012c00
 8000990:	40021000 	.word	0x40021000
 8000994:	40014800 	.word	0x40014800
 8000998:	48000400 	.word	0x48000400

0800099c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a4:	f107 0314 	add.w	r3, r7, #20
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	605a      	str	r2, [r3, #4]
 80009ae:	609a      	str	r2, [r3, #8]
 80009b0:	60da      	str	r2, [r3, #12]
 80009b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	4a18      	ldr	r2, [pc, #96]	; (8000a1c <HAL_UART_MspInit+0x80>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d129      	bne.n	8000a12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009c0:	69db      	ldr	r3, [r3, #28]
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009c8:	61d3      	str	r3, [r2, #28]
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009cc:	69db      	ldr	r3, [r3, #28]
 80009ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	4b12      	ldr	r3, [pc, #72]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009d8:	695b      	ldr	r3, [r3, #20]
 80009da:	4a11      	ldr	r2, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	6153      	str	r3, [r2, #20]
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_UART_MspInit+0x84>)
 80009e4:	695b      	ldr	r3, [r3, #20]
 80009e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009ea:	60fb      	str	r3, [r7, #12]
 80009ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80009ee:	f248 0304 	movw	r3, #32772	; 0x8004
 80009f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f4:	2302      	movs	r3, #2
 80009f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f8:	2300      	movs	r3, #0
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009fc:	2303      	movs	r3, #3
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a00:	2307      	movs	r3, #7
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a04:	f107 0314 	add.w	r3, r7, #20
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a0e:	f000 ff6d 	bl	80018ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	40004400 	.word	0x40004400
 8000a20:	40021000 	.word	0x40021000

08000a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <NMI_Handler+0x4>

08000a2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <MemManage_Handler+0x4>

08000a36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3a:	e7fe      	b.n	8000a3a <BusFault_Handler+0x4>

08000a3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a40:	e7fe      	b.n	8000a40 <UsageFault_Handler+0x4>

08000a42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a42:	b480      	push	{r7}
 8000a44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a54:	bf00      	nop
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a62:	bf00      	nop
 8000a64:	46bd      	mov	sp, r7
 8000a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6a:	4770      	bx	lr

08000a6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a70:	f000 f88c 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}

08000a78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(POWER_BTN_Pin);
 8000a7c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a80:	f001 f8be 	bl	8001c00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a8c:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <SystemInit+0x20>)
 8000a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a92:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <SystemInit+0x20>)
 8000a94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000aac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ae4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ab0:	480d      	ldr	r0, [pc, #52]	; (8000ae8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ab2:	490e      	ldr	r1, [pc, #56]	; (8000aec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab4:	4a0e      	ldr	r2, [pc, #56]	; (8000af0 <LoopForever+0xe>)
  movs r3, #0
 8000ab6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab8:	e002      	b.n	8000ac0 <LoopCopyDataInit>

08000aba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000aba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000abc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000abe:	3304      	adds	r3, #4

08000ac0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ac2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac4:	d3f9      	bcc.n	8000aba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac6:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac8:	4c0b      	ldr	r4, [pc, #44]	; (8000af8 <LoopForever+0x16>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000acc:	e001      	b.n	8000ad2 <LoopFillZerobss>

08000ace <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ace:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad0:	3204      	adds	r2, #4

08000ad2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ad2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad4:	d3fb      	bcc.n	8000ace <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ad6:	f7ff ffd7 	bl	8000a88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ada:	f004 f813 	bl	8004b04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ade:	f7ff fbbf 	bl	8000260 <main>

08000ae2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ae2:	e7fe      	b.n	8000ae2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae4:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000ae8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000aec:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af0:	08004bb4 	.word	0x08004bb4
  ldr r2, =_sbss
 8000af4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af8:	2000019c 	.word	0x2000019c

08000afc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000afc:	e7fe      	b.n	8000afc <ADC1_2_IRQHandler>
	...

08000b00 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b04:	4b08      	ldr	r3, [pc, #32]	; (8000b28 <HAL_Init+0x28>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	4a07      	ldr	r2, [pc, #28]	; (8000b28 <HAL_Init+0x28>)
 8000b0a:	f043 0310 	orr.w	r3, r3, #16
 8000b0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b10:	2003      	movs	r0, #3
 8000b12:	f000 fea9 	bl	8001868 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b16:	2000      	movs	r0, #0
 8000b18:	f000 f808 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b1c:	f7ff fe4c 	bl	80007b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b20:	2300      	movs	r3, #0
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40022000 	.word	0x40022000

08000b2c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 fec1 	bl	80018d2 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 fe89 	bl	800187e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	20000198 	.word	0x20000198

08000bb4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	20000198 	.word	0x20000198

08000bcc <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09a      	sub	sp, #104	; 0x68
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d101      	bne.n	8000bec <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000be8:	2301      	movs	r3, #1
 8000bea:	e172      	b.n	8000ed2 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	691b      	ldr	r3, [r3, #16]
 8000bf0:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f003 0310 	and.w	r3, r3, #16
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d176      	bne.n	8000cec <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d152      	bne.n	8000cac <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	2200      	movs	r2, #0
 8000c0a:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	2200      	movs	r2, #0
 8000c16:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f7ff fded 	bl	8000800 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	689b      	ldr	r3, [r3, #8]
 8000c2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d13b      	bne.n	8000cac <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000c34:	6878      	ldr	r0, [r7, #4]
 8000c36:	f000 fce1 	bl	80015fc <ADC_Disable>
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c44:	f003 0310 	and.w	r3, r3, #16
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d12f      	bne.n	8000cac <HAL_ADC_Init+0xe0>
 8000c4c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d12b      	bne.n	8000cac <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c5c:	f023 0302 	bic.w	r3, r3, #2
 8000c60:	f043 0202 	orr.w	r2, r3, #2
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689a      	ldr	r2, [r3, #8]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000c76:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	689a      	ldr	r2, [r3, #8]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000c86:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c88:	4b94      	ldr	r3, [pc, #592]	; (8000edc <HAL_ADC_Init+0x310>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	4a94      	ldr	r2, [pc, #592]	; (8000ee0 <HAL_ADC_Init+0x314>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9a      	lsrs	r2, r3, #18
 8000c94:	4613      	mov	r3, r2
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	4413      	add	r3, r2
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000c9e:	e002      	b.n	8000ca6 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000ca0:	68bb      	ldr	r3, [r7, #8]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1f9      	bne.n	8000ca0 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	689b      	ldr	r3, [r3, #8]
 8000cb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d007      	beq.n	8000cca <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000cc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000cc8:	d110      	bne.n	8000cec <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cce:	f023 0312 	bic.w	r3, r3, #18
 8000cd2:	f043 0210 	orr.w	r2, r3, #16
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f043 0201 	orr.w	r2, r3, #1
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf0:	f003 0310 	and.w	r3, r3, #16
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	f040 80df 	bne.w	8000eb8 <HAL_ADC_Init+0x2ec>
 8000cfa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f040 80da 	bne.w	8000eb8 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	f040 80d2 	bne.w	8000eb8 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000d1c:	f043 0202 	orr.w	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000d24:	4b6f      	ldr	r3, [pc, #444]	; (8000ee4 <HAL_ADC_Init+0x318>)
 8000d26:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d30:	d102      	bne.n	8000d38 <HAL_ADC_Init+0x16c>
 8000d32:	4b6d      	ldr	r3, [pc, #436]	; (8000ee8 <HAL_ADC_Init+0x31c>)
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e002      	b.n	8000d3e <HAL_ADC_Init+0x172>
 8000d38:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000d3c:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	689b      	ldr	r3, [r3, #8]
 8000d44:	f003 0303 	and.w	r3, r3, #3
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d108      	bne.n	8000d5e <HAL_ADC_Init+0x192>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	2b01      	cmp	r3, #1
 8000d58:	d101      	bne.n	8000d5e <HAL_ADC_Init+0x192>
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	e000      	b.n	8000d60 <HAL_ADC_Init+0x194>
 8000d5e:	2300      	movs	r3, #0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d11c      	bne.n	8000d9e <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d64:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d010      	beq.n	8000d8c <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	689b      	ldr	r3, [r3, #8]
 8000d6e:	f003 0303 	and.w	r3, r3, #3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	d107      	bne.n	8000d86 <HAL_ADC_Init+0x1ba>
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0301 	and.w	r3, r3, #1
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d101      	bne.n	8000d86 <HAL_ADC_Init+0x1ba>
 8000d82:	2301      	movs	r3, #1
 8000d84:	e000      	b.n	8000d88 <HAL_ADC_Init+0x1bc>
 8000d86:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d108      	bne.n	8000d9e <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000d8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	685b      	ldr	r3, [r3, #4]
 8000d98:	431a      	orrs	r2, r3
 8000d9a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000d9c:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	7e5b      	ldrb	r3, [r3, #25]
 8000da2:	035b      	lsls	r3, r3, #13
 8000da4:	687a      	ldr	r2, [r7, #4]
 8000da6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000da8:	2a01      	cmp	r2, #1
 8000daa:	d002      	beq.n	8000db2 <HAL_ADC_Init+0x1e6>
 8000dac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000db0:	e000      	b.n	8000db4 <HAL_ADC_Init+0x1e8>
 8000db2:	2200      	movs	r2, #0
 8000db4:	431a      	orrs	r2, r3
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	68db      	ldr	r3, [r3, #12]
 8000dba:	431a      	orrs	r2, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	689b      	ldr	r3, [r3, #8]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d11b      	bne.n	8000e0a <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	7e5b      	ldrb	r3, [r3, #25]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d109      	bne.n	8000dee <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dde:	3b01      	subs	r3, #1
 8000de0:	045a      	lsls	r2, r3, #17
 8000de2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000de4:	4313      	orrs	r3, r2
 8000de6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dea:	663b      	str	r3, [r7, #96]	; 0x60
 8000dec:	e00d      	b.n	8000e0a <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000df6:	f043 0220 	orr.w	r2, r3, #32
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	f043 0201 	orr.w	r2, r3, #1
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e0e:	2b01      	cmp	r3, #1
 8000e10:	d007      	beq.n	8000e22 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e1a:	4313      	orrs	r3, r2
 8000e1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e1e:	4313      	orrs	r3, r2
 8000e20:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	689b      	ldr	r3, [r3, #8]
 8000e28:	f003 030c 	and.w	r3, r3, #12
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d114      	bne.n	8000e5a <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	68db      	ldr	r3, [r3, #12]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	6812      	ldr	r2, [r2, #0]
 8000e3a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000e3e:	f023 0302 	bic.w	r3, r3, #2
 8000e42:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7e1b      	ldrb	r3, [r3, #24]
 8000e48:	039a      	lsls	r2, r3, #14
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	4313      	orrs	r3, r2
 8000e54:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000e56:	4313      	orrs	r3, r2
 8000e58:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68da      	ldr	r2, [r3, #12]
 8000e60:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_ADC_Init+0x320>)
 8000e62:	4013      	ands	r3, r2
 8000e64:	687a      	ldr	r2, [r7, #4]
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000e6a:	430b      	orrs	r3, r1
 8000e6c:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	2b01      	cmp	r3, #1
 8000e74:	d10c      	bne.n	8000e90 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7c:	f023 010f 	bic.w	r1, r3, #15
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	69db      	ldr	r3, [r3, #28]
 8000e84:	1e5a      	subs	r2, r3, #1
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	430a      	orrs	r2, r1
 8000e8c:	631a      	str	r2, [r3, #48]	; 0x30
 8000e8e:	e007      	b.n	8000ea0 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 020f 	bic.w	r2, r2, #15
 8000e9e:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f023 0303 	bic.w	r3, r3, #3
 8000eae:	f043 0201 	orr.w	r2, r3, #1
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	641a      	str	r2, [r3, #64]	; 0x40
 8000eb6:	e00a      	b.n	8000ece <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebc:	f023 0312 	bic.w	r3, r3, #18
 8000ec0:	f043 0210 	orr.w	r2, r3, #16
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000ec8:	2301      	movs	r3, #1
 8000eca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000ece:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3768      	adds	r7, #104	; 0x68
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	431bde83 	.word	0x431bde83
 8000ee4:	50000300 	.word	0x50000300
 8000ee8:	50000100 	.word	0x50000100
 8000eec:	fff0c007 	.word	0xfff0c007

08000ef0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b09b      	sub	sp, #108	; 0x6c
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000efa:	2300      	movs	r3, #0
 8000efc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000f00:	2300      	movs	r3, #0
 8000f02:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f0a:	2b01      	cmp	r3, #1
 8000f0c:	d101      	bne.n	8000f12 <HAL_ADC_ConfigChannel+0x22>
 8000f0e:	2302      	movs	r3, #2
 8000f10:	e2a4      	b.n	800145c <HAL_ADC_ConfigChannel+0x56c>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	689b      	ldr	r3, [r3, #8]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	f040 8288 	bne.w	800143a <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	2b04      	cmp	r3, #4
 8000f30:	d81c      	bhi.n	8000f6c <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	4613      	mov	r3, r2
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	4413      	add	r3, r2
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	461a      	mov	r2, r3
 8000f46:	231f      	movs	r3, #31
 8000f48:	4093      	lsls	r3, r2
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	4019      	ands	r1, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	6818      	ldr	r0, [r3, #0]
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	4613      	mov	r3, r2
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	4413      	add	r3, r2
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa00 f203 	lsl.w	r2, r0, r3
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	631a      	str	r2, [r3, #48]	; 0x30
 8000f6a:	e063      	b.n	8001034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d81e      	bhi.n	8000fb2 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	685a      	ldr	r2, [r3, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	005b      	lsls	r3, r3, #1
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	3b1e      	subs	r3, #30
 8000f88:	221f      	movs	r2, #31
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	4019      	ands	r1, r3
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	6818      	ldr	r0, [r3, #0]
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	005b      	lsls	r3, r3, #1
 8000f9e:	4413      	add	r3, r2
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	3b1e      	subs	r3, #30
 8000fa4:	fa00 f203 	lsl.w	r2, r0, r3
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	430a      	orrs	r2, r1
 8000fae:	635a      	str	r2, [r3, #52]	; 0x34
 8000fb0:	e040      	b.n	8001034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	2b0e      	cmp	r3, #14
 8000fb8:	d81e      	bhi.n	8000ff8 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	685a      	ldr	r2, [r3, #4]
 8000fc4:	4613      	mov	r3, r2
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	4413      	add	r3, r2
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	3b3c      	subs	r3, #60	; 0x3c
 8000fce:	221f      	movs	r2, #31
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	4019      	ands	r1, r3
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	6818      	ldr	r0, [r3, #0]
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685a      	ldr	r2, [r3, #4]
 8000fe0:	4613      	mov	r3, r2
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	4413      	add	r3, r2
 8000fe6:	005b      	lsls	r3, r3, #1
 8000fe8:	3b3c      	subs	r3, #60	; 0x3c
 8000fea:	fa00 f203 	lsl.w	r2, r0, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	639a      	str	r2, [r3, #56]	; 0x38
 8000ff6:	e01d      	b.n	8001034 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685a      	ldr	r2, [r3, #4]
 8001002:	4613      	mov	r3, r2
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	4413      	add	r3, r2
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	3b5a      	subs	r3, #90	; 0x5a
 800100c:	221f      	movs	r2, #31
 800100e:	fa02 f303 	lsl.w	r3, r2, r3
 8001012:	43db      	mvns	r3, r3
 8001014:	4019      	ands	r1, r3
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	6818      	ldr	r0, [r3, #0]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685a      	ldr	r2, [r3, #4]
 800101e:	4613      	mov	r3, r2
 8001020:	005b      	lsls	r3, r3, #1
 8001022:	4413      	add	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	3b5a      	subs	r3, #90	; 0x5a
 8001028:	fa00 f203 	lsl.w	r2, r0, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	430a      	orrs	r2, r1
 8001032:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	f003 030c 	and.w	r3, r3, #12
 800103e:	2b00      	cmp	r3, #0
 8001040:	f040 80e5 	bne.w	800120e <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b09      	cmp	r3, #9
 800104a:	d91c      	bls.n	8001086 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	6999      	ldr	r1, [r3, #24]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	3b1e      	subs	r3, #30
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	4019      	ands	r1, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	3b1e      	subs	r3, #30
 8001078:	fa00 f203 	lsl.w	r2, r0, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	619a      	str	r2, [r3, #24]
 8001084:	e019      	b.n	80010ba <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6959      	ldr	r1, [r3, #20]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6898      	ldr	r0, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	fa00 f203 	lsl.w	r2, r0, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	005b      	lsls	r3, r3, #1
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	691b      	ldr	r3, [r3, #16]
 80010d6:	3b01      	subs	r3, #1
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d84f      	bhi.n	800117c <HAL_ADC_ConfigChannel+0x28c>
 80010dc:	a201      	add	r2, pc, #4	; (adr r2, 80010e4 <HAL_ADC_ConfigChannel+0x1f4>)
 80010de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e2:	bf00      	nop
 80010e4:	080010f5 	.word	0x080010f5
 80010e8:	08001117 	.word	0x08001117
 80010ec:	08001139 	.word	0x08001139
 80010f0:	0800115b 	.word	0x0800115b
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010fa:	4b94      	ldr	r3, [pc, #592]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 80010fc:	4013      	ands	r3, r2
 80010fe:	683a      	ldr	r2, [r7, #0]
 8001100:	6812      	ldr	r2, [r2, #0]
 8001102:	0691      	lsls	r1, r2, #26
 8001104:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001106:	430a      	orrs	r2, r1
 8001108:	431a      	orrs	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001112:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001114:	e07e      	b.n	8001214 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800111c:	4b8b      	ldr	r3, [pc, #556]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 800111e:	4013      	ands	r3, r2
 8001120:	683a      	ldr	r2, [r7, #0]
 8001122:	6812      	ldr	r2, [r2, #0]
 8001124:	0691      	lsls	r1, r2, #26
 8001126:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001128:	430a      	orrs	r2, r1
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001134:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001136:	e06d      	b.n	8001214 <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800113e:	4b83      	ldr	r3, [pc, #524]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 8001140:	4013      	ands	r3, r2
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	6812      	ldr	r2, [r2, #0]
 8001146:	0691      	lsls	r1, r2, #26
 8001148:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800114a:	430a      	orrs	r2, r1
 800114c:	431a      	orrs	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001156:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001158:	e05c      	b.n	8001214 <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001160:	4b7a      	ldr	r3, [pc, #488]	; (800134c <HAL_ADC_ConfigChannel+0x45c>)
 8001162:	4013      	ands	r3, r2
 8001164:	683a      	ldr	r2, [r7, #0]
 8001166:	6812      	ldr	r2, [r2, #0]
 8001168:	0691      	lsls	r1, r2, #26
 800116a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800116c:	430a      	orrs	r2, r1
 800116e:	431a      	orrs	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001178:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800117a:	e04b      	b.n	8001214 <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001182:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	069b      	lsls	r3, r3, #26
 800118c:	429a      	cmp	r2, r3
 800118e:	d107      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800119e:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80011a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	069b      	lsls	r3, r3, #26
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d107      	bne.n	80011c4 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011c2:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80011ca:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	069b      	lsls	r3, r3, #26
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d107      	bne.n	80011e8 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80011e6:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80011ee:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	069b      	lsls	r3, r3, #26
 80011f8:	429a      	cmp	r2, r3
 80011fa:	d10a      	bne.n	8001212 <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800120a:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 800120c:	e001      	b.n	8001212 <HAL_ADC_ConfigChannel+0x322>
    }

  }
 800120e:	bf00      	nop
 8001210:	e000      	b.n	8001214 <HAL_ADC_ConfigChannel+0x324>
      break;
 8001212:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	f003 0303 	and.w	r3, r3, #3
 800121e:	2b01      	cmp	r3, #1
 8001220:	d108      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x344>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 0301 	and.w	r3, r3, #1
 800122c:	2b01      	cmp	r3, #1
 800122e:	d101      	bne.n	8001234 <HAL_ADC_ConfigChannel+0x344>
 8001230:	2301      	movs	r3, #1
 8001232:	e000      	b.n	8001236 <HAL_ADC_ConfigChannel+0x346>
 8001234:	2300      	movs	r3, #0
 8001236:	2b00      	cmp	r3, #0
 8001238:	f040 810a 	bne.w	8001450 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	2b01      	cmp	r3, #1
 8001242:	d00f      	beq.n	8001264 <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	2201      	movs	r2, #1
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	400a      	ands	r2, r1
 800125e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8001262:	e049      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2201      	movs	r2, #1
 8001272:	409a      	lsls	r2, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2b09      	cmp	r3, #9
 8001284:	d91c      	bls.n	80012c0 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6999      	ldr	r1, [r3, #24]
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	681a      	ldr	r2, [r3, #0]
 8001290:	4613      	mov	r3, r2
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	4413      	add	r3, r2
 8001296:	3b1b      	subs	r3, #27
 8001298:	2207      	movs	r2, #7
 800129a:	fa02 f303 	lsl.w	r3, r2, r3
 800129e:	43db      	mvns	r3, r3
 80012a0:	4019      	ands	r1, r3
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	6898      	ldr	r0, [r3, #8]
 80012a6:	683b      	ldr	r3, [r7, #0]
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4613      	mov	r3, r2
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	4413      	add	r3, r2
 80012b0:	3b1b      	subs	r3, #27
 80012b2:	fa00 f203 	lsl.w	r2, r0, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	430a      	orrs	r2, r1
 80012bc:	619a      	str	r2, [r3, #24]
 80012be:	e01b      	b.n	80012f8 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	6959      	ldr	r1, [r3, #20]
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	1c5a      	adds	r2, r3, #1
 80012cc:	4613      	mov	r3, r2
 80012ce:	005b      	lsls	r3, r3, #1
 80012d0:	4413      	add	r3, r2
 80012d2:	2207      	movs	r2, #7
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	4019      	ands	r1, r3
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	6898      	ldr	r0, [r3, #8]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1c5a      	adds	r2, r3, #1
 80012e6:	4613      	mov	r3, r2
 80012e8:	005b      	lsls	r3, r3, #1
 80012ea:	4413      	add	r3, r2
 80012ec:	fa00 f203 	lsl.w	r2, r0, r3
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	430a      	orrs	r2, r1
 80012f6:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012f8:	4b15      	ldr	r3, [pc, #84]	; (8001350 <HAL_ADC_ConfigChannel+0x460>)
 80012fa:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	2b10      	cmp	r3, #16
 8001302:	d105      	bne.n	8001310 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800130c:	2b00      	cmp	r3, #0
 800130e:	d015      	beq.n	800133c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001314:	2b11      	cmp	r3, #17
 8001316:	d105      	bne.n	8001324 <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001318:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001320:	2b00      	cmp	r3, #0
 8001322:	d00b      	beq.n	800133c <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001328:	2b12      	cmp	r3, #18
 800132a:	f040 8091 	bne.w	8001450 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800132e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001336:	2b00      	cmp	r3, #0
 8001338:	f040 808a 	bne.w	8001450 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001344:	d108      	bne.n	8001358 <HAL_ADC_ConfigChannel+0x468>
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <HAL_ADC_ConfigChannel+0x464>)
 8001348:	60fb      	str	r3, [r7, #12]
 800134a:	e008      	b.n	800135e <HAL_ADC_ConfigChannel+0x46e>
 800134c:	83fff000 	.word	0x83fff000
 8001350:	50000300 	.word	0x50000300
 8001354:	50000100 	.word	0x50000100
 8001358:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800135c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0303 	and.w	r3, r3, #3
 8001368:	2b01      	cmp	r3, #1
 800136a:	d108      	bne.n	800137e <HAL_ADC_ConfigChannel+0x48e>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b01      	cmp	r3, #1
 8001378:	d101      	bne.n	800137e <HAL_ADC_ConfigChannel+0x48e>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <HAL_ADC_ConfigChannel+0x490>
 800137e:	2300      	movs	r3, #0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d150      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001384:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001386:	2b00      	cmp	r3, #0
 8001388:	d010      	beq.n	80013ac <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	689b      	ldr	r3, [r3, #8]
 800138e:	f003 0303 	and.w	r3, r3, #3
 8001392:	2b01      	cmp	r3, #1
 8001394:	d107      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x4b6>
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_ConfigChannel+0x4b6>
 80013a2:	2301      	movs	r3, #1
 80013a4:	e000      	b.n	80013a8 <HAL_ADC_ConfigChannel+0x4b8>
 80013a6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d13c      	bne.n	8001426 <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b10      	cmp	r3, #16
 80013b2:	d11d      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x500>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80013bc:	d118      	bne.n	80013f0 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80013be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80013c8:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013ca:	4b27      	ldr	r3, [pc, #156]	; (8001468 <HAL_ADC_ConfigChannel+0x578>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_ADC_ConfigChannel+0x57c>)
 80013d0:	fba2 2303 	umull	r2, r3, r2, r3
 80013d4:	0c9a      	lsrs	r2, r3, #18
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	005b      	lsls	r3, r3, #1
 80013de:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80013ee:	e02e      	b.n	800144e <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b11      	cmp	r3, #17
 80013f6:	d10b      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x520>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001400:	d106      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001402:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001404:	689b      	ldr	r3, [r3, #8]
 8001406:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 800140a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800140c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800140e:	e01e      	b.n	800144e <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b12      	cmp	r3, #18
 8001416:	d11a      	bne.n	800144e <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001418:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001420:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001422:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001424:	e013      	b.n	800144e <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f043 0220 	orr.w	r2, r3, #32
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 8001432:	2301      	movs	r3, #1
 8001434:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001438:	e00a      	b.n	8001450 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f043 0220 	orr.w	r2, r3, #32
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 800144c:	e000      	b.n	8001450 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800144e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8001458:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800145c:	4618      	mov	r0, r3
 800145e:	376c      	adds	r7, #108	; 0x6c
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	20000000 	.word	0x20000000
 800146c:	431bde83 	.word	0x431bde83

08001470 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001470:	b480      	push	{r7}
 8001472:	b099      	sub	sp, #100	; 0x64
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001488:	d102      	bne.n	8001490 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800148a:	4b5a      	ldr	r3, [pc, #360]	; (80015f4 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 800148c:	60bb      	str	r3, [r7, #8]
 800148e:	e002      	b.n	8001496 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001494:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e0a2      	b.n	80015e6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d101      	bne.n	80014ae <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80014aa:	2302      	movs	r3, #2
 80014ac:	e09b      	b.n	80015e6 <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2201      	movs	r2, #1
 80014b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0304 	and.w	r3, r3, #4
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d17f      	bne.n	80015c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 0304 	and.w	r3, r3, #4
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d179      	bne.n	80015c4 <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80014d0:	4b49      	ldr	r3, [pc, #292]	; (80015f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d040      	beq.n	800155e <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80014dc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	6859      	ldr	r1, [r3, #4]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014ee:	035b      	lsls	r3, r3, #13
 80014f0:	430b      	orrs	r3, r1
 80014f2:	431a      	orrs	r2, r3
 80014f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80014f6:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	689b      	ldr	r3, [r3, #8]
 80014fe:	f003 0303 	and.w	r3, r3, #3
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f003 0301 	and.w	r3, r3, #1
 8001510:	2b01      	cmp	r3, #1
 8001512:	d101      	bne.n	8001518 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001514:	2301      	movs	r3, #1
 8001516:	e000      	b.n	800151a <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8001518:	2300      	movs	r3, #0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d15c      	bne.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 0303 	and.w	r3, r3, #3
 8001526:	2b01      	cmp	r3, #1
 8001528:	d107      	bne.n	800153a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0301 	and.w	r3, r3, #1
 8001532:	2b01      	cmp	r3, #1
 8001534:	d101      	bne.n	800153a <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001536:	2301      	movs	r3, #1
 8001538:	e000      	b.n	800153c <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 800153a:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800153c:	2b00      	cmp	r3, #0
 800153e:	d14b      	bne.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001540:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001548:	f023 030f 	bic.w	r3, r3, #15
 800154c:	683a      	ldr	r2, [r7, #0]
 800154e:	6811      	ldr	r1, [r2, #0]
 8001550:	683a      	ldr	r2, [r7, #0]
 8001552:	6892      	ldr	r2, [r2, #8]
 8001554:	430a      	orrs	r2, r1
 8001556:	431a      	orrs	r2, r3
 8001558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800155a:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800155c:	e03c      	b.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800155e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001566:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001568:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0303 	and.w	r3, r3, #3
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	2b01      	cmp	r3, #1
 8001584:	d101      	bne.n	800158a <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001586:	2301      	movs	r3, #1
 8001588:	e000      	b.n	800158c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800158a:	2300      	movs	r3, #0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d123      	bne.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001590:	68bb      	ldr	r3, [r7, #8]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	f003 0303 	and.w	r3, r3, #3
 8001598:	2b01      	cmp	r3, #1
 800159a:	d107      	bne.n	80015ac <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0301 	and.w	r3, r3, #1
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d101      	bne.n	80015ac <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80015a8:	2301      	movs	r3, #1
 80015aa:	e000      	b.n	80015ae <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80015ac:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d112      	bne.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80015b2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80015ba:	f023 030f 	bic.w	r3, r3, #15
 80015be:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80015c0:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015c2:	e009      	b.n	80015d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c8:	f043 0220 	orr.w	r2, r3, #32
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80015d0:	2301      	movs	r3, #1
 80015d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80015d6:	e000      	b.n	80015da <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80015d8:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80015e2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 80015e6:	4618      	mov	r0, r3
 80015e8:	3764      	adds	r7, #100	; 0x64
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	50000100 	.word	0x50000100
 80015f8:	50000300 	.word	0x50000300

080015fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b084      	sub	sp, #16
 8001600:	af00      	add	r7, sp, #0
 8001602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001604:	2300      	movs	r3, #0
 8001606:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 0303 	and.w	r3, r3, #3
 8001612:	2b01      	cmp	r3, #1
 8001614:	d108      	bne.n	8001628 <ADC_Disable+0x2c>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0301 	and.w	r3, r3, #1
 8001620:	2b01      	cmp	r3, #1
 8001622:	d101      	bne.n	8001628 <ADC_Disable+0x2c>
 8001624:	2301      	movs	r3, #1
 8001626:	e000      	b.n	800162a <ADC_Disable+0x2e>
 8001628:	2300      	movs	r3, #0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d047      	beq.n	80016be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689b      	ldr	r3, [r3, #8]
 8001634:	f003 030d 	and.w	r3, r3, #13
 8001638:	2b01      	cmp	r3, #1
 800163a:	d10f      	bne.n	800165c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0202 	orr.w	r2, r2, #2
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2203      	movs	r2, #3
 8001652:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001654:	f7ff faae 	bl	8000bb4 <HAL_GetTick>
 8001658:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800165a:	e029      	b.n	80016b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001660:	f043 0210 	orr.w	r2, r3, #16
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166c:	f043 0201 	orr.w	r2, r3, #1
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e023      	b.n	80016c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001678:	f7ff fa9c 	bl	8000bb4 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	2b02      	cmp	r3, #2
 8001684:	d914      	bls.n	80016b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 0301 	and.w	r3, r3, #1
 8001690:	2b01      	cmp	r3, #1
 8001692:	d10d      	bne.n	80016b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001698:	f043 0210 	orr.w	r2, r3, #16
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a4:	f043 0201 	orr.w	r2, r3, #1
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e007      	b.n	80016c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 0301 	and.w	r3, r3, #1
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d0dc      	beq.n	8001678 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3710      	adds	r7, #16
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	f003 0307 	and.w	r3, r3, #7
 80016d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d8:	4b0c      	ldr	r3, [pc, #48]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016de:	68ba      	ldr	r2, [r7, #8]
 80016e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e4:	4013      	ands	r3, r2
 80016e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016fa:	4a04      	ldr	r2, [pc, #16]	; (800170c <__NVIC_SetPriorityGrouping+0x44>)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	60d3      	str	r3, [r2, #12]
}
 8001700:	bf00      	nop
 8001702:	3714      	adds	r7, #20
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000ed00 	.word	0xe000ed00

08001710 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <__NVIC_GetPriorityGrouping+0x18>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	0a1b      	lsrs	r3, r3, #8
 800171a:	f003 0307 	and.w	r3, r3, #7
}
 800171e:	4618      	mov	r0, r3
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001736:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173a:	2b00      	cmp	r3, #0
 800173c:	db0b      	blt.n	8001756 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	f003 021f 	and.w	r2, r3, #31
 8001744:	4907      	ldr	r1, [pc, #28]	; (8001764 <__NVIC_EnableIRQ+0x38>)
 8001746:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800174a:	095b      	lsrs	r3, r3, #5
 800174c:	2001      	movs	r0, #1
 800174e:	fa00 f202 	lsl.w	r2, r0, r2
 8001752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000e100 	.word	0xe000e100

08001768 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001768:	b480      	push	{r7}
 800176a:	b083      	sub	sp, #12
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	6039      	str	r1, [r7, #0]
 8001772:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001774:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001778:	2b00      	cmp	r3, #0
 800177a:	db0a      	blt.n	8001792 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	b2da      	uxtb	r2, r3
 8001780:	490c      	ldr	r1, [pc, #48]	; (80017b4 <__NVIC_SetPriority+0x4c>)
 8001782:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001786:	0112      	lsls	r2, r2, #4
 8001788:	b2d2      	uxtb	r2, r2
 800178a:	440b      	add	r3, r1
 800178c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001790:	e00a      	b.n	80017a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4908      	ldr	r1, [pc, #32]	; (80017b8 <__NVIC_SetPriority+0x50>)
 8001798:	79fb      	ldrb	r3, [r7, #7]
 800179a:	f003 030f 	and.w	r3, r3, #15
 800179e:	3b04      	subs	r3, #4
 80017a0:	0112      	lsls	r2, r2, #4
 80017a2:	b2d2      	uxtb	r2, r2
 80017a4:	440b      	add	r3, r1
 80017a6:	761a      	strb	r2, [r3, #24]
}
 80017a8:	bf00      	nop
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr
 80017b4:	e000e100 	.word	0xe000e100
 80017b8:	e000ed00 	.word	0xe000ed00

080017bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017bc:	b480      	push	{r7}
 80017be:	b089      	sub	sp, #36	; 0x24
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	60f8      	str	r0, [r7, #12]
 80017c4:	60b9      	str	r1, [r7, #8]
 80017c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	f1c3 0307 	rsb	r3, r3, #7
 80017d6:	2b04      	cmp	r3, #4
 80017d8:	bf28      	it	cs
 80017da:	2304      	movcs	r3, #4
 80017dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017de:	69fb      	ldr	r3, [r7, #28]
 80017e0:	3304      	adds	r3, #4
 80017e2:	2b06      	cmp	r3, #6
 80017e4:	d902      	bls.n	80017ec <NVIC_EncodePriority+0x30>
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	3b03      	subs	r3, #3
 80017ea:	e000      	b.n	80017ee <NVIC_EncodePriority+0x32>
 80017ec:	2300      	movs	r3, #0
 80017ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f0:	f04f 32ff 	mov.w	r2, #4294967295
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	fa02 f303 	lsl.w	r3, r2, r3
 80017fa:	43da      	mvns	r2, r3
 80017fc:	68bb      	ldr	r3, [r7, #8]
 80017fe:	401a      	ands	r2, r3
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001804:	f04f 31ff 	mov.w	r1, #4294967295
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	43d9      	mvns	r1, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001814:	4313      	orrs	r3, r2
         );
}
 8001816:	4618      	mov	r0, r3
 8001818:	3724      	adds	r7, #36	; 0x24
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
	...

08001824 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	3b01      	subs	r3, #1
 8001830:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001834:	d301      	bcc.n	800183a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001836:	2301      	movs	r3, #1
 8001838:	e00f      	b.n	800185a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800183a:	4a0a      	ldr	r2, [pc, #40]	; (8001864 <SysTick_Config+0x40>)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	3b01      	subs	r3, #1
 8001840:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001842:	210f      	movs	r1, #15
 8001844:	f04f 30ff 	mov.w	r0, #4294967295
 8001848:	f7ff ff8e 	bl	8001768 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800184c:	4b05      	ldr	r3, [pc, #20]	; (8001864 <SysTick_Config+0x40>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001852:	4b04      	ldr	r3, [pc, #16]	; (8001864 <SysTick_Config+0x40>)
 8001854:	2207      	movs	r2, #7
 8001856:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3708      	adds	r7, #8
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	e000e010 	.word	0xe000e010

08001868 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	b082      	sub	sp, #8
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f7ff ff29 	bl	80016c8 <__NVIC_SetPriorityGrouping>
}
 8001876:	bf00      	nop
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}

0800187e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800187e:	b580      	push	{r7, lr}
 8001880:	b086      	sub	sp, #24
 8001882:	af00      	add	r7, sp, #0
 8001884:	4603      	mov	r3, r0
 8001886:	60b9      	str	r1, [r7, #8]
 8001888:	607a      	str	r2, [r7, #4]
 800188a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800188c:	2300      	movs	r3, #0
 800188e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001890:	f7ff ff3e 	bl	8001710 <__NVIC_GetPriorityGrouping>
 8001894:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	68b9      	ldr	r1, [r7, #8]
 800189a:	6978      	ldr	r0, [r7, #20]
 800189c:	f7ff ff8e 	bl	80017bc <NVIC_EncodePriority>
 80018a0:	4602      	mov	r2, r0
 80018a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018a6:	4611      	mov	r1, r2
 80018a8:	4618      	mov	r0, r3
 80018aa:	f7ff ff5d 	bl	8001768 <__NVIC_SetPriority>
}
 80018ae:	bf00      	nop
 80018b0:	3718      	adds	r7, #24
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018b6:	b580      	push	{r7, lr}
 80018b8:	b082      	sub	sp, #8
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	4603      	mov	r3, r0
 80018be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ff31 	bl	800172c <__NVIC_EnableIRQ>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}

080018d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018d2:	b580      	push	{r7, lr}
 80018d4:	b082      	sub	sp, #8
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffa2 	bl	8001824 <SysTick_Config>
 80018e0:	4603      	mov	r3, r0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
	...

080018ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b087      	sub	sp, #28
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
 80018f4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018f6:	2300      	movs	r3, #0
 80018f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018fa:	e14e      	b.n	8001b9a <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	2101      	movs	r1, #1
 8001902:	697b      	ldr	r3, [r7, #20]
 8001904:	fa01 f303 	lsl.w	r3, r1, r3
 8001908:	4013      	ands	r3, r2
 800190a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	2b00      	cmp	r3, #0
 8001910:	f000 8140 	beq.w	8001b94 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f003 0303 	and.w	r3, r3, #3
 800191c:	2b01      	cmp	r3, #1
 800191e:	d005      	beq.n	800192c <HAL_GPIO_Init+0x40>
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 0303 	and.w	r3, r3, #3
 8001928:	2b02      	cmp	r3, #2
 800192a:	d130      	bne.n	800198e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	2203      	movs	r2, #3
 8001938:	fa02 f303 	lsl.w	r3, r2, r3
 800193c:	43db      	mvns	r3, r3
 800193e:	693a      	ldr	r2, [r7, #16]
 8001940:	4013      	ands	r3, r2
 8001942:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	68da      	ldr	r2, [r3, #12]
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	005b      	lsls	r3, r3, #1
 800194c:	fa02 f303 	lsl.w	r3, r2, r3
 8001950:	693a      	ldr	r2, [r7, #16]
 8001952:	4313      	orrs	r3, r2
 8001954:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	693a      	ldr	r2, [r7, #16]
 800195a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001962:	2201      	movs	r2, #1
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	fa02 f303 	lsl.w	r3, r2, r3
 800196a:	43db      	mvns	r3, r3
 800196c:	693a      	ldr	r2, [r7, #16]
 800196e:	4013      	ands	r3, r2
 8001970:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	091b      	lsrs	r3, r3, #4
 8001978:	f003 0201 	and.w	r2, r3, #1
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	fa02 f303 	lsl.w	r3, r2, r3
 8001982:	693a      	ldr	r2, [r7, #16]
 8001984:	4313      	orrs	r3, r2
 8001986:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f003 0303 	and.w	r3, r3, #3
 8001996:	2b03      	cmp	r3, #3
 8001998:	d017      	beq.n	80019ca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	2203      	movs	r2, #3
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	43db      	mvns	r3, r3
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	4013      	ands	r3, r2
 80019b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	693a      	ldr	r2, [r7, #16]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	693a      	ldr	r2, [r7, #16]
 80019c8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f003 0303 	and.w	r3, r3, #3
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d123      	bne.n	8001a1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	08da      	lsrs	r2, r3, #3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3208      	adds	r2, #8
 80019de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019e2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	f003 0307 	and.w	r3, r3, #7
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	220f      	movs	r2, #15
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	43db      	mvns	r3, r3
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	4013      	ands	r3, r2
 80019f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	691a      	ldr	r2, [r3, #16]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	f003 0307 	and.w	r3, r3, #7
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	08da      	lsrs	r2, r3, #3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	3208      	adds	r2, #8
 8001a18:	6939      	ldr	r1, [r7, #16]
 8001a1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	005b      	lsls	r3, r3, #1
 8001a28:	2203      	movs	r2, #3
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43db      	mvns	r3, r3
 8001a30:	693a      	ldr	r2, [r7, #16]
 8001a32:	4013      	ands	r3, r2
 8001a34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0203 	and.w	r2, r3, #3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	f000 809a 	beq.w	8001b94 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a60:	4b55      	ldr	r3, [pc, #340]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 8001a62:	699b      	ldr	r3, [r3, #24]
 8001a64:	4a54      	ldr	r2, [pc, #336]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	6193      	str	r3, [r2, #24]
 8001a6c:	4b52      	ldr	r3, [pc, #328]	; (8001bb8 <HAL_GPIO_Init+0x2cc>)
 8001a6e:	699b      	ldr	r3, [r3, #24]
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a78:	4a50      	ldr	r2, [pc, #320]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	089b      	lsrs	r3, r3, #2
 8001a7e:	3302      	adds	r3, #2
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a86:	697b      	ldr	r3, [r7, #20]
 8001a88:	f003 0303 	and.w	r3, r3, #3
 8001a8c:	009b      	lsls	r3, r3, #2
 8001a8e:	220f      	movs	r2, #15
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001aa2:	d013      	beq.n	8001acc <HAL_GPIO_Init+0x1e0>
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	4a46      	ldr	r2, [pc, #280]	; (8001bc0 <HAL_GPIO_Init+0x2d4>)
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d00d      	beq.n	8001ac8 <HAL_GPIO_Init+0x1dc>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	4a45      	ldr	r2, [pc, #276]	; (8001bc4 <HAL_GPIO_Init+0x2d8>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d007      	beq.n	8001ac4 <HAL_GPIO_Init+0x1d8>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	4a44      	ldr	r2, [pc, #272]	; (8001bc8 <HAL_GPIO_Init+0x2dc>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_GPIO_Init+0x1d4>
 8001abc:	2303      	movs	r3, #3
 8001abe:	e006      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001ac0:	2305      	movs	r3, #5
 8001ac2:	e004      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	e002      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_GPIO_Init+0x1e2>
 8001acc:	2300      	movs	r3, #0
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	0092      	lsls	r2, r2, #2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	693a      	ldr	r2, [r7, #16]
 8001ada:	4313      	orrs	r3, r2
 8001adc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ade:	4937      	ldr	r1, [pc, #220]	; (8001bbc <HAL_GPIO_Init+0x2d0>)
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	089b      	lsrs	r3, r3, #2
 8001ae4:	3302      	adds	r3, #2
 8001ae6:	693a      	ldr	r2, [r7, #16]
 8001ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aec:	4b37      	ldr	r3, [pc, #220]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43db      	mvns	r3, r3
 8001af6:	693a      	ldr	r2, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b10:	4a2e      	ldr	r2, [pc, #184]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b16:	4b2d      	ldr	r3, [pc, #180]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43db      	mvns	r3, r3
 8001b20:	693a      	ldr	r2, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b3a:	4a24      	ldr	r2, [pc, #144]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43db      	mvns	r3, r3
 8001b4a:	693a      	ldr	r2, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b64:	4a19      	ldr	r2, [pc, #100]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b6a:	4b18      	ldr	r3, [pc, #96]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b6c:	68db      	ldr	r3, [r3, #12]
 8001b6e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	43db      	mvns	r3, r3
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	4013      	ands	r3, r2
 8001b78:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b8e:	4a0f      	ldr	r2, [pc, #60]	; (8001bcc <HAL_GPIO_Init+0x2e0>)
 8001b90:	693b      	ldr	r3, [r7, #16]
 8001b92:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	3301      	adds	r3, #1
 8001b98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	f47f aea9 	bne.w	80018fc <HAL_GPIO_Init+0x10>
  }
}
 8001baa:	bf00      	nop
 8001bac:	bf00      	nop
 8001bae:	371c      	adds	r7, #28
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb6:	4770      	bx	lr
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40010000 	.word	0x40010000
 8001bc0:	48000400 	.word	0x48000400
 8001bc4:	48000800 	.word	0x48000800
 8001bc8:	48000c00 	.word	0x48000c00
 8001bcc:	40010400 	.word	0x40010400

08001bd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b083      	sub	sp, #12
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	807b      	strh	r3, [r7, #2]
 8001bdc:	4613      	mov	r3, r2
 8001bde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001be0:	787b      	ldrb	r3, [r7, #1]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d003      	beq.n	8001bee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001be6:	887a      	ldrh	r2, [r7, #2]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bec:	e002      	b.n	8001bf4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bee:	887a      	ldrh	r2, [r7, #2]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bf4:	bf00      	nop
 8001bf6:	370c      	adds	r7, #12
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	4603      	mov	r3, r0
 8001c08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001c0a:	4b08      	ldr	r3, [pc, #32]	; (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	88fb      	ldrh	r3, [r7, #6]
 8001c10:	4013      	ands	r3, r2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d006      	beq.n	8001c24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001c16:	4a05      	ldr	r2, [pc, #20]	; (8001c2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001c18:	88fb      	ldrh	r3, [r7, #6]
 8001c1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe fad2 	bl	80001c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	40010400 	.word	0x40010400

08001c30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c40:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d102      	bne.n	8001c56 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	f001 b823 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c5a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	f000 817d 	beq.w	8001f66 <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c6c:	4bbc      	ldr	r3, [pc, #752]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f003 030c 	and.w	r3, r3, #12
 8001c74:	2b04      	cmp	r3, #4
 8001c76:	d00c      	beq.n	8001c92 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c78:	4bb9      	ldr	r3, [pc, #740]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b08      	cmp	r3, #8
 8001c82:	d15c      	bne.n	8001d3e <HAL_RCC_OscConfig+0x10e>
 8001c84:	4bb6      	ldr	r3, [pc, #728]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c90:	d155      	bne.n	8001d3e <HAL_RCC_OscConfig+0x10e>
 8001c92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c96:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001c9e:	fa93 f3a3 	rbit	r3, r3
 8001ca2:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001ca6:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001caa:	fab3 f383 	clz	r3, r3
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	095b      	lsrs	r3, r3, #5
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	f043 0301 	orr.w	r3, r3, #1
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d102      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x94>
 8001cbe:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	e015      	b.n	8001cf0 <HAL_RCC_OscConfig+0xc0>
 8001cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cc8:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ccc:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001cd0:	fa93 f3a3 	rbit	r3, r3
 8001cd4:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001cd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cdc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001ce0:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001ce4:	fa93 f3a3 	rbit	r3, r3
 8001ce8:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001cec:	4b9c      	ldr	r3, [pc, #624]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001cf4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001cf8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001cfc:	fa92 f2a2 	rbit	r2, r2
 8001d00:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001d04:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001d08:	fab2 f282 	clz	r2, r2
 8001d0c:	b2d2      	uxtb	r2, r2
 8001d0e:	f042 0220 	orr.w	r2, r2, #32
 8001d12:	b2d2      	uxtb	r2, r2
 8001d14:	f002 021f 	and.w	r2, r2, #31
 8001d18:	2101      	movs	r1, #1
 8001d1a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d1e:	4013      	ands	r3, r2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f000 811f 	beq.w	8001f64 <HAL_RCC_OscConfig+0x334>
 8001d26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d2a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	f040 8116 	bne.w	8001f64 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	f000 bfaf 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d3e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d42:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d4e:	d106      	bne.n	8001d5e <HAL_RCC_OscConfig+0x12e>
 8001d50:	4b83      	ldr	r3, [pc, #524]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a82      	ldr	r2, [pc, #520]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d5a:	6013      	str	r3, [r2, #0]
 8001d5c:	e036      	b.n	8001dcc <HAL_RCC_OscConfig+0x19c>
 8001d5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d62:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d10c      	bne.n	8001d88 <HAL_RCC_OscConfig+0x158>
 8001d6e:	4b7c      	ldr	r3, [pc, #496]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a7b      	ldr	r2, [pc, #492]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d78:	6013      	str	r3, [r2, #0]
 8001d7a:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a78      	ldr	r2, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d84:	6013      	str	r3, [r2, #0]
 8001d86:	e021      	b.n	8001dcc <HAL_RCC_OscConfig+0x19c>
 8001d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001d8c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d98:	d10c      	bne.n	8001db4 <HAL_RCC_OscConfig+0x184>
 8001d9a:	4b71      	ldr	r3, [pc, #452]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a70      	ldr	r2, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a6d      	ldr	r2, [pc, #436]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	e00b      	b.n	8001dcc <HAL_RCC_OscConfig+0x19c>
 8001db4:	4b6a      	ldr	r3, [pc, #424]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a69      	ldr	r2, [pc, #420]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a66      	ldr	r2, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dca:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001dcc:	4b64      	ldr	r3, [pc, #400]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f023 020f 	bic.w	r2, r3, #15
 8001dd4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dd8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	495f      	ldr	r1, [pc, #380]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001de6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d059      	beq.n	8001eaa <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df6:	f7fe fedd 	bl	8000bb4 <HAL_GetTick>
 8001dfa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e00:	f7fe fed8 	bl	8000bb4 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e0a:	1ad3      	subs	r3, r2, r3
 8001e0c:	2b64      	cmp	r3, #100	; 0x64
 8001e0e:	d902      	bls.n	8001e16 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	f000 bf43 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 8001e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001e2a:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	fab3 f383 	clz	r3, r3
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	095b      	lsrs	r3, r3, #5
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	f043 0301 	orr.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d102      	bne.n	8001e48 <HAL_RCC_OscConfig+0x218>
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	e015      	b.n	8001e74 <HAL_RCC_OscConfig+0x244>
 8001e48:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e4c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e50:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001e54:	fa93 f3a3 	rbit	r3, r3
 8001e58:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001e5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e60:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001e64:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001e70:	4b3b      	ldr	r3, [pc, #236]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e78:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001e7c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001e80:	fa92 f2a2 	rbit	r2, r2
 8001e84:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001e88:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001e8c:	fab2 f282 	clz	r2, r2
 8001e90:	b2d2      	uxtb	r2, r2
 8001e92:	f042 0220 	orr.w	r2, r2, #32
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ab      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1d0>
 8001ea8:	e05d      	b.n	8001f66 <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eaa:	f7fe fe83 	bl	8000bb4 <HAL_GetTick>
 8001eae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eb2:	e00a      	b.n	8001eca <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001eb4:	f7fe fe7e 	bl	8000bb4 <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	2b64      	cmp	r3, #100	; 0x64
 8001ec2:	d902      	bls.n	8001eca <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	f000 bee9 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 8001eca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ece:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ed2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001ed6:	fa93 f3a3 	rbit	r3, r3
 8001eda:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001ede:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ee2:	fab3 f383 	clz	r3, r3
 8001ee6:	b2db      	uxtb	r3, r3
 8001ee8:	095b      	lsrs	r3, r3, #5
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f043 0301 	orr.w	r3, r3, #1
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d102      	bne.n	8001efc <HAL_RCC_OscConfig+0x2cc>
 8001ef6:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	e015      	b.n	8001f28 <HAL_RCC_OscConfig+0x2f8>
 8001efc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f00:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f04:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001f08:	fa93 f3a3 	rbit	r3, r3
 8001f0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001f10:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f14:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001f18:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001f1c:	fa93 f3a3 	rbit	r3, r3
 8001f20:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <HAL_RCC_OscConfig+0x330>)
 8001f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f28:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f2c:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001f30:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001f34:	fa92 f2a2 	rbit	r2, r2
 8001f38:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001f3c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001f40:	fab2 f282 	clz	r2, r2
 8001f44:	b2d2      	uxtb	r2, r2
 8001f46:	f042 0220 	orr.w	r2, r2, #32
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f002 021f 	and.w	r2, r2, #31
 8001f50:	2101      	movs	r1, #1
 8001f52:	fa01 f202 	lsl.w	r2, r1, r2
 8001f56:	4013      	ands	r3, r2
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d1ab      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x284>
 8001f5c:	e003      	b.n	8001f66 <HAL_RCC_OscConfig+0x336>
 8001f5e:	bf00      	nop
 8001f60:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f66:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001f6a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0302 	and.w	r3, r3, #2
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 817d 	beq.w	8002276 <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001f7c:	4ba6      	ldr	r3, [pc, #664]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f003 030c 	and.w	r3, r3, #12
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d00b      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001f88:	4ba3      	ldr	r3, [pc, #652]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	f003 030c 	and.w	r3, r3, #12
 8001f90:	2b08      	cmp	r3, #8
 8001f92:	d172      	bne.n	800207a <HAL_RCC_OscConfig+0x44a>
 8001f94:	4ba0      	ldr	r3, [pc, #640]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d16c      	bne.n	800207a <HAL_RCC_OscConfig+0x44a>
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001faa:	fa93 f3a3 	rbit	r3, r3
 8001fae:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001fb2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x3a0>
 8001fca:	4b93      	ldr	r3, [pc, #588]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e013      	b.n	8001ff8 <HAL_RCC_OscConfig+0x3c8>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001fda:	fa93 f3a3 	rbit	r3, r3
 8001fde:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001fe8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001ff4:	4b88      	ldr	r3, [pc, #544]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8001ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001ffe:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002002:	fa92 f2a2 	rbit	r2, r2
 8002006:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800200a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	f042 0220 	orr.w	r2, r2, #32
 8002018:	b2d2      	uxtb	r2, r2
 800201a:	f002 021f 	and.w	r2, r2, #31
 800201e:	2101      	movs	r1, #1
 8002020:	fa01 f202 	lsl.w	r2, r1, r2
 8002024:	4013      	ands	r3, r2
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00a      	beq.n	8002040 <HAL_RCC_OscConfig+0x410>
 800202a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800202e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d002      	beq.n	8002040 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	f000 be2e 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002040:	4b75      	ldr	r3, [pc, #468]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002048:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800204c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	695b      	ldr	r3, [r3, #20]
 8002054:	21f8      	movs	r1, #248	; 0xf8
 8002056:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800205a:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 800205e:	fa91 f1a1 	rbit	r1, r1
 8002062:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8002066:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 800206a:	fab1 f181 	clz	r1, r1
 800206e:	b2c9      	uxtb	r1, r1
 8002070:	408b      	lsls	r3, r1
 8002072:	4969      	ldr	r1, [pc, #420]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002074:	4313      	orrs	r3, r2
 8002076:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002078:	e0fd      	b.n	8002276 <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800207e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	691b      	ldr	r3, [r3, #16]
 8002086:	2b00      	cmp	r3, #0
 8002088:	f000 8088 	beq.w	800219c <HAL_RCC_OscConfig+0x56c>
 800208c:	2301      	movs	r3, #1
 800208e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002092:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8002096:	fa93 f3a3 	rbit	r3, r3
 800209a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 800209e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a2:	fab3 f383 	clz	r3, r3
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	461a      	mov	r2, r3
 80020b4:	2301      	movs	r3, #1
 80020b6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020b8:	f7fe fd7c 	bl	8000bb4 <HAL_GetTick>
 80020bc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020c2:	f7fe fd77 	bl	8000bb4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d902      	bls.n	80020d8 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	f000 bde2 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 80020d8:	2302      	movs	r3, #2
 80020da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80020e2:	fa93 f3a3 	rbit	r3, r3
 80020e6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 80020ea:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020ee:	fab3 f383 	clz	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	095b      	lsrs	r3, r3, #5
 80020f6:	b2db      	uxtb	r3, r3
 80020f8:	f043 0301 	orr.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d102      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d8>
 8002102:	4b45      	ldr	r3, [pc, #276]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	e013      	b.n	8002130 <HAL_RCC_OscConfig+0x500>
 8002108:	2302      	movs	r3, #2
 800210a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800210e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002112:	fa93 f3a3 	rbit	r3, r3
 8002116:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800211a:	2302      	movs	r3, #2
 800211c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002120:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002124:	fa93 f3a3 	rbit	r3, r3
 8002128:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800212c:	4b3a      	ldr	r3, [pc, #232]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 800212e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002130:	2202      	movs	r2, #2
 8002132:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002136:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800213a:	fa92 f2a2 	rbit	r2, r2
 800213e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002142:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002146:	fab2 f282 	clz	r2, r2
 800214a:	b2d2      	uxtb	r2, r2
 800214c:	f042 0220 	orr.w	r2, r2, #32
 8002150:	b2d2      	uxtb	r2, r2
 8002152:	f002 021f 	and.w	r2, r2, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f202 	lsl.w	r2, r1, r2
 800215c:	4013      	ands	r3, r2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0af      	beq.n	80020c2 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002162:	4b2d      	ldr	r3, [pc, #180]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800216a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695b      	ldr	r3, [r3, #20]
 8002176:	21f8      	movs	r1, #248	; 0xf8
 8002178:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217c:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8002180:	fa91 f1a1 	rbit	r1, r1
 8002184:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8002188:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800218c:	fab1 f181 	clz	r1, r1
 8002190:	b2c9      	uxtb	r1, r1
 8002192:	408b      	lsls	r3, r1
 8002194:	4920      	ldr	r1, [pc, #128]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002196:	4313      	orrs	r3, r2
 8002198:	600b      	str	r3, [r1, #0]
 800219a:	e06c      	b.n	8002276 <HAL_RCC_OscConfig+0x646>
 800219c:	2301      	movs	r3, #1
 800219e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80021a6:	fa93 f3a3 	rbit	r3, r3
 80021aa:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80021ae:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021b2:	fab3 f383 	clz	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80021bc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	461a      	mov	r2, r3
 80021c4:	2300      	movs	r3, #0
 80021c6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c8:	f7fe fcf4 	bl	8000bb4 <HAL_GetTick>
 80021cc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021d0:	e00a      	b.n	80021e8 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021d2:	f7fe fcef 	bl	8000bb4 <HAL_GetTick>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d902      	bls.n	80021e8 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	f000 bd5a 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 80021e8:	2302      	movs	r3, #2
 80021ea:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80021fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	fab3 f383 	clz	r3, r3
 8002202:	b2db      	uxtb	r3, r3
 8002204:	095b      	lsrs	r3, r3, #5
 8002206:	b2db      	uxtb	r3, r3
 8002208:	f043 0301 	orr.w	r3, r3, #1
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d104      	bne.n	800221c <HAL_RCC_OscConfig+0x5ec>
 8002212:	4b01      	ldr	r3, [pc, #4]	; (8002218 <HAL_RCC_OscConfig+0x5e8>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	e015      	b.n	8002244 <HAL_RCC_OscConfig+0x614>
 8002218:	40021000 	.word	0x40021000
 800221c:	2302      	movs	r3, #2
 800221e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002222:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8002226:	fa93 f3a3 	rbit	r3, r3
 800222a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800222e:	2302      	movs	r3, #2
 8002230:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002234:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002240:	4bc8      	ldr	r3, [pc, #800]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	2202      	movs	r2, #2
 8002246:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800224a:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 8002256:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800225a:	fab2 f282 	clz	r2, r2
 800225e:	b2d2      	uxtb	r2, r2
 8002260:	f042 0220 	orr.w	r2, r2, #32
 8002264:	b2d2      	uxtb	r2, r2
 8002266:	f002 021f 	and.w	r2, r2, #31
 800226a:	2101      	movs	r1, #1
 800226c:	fa01 f202 	lsl.w	r2, r1, r2
 8002270:	4013      	ands	r3, r2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d1ad      	bne.n	80021d2 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0308 	and.w	r3, r3, #8
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8110 	beq.w	80024ac <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800228c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002290:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	699b      	ldr	r3, [r3, #24]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d079      	beq.n	8002390 <HAL_RCC_OscConfig+0x760>
 800229c:	2301      	movs	r3, #1
 800229e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80022ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022b2:	fab3 f383 	clz	r3, r3
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	461a      	mov	r2, r3
 80022ba:	4bab      	ldr	r3, [pc, #684]	; (8002568 <HAL_RCC_OscConfig+0x938>)
 80022bc:	4413      	add	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	461a      	mov	r2, r3
 80022c2:	2301      	movs	r3, #1
 80022c4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022c6:	f7fe fc75 	bl	8000bb4 <HAL_GetTick>
 80022ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fc70 	bl	8000bb4 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d902      	bls.n	80022e6 <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	f000 bcdb 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 80022e6:	2302      	movs	r3, #2
 80022e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80022f0:	fa93 f3a3 	rbit	r3, r3
 80022f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80022f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022fc:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002300:	2202      	movs	r2, #2
 8002302:	601a      	str	r2, [r3, #0]
 8002304:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002308:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	fa93 f2a3 	rbit	r2, r3
 8002312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002316:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002320:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002324:	2202      	movs	r2, #2
 8002326:	601a      	str	r2, [r3, #0]
 8002328:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800232c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	fa93 f2a3 	rbit	r2, r3
 8002336:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800233a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800233e:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002340:	4b88      	ldr	r3, [pc, #544]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 8002342:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002344:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002348:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800234c:	2102      	movs	r1, #2
 800234e:	6019      	str	r1, [r3, #0]
 8002350:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002354:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	fa93 f1a3 	rbit	r1, r3
 800235e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002362:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002366:	6019      	str	r1, [r3, #0]
  return result;
 8002368:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800236c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800237c:	b2db      	uxtb	r3, r3
 800237e:	f003 031f 	and.w	r3, r3, #31
 8002382:	2101      	movs	r1, #1
 8002384:	fa01 f303 	lsl.w	r3, r1, r3
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0a0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x6a0>
 800238e:	e08d      	b.n	80024ac <HAL_RCC_OscConfig+0x87c>
 8002390:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002394:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8002398:	2201      	movs	r2, #1
 800239a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	fa93 f2a3 	rbit	r2, r3
 80023aa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023ae:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023b2:	601a      	str	r2, [r3, #0]
  return result;
 80023b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023b8:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80023bc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023be:	fab3 f383 	clz	r3, r3
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4b68      	ldr	r3, [pc, #416]	; (8002568 <HAL_RCC_OscConfig+0x938>)
 80023c8:	4413      	add	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	461a      	mov	r2, r3
 80023ce:	2300      	movs	r3, #0
 80023d0:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d2:	f7fe fbef 	bl	8000bb4 <HAL_GetTick>
 80023d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023da:	e00a      	b.n	80023f2 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023dc:	f7fe fbea 	bl	8000bb4 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d902      	bls.n	80023f2 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	f000 bc55 	b.w	8002c9c <HAL_RCC_OscConfig+0x106c>
 80023f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80023fa:	2202      	movs	r2, #2
 80023fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002402:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	fa93 f2a3 	rbit	r2, r3
 800240c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002410:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002414:	601a      	str	r2, [r3, #0]
 8002416:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800241a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800241e:	2202      	movs	r2, #2
 8002420:	601a      	str	r2, [r3, #0]
 8002422:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002426:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	fa93 f2a3 	rbit	r2, r3
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8002438:	601a      	str	r2, [r3, #0]
 800243a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800243e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002442:	2202      	movs	r2, #2
 8002444:	601a      	str	r2, [r3, #0]
 8002446:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800244a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	fa93 f2a3 	rbit	r2, r3
 8002454:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002458:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 800245c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800245e:	4b41      	ldr	r3, [pc, #260]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 8002460:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002462:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002466:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800246a:	2102      	movs	r1, #2
 800246c:	6019      	str	r1, [r3, #0]
 800246e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002472:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	fa93 f1a3 	rbit	r1, r3
 800247c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002480:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8002484:	6019      	str	r1, [r3, #0]
  return result;
 8002486:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248a:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	2101      	movs	r1, #1
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	4013      	ands	r3, r2
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d197      	bne.n	80023dc <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0304 	and.w	r3, r3, #4
 80024bc:	2b00      	cmp	r3, #0
 80024be:	f000 81a1 	beq.w	8002804 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024c2:	2300      	movs	r3, #0
 80024c4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024c8:	4b26      	ldr	r3, [pc, #152]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 80024ca:	69db      	ldr	r3, [r3, #28]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d116      	bne.n	8002502 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024d4:	4b23      	ldr	r3, [pc, #140]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	4a22      	ldr	r2, [pc, #136]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 80024da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024de:	61d3      	str	r3, [r2, #28]
 80024e0:	4b20      	ldr	r3, [pc, #128]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80024e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ec:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024f0:	601a      	str	r2, [r3, #0]
 80024f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024f6:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80024fa:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002502:	4b1a      	ldr	r3, [pc, #104]	; (800256c <HAL_RCC_OscConfig+0x93c>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d11a      	bne.n	8002544 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <HAL_RCC_OscConfig+0x93c>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <HAL_RCC_OscConfig+0x93c>)
 8002514:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002518:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800251a:	f7fe fb4b 	bl	8000bb4 <HAL_GetTick>
 800251e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002522:	e009      	b.n	8002538 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002524:	f7fe fb46 	bl	8000bb4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b64      	cmp	r3, #100	; 0x64
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e3b1      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002538:	4b0c      	ldr	r3, [pc, #48]	; (800256c <HAL_RCC_OscConfig+0x93c>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0ef      	beq.n	8002524 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002548:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d10d      	bne.n	8002570 <HAL_RCC_OscConfig+0x940>
 8002554:	4b03      	ldr	r3, [pc, #12]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a02      	ldr	r2, [pc, #8]	; (8002564 <HAL_RCC_OscConfig+0x934>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e03c      	b.n	80025dc <HAL_RCC_OscConfig+0x9ac>
 8002562:	bf00      	nop
 8002564:	40021000 	.word	0x40021000
 8002568:	10908120 	.word	0x10908120
 800256c:	40007000 	.word	0x40007000
 8002570:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002574:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x96a>
 8002580:	4bc1      	ldr	r3, [pc, #772]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 8002582:	6a1b      	ldr	r3, [r3, #32]
 8002584:	4ac0      	ldr	r2, [pc, #768]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 8002586:	f023 0301 	bic.w	r3, r3, #1
 800258a:	6213      	str	r3, [r2, #32]
 800258c:	4bbe      	ldr	r3, [pc, #760]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4abd      	ldr	r2, [pc, #756]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 8002592:	f023 0304 	bic.w	r3, r3, #4
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	e020      	b.n	80025dc <HAL_RCC_OscConfig+0x9ac>
 800259a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b05      	cmp	r3, #5
 80025a8:	d10c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x994>
 80025aa:	4bb7      	ldr	r3, [pc, #732]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	4ab6      	ldr	r2, [pc, #728]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025b0:	f043 0304 	orr.w	r3, r3, #4
 80025b4:	6213      	str	r3, [r2, #32]
 80025b6:	4bb4      	ldr	r3, [pc, #720]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025b8:	6a1b      	ldr	r3, [r3, #32]
 80025ba:	4ab3      	ldr	r2, [pc, #716]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025bc:	f043 0301 	orr.w	r3, r3, #1
 80025c0:	6213      	str	r3, [r2, #32]
 80025c2:	e00b      	b.n	80025dc <HAL_RCC_OscConfig+0x9ac>
 80025c4:	4bb0      	ldr	r3, [pc, #704]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4aaf      	ldr	r2, [pc, #700]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025ca:	f023 0301 	bic.w	r3, r3, #1
 80025ce:	6213      	str	r3, [r2, #32]
 80025d0:	4bad      	ldr	r3, [pc, #692]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	4aac      	ldr	r2, [pc, #688]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80025d6:	f023 0304 	bic.w	r3, r3, #4
 80025da:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 8081 	beq.w	80026f0 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ee:	f7fe fae1 	bl	8000bb4 <HAL_GetTick>
 80025f2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025f8:	f7fe fadc 	bl	8000bb4 <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e345      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
 8002610:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002614:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002618:	2202      	movs	r2, #2
 800261a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002620:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	fa93 f2a3 	rbit	r2, r3
 800262a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800262e:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002638:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800263c:	2202      	movs	r2, #2
 800263e:	601a      	str	r2, [r3, #0]
 8002640:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002644:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	fa93 f2a3 	rbit	r2, r3
 800264e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002652:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002656:	601a      	str	r2, [r3, #0]
  return result;
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002660:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002662:	fab3 f383 	clz	r3, r3
 8002666:	b2db      	uxtb	r3, r3
 8002668:	095b      	lsrs	r3, r3, #5
 800266a:	b2db      	uxtb	r3, r3
 800266c:	f043 0302 	orr.w	r3, r3, #2
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d102      	bne.n	800267c <HAL_RCC_OscConfig+0xa4c>
 8002676:	4b84      	ldr	r3, [pc, #528]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 8002678:	6a1b      	ldr	r3, [r3, #32]
 800267a:	e013      	b.n	80026a4 <HAL_RCC_OscConfig+0xa74>
 800267c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002680:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002684:	2202      	movs	r2, #2
 8002686:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	fa93 f2a3 	rbit	r2, r3
 8002696:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269a:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800269e:	601a      	str	r2, [r3, #0]
 80026a0:	4b79      	ldr	r3, [pc, #484]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026a8:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026ac:	2102      	movs	r1, #2
 80026ae:	6011      	str	r1, [r2, #0]
 80026b0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026b4:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 80026b8:	6812      	ldr	r2, [r2, #0]
 80026ba:	fa92 f1a2 	rbit	r1, r2
 80026be:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026c2:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026c6:	6011      	str	r1, [r2, #0]
  return result;
 80026c8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80026cc:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	fab2 f282 	clz	r2, r2
 80026d6:	b2d2      	uxtb	r2, r2
 80026d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026dc:	b2d2      	uxtb	r2, r2
 80026de:	f002 021f 	and.w	r2, r2, #31
 80026e2:	2101      	movs	r1, #1
 80026e4:	fa01 f202 	lsl.w	r2, r1, r2
 80026e8:	4013      	ands	r3, r2
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d084      	beq.n	80025f8 <HAL_RCC_OscConfig+0x9c8>
 80026ee:	e07f      	b.n	80027f0 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f0:	f7fe fa60 	bl	8000bb4 <HAL_GetTick>
 80026f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026f8:	e00b      	b.n	8002712 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026fa:	f7fe fa5b 	bl	8000bb4 <HAL_GetTick>
 80026fe:	4602      	mov	r2, r0
 8002700:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	f241 3288 	movw	r2, #5000	; 0x1388
 800270a:	4293      	cmp	r3, r2
 800270c:	d901      	bls.n	8002712 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 800270e:	2303      	movs	r3, #3
 8002710:	e2c4      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
 8002712:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002716:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800271a:	2202      	movs	r2, #2
 800271c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800271e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002722:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	fa93 f2a3 	rbit	r2, r3
 800272c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002730:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800273a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800273e:	2202      	movs	r2, #2
 8002740:	601a      	str	r2, [r3, #0]
 8002742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002746:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	fa93 f2a3 	rbit	r2, r3
 8002750:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002754:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002758:	601a      	str	r2, [r3, #0]
  return result;
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8002762:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002764:	fab3 f383 	clz	r3, r3
 8002768:	b2db      	uxtb	r3, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	b2db      	uxtb	r3, r3
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	b2db      	uxtb	r3, r3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d102      	bne.n	800277e <HAL_RCC_OscConfig+0xb4e>
 8002778:	4b43      	ldr	r3, [pc, #268]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 800277a:	6a1b      	ldr	r3, [r3, #32]
 800277c:	e013      	b.n	80027a6 <HAL_RCC_OscConfig+0xb76>
 800277e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002782:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002786:	2202      	movs	r2, #2
 8002788:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800278a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800278e:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	fa93 f2a3 	rbit	r2, r3
 8002798:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800279c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80027a0:	601a      	str	r2, [r3, #0]
 80027a2:	4b39      	ldr	r3, [pc, #228]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027aa:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027ae:	2102      	movs	r1, #2
 80027b0:	6011      	str	r1, [r2, #0]
 80027b2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b6:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	fa92 f1a2 	rbit	r1, r2
 80027c0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027c4:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027c8:	6011      	str	r1, [r2, #0]
  return result;
 80027ca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ce:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80027d2:	6812      	ldr	r2, [r2, #0]
 80027d4:	fab2 f282 	clz	r2, r2
 80027d8:	b2d2      	uxtb	r2, r2
 80027da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80027de:	b2d2      	uxtb	r2, r2
 80027e0:	f002 021f 	and.w	r2, r2, #31
 80027e4:	2101      	movs	r1, #1
 80027e6:	fa01 f202 	lsl.w	r2, r1, r2
 80027ea:	4013      	ands	r3, r2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d184      	bne.n	80026fa <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80027f0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d105      	bne.n	8002804 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f8:	4b23      	ldr	r3, [pc, #140]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80027fa:	69db      	ldr	r3, [r3, #28]
 80027fc:	4a22      	ldr	r2, [pc, #136]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 80027fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002802:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002804:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002808:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	69db      	ldr	r3, [r3, #28]
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8242 	beq.w	8002c9a <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002816:	4b1c      	ldr	r3, [pc, #112]	; (8002888 <HAL_RCC_OscConfig+0xc58>)
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	f003 030c 	and.w	r3, r3, #12
 800281e:	2b08      	cmp	r3, #8
 8002820:	f000 8213 	beq.w	8002c4a <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002828:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2b02      	cmp	r3, #2
 8002832:	f040 8162 	bne.w	8002afa <HAL_RCC_OscConfig+0xeca>
 8002836:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800283a:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800283e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002842:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002844:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002848:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	fa93 f2a3 	rbit	r2, r3
 8002852:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002856:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800285a:	601a      	str	r2, [r3, #0]
  return result;
 800285c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002860:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8002864:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002866:	fab3 f383 	clz	r3, r3
 800286a:	b2db      	uxtb	r3, r3
 800286c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002870:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	461a      	mov	r2, r3
 8002878:	2300      	movs	r3, #0
 800287a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800287c:	f7fe f99a 	bl	8000bb4 <HAL_GetTick>
 8002880:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002884:	e00c      	b.n	80028a0 <HAL_RCC_OscConfig+0xc70>
 8002886:	bf00      	nop
 8002888:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288c:	f7fe f992 	bl	8000bb4 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b02      	cmp	r3, #2
 800289a:	d901      	bls.n	80028a0 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 800289c:	2303      	movs	r3, #3
 800289e:	e1fd      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
 80028a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028a8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b2:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	fa93 f2a3 	rbit	r2, r3
 80028bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c0:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028c4:	601a      	str	r2, [r3, #0]
  return result;
 80028c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ca:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80028ce:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d0:	fab3 f383 	clz	r3, r3
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	095b      	lsrs	r3, r3, #5
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d102      	bne.n	80028ea <HAL_RCC_OscConfig+0xcba>
 80028e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	e027      	b.n	800293a <HAL_RCC_OscConfig+0xd0a>
 80028ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028ee:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 80028f2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028fc:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	fa93 f2a3 	rbit	r2, r3
 8002906:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800290a:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002914:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002918:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800291c:	601a      	str	r2, [r3, #0]
 800291e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002922:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	fa93 f2a3 	rbit	r2, r3
 800292c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002930:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	4b9c      	ldr	r3, [pc, #624]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 8002938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800293a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800293e:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002942:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002946:	6011      	str	r1, [r2, #0]
 8002948:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800294c:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	fa92 f1a2 	rbit	r1, r2
 8002956:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800295a:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 800295e:	6011      	str	r1, [r2, #0]
  return result;
 8002960:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002964:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8002968:	6812      	ldr	r2, [r2, #0]
 800296a:	fab2 f282 	clz	r2, r2
 800296e:	b2d2      	uxtb	r2, r2
 8002970:	f042 0220 	orr.w	r2, r2, #32
 8002974:	b2d2      	uxtb	r2, r2
 8002976:	f002 021f 	and.w	r2, r2, #31
 800297a:	2101      	movs	r1, #1
 800297c:	fa01 f202 	lsl.w	r2, r1, r2
 8002980:	4013      	ands	r3, r2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d182      	bne.n	800288c <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002986:	4b88      	ldr	r3, [pc, #544]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800298e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002992:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800299a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800299e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	430b      	orrs	r3, r1
 80029a8:	497f      	ldr	r1, [pc, #508]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	604b      	str	r3, [r1, #4]
 80029ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029b6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029ba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	fa93 f2a3 	rbit	r2, r3
 80029ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029ce:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029d2:	601a      	str	r2, [r3, #0]
  return result;
 80029d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d8:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 80029dc:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029de:	fab3 f383 	clz	r3, r3
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80029e8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80029ec:	009b      	lsls	r3, r3, #2
 80029ee:	461a      	mov	r2, r3
 80029f0:	2301      	movs	r3, #1
 80029f2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029f4:	f7fe f8de 	bl	8000bb4 <HAL_GetTick>
 80029f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80029fc:	e009      	b.n	8002a12 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029fe:	f7fe f8d9 	bl	8000bb4 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d901      	bls.n	8002a12 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	e144      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
 8002a12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a16:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a24:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	fa93 f2a3 	rbit	r2, r3
 8002a2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a32:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a36:	601a      	str	r2, [r3, #0]
  return result;
 8002a38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a3c:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002a40:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a42:	fab3 f383 	clz	r3, r3
 8002a46:	b2db      	uxtb	r3, r3
 8002a48:	095b      	lsrs	r3, r3, #5
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	f043 0301 	orr.w	r3, r3, #1
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d102      	bne.n	8002a5c <HAL_RCC_OscConfig+0xe2c>
 8002a56:	4b54      	ldr	r3, [pc, #336]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	e027      	b.n	8002aac <HAL_RCC_OscConfig+0xe7c>
 8002a5c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a60:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a64:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a6a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a6e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	fa93 f2a3 	rbit	r2, r3
 8002a78:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a7c:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8002a80:	601a      	str	r2, [r3, #0]
 8002a82:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a86:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a8e:	601a      	str	r2, [r3, #0]
 8002a90:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a94:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	fa93 f2a3 	rbit	r2, r3
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	4b3f      	ldr	r3, [pc, #252]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 8002aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aac:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ab0:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ab4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ab8:	6011      	str	r1, [r2, #0]
 8002aba:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002abe:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002ac2:	6812      	ldr	r2, [r2, #0]
 8002ac4:	fa92 f1a2 	rbit	r1, r2
 8002ac8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002acc:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ad0:	6011      	str	r1, [r2, #0]
  return result;
 8002ad2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002ad6:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002ada:	6812      	ldr	r2, [r2, #0]
 8002adc:	fab2 f282 	clz	r2, r2
 8002ae0:	b2d2      	uxtb	r2, r2
 8002ae2:	f042 0220 	orr.w	r2, r2, #32
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	f002 021f 	and.w	r2, r2, #31
 8002aec:	2101      	movs	r1, #1
 8002aee:	fa01 f202 	lsl.w	r2, r1, r2
 8002af2:	4013      	ands	r3, r2
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d082      	beq.n	80029fe <HAL_RCC_OscConfig+0xdce>
 8002af8:	e0cf      	b.n	8002c9a <HAL_RCC_OscConfig+0x106a>
 8002afa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002afe:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b02:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b08:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b0c:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	fa93 f2a3 	rbit	r2, r3
 8002b16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b1a:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b1e:	601a      	str	r2, [r3, #0]
  return result;
 8002b20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b24:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002b28:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b2a:	fab3 f383 	clz	r3, r3
 8002b2e:	b2db      	uxtb	r3, r3
 8002b30:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b34:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b40:	f7fe f838 	bl	8000bb4 <HAL_GetTick>
 8002b44:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b48:	e009      	b.n	8002b5e <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b4a:	f7fe f833 	bl	8000bb4 <HAL_GetTick>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e09e      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
 8002b5e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b62:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002b6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b70:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	fa93 f2a3 	rbit	r2, r3
 8002b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b7e:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b82:	601a      	str	r2, [r3, #0]
  return result;
 8002b84:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002b88:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8002b8c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b8e:	fab3 f383 	clz	r3, r3
 8002b92:	b2db      	uxtb	r3, r3
 8002b94:	095b      	lsrs	r3, r3, #5
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	f043 0301 	orr.w	r3, r3, #1
 8002b9c:	b2db      	uxtb	r3, r3
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d104      	bne.n	8002bac <HAL_RCC_OscConfig+0xf7c>
 8002ba2:	4b01      	ldr	r3, [pc, #4]	; (8002ba8 <HAL_RCC_OscConfig+0xf78>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	e029      	b.n	8002bfc <HAL_RCC_OscConfig+0xfcc>
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bb0:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002bb4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bbe:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	fa93 f2a3 	rbit	r2, r3
 8002bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bcc:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bd6:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002bda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bde:	601a      	str	r2, [r3, #0]
 8002be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002be4:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	fa93 f2a3 	rbit	r2, r3
 8002bee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002bf2:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002bf6:	601a      	str	r2, [r3, #0]
 8002bf8:	4b2b      	ldr	r3, [pc, #172]	; (8002ca8 <HAL_RCC_OscConfig+0x1078>)
 8002bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bfc:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c00:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c04:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c08:	6011      	str	r1, [r2, #0]
 8002c0a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c0e:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002c12:	6812      	ldr	r2, [r2, #0]
 8002c14:	fa92 f1a2 	rbit	r1, r2
 8002c18:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c1c:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c20:	6011      	str	r1, [r2, #0]
  return result;
 8002c22:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002c26:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002c2a:	6812      	ldr	r2, [r2, #0]
 8002c2c:	fab2 f282 	clz	r2, r2
 8002c30:	b2d2      	uxtb	r2, r2
 8002c32:	f042 0220 	orr.w	r2, r2, #32
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	f002 021f 	and.w	r2, r2, #31
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002c42:	4013      	ands	r3, r2
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d180      	bne.n	8002b4a <HAL_RCC_OscConfig+0xf1a>
 8002c48:	e027      	b.n	8002c9a <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c4a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c4e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	2b01      	cmp	r3, #1
 8002c58:	d101      	bne.n	8002c5e <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e01e      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c5e:	4b12      	ldr	r3, [pc, #72]	; (8002ca8 <HAL_RCC_OscConfig+0x1078>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c6a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c72:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d10b      	bne.n	8002c96 <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002c7e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002c82:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c86:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002c8a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002c92:	429a      	cmp	r2, r3
 8002c94:	d001      	beq.n	8002c9a <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e000      	b.n	8002c9c <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40021000 	.word	0x40021000

08002cac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b09e      	sub	sp, #120	; 0x78
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
 8002cb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d101      	bne.n	8002cc4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e162      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cc4:	4b90      	ldr	r3, [pc, #576]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	683a      	ldr	r2, [r7, #0]
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d910      	bls.n	8002cf4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cd2:	4b8d      	ldr	r3, [pc, #564]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f023 0207 	bic.w	r2, r3, #7
 8002cda:	498b      	ldr	r1, [pc, #556]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ce2:	4b89      	ldr	r3, [pc, #548]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0307 	and.w	r3, r3, #7
 8002cea:	683a      	ldr	r2, [r7, #0]
 8002cec:	429a      	cmp	r2, r3
 8002cee:	d001      	beq.n	8002cf4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	e14a      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 0302 	and.w	r3, r3, #2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b82      	ldr	r3, [pc, #520]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	497f      	ldr	r1, [pc, #508]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f000 80dc 	beq.w	8002ed8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d13c      	bne.n	8002da2 <HAL_RCC_ClockConfig+0xf6>
 8002d28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d2c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d30:	fa93 f3a3 	rbit	r3, r3
 8002d34:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xa6>
 8002d4c:	4b6f      	ldr	r3, [pc, #444]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e00f      	b.n	8002d72 <HAL_RCC_ClockConfig+0xc6>
 8002d52:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002d5a:	fa93 f3a3 	rbit	r3, r3
 8002d5e:	667b      	str	r3, [r7, #100]	; 0x64
 8002d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d64:	663b      	str	r3, [r7, #96]	; 0x60
 8002d66:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d68:	fa93 f3a3 	rbit	r3, r3
 8002d6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d6e:	4b67      	ldr	r3, [pc, #412]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002d76:	65ba      	str	r2, [r7, #88]	; 0x58
 8002d78:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002d7a:	fa92 f2a2 	rbit	r2, r2
 8002d7e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002d80:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002d82:	fab2 f282 	clz	r2, r2
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	f042 0220 	orr.w	r2, r2, #32
 8002d8c:	b2d2      	uxtb	r2, r2
 8002d8e:	f002 021f 	and.w	r2, r2, #31
 8002d92:	2101      	movs	r1, #1
 8002d94:	fa01 f202 	lsl.w	r2, r1, r2
 8002d98:	4013      	ands	r3, r2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d17b      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	e0f3      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	2b02      	cmp	r3, #2
 8002da8:	d13c      	bne.n	8002e24 <HAL_RCC_ClockConfig+0x178>
 8002daa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002db2:	fa93 f3a3 	rbit	r3, r3
 8002db6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002db8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002dba:	fab3 f383 	clz	r3, r3
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	095b      	lsrs	r3, r3, #5
 8002dc2:	b2db      	uxtb	r3, r3
 8002dc4:	f043 0301 	orr.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d102      	bne.n	8002dd4 <HAL_RCC_ClockConfig+0x128>
 8002dce:	4b4f      	ldr	r3, [pc, #316]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	e00f      	b.n	8002df4 <HAL_RCC_ClockConfig+0x148>
 8002dd4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002dd8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	647b      	str	r3, [r7, #68]	; 0x44
 8002de2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
 8002de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dea:	fa93 f3a3 	rbit	r3, r3
 8002dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002df0:	4b46      	ldr	r3, [pc, #280]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002df2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002df8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002dfc:	fa92 f2a2 	rbit	r2, r2
 8002e00:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e04:	fab2 f282 	clz	r2, r2
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	f042 0220 	orr.w	r2, r2, #32
 8002e0e:	b2d2      	uxtb	r2, r2
 8002e10:	f002 021f 	and.w	r2, r2, #31
 8002e14:	2101      	movs	r1, #1
 8002e16:	fa01 f202 	lsl.w	r2, r1, r2
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d13a      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e0b2      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
 8002e24:	2302      	movs	r3, #2
 8002e26:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e2a:	fa93 f3a3 	rbit	r3, r3
 8002e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e32:	fab3 f383 	clz	r3, r3
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	095b      	lsrs	r3, r3, #5
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	f043 0301 	orr.w	r3, r3, #1
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d102      	bne.n	8002e4c <HAL_RCC_ClockConfig+0x1a0>
 8002e46:	4b31      	ldr	r3, [pc, #196]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	e00d      	b.n	8002e68 <HAL_RCC_ClockConfig+0x1bc>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e52:	fa93 f3a3 	rbit	r3, r3
 8002e56:	627b      	str	r3, [r7, #36]	; 0x24
 8002e58:	2302      	movs	r3, #2
 8002e5a:	623b      	str	r3, [r7, #32]
 8002e5c:	6a3b      	ldr	r3, [r7, #32]
 8002e5e:	fa93 f3a3 	rbit	r3, r3
 8002e62:	61fb      	str	r3, [r7, #28]
 8002e64:	4b29      	ldr	r3, [pc, #164]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e68:	2202      	movs	r2, #2
 8002e6a:	61ba      	str	r2, [r7, #24]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	fa92 f2a2 	rbit	r2, r2
 8002e72:	617a      	str	r2, [r7, #20]
  return result;
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	fab2 f282 	clz	r2, r2
 8002e7a:	b2d2      	uxtb	r2, r2
 8002e7c:	f042 0220 	orr.w	r2, r2, #32
 8002e80:	b2d2      	uxtb	r2, r2
 8002e82:	f002 021f 	and.w	r2, r2, #31
 8002e86:	2101      	movs	r1, #1
 8002e88:	fa01 f202 	lsl.w	r2, r1, r2
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d101      	bne.n	8002e96 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002e92:	2301      	movs	r3, #1
 8002e94:	e079      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e96:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f023 0203 	bic.w	r2, r3, #3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	491a      	ldr	r1, [pc, #104]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ea8:	f7fd fe84 	bl	8000bb4 <HAL_GetTick>
 8002eac:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eae:	e00a      	b.n	8002ec6 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb0:	f7fd fe80 	bl	8000bb4 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e061      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec6:	4b11      	ldr	r3, [pc, #68]	; (8002f0c <HAL_RCC_ClockConfig+0x260>)
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	f003 020c 	and.w	r2, r3, #12
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	429a      	cmp	r2, r3
 8002ed6:	d1eb      	bne.n	8002eb0 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ed8:	4b0b      	ldr	r3, [pc, #44]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0307 	and.w	r3, r3, #7
 8002ee0:	683a      	ldr	r2, [r7, #0]
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d214      	bcs.n	8002f10 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ee6:	4b08      	ldr	r3, [pc, #32]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f023 0207 	bic.w	r2, r3, #7
 8002eee:	4906      	ldr	r1, [pc, #24]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	4313      	orrs	r3, r2
 8002ef4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ef6:	4b04      	ldr	r3, [pc, #16]	; (8002f08 <HAL_RCC_ClockConfig+0x25c>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f003 0307 	and.w	r3, r3, #7
 8002efe:	683a      	ldr	r2, [r7, #0]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e040      	b.n	8002f8a <HAL_RCC_ClockConfig+0x2de>
 8002f08:	40022000 	.word	0x40022000
 8002f0c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 0304 	and.w	r3, r3, #4
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d008      	beq.n	8002f2e <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	491a      	ldr	r1, [pc, #104]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0308 	and.w	r3, r3, #8
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d009      	beq.n	8002f4e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3a:	4b16      	ldr	r3, [pc, #88]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f3c:	685b      	ldr	r3, [r3, #4]
 8002f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	00db      	lsls	r3, r3, #3
 8002f48:	4912      	ldr	r1, [pc, #72]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002f4e:	f000 f829 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8002f52:	4601      	mov	r1, r0
 8002f54:	4b0f      	ldr	r3, [pc, #60]	; (8002f94 <HAL_RCC_ClockConfig+0x2e8>)
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f5c:	22f0      	movs	r2, #240	; 0xf0
 8002f5e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	fa92 f2a2 	rbit	r2, r2
 8002f66:	60fa      	str	r2, [r7, #12]
  return result;
 8002f68:	68fa      	ldr	r2, [r7, #12]
 8002f6a:	fab2 f282 	clz	r2, r2
 8002f6e:	b2d2      	uxtb	r2, r2
 8002f70:	40d3      	lsrs	r3, r2
 8002f72:	4a09      	ldr	r2, [pc, #36]	; (8002f98 <HAL_RCC_ClockConfig+0x2ec>)
 8002f74:	5cd3      	ldrb	r3, [r2, r3]
 8002f76:	fa21 f303 	lsr.w	r3, r1, r3
 8002f7a:	4a08      	ldr	r2, [pc, #32]	; (8002f9c <HAL_RCC_ClockConfig+0x2f0>)
 8002f7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002f7e:	4b08      	ldr	r3, [pc, #32]	; (8002fa0 <HAL_RCC_ClockConfig+0x2f4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fdd2 	bl	8000b2c <HAL_InitTick>
  
  return HAL_OK;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3778      	adds	r7, #120	; 0x78
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	40021000 	.word	0x40021000
 8002f98:	08004b74 	.word	0x08004b74
 8002f9c:	20000000 	.word	0x20000000
 8002fa0:	20000004 	.word	0x20000004

08002fa4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b08b      	sub	sp, #44	; 0x2c
 8002fa8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61fb      	str	r3, [r7, #28]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	61bb      	str	r3, [r7, #24]
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	627b      	str	r3, [r7, #36]	; 0x24
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002fbe:	4b29      	ldr	r3, [pc, #164]	; (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 030c 	and.w	r3, r3, #12
 8002fca:	2b04      	cmp	r3, #4
 8002fcc:	d002      	beq.n	8002fd4 <HAL_RCC_GetSysClockFreq+0x30>
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	d003      	beq.n	8002fda <HAL_RCC_GetSysClockFreq+0x36>
 8002fd2:	e03c      	b.n	800304e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002fd4:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002fd6:	623b      	str	r3, [r7, #32]
      break;
 8002fd8:	e03c      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002fe0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002fe4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	68ba      	ldr	r2, [r7, #8]
 8002fe8:	fa92 f2a2 	rbit	r2, r2
 8002fec:	607a      	str	r2, [r7, #4]
  return result;
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	fab2 f282 	clz	r2, r2
 8002ff4:	b2d2      	uxtb	r2, r2
 8002ff6:	40d3      	lsrs	r3, r2
 8002ff8:	4a1c      	ldr	r2, [pc, #112]	; (800306c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ffa:	5cd3      	ldrb	r3, [r2, r3]
 8002ffc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002ffe:	4b19      	ldr	r3, [pc, #100]	; (8003064 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003002:	f003 030f 	and.w	r3, r3, #15
 8003006:	220f      	movs	r2, #15
 8003008:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800300a:	693a      	ldr	r2, [r7, #16]
 800300c:	fa92 f2a2 	rbit	r2, r2
 8003010:	60fa      	str	r2, [r7, #12]
  return result;
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	fab2 f282 	clz	r2, r2
 8003018:	b2d2      	uxtb	r2, r2
 800301a:	40d3      	lsrs	r3, r2
 800301c:	4a14      	ldr	r2, [pc, #80]	; (8003070 <HAL_RCC_GetSysClockFreq+0xcc>)
 800301e:	5cd3      	ldrb	r3, [r2, r3]
 8003020:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d008      	beq.n	800303e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	fbb2 f2f3 	udiv	r2, r2, r3
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	fb02 f303 	mul.w	r3, r2, r3
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
 800303c:	e004      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	4a0c      	ldr	r2, [pc, #48]	; (8003074 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003042:	fb02 f303 	mul.w	r3, r2, r3
 8003046:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	623b      	str	r3, [r7, #32]
      break;
 800304c:	e002      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800304e:	4b06      	ldr	r3, [pc, #24]	; (8003068 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003050:	623b      	str	r3, [r7, #32]
      break;
 8003052:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003054:	6a3b      	ldr	r3, [r7, #32]
}
 8003056:	4618      	mov	r0, r3
 8003058:	372c      	adds	r7, #44	; 0x2c
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr
 8003062:	bf00      	nop
 8003064:	40021000 	.word	0x40021000
 8003068:	007a1200 	.word	0x007a1200
 800306c:	08004b8c 	.word	0x08004b8c
 8003070:	08004b9c 	.word	0x08004b9c
 8003074:	003d0900 	.word	0x003d0900

08003078 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003078:	b480      	push	{r7}
 800307a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <HAL_RCC_GetHCLKFreq+0x14>)
 800307e:	681b      	ldr	r3, [r3, #0]
}
 8003080:	4618      	mov	r0, r3
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000000 	.word	0x20000000

08003090 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b082      	sub	sp, #8
 8003094:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003096:	f7ff ffef 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 800309a:	4601      	mov	r1, r0
 800309c:	4b0b      	ldr	r3, [pc, #44]	; (80030cc <HAL_RCC_GetPCLK1Freq+0x3c>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80030a8:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	fa92 f2a2 	rbit	r2, r2
 80030b0:	603a      	str	r2, [r7, #0]
  return result;
 80030b2:	683a      	ldr	r2, [r7, #0]
 80030b4:	fab2 f282 	clz	r2, r2
 80030b8:	b2d2      	uxtb	r2, r2
 80030ba:	40d3      	lsrs	r3, r2
 80030bc:	4a04      	ldr	r2, [pc, #16]	; (80030d0 <HAL_RCC_GetPCLK1Freq+0x40>)
 80030be:	5cd3      	ldrb	r3, [r2, r3]
 80030c0:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000
 80030d0:	08004b84 	.word	0x08004b84

080030d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80030da:	f7ff ffcd 	bl	8003078 <HAL_RCC_GetHCLKFreq>
 80030de:	4601      	mov	r1, r0
 80030e0:	4b0b      	ldr	r3, [pc, #44]	; (8003110 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80030e8:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80030ec:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	fa92 f2a2 	rbit	r2, r2
 80030f4:	603a      	str	r2, [r7, #0]
  return result;
 80030f6:	683a      	ldr	r2, [r7, #0]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b2d2      	uxtb	r2, r2
 80030fe:	40d3      	lsrs	r3, r2
 8003100:	4a04      	ldr	r2, [pc, #16]	; (8003114 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003102:	5cd3      	ldrb	r3, [r2, r3]
 8003104:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40021000 	.word	0x40021000
 8003114:	08004b84 	.word	0x08004b84

08003118 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b092      	sub	sp, #72	; 0x48
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003120:	2300      	movs	r3, #0
 8003122:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003124:	2300      	movs	r3, #0
 8003126:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003128:	2300      	movs	r3, #0
 800312a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 80cd 	beq.w	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313c:	4b86      	ldr	r3, [pc, #536]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800313e:	69db      	ldr	r3, [r3, #28]
 8003140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d10e      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003148:	4b83      	ldr	r3, [pc, #524]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314a:	69db      	ldr	r3, [r3, #28]
 800314c:	4a82      	ldr	r2, [pc, #520]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003152:	61d3      	str	r3, [r2, #28]
 8003154:	4b80      	ldr	r3, [pc, #512]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003156:	69db      	ldr	r3, [r3, #28]
 8003158:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003166:	4b7d      	ldr	r3, [pc, #500]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800316e:	2b00      	cmp	r3, #0
 8003170:	d118      	bne.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003172:	4b7a      	ldr	r3, [pc, #488]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a79      	ldr	r2, [pc, #484]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800317c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317e:	f7fd fd19 	bl	8000bb4 <HAL_GetTick>
 8003182:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003184:	e008      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003186:	f7fd fd15 	bl	8000bb4 <HAL_GetTick>
 800318a:	4602      	mov	r2, r0
 800318c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800318e:	1ad3      	subs	r3, r2, r3
 8003190:	2b64      	cmp	r3, #100	; 0x64
 8003192:	d901      	bls.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e0db      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003198:	4b70      	ldr	r3, [pc, #448]	; (800335c <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d0f0      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80031a4:	4b6c      	ldr	r3, [pc, #432]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a6:	6a1b      	ldr	r3, [r3, #32]
 80031a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ac:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80031ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d07d      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031bc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031be:	429a      	cmp	r2, r3
 80031c0:	d076      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80031c2:	4b65      	ldr	r3, [pc, #404]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031d0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d4:	fa93 f3a3 	rbit	r3, r3
 80031d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80031da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80031dc:	fab3 f383 	clz	r3, r3
 80031e0:	b2db      	uxtb	r3, r3
 80031e2:	461a      	mov	r2, r3
 80031e4:	4b5e      	ldr	r3, [pc, #376]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80031e6:	4413      	add	r3, r2
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	461a      	mov	r2, r3
 80031ec:	2301      	movs	r3, #1
 80031ee:	6013      	str	r3, [r2, #0]
 80031f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f8:	fa93 f3a3 	rbit	r3, r3
 80031fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80031fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003200:	fab3 f383 	clz	r3, r3
 8003204:	b2db      	uxtb	r3, r3
 8003206:	461a      	mov	r2, r3
 8003208:	4b55      	ldr	r3, [pc, #340]	; (8003360 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800320a:	4413      	add	r3, r2
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	461a      	mov	r2, r3
 8003210:	2300      	movs	r3, #0
 8003212:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003214:	4a50      	ldr	r2, [pc, #320]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003218:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	f003 0301 	and.w	r3, r3, #1
 8003220:	2b00      	cmp	r3, #0
 8003222:	d045      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003224:	f7fd fcc6 	bl	8000bb4 <HAL_GetTick>
 8003228:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800322a:	e00a      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800322c:	f7fd fcc2 	bl	8000bb4 <HAL_GetTick>
 8003230:	4602      	mov	r2, r0
 8003232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003234:	1ad3      	subs	r3, r2, r3
 8003236:	f241 3288 	movw	r2, #5000	; 0x1388
 800323a:	4293      	cmp	r3, r2
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e086      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003242:	2302      	movs	r3, #2
 8003244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003246:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003248:	fa93 f3a3 	rbit	r3, r3
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
 800324e:	2302      	movs	r3, #2
 8003250:	623b      	str	r3, [r7, #32]
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	fa93 f3a3 	rbit	r3, r3
 8003258:	61fb      	str	r3, [r7, #28]
  return result;
 800325a:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	fab3 f383 	clz	r3, r3
 8003260:	b2db      	uxtb	r3, r3
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	b2db      	uxtb	r3, r3
 8003266:	f043 0302 	orr.w	r3, r3, #2
 800326a:	b2db      	uxtb	r3, r3
 800326c:	2b02      	cmp	r3, #2
 800326e:	d102      	bne.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003270:	4b39      	ldr	r3, [pc, #228]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003272:	6a1b      	ldr	r3, [r3, #32]
 8003274:	e007      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x16e>
 8003276:	2302      	movs	r3, #2
 8003278:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800327a:	69bb      	ldr	r3, [r7, #24]
 800327c:	fa93 f3a3 	rbit	r3, r3
 8003280:	617b      	str	r3, [r7, #20]
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003286:	2202      	movs	r2, #2
 8003288:	613a      	str	r2, [r7, #16]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	fa92 f2a2 	rbit	r2, r2
 8003290:	60fa      	str	r2, [r7, #12]
  return result;
 8003292:	68fa      	ldr	r2, [r7, #12]
 8003294:	fab2 f282 	clz	r2, r2
 8003298:	b2d2      	uxtb	r2, r2
 800329a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	f002 021f 	and.w	r2, r2, #31
 80032a4:	2101      	movs	r1, #1
 80032a6:	fa01 f202 	lsl.w	r2, r1, r2
 80032aa:	4013      	ands	r3, r2
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0bd      	beq.n	800322c <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80032b0:	4b29      	ldr	r3, [pc, #164]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032b2:	6a1b      	ldr	r3, [r3, #32]
 80032b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4926      	ldr	r1, [pc, #152]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032c2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d105      	bne.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032ca:	4b23      	ldr	r3, [pc, #140]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032cc:	69db      	ldr	r3, [r3, #28]
 80032ce:	4a22      	ldr	r2, [pc, #136]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032d4:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d008      	beq.n	80032f4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032e2:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e6:	f023 0203 	bic.w	r2, r3, #3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	491a      	ldr	r1, [pc, #104]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80032f0:	4313      	orrs	r3, r2
 80032f2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0320 	and.w	r3, r3, #32
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d008      	beq.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003304:	f023 0210 	bic.w	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4912      	ldr	r1, [pc, #72]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800330e:	4313      	orrs	r3, r2
 8003310:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800331a:	2b00      	cmp	r3, #0
 800331c:	d008      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800331e:	4b0e      	ldr	r3, [pc, #56]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003322:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	490b      	ldr	r1, [pc, #44]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800332c:	4313      	orrs	r3, r2
 800332e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003338:	2b00      	cmp	r3, #0
 800333a:	d008      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800333c:	4b06      	ldr	r3, [pc, #24]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800333e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003340:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	4903      	ldr	r1, [pc, #12]	; (8003358 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800334a:	4313      	orrs	r3, r2
 800334c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3748      	adds	r7, #72	; 0x48
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	40021000 	.word	0x40021000
 800335c:	40007000 	.word	0x40007000
 8003360:	10908100 	.word	0x10908100

08003364 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003364:	b580      	push	{r7, lr}
 8003366:	b082      	sub	sp, #8
 8003368:	af00      	add	r7, sp, #0
 800336a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d101      	bne.n	8003376 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e049      	b.n	800340a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800337c:	b2db      	uxtb	r3, r3
 800337e:	2b00      	cmp	r3, #0
 8003380:	d106      	bne.n	8003390 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800338a:	6878      	ldr	r0, [r7, #4]
 800338c:	f7fd fa74 	bl	8000878 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2202      	movs	r2, #2
 8003394:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	3304      	adds	r3, #4
 80033a0:	4619      	mov	r1, r3
 80033a2:	4610      	mov	r0, r2
 80033a4:	f000 fbb6 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2201      	movs	r2, #1
 80033ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3708      	adds	r7, #8
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
	...

08003414 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b085      	sub	sp, #20
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003422:	b2db      	uxtb	r3, r3
 8003424:	2b01      	cmp	r3, #1
 8003426:	d001      	beq.n	800342c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e038      	b.n	800349e <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4a1c      	ldr	r2, [pc, #112]	; (80034ac <HAL_TIM_Base_Start+0x98>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d00e      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003446:	d009      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a18      	ldr	r2, [pc, #96]	; (80034b0 <HAL_TIM_Base_Start+0x9c>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d004      	beq.n	800345c <HAL_TIM_Base_Start+0x48>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a17      	ldr	r2, [pc, #92]	; (80034b4 <HAL_TIM_Base_Start+0xa0>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d115      	bne.n	8003488 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	4b15      	ldr	r3, [pc, #84]	; (80034b8 <HAL_TIM_Base_Start+0xa4>)
 8003464:	4013      	ands	r3, r2
 8003466:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b06      	cmp	r3, #6
 800346c:	d015      	beq.n	800349a <HAL_TIM_Base_Start+0x86>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d011      	beq.n	800349a <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f042 0201 	orr.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003486:	e008      	b.n	800349a <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0201 	orr.w	r2, r2, #1
 8003496:	601a      	str	r2, [r3, #0]
 8003498:	e000      	b.n	800349c <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800349a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800349c:	2300      	movs	r3, #0
}
 800349e:	4618      	mov	r0, r3
 80034a0:	3714      	adds	r7, #20
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40012c00 	.word	0x40012c00
 80034b0:	40000400 	.word	0x40000400
 80034b4:	40014000 	.word	0x40014000
 80034b8:	00010007 	.word	0x00010007

080034bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d101      	bne.n	80034ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e049      	b.n	8003562 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d106      	bne.n	80034e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f841 	bl	800356a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2202      	movs	r2, #2
 80034ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681a      	ldr	r2, [r3, #0]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	3304      	adds	r3, #4
 80034f8:	4619      	mov	r1, r3
 80034fa:	4610      	mov	r0, r2
 80034fc:	f000 fb0a 	bl	8003b14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2201      	movs	r2, #1
 8003504:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2201      	movs	r2, #1
 8003524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3708      	adds	r7, #8
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b084      	sub	sp, #16
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d109      	bne.n	80035a4 <HAL_TIM_PWM_Start+0x24>
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003596:	b2db      	uxtb	r3, r3
 8003598:	2b01      	cmp	r3, #1
 800359a:	bf14      	ite	ne
 800359c:	2301      	movne	r3, #1
 800359e:	2300      	moveq	r3, #0
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	e03c      	b.n	800361e <HAL_TIM_PWM_Start+0x9e>
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d109      	bne.n	80035be <HAL_TIM_PWM_Start+0x3e>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	e02f      	b.n	800361e <HAL_TIM_PWM_Start+0x9e>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d109      	bne.n	80035d8 <HAL_TIM_PWM_Start+0x58>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	bf14      	ite	ne
 80035d0:	2301      	movne	r3, #1
 80035d2:	2300      	moveq	r3, #0
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	e022      	b.n	800361e <HAL_TIM_PWM_Start+0x9e>
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d109      	bne.n	80035f2 <HAL_TIM_PWM_Start+0x72>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035e4:	b2db      	uxtb	r3, r3
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	bf14      	ite	ne
 80035ea:	2301      	movne	r3, #1
 80035ec:	2300      	moveq	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	e015      	b.n	800361e <HAL_TIM_PWM_Start+0x9e>
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	2b10      	cmp	r3, #16
 80035f6:	d109      	bne.n	800360c <HAL_TIM_PWM_Start+0x8c>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035fe:	b2db      	uxtb	r3, r3
 8003600:	2b01      	cmp	r3, #1
 8003602:	bf14      	ite	ne
 8003604:	2301      	movne	r3, #1
 8003606:	2300      	moveq	r3, #0
 8003608:	b2db      	uxtb	r3, r3
 800360a:	e008      	b.n	800361e <HAL_TIM_PWM_Start+0x9e>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b01      	cmp	r3, #1
 8003616:	bf14      	ite	ne
 8003618:	2301      	movne	r3, #1
 800361a:	2300      	moveq	r3, #0
 800361c:	b2db      	uxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	d001      	beq.n	8003626 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e088      	b.n	8003738 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d104      	bne.n	8003636 <HAL_TIM_PWM_Start+0xb6>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2202      	movs	r2, #2
 8003630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003634:	e023      	b.n	800367e <HAL_TIM_PWM_Start+0xfe>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	2b04      	cmp	r3, #4
 800363a:	d104      	bne.n	8003646 <HAL_TIM_PWM_Start+0xc6>
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2202      	movs	r2, #2
 8003640:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003644:	e01b      	b.n	800367e <HAL_TIM_PWM_Start+0xfe>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d104      	bne.n	8003656 <HAL_TIM_PWM_Start+0xd6>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2202      	movs	r2, #2
 8003650:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003654:	e013      	b.n	800367e <HAL_TIM_PWM_Start+0xfe>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d104      	bne.n	8003666 <HAL_TIM_PWM_Start+0xe6>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2202      	movs	r2, #2
 8003660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003664:	e00b      	b.n	800367e <HAL_TIM_PWM_Start+0xfe>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b10      	cmp	r3, #16
 800366a:	d104      	bne.n	8003676 <HAL_TIM_PWM_Start+0xf6>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2202      	movs	r2, #2
 8003670:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003674:	e003      	b.n	800367e <HAL_TIM_PWM_Start+0xfe>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2202      	movs	r2, #2
 800367a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2201      	movs	r2, #1
 8003684:	6839      	ldr	r1, [r7, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f000 fdfc 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2b      	ldr	r2, [pc, #172]	; (8003740 <HAL_TIM_PWM_Start+0x1c0>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d00e      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x134>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a2a      	ldr	r2, [pc, #168]	; (8003744 <HAL_TIM_PWM_Start+0x1c4>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d009      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x134>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a28      	ldr	r2, [pc, #160]	; (8003748 <HAL_TIM_PWM_Start+0x1c8>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d004      	beq.n	80036b4 <HAL_TIM_PWM_Start+0x134>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a27      	ldr	r2, [pc, #156]	; (800374c <HAL_TIM_PWM_Start+0x1cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d101      	bne.n	80036b8 <HAL_TIM_PWM_Start+0x138>
 80036b4:	2301      	movs	r3, #1
 80036b6:	e000      	b.n	80036ba <HAL_TIM_PWM_Start+0x13a>
 80036b8:	2300      	movs	r3, #0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d007      	beq.n	80036ce <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4a1b      	ldr	r2, [pc, #108]	; (8003740 <HAL_TIM_PWM_Start+0x1c0>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d00e      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x176>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036e0:	d009      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x176>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1a      	ldr	r2, [pc, #104]	; (8003750 <HAL_TIM_PWM_Start+0x1d0>)
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d004      	beq.n	80036f6 <HAL_TIM_PWM_Start+0x176>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <HAL_TIM_PWM_Start+0x1c4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d115      	bne.n	8003722 <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	4b15      	ldr	r3, [pc, #84]	; (8003754 <HAL_TIM_PWM_Start+0x1d4>)
 80036fe:	4013      	ands	r3, r2
 8003700:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	2b06      	cmp	r3, #6
 8003706:	d015      	beq.n	8003734 <HAL_TIM_PWM_Start+0x1b4>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800370e:	d011      	beq.n	8003734 <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0201 	orr.w	r2, r2, #1
 800371e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003720:	e008      	b.n	8003734 <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f042 0201 	orr.w	r2, r2, #1
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e000      	b.n	8003736 <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003734:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3710      	adds	r7, #16
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}
 8003740:	40012c00 	.word	0x40012c00
 8003744:	40014000 	.word	0x40014000
 8003748:	40014400 	.word	0x40014400
 800374c:	40014800 	.word	0x40014800
 8003750:	40000400 	.word	0x40000400
 8003754:	00010007 	.word	0x00010007

08003758 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	60f8      	str	r0, [r7, #12]
 8003760:	60b9      	str	r1, [r7, #8]
 8003762:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003764:	2300      	movs	r3, #0
 8003766:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800376e:	2b01      	cmp	r3, #1
 8003770:	d101      	bne.n	8003776 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003772:	2302      	movs	r3, #2
 8003774:	e0ff      	b.n	8003976 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2201      	movs	r2, #1
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	2b14      	cmp	r3, #20
 8003782:	f200 80f0 	bhi.w	8003966 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003786:	a201      	add	r2, pc, #4	; (adr r2, 800378c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800378c:	080037e1 	.word	0x080037e1
 8003790:	08003967 	.word	0x08003967
 8003794:	08003967 	.word	0x08003967
 8003798:	08003967 	.word	0x08003967
 800379c:	08003821 	.word	0x08003821
 80037a0:	08003967 	.word	0x08003967
 80037a4:	08003967 	.word	0x08003967
 80037a8:	08003967 	.word	0x08003967
 80037ac:	08003863 	.word	0x08003863
 80037b0:	08003967 	.word	0x08003967
 80037b4:	08003967 	.word	0x08003967
 80037b8:	08003967 	.word	0x08003967
 80037bc:	080038a3 	.word	0x080038a3
 80037c0:	08003967 	.word	0x08003967
 80037c4:	08003967 	.word	0x08003967
 80037c8:	08003967 	.word	0x08003967
 80037cc:	080038e5 	.word	0x080038e5
 80037d0:	08003967 	.word	0x08003967
 80037d4:	08003967 	.word	0x08003967
 80037d8:	08003967 	.word	0x08003967
 80037dc:	08003925 	.word	0x08003925
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	68b9      	ldr	r1, [r7, #8]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f000 fa0c 	bl	8003c04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699a      	ldr	r2, [r3, #24]
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	f042 0208 	orr.w	r2, r2, #8
 80037fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f022 0204 	bic.w	r2, r2, #4
 800380a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	6999      	ldr	r1, [r3, #24]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	430a      	orrs	r2, r1
 800381c:	619a      	str	r2, [r3, #24]
      break;
 800381e:	e0a5      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	68b9      	ldr	r1, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f000 fa72 	bl	8003d10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	699a      	ldr	r2, [r3, #24]
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800383a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	699a      	ldr	r2, [r3, #24]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800384a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	6999      	ldr	r1, [r3, #24]
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	021a      	lsls	r2, r3, #8
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	619a      	str	r2, [r3, #24]
      break;
 8003860:	e084      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	68b9      	ldr	r1, [r7, #8]
 8003868:	4618      	mov	r0, r3
 800386a:	f000 fad1 	bl	8003e10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69da      	ldr	r2, [r3, #28]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0208 	orr.w	r2, r2, #8
 800387c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	69da      	ldr	r2, [r3, #28]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f022 0204 	bic.w	r2, r2, #4
 800388c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69d9      	ldr	r1, [r3, #28]
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	691a      	ldr	r2, [r3, #16]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	61da      	str	r2, [r3, #28]
      break;
 80038a0:	e064      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68b9      	ldr	r1, [r7, #8]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f000 fb2f 	bl	8003f0c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	69da      	ldr	r2, [r3, #28]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69da      	ldr	r2, [r3, #28]
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	69d9      	ldr	r1, [r3, #28]
 80038d4:	68bb      	ldr	r3, [r7, #8]
 80038d6:	691b      	ldr	r3, [r3, #16]
 80038d8:	021a      	lsls	r2, r3, #8
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	61da      	str	r2, [r3, #28]
      break;
 80038e2:	e043      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fb72 	bl	8003fd4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f042 0208 	orr.w	r2, r2, #8
 80038fe:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f022 0204 	bic.w	r2, r2, #4
 800390e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691a      	ldr	r2, [r3, #16]
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	430a      	orrs	r2, r1
 8003920:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003922:	e023      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68b9      	ldr	r1, [r7, #8]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 fbb0 	bl	8004090 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800393e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800394e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	021a      	lsls	r2, r3, #8
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003964:	e002      	b.n	800396c <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	75fb      	strb	r3, [r7, #23]
      break;
 800396a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003974:	7dfb      	ldrb	r3, [r7, #23]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3718      	adds	r7, #24
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
 800397e:	bf00      	nop

08003980 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800398a:	2300      	movs	r3, #0
 800398c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003994:	2b01      	cmp	r3, #1
 8003996:	d101      	bne.n	800399c <HAL_TIM_ConfigClockSource+0x1c>
 8003998:	2302      	movs	r3, #2
 800399a:	e0b6      	b.n	8003b0a <HAL_TIM_ConfigClockSource+0x18a>
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2202      	movs	r2, #2
 80039a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80039be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68ba      	ldr	r2, [r7, #8]
 80039ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039d8:	d03e      	beq.n	8003a58 <HAL_TIM_ConfigClockSource+0xd8>
 80039da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039de:	f200 8087 	bhi.w	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 80039e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039e6:	f000 8086 	beq.w	8003af6 <HAL_TIM_ConfigClockSource+0x176>
 80039ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039ee:	d87f      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 80039f0:	2b70      	cmp	r3, #112	; 0x70
 80039f2:	d01a      	beq.n	8003a2a <HAL_TIM_ConfigClockSource+0xaa>
 80039f4:	2b70      	cmp	r3, #112	; 0x70
 80039f6:	d87b      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 80039f8:	2b60      	cmp	r3, #96	; 0x60
 80039fa:	d050      	beq.n	8003a9e <HAL_TIM_ConfigClockSource+0x11e>
 80039fc:	2b60      	cmp	r3, #96	; 0x60
 80039fe:	d877      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 8003a00:	2b50      	cmp	r3, #80	; 0x50
 8003a02:	d03c      	beq.n	8003a7e <HAL_TIM_ConfigClockSource+0xfe>
 8003a04:	2b50      	cmp	r3, #80	; 0x50
 8003a06:	d873      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 8003a08:	2b40      	cmp	r3, #64	; 0x40
 8003a0a:	d058      	beq.n	8003abe <HAL_TIM_ConfigClockSource+0x13e>
 8003a0c:	2b40      	cmp	r3, #64	; 0x40
 8003a0e:	d86f      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 8003a10:	2b30      	cmp	r3, #48	; 0x30
 8003a12:	d064      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15e>
 8003a14:	2b30      	cmp	r3, #48	; 0x30
 8003a16:	d86b      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 8003a18:	2b20      	cmp	r3, #32
 8003a1a:	d060      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15e>
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	d867      	bhi.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05c      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15e>
 8003a24:	2b10      	cmp	r3, #16
 8003a26:	d05a      	beq.n	8003ade <HAL_TIM_ConfigClockSource+0x15e>
 8003a28:	e062      	b.n	8003af0 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	6899      	ldr	r1, [r3, #8]
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68db      	ldr	r3, [r3, #12]
 8003a3a:	f000 fc03 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a4c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	68ba      	ldr	r2, [r7, #8]
 8003a54:	609a      	str	r2, [r3, #8]
      break;
 8003a56:	e04f      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6818      	ldr	r0, [r3, #0]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	6899      	ldr	r1, [r3, #8]
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	685a      	ldr	r2, [r3, #4]
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f000 fbec 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689a      	ldr	r2, [r3, #8]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a7a:	609a      	str	r2, [r3, #8]
      break;
 8003a7c:	e03c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6818      	ldr	r0, [r3, #0]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	6859      	ldr	r1, [r3, #4]
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f000 fb60 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	2150      	movs	r1, #80	; 0x50
 8003a96:	4618      	mov	r0, r3
 8003a98:	f000 fbb9 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003a9c:	e02c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	6859      	ldr	r1, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	68db      	ldr	r3, [r3, #12]
 8003aaa:	461a      	mov	r2, r3
 8003aac:	f000 fb7f 	bl	80041ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	2160      	movs	r1, #96	; 0x60
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	f000 fba9 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003abc:	e01c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	6859      	ldr	r1, [r3, #4]
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	461a      	mov	r2, r3
 8003acc:	f000 fb40 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	2140      	movs	r1, #64	; 0x40
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f000 fb99 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003adc:	e00c      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	4619      	mov	r1, r3
 8003ae8:	4610      	mov	r0, r2
 8003aea:	f000 fb90 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003aee:	e003      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	73fb      	strb	r3, [r7, #15]
      break;
 8003af4:	e000      	b.n	8003af8 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003af6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2201      	movs	r2, #1
 8003afc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b08:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	3710      	adds	r7, #16
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
	...

08003b14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
 8003b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a32      	ldr	r2, [pc, #200]	; (8003bf0 <TIM_Base_SetConfig+0xdc>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x28>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x28>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a2f      	ldr	r2, [pc, #188]	; (8003bf4 <TIM_Base_SetConfig+0xe0>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a27      	ldr	r2, [pc, #156]	; (8003bf0 <TIM_Base_SetConfig+0xdc>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d013      	beq.n	8003b7e <TIM_Base_SetConfig+0x6a>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5c:	d00f      	beq.n	8003b7e <TIM_Base_SetConfig+0x6a>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a24      	ldr	r2, [pc, #144]	; (8003bf4 <TIM_Base_SetConfig+0xe0>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <TIM_Base_SetConfig+0x6a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a23      	ldr	r2, [pc, #140]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <TIM_Base_SetConfig+0x6a>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a22      	ldr	r2, [pc, #136]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <TIM_Base_SetConfig+0x6a>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a21      	ldr	r2, [pc, #132]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d108      	bne.n	8003b90 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b84:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	689a      	ldr	r2, [r3, #8]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	4a0e      	ldr	r2, [pc, #56]	; (8003bf0 <TIM_Base_SetConfig+0xdc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d00b      	beq.n	8003bd4 <TIM_Base_SetConfig+0xc0>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	4a0e      	ldr	r2, [pc, #56]	; (8003bf8 <TIM_Base_SetConfig+0xe4>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d007      	beq.n	8003bd4 <TIM_Base_SetConfig+0xc0>
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	4a0d      	ldr	r2, [pc, #52]	; (8003bfc <TIM_Base_SetConfig+0xe8>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d003      	beq.n	8003bd4 <TIM_Base_SetConfig+0xc0>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a0c      	ldr	r2, [pc, #48]	; (8003c00 <TIM_Base_SetConfig+0xec>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d103      	bne.n	8003bdc <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	615a      	str	r2, [r3, #20]
}
 8003be2:	bf00      	nop
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40014000 	.word	0x40014000
 8003bfc:	40014400 	.word	0x40014400
 8003c00:	40014800 	.word	0x40014800

08003c04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b087      	sub	sp, #28
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a1b      	ldr	r3, [r3, #32]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	699b      	ldr	r3, [r3, #24]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0303 	bic.w	r3, r3, #3
 8003c3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	68fa      	ldr	r2, [r7, #12]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	f023 0302 	bic.w	r3, r3, #2
 8003c50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	697a      	ldr	r2, [r7, #20]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <TIM_OC1_SetConfig+0xfc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d00b      	beq.n	8003c7c <TIM_OC1_SetConfig+0x78>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <TIM_OC1_SetConfig+0x100>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d007      	beq.n	8003c7c <TIM_OC1_SetConfig+0x78>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <TIM_OC1_SetConfig+0x104>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <TIM_OC1_SetConfig+0x78>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <TIM_OC1_SetConfig+0x108>)
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d10c      	bne.n	8003c96 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	f023 0308 	bic.w	r3, r3, #8
 8003c82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	f023 0304 	bic.w	r3, r3, #4
 8003c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a19      	ldr	r2, [pc, #100]	; (8003d00 <TIM_OC1_SetConfig+0xfc>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d00b      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xb2>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	4a18      	ldr	r2, [pc, #96]	; (8003d04 <TIM_OC1_SetConfig+0x100>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d007      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xb2>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	4a17      	ldr	r2, [pc, #92]	; (8003d08 <TIM_OC1_SetConfig+0x104>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d003      	beq.n	8003cb6 <TIM_OC1_SetConfig+0xb2>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	4a16      	ldr	r2, [pc, #88]	; (8003d0c <TIM_OC1_SetConfig+0x108>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d111      	bne.n	8003cda <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	693a      	ldr	r2, [r7, #16]
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	697a      	ldr	r2, [r7, #20]
 8003cf2:	621a      	str	r2, [r3, #32]
}
 8003cf4:	bf00      	nop
 8003cf6:	371c      	adds	r7, #28
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr
 8003d00:	40012c00 	.word	0x40012c00
 8003d04:	40014000 	.word	0x40014000
 8003d08:	40014400 	.word	0x40014400
 8003d0c:	40014800 	.word	0x40014800

08003d10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d10:	b480      	push	{r7}
 8003d12:	b087      	sub	sp, #28
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	f023 0210 	bic.w	r2, r3, #16
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	699b      	ldr	r3, [r3, #24]
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003d3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	021b      	lsls	r3, r3, #8
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	f023 0320 	bic.w	r3, r3, #32
 8003d5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	011b      	lsls	r3, r3, #4
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a24      	ldr	r2, [pc, #144]	; (8003e00 <TIM_OC2_SetConfig+0xf0>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d10d      	bne.n	8003d90 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	011b      	lsls	r3, r3, #4
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d88:	697b      	ldr	r3, [r7, #20]
 8003d8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d8e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	4a1b      	ldr	r2, [pc, #108]	; (8003e00 <TIM_OC2_SetConfig+0xf0>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d00b      	beq.n	8003db0 <TIM_OC2_SetConfig+0xa0>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a1a      	ldr	r2, [pc, #104]	; (8003e04 <TIM_OC2_SetConfig+0xf4>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d007      	beq.n	8003db0 <TIM_OC2_SetConfig+0xa0>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a19      	ldr	r2, [pc, #100]	; (8003e08 <TIM_OC2_SetConfig+0xf8>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d003      	beq.n	8003db0 <TIM_OC2_SetConfig+0xa0>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	4a18      	ldr	r2, [pc, #96]	; (8003e0c <TIM_OC2_SetConfig+0xfc>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d113      	bne.n	8003dd8 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003db6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003dbe:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4313      	orrs	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685a      	ldr	r2, [r3, #4]
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	621a      	str	r2, [r3, #32]
}
 8003df2:	bf00      	nop
 8003df4:	371c      	adds	r7, #28
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	40012c00 	.word	0x40012c00
 8003e04:	40014000 	.word	0x40014000
 8003e08:	40014400 	.word	0x40014400
 8003e0c:	40014800 	.word	0x40014800

08003e10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e10:	b480      	push	{r7}
 8003e12:	b087      	sub	sp, #28
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]
 8003e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a1b      	ldr	r3, [r3, #32]
 8003e1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a1b      	ldr	r3, [r3, #32]
 8003e2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f023 0303 	bic.w	r3, r3, #3
 8003e4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	68fa      	ldr	r2, [r7, #12]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	689b      	ldr	r3, [r3, #8]
 8003e62:	021b      	lsls	r3, r3, #8
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	; (8003efc <TIM_OC3_SetConfig+0xec>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d10d      	bne.n	8003e8e <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e72:	697b      	ldr	r3, [r7, #20]
 8003e74:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e78:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
 8003e7e:	021b      	lsls	r3, r3, #8
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e86:	697b      	ldr	r3, [r7, #20]
 8003e88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e8c:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a1a      	ldr	r2, [pc, #104]	; (8003efc <TIM_OC3_SetConfig+0xec>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00b      	beq.n	8003eae <TIM_OC3_SetConfig+0x9e>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a19      	ldr	r2, [pc, #100]	; (8003f00 <TIM_OC3_SetConfig+0xf0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d007      	beq.n	8003eae <TIM_OC3_SetConfig+0x9e>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a18      	ldr	r2, [pc, #96]	; (8003f04 <TIM_OC3_SetConfig+0xf4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d003      	beq.n	8003eae <TIM_OC3_SetConfig+0x9e>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a17      	ldr	r2, [pc, #92]	; (8003f08 <TIM_OC3_SetConfig+0xf8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d113      	bne.n	8003ed6 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003eb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ebc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	011b      	lsls	r3, r3, #4
 8003ec4:	693a      	ldr	r2, [r7, #16]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	693a      	ldr	r2, [r7, #16]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	693a      	ldr	r2, [r7, #16]
 8003eda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	68fa      	ldr	r2, [r7, #12]
 8003ee0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	621a      	str	r2, [r3, #32]
}
 8003ef0:	bf00      	nop
 8003ef2:	371c      	adds	r7, #28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr
 8003efc:	40012c00 	.word	0x40012c00
 8003f00:	40014000 	.word	0x40014000
 8003f04:	40014400 	.word	0x40014400
 8003f08:	40014800 	.word	0x40014800

08003f0c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b087      	sub	sp, #28
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
 8003f1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6a1b      	ldr	r3, [r3, #32]
 8003f26:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	685b      	ldr	r3, [r3, #4]
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	69db      	ldr	r3, [r3, #28]
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	021b      	lsls	r3, r3, #8
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	4313      	orrs	r3, r2
 8003f52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	689b      	ldr	r3, [r3, #8]
 8003f60:	031b      	lsls	r3, r3, #12
 8003f62:	693a      	ldr	r2, [r7, #16]
 8003f64:	4313      	orrs	r3, r2
 8003f66:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <TIM_OC4_SetConfig+0xb8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d00b      	beq.n	8003f88 <TIM_OC4_SetConfig+0x7c>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a15      	ldr	r2, [pc, #84]	; (8003fc8 <TIM_OC4_SetConfig+0xbc>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d007      	beq.n	8003f88 <TIM_OC4_SetConfig+0x7c>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a14      	ldr	r2, [pc, #80]	; (8003fcc <TIM_OC4_SetConfig+0xc0>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d003      	beq.n	8003f88 <TIM_OC4_SetConfig+0x7c>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <TIM_OC4_SetConfig+0xc4>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d109      	bne.n	8003f9c <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f88:	697b      	ldr	r3, [r7, #20]
 8003f8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	695b      	ldr	r3, [r3, #20]
 8003f94:	019b      	lsls	r3, r3, #6
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	693a      	ldr	r2, [r7, #16]
 8003fb4:	621a      	str	r2, [r3, #32]
}
 8003fb6:	bf00      	nop
 8003fb8:	371c      	adds	r7, #28
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr
 8003fc2:	bf00      	nop
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b087      	sub	sp, #28
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a1b      	ldr	r3, [r3, #32]
 8003fe2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	6a1b      	ldr	r3, [r3, #32]
 8003fee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004006:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004018:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	041b      	lsls	r3, r3, #16
 8004020:	693a      	ldr	r2, [r7, #16]
 8004022:	4313      	orrs	r3, r2
 8004024:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <TIM_OC5_SetConfig+0xac>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_OC5_SetConfig+0x72>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <TIM_OC5_SetConfig+0xb0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d007      	beq.n	8004046 <TIM_OC5_SetConfig+0x72>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a13      	ldr	r2, [pc, #76]	; (8004088 <TIM_OC5_SetConfig+0xb4>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_OC5_SetConfig+0x72>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <TIM_OC5_SetConfig+0xb8>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d109      	bne.n	800405a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004046:	697b      	ldr	r3, [r7, #20]
 8004048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	021b      	lsls	r3, r3, #8
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	697a      	ldr	r2, [r7, #20]
 800405e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	685a      	ldr	r2, [r3, #4]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	621a      	str	r2, [r3, #32]
}
 8004074:	bf00      	nop
 8004076:	371c      	adds	r7, #28
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr
 8004080:	40012c00 	.word	0x40012c00
 8004084:	40014000 	.word	0x40014000
 8004088:	40014400 	.word	0x40014400
 800408c:	40014800 	.word	0x40014800

08004090 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004090:	b480      	push	{r7}
 8004092:	b087      	sub	sp, #28
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a1b      	ldr	r3, [r3, #32]
 800409e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80040be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	021b      	lsls	r3, r3, #8
 80040ca:	68fa      	ldr	r2, [r7, #12]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80040d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	051b      	lsls	r3, r3, #20
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a16      	ldr	r2, [pc, #88]	; (8004140 <TIM_OC6_SetConfig+0xb0>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_OC6_SetConfig+0x74>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a15      	ldr	r2, [pc, #84]	; (8004144 <TIM_OC6_SetConfig+0xb4>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_OC6_SetConfig+0x74>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a14      	ldr	r2, [pc, #80]	; (8004148 <TIM_OC6_SetConfig+0xb8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_OC6_SetConfig+0x74>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a13      	ldr	r2, [pc, #76]	; (800414c <TIM_OC6_SetConfig+0xbc>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d109      	bne.n	8004118 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	029b      	lsls	r3, r3, #10
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4313      	orrs	r3, r2
 8004116:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	685a      	ldr	r2, [r3, #4]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	693a      	ldr	r2, [r7, #16]
 8004130:	621a      	str	r2, [r3, #32]
}
 8004132:	bf00      	nop
 8004134:	371c      	adds	r7, #28
 8004136:	46bd      	mov	sp, r7
 8004138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413c:	4770      	bx	lr
 800413e:	bf00      	nop
 8004140:	40012c00 	.word	0x40012c00
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e054      	b.n	8004392 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4a24      	ldr	r2, [pc, #144]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d108      	bne.n	8004324 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004318:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	4313      	orrs	r3, r2
 8004322:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800432a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	68fa      	ldr	r2, [r7, #12]
 8004332:	4313      	orrs	r3, r2
 8004334:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a17      	ldr	r2, [pc, #92]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d00e      	beq.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004350:	d009      	beq.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a13      	ldr	r2, [pc, #76]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a11      	ldr	r2, [pc, #68]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10c      	bne.n	8004380 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004366:	68bb      	ldr	r3, [r7, #8]
 8004368:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800436c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	68ba      	ldr	r2, [r7, #8]
 8004374:	4313      	orrs	r3, r2
 8004376:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2201      	movs	r2, #1
 8004384:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004390:	2300      	movs	r3, #0
}
 8004392:	4618      	mov	r0, r3
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40014000 	.word	0x40014000

080043ac <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c0:	2b01      	cmp	r3, #1
 80043c2:	d101      	bne.n	80043c8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043c4:	2302      	movs	r3, #2
 80043c6:	e060      	b.n	800448a <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2201      	movs	r2, #1
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	68db      	ldr	r3, [r3, #12]
 80043da:	4313      	orrs	r3, r2
 80043dc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	689b      	ldr	r3, [r3, #8]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4313      	orrs	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	691b      	ldr	r3, [r3, #16]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	699b      	ldr	r3, [r3, #24]
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	4313      	orrs	r3, r2
 8004440:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a14      	ldr	r2, [pc, #80]	; (8004498 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 8004448:	4293      	cmp	r3, r2
 800444a:	d115      	bne.n	8004478 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004456:	051b      	lsls	r3, r3, #20
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	6a1b      	ldr	r3, [r3, #32]
 8004474:	4313      	orrs	r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	68fa      	ldr	r2, [r7, #12]
 800447e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3714      	adds	r7, #20
 800448e:	46bd      	mov	sp, r7
 8004490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop
 8004498:	40012c00 	.word	0x40012c00

0800449c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e040      	b.n	8004530 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d106      	bne.n	80044c4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f7fc fa6c 	bl	800099c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2224      	movs	r2, #36	; 0x24
 80044c8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0201 	bic.w	r2, r2, #1
 80044d8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f82c 	bl	8004538 <UART_SetConfig>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b01      	cmp	r3, #1
 80044e4:	d101      	bne.n	80044ea <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e022      	b.n	8004530 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d002      	beq.n	80044f8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f000 f956 	bl	80047a4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685a      	ldr	r2, [r3, #4]
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004506:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	689a      	ldr	r2, [r3, #8]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004516:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f042 0201 	orr.w	r2, r2, #1
 8004526:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004528:	6878      	ldr	r0, [r7, #4]
 800452a:	f000 f9dd 	bl	80048e8 <UART_CheckIdleState>
 800452e:	4603      	mov	r3, r0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3708      	adds	r7, #8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b088      	sub	sp, #32
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004540:	2300      	movs	r3, #0
 8004542:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	695b      	ldr	r3, [r3, #20]
 8004552:	431a      	orrs	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	69db      	ldr	r3, [r3, #28]
 8004558:	4313      	orrs	r3, r2
 800455a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	4b8a      	ldr	r3, [pc, #552]	; (800478c <UART_SetConfig+0x254>)
 8004564:	4013      	ands	r3, r2
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6812      	ldr	r2, [r2, #0]
 800456a:	6979      	ldr	r1, [r7, #20]
 800456c:	430b      	orrs	r3, r1
 800456e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68da      	ldr	r2, [r3, #12]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	430a      	orrs	r2, r1
 8004584:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a1b      	ldr	r3, [r3, #32]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	689b      	ldr	r3, [r3, #8]
 800459c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	430a      	orrs	r2, r1
 80045a8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a78      	ldr	r2, [pc, #480]	; (8004790 <UART_SetConfig+0x258>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d120      	bne.n	80045f6 <UART_SetConfig+0xbe>
 80045b4:	4b77      	ldr	r3, [pc, #476]	; (8004794 <UART_SetConfig+0x25c>)
 80045b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b8:	f003 0303 	and.w	r3, r3, #3
 80045bc:	2b03      	cmp	r3, #3
 80045be:	d817      	bhi.n	80045f0 <UART_SetConfig+0xb8>
 80045c0:	a201      	add	r2, pc, #4	; (adr r2, 80045c8 <UART_SetConfig+0x90>)
 80045c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045c6:	bf00      	nop
 80045c8:	080045d9 	.word	0x080045d9
 80045cc:	080045e5 	.word	0x080045e5
 80045d0:	080045eb 	.word	0x080045eb
 80045d4:	080045df 	.word	0x080045df
 80045d8:	2300      	movs	r3, #0
 80045da:	77fb      	strb	r3, [r7, #31]
 80045dc:	e01d      	b.n	800461a <UART_SetConfig+0xe2>
 80045de:	2302      	movs	r3, #2
 80045e0:	77fb      	strb	r3, [r7, #31]
 80045e2:	e01a      	b.n	800461a <UART_SetConfig+0xe2>
 80045e4:	2304      	movs	r3, #4
 80045e6:	77fb      	strb	r3, [r7, #31]
 80045e8:	e017      	b.n	800461a <UART_SetConfig+0xe2>
 80045ea:	2308      	movs	r3, #8
 80045ec:	77fb      	strb	r3, [r7, #31]
 80045ee:	e014      	b.n	800461a <UART_SetConfig+0xe2>
 80045f0:	2310      	movs	r3, #16
 80045f2:	77fb      	strb	r3, [r7, #31]
 80045f4:	e011      	b.n	800461a <UART_SetConfig+0xe2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a67      	ldr	r2, [pc, #412]	; (8004798 <UART_SetConfig+0x260>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d102      	bne.n	8004606 <UART_SetConfig+0xce>
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e009      	b.n	800461a <UART_SetConfig+0xe2>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a64      	ldr	r2, [pc, #400]	; (800479c <UART_SetConfig+0x264>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d102      	bne.n	8004616 <UART_SetConfig+0xde>
 8004610:	2300      	movs	r3, #0
 8004612:	77fb      	strb	r3, [r7, #31]
 8004614:	e001      	b.n	800461a <UART_SetConfig+0xe2>
 8004616:	2310      	movs	r3, #16
 8004618:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004622:	d15b      	bne.n	80046dc <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 8004624:	7ffb      	ldrb	r3, [r7, #31]
 8004626:	2b08      	cmp	r3, #8
 8004628:	d827      	bhi.n	800467a <UART_SetConfig+0x142>
 800462a:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <UART_SetConfig+0xf8>)
 800462c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004630:	08004655 	.word	0x08004655
 8004634:	0800465d 	.word	0x0800465d
 8004638:	08004665 	.word	0x08004665
 800463c:	0800467b 	.word	0x0800467b
 8004640:	0800466b 	.word	0x0800466b
 8004644:	0800467b 	.word	0x0800467b
 8004648:	0800467b 	.word	0x0800467b
 800464c:	0800467b 	.word	0x0800467b
 8004650:	08004673 	.word	0x08004673
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004654:	f7fe fd1c 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004658:	61b8      	str	r0, [r7, #24]
        break;
 800465a:	e013      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800465c:	f7fe fd3a 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004660:	61b8      	str	r0, [r7, #24]
        break;
 8004662:	e00f      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004664:	4b4e      	ldr	r3, [pc, #312]	; (80047a0 <UART_SetConfig+0x268>)
 8004666:	61bb      	str	r3, [r7, #24]
        break;
 8004668:	e00c      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800466a:	f7fe fc9b 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 800466e:	61b8      	str	r0, [r7, #24]
        break;
 8004670:	e008      	b.n	8004684 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004672:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004676:	61bb      	str	r3, [r7, #24]
        break;
 8004678:	e004      	b.n	8004684 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 800467a:	2300      	movs	r3, #0
 800467c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	77bb      	strb	r3, [r7, #30]
        break;
 8004682:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004684:	69bb      	ldr	r3, [r7, #24]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d074      	beq.n	8004774 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	441a      	add	r2, r3
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	fbb2 f3f3 	udiv	r3, r2, r3
 800469e:	b29b      	uxth	r3, r3
 80046a0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	2b0f      	cmp	r3, #15
 80046a6:	d916      	bls.n	80046d6 <UART_SetConfig+0x19e>
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046ae:	d212      	bcs.n	80046d6 <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	b29b      	uxth	r3, r3
 80046b4:	f023 030f 	bic.w	r3, r3, #15
 80046b8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	085b      	lsrs	r3, r3, #1
 80046be:	b29b      	uxth	r3, r3
 80046c0:	f003 0307 	and.w	r3, r3, #7
 80046c4:	b29a      	uxth	r2, r3
 80046c6:	89fb      	ldrh	r3, [r7, #14]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	89fa      	ldrh	r2, [r7, #14]
 80046d2:	60da      	str	r2, [r3, #12]
 80046d4:	e04e      	b.n	8004774 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	77bb      	strb	r3, [r7, #30]
 80046da:	e04b      	b.n	8004774 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046dc:	7ffb      	ldrb	r3, [r7, #31]
 80046de:	2b08      	cmp	r3, #8
 80046e0:	d827      	bhi.n	8004732 <UART_SetConfig+0x1fa>
 80046e2:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <UART_SetConfig+0x1b0>)
 80046e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e8:	0800470d 	.word	0x0800470d
 80046ec:	08004715 	.word	0x08004715
 80046f0:	0800471d 	.word	0x0800471d
 80046f4:	08004733 	.word	0x08004733
 80046f8:	08004723 	.word	0x08004723
 80046fc:	08004733 	.word	0x08004733
 8004700:	08004733 	.word	0x08004733
 8004704:	08004733 	.word	0x08004733
 8004708:	0800472b 	.word	0x0800472b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800470c:	f7fe fcc0 	bl	8003090 <HAL_RCC_GetPCLK1Freq>
 8004710:	61b8      	str	r0, [r7, #24]
        break;
 8004712:	e013      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004714:	f7fe fcde 	bl	80030d4 <HAL_RCC_GetPCLK2Freq>
 8004718:	61b8      	str	r0, [r7, #24]
        break;
 800471a:	e00f      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800471c:	4b20      	ldr	r3, [pc, #128]	; (80047a0 <UART_SetConfig+0x268>)
 800471e:	61bb      	str	r3, [r7, #24]
        break;
 8004720:	e00c      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004722:	f7fe fc3f 	bl	8002fa4 <HAL_RCC_GetSysClockFreq>
 8004726:	61b8      	str	r0, [r7, #24]
        break;
 8004728:	e008      	b.n	800473c <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800472a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800472e:	61bb      	str	r3, [r7, #24]
        break;
 8004730:	e004      	b.n	800473c <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8004732:	2300      	movs	r3, #0
 8004734:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	77bb      	strb	r3, [r7, #30]
        break;
 800473a:	bf00      	nop
    }

    if (pclk != 0U)
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d018      	beq.n	8004774 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	085a      	lsrs	r2, r3, #1
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	441a      	add	r2, r3
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	fbb2 f3f3 	udiv	r3, r2, r3
 8004754:	b29b      	uxth	r3, r3
 8004756:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	d908      	bls.n	8004770 <UART_SetConfig+0x238>
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004764:	d204      	bcs.n	8004770 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	60da      	str	r2, [r3, #12]
 800476e:	e001      	b.n	8004774 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004780:	7fbb      	ldrb	r3, [r7, #30]
}
 8004782:	4618      	mov	r0, r3
 8004784:	3720      	adds	r7, #32
 8004786:	46bd      	mov	sp, r7
 8004788:	bd80      	pop	{r7, pc}
 800478a:	bf00      	nop
 800478c:	efff69f3 	.word	0xefff69f3
 8004790:	40013800 	.word	0x40013800
 8004794:	40021000 	.word	0x40021000
 8004798:	40004400 	.word	0x40004400
 800479c:	40004800 	.word	0x40004800
 80047a0:	007a1200 	.word	0x007a1200

080047a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00a      	beq.n	80047ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00a      	beq.n	80047f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f4:	f003 0304 	and.w	r3, r3, #4
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00a      	beq.n	8004812 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0308 	and.w	r3, r3, #8
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00a      	beq.n	8004834 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	430a      	orrs	r2, r1
 8004832:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	f003 0310 	and.w	r3, r3, #16
 800483c:	2b00      	cmp	r3, #0
 800483e:	d00a      	beq.n	8004856 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	430a      	orrs	r2, r1
 8004854:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	689b      	ldr	r3, [r3, #8]
 8004868:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	430a      	orrs	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004880:	2b00      	cmp	r3, #0
 8004882:	d01a      	beq.n	80048ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	430a      	orrs	r2, r1
 8004898:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800489e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048a2:	d10a      	bne.n	80048ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	685b      	ldr	r3, [r3, #4]
 80048aa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	430a      	orrs	r2, r1
 80048b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d00a      	beq.n	80048dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	430a      	orrs	r2, r1
 80048da:	605a      	str	r2, [r3, #4]
  }
}
 80048dc:	bf00      	nop
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af02      	add	r7, sp, #8
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048f8:	f7fc f95c 	bl	8000bb4 <HAL_GetTick>
 80048fc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0308 	and.w	r3, r3, #8
 8004908:	2b08      	cmp	r3, #8
 800490a:	d10e      	bne.n	800492a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800490c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2200      	movs	r2, #0
 8004916:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 f82d 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d001      	beq.n	800492a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004926:	2303      	movs	r3, #3
 8004928:	e023      	b.n	8004972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 0304 	and.w	r3, r3, #4
 8004934:	2b04      	cmp	r3, #4
 8004936:	d10e      	bne.n	8004956 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004938:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2200      	movs	r2, #0
 8004942:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004946:	6878      	ldr	r0, [r7, #4]
 8004948:	f000 f817 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e00d      	b.n	8004972 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2220      	movs	r2, #32
 800495a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2220      	movs	r2, #32
 8004960:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b09c      	sub	sp, #112	; 0x70
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	e0a5      	b.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	f000 80a1 	beq.w	8004ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fc f90d 	bl	8000bb4 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <UART_WaitOnFlagUntilTimeout+0x32>
 80049a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d13e      	bne.n	8004a2a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c0:	667b      	str	r3, [r7, #100]	; 0x64
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049cc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	663b      	str	r3, [r7, #96]	; 0x60
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	2220      	movs	r2, #32
 8004a1c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004a26:	2303      	movs	r3, #3
 8004a28:	e067      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d04f      	beq.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a42:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a46:	d147      	bne.n	8004ad8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a50:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a62:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	461a      	mov	r2, r3
 8004a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a70:	637b      	str	r3, [r7, #52]	; 0x34
 8004a72:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a74:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a76:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a78:	e841 2300 	strex	r3, r2, [r1]
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d1e6      	bne.n	8004a52 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	3308      	adds	r3, #8
 8004a8a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a8c:	697b      	ldr	r3, [r7, #20]
 8004a8e:	e853 3f00 	ldrex	r3, [r3]
 8004a92:	613b      	str	r3, [r7, #16]
   return(result);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f023 0301 	bic.w	r3, r3, #1
 8004a9a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa4:	623a      	str	r2, [r7, #32]
 8004aa6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aa8:	69f9      	ldr	r1, [r7, #28]
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	e841 2300 	strex	r3, r2, [r1]
 8004ab0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d1e5      	bne.n	8004a84 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2220      	movs	r2, #32
 8004ac2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e010      	b.n	8004afa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69da      	ldr	r2, [r3, #28]
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	4013      	ands	r3, r2
 8004ae2:	68ba      	ldr	r2, [r7, #8]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	bf0c      	ite	eq
 8004ae8:	2301      	moveq	r3, #1
 8004aea:	2300      	movne	r3, #0
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	461a      	mov	r2, r3
 8004af0:	79fb      	ldrb	r3, [r7, #7]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	f43f af4a 	beq.w	800498c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af8:	2300      	movs	r3, #0
}
 8004afa:	4618      	mov	r0, r3
 8004afc:	3770      	adds	r7, #112	; 0x70
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd80      	pop	{r7, pc}
	...

08004b04 <__libc_init_array>:
 8004b04:	b570      	push	{r4, r5, r6, lr}
 8004b06:	4d0d      	ldr	r5, [pc, #52]	; (8004b3c <__libc_init_array+0x38>)
 8004b08:	4c0d      	ldr	r4, [pc, #52]	; (8004b40 <__libc_init_array+0x3c>)
 8004b0a:	1b64      	subs	r4, r4, r5
 8004b0c:	10a4      	asrs	r4, r4, #2
 8004b0e:	2600      	movs	r6, #0
 8004b10:	42a6      	cmp	r6, r4
 8004b12:	d109      	bne.n	8004b28 <__libc_init_array+0x24>
 8004b14:	4d0b      	ldr	r5, [pc, #44]	; (8004b44 <__libc_init_array+0x40>)
 8004b16:	4c0c      	ldr	r4, [pc, #48]	; (8004b48 <__libc_init_array+0x44>)
 8004b18:	f000 f820 	bl	8004b5c <_init>
 8004b1c:	1b64      	subs	r4, r4, r5
 8004b1e:	10a4      	asrs	r4, r4, #2
 8004b20:	2600      	movs	r6, #0
 8004b22:	42a6      	cmp	r6, r4
 8004b24:	d105      	bne.n	8004b32 <__libc_init_array+0x2e>
 8004b26:	bd70      	pop	{r4, r5, r6, pc}
 8004b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b2c:	4798      	blx	r3
 8004b2e:	3601      	adds	r6, #1
 8004b30:	e7ee      	b.n	8004b10 <__libc_init_array+0xc>
 8004b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b36:	4798      	blx	r3
 8004b38:	3601      	adds	r6, #1
 8004b3a:	e7f2      	b.n	8004b22 <__libc_init_array+0x1e>
 8004b3c:	08004bac 	.word	0x08004bac
 8004b40:	08004bac 	.word	0x08004bac
 8004b44:	08004bac 	.word	0x08004bac
 8004b48:	08004bb0 	.word	0x08004bb0

08004b4c <memset>:
 8004b4c:	4402      	add	r2, r0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d100      	bne.n	8004b56 <memset+0xa>
 8004b54:	4770      	bx	lr
 8004b56:	f803 1b01 	strb.w	r1, [r3], #1
 8004b5a:	e7f9      	b.n	8004b50 <memset+0x4>

08004b5c <_init>:
 8004b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b5e:	bf00      	nop
 8004b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b62:	bc08      	pop	{r3}
 8004b64:	469e      	mov	lr, r3
 8004b66:	4770      	bx	lr

08004b68 <_fini>:
 8004b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6a:	bf00      	nop
 8004b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6e:	bc08      	pop	{r3}
 8004b70:	469e      	mov	lr, r3
 8004b72:	4770      	bx	lr
