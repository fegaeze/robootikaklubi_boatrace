
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007004  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000440  0800718c  0800718c  0001718c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075cc  080075cc  000200ec  2**0
                  CONTENTS
  4 .ARM          00000000  080075cc  080075cc  000200ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075cc  080075cc  000200ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075cc  080075cc  000175cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075d0  080075d0  000175d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ec  20000000  080075d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200ec  2**0
                  CONTENTS
 10 .bss          00000198  200000ec  200000ec  000200ec  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000284  20000284  000200ec  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fd6a  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cda  00000000  00000000  0002fe86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d98  00000000  00000000  00031b60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000cf0  00000000  00000000  000328f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bcc8  00000000  00000000  000335e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010ab1  00000000  00000000  0004f2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ab58a  00000000  00000000  0005fd61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010b2eb  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003ee8  00000000  00000000  0010b33c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000ec 	.word	0x200000ec
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007174 	.word	0x08007174

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000f0 	.word	0x200000f0
 80001c4:	08007174 	.word	0x08007174

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2iz>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d215      	bcs.n	800099a <__aeabi_d2iz+0x36>
 800096e:	d511      	bpl.n	8000994 <__aeabi_d2iz+0x30>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d912      	bls.n	80009a0 <__aeabi_d2iz+0x3c>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800098a:	fa23 f002 	lsr.w	r0, r3, r2
 800098e:	bf18      	it	ne
 8000990:	4240      	negne	r0, r0
 8000992:	4770      	bx	lr
 8000994:	f04f 0000 	mov.w	r0, #0
 8000998:	4770      	bx	lr
 800099a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800099e:	d105      	bne.n	80009ac <__aeabi_d2iz+0x48>
 80009a0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	bf08      	it	eq
 80009a6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop

080009b4 <__aeabi_d2f>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009bc:	bf24      	itt	cs
 80009be:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009c2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009c6:	d90d      	bls.n	80009e4 <__aeabi_d2f+0x30>
 80009c8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009cc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80009d0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80009d4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80009d8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80009dc:	bf08      	it	eq
 80009de:	f020 0001 	biceq.w	r0, r0, #1
 80009e2:	4770      	bx	lr
 80009e4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009e8:	d121      	bne.n	8000a2e <__aeabi_d2f+0x7a>
 80009ea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ee:	bfbc      	itt	lt
 80009f0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009f4:	4770      	bxlt	lr
 80009f6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009fe:	f1c2 0218 	rsb	r2, r2, #24
 8000a02:	f1c2 0c20 	rsb	ip, r2, #32
 8000a06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a0e:	bf18      	it	ne
 8000a10:	f040 0001 	orrne.w	r0, r0, #1
 8000a14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a20:	ea40 000c 	orr.w	r0, r0, ip
 8000a24:	fa23 f302 	lsr.w	r3, r3, r2
 8000a28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a2c:	e7cc      	b.n	80009c8 <__aeabi_d2f+0x14>
 8000a2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a32:	d107      	bne.n	8000a44 <__aeabi_d2f+0x90>
 8000a34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a38:	bf1e      	ittt	ne
 8000a3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a42:	4770      	bxne	lr
 8000a44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <togglePowerBtn>:
/* USER CODE BEGIN 0 */

/*
 * READ POWER BUTTON STATE
 */
int togglePowerBtn(int powerBtnState) {
 8000a54:	b480      	push	{r7}
 8000a56:	b083      	sub	sp, #12
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	6078      	str	r0, [r7, #4]
	//  int readButtonNow = ; // read button, if pressed 1, if not 0
	if (powerBtnState) { // if button was pressed
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d027      	beq.n	8000ab2 <togglePowerBtn+0x5e>
		block = 0;
 8000a62:	4b19      	ldr	r3, [pc, #100]	; (8000ac8 <togglePowerBtn+0x74>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
		if (!byteStream && buttonState) { // if byte stream is 0 (which means, that since last toggle some time has passed) AND button has a state of 1
 8000a68:	4b18      	ldr	r3, [pc, #96]	; (8000acc <togglePowerBtn+0x78>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d10c      	bne.n	8000a8a <togglePowerBtn+0x36>
 8000a70:	4b17      	ldr	r3, [pc, #92]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d008      	beq.n	8000a8a <togglePowerBtn+0x36>
		  byteStream = 1; // make now byte stream to output 1
 8000a78:	4b14      	ldr	r3, [pc, #80]	; (8000acc <togglePowerBtn+0x78>)
 8000a7a:	2201      	movs	r2, #1
 8000a7c:	601a      	str	r2, [r3, #0]
		  buttonState = 0; // change button's state
 8000a7e:	4b14      	ldr	r3, [pc, #80]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	e018      	b.n	8000abc <togglePowerBtn+0x68>
		} else if (!byteStream && !buttonState) { // --||-- and button's state is 0
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <togglePowerBtn+0x78>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d10c      	bne.n	8000aac <togglePowerBtn+0x58>
 8000a92:	4b0f      	ldr	r3, [pc, #60]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d108      	bne.n	8000aac <togglePowerBtn+0x58>
		  byteStream = 1; // --||--
 8000a9a:	4b0c      	ldr	r3, [pc, #48]	; (8000acc <togglePowerBtn+0x78>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
		  buttonState = 1; // change button's state
 8000aa0:	4b0b      	ldr	r3, [pc, #44]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	601a      	str	r2, [r3, #0]
		  return buttonState;
 8000aa6:	4b0a      	ldr	r3, [pc, #40]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	e007      	b.n	8000abc <togglePowerBtn+0x68>
		} else { // if byte stream is 1, then just return button's state you currently have
		  return buttonState;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	e004      	b.n	8000abc <togglePowerBtn+0x68>
		}
	} else { // if button is not pressed, make byte stream as 0 and return current button's state
		byteStream = 0;
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <togglePowerBtn+0x78>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
		return buttonState;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <togglePowerBtn+0x7c>)
 8000aba:	681b      	ldr	r3, [r3, #0]
	}
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	20000274 	.word	0x20000274
 8000acc:	20000278 	.word	0x20000278
 8000ad0:	2000027c 	.word	0x2000027c

08000ad4 <setInitialState>:
 * Turn servo motor to center
 * Delay for 5 seconds
 * Set speed to highest settings
 */
void setInitialState(uint8_t powerBtnState)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	4603      	mov	r3, r0
 8000adc:	71fb      	strb	r3, [r7, #7]
	if (togglePowerBtn(powerBtnState) == 1) {
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ffb7 	bl	8000a54 <togglePowerBtn>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b01      	cmp	r3, #1
 8000aea:	d10b      	bne.n	8000b04 <setInitialState+0x30>
	  __HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, 1500);
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <setInitialState+0x38>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000af4:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(5000);
 8000af6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000afa:	f000 ff4d 	bl	8001998 <HAL_Delay>
	  setMotorSpeed(255);
 8000afe:	20ff      	movs	r0, #255	; 0xff
 8000b00:	f000 f806 	bl	8000b10 <setMotorSpeed>
	}
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	200001a4 	.word	0x200001a4

08000b10 <setMotorSpeed>:
/*
 * Set Motor Speed:
 * motor_speed => 0 -> 255
 */
void setMotorSpeed(uint8_t motor_speed)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	71fb      	strb	r3, [r7, #7]
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, motor_speed); // RIGHT_DM_PHASE
 8000b1a:	4b07      	ldr	r3, [pc, #28]	; (8000b38 <setMotorSpeed+0x28>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	79fa      	ldrb	r2, [r7, #7]
 8000b20:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, motor_speed); // LEFT_DM_PHASE
 8000b22:	4b05      	ldr	r3, [pc, #20]	; (8000b38 <setMotorSpeed+0x28>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	79fa      	ldrb	r2, [r7, #7]
 8000b28:	639a      	str	r2, [r3, #56]	; 0x38
}
 8000b2a:	bf00      	nop
 8000b2c:	370c      	adds	r7, #12
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	20000158 	.word	0x20000158

08000b3c <ADC_Read>:
 * Read IR sensor value:
 * Update ADC channel config
 * Start, convert and read sensor value
 */
uint16_t ADC_Read(ADC_HandleTypeDef* hadc, uint8_t channel)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b088      	sub	sp, #32
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
 8000b44:	460b      	mov	r3, r1
 8000b46:	70fb      	strb	r3, [r7, #3]
  ADC_ChannelConfTypeDef sConfig;

  sConfig.Channel = channel;
 8000b48:	78fb      	ldrb	r3, [r7, #3]
 8000b4a:	60bb      	str	r3, [r7, #8]
  sConfig.Rank = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000b50:	2300      	movs	r3, #0
 8000b52:	613b      	str	r3, [r7, #16]

  HAL_ADC_ConfigChannel(hadc, &sConfig);
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	4619      	mov	r1, r3
 8000b5a:	6878      	ldr	r0, [r7, #4]
 8000b5c:	f001 fa64 	bl	8002028 <HAL_ADC_ConfigChannel>

  HAL_ADC_Start(hadc);
 8000b60:	6878      	ldr	r0, [r7, #4]
 8000b62:	f001 f8cf 	bl	8001d04 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(hadc, 10);
 8000b66:	210a      	movs	r1, #10
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f001 f981 	bl	8001e70 <HAL_ADC_PollForConversion>

  return HAL_ADC_GetValue(hadc);
 8000b6e:	6878      	ldr	r0, [r7, #4]
 8000b70:	f001 fa4c 	bl	800200c <HAL_ADC_GetValue>
 8000b74:	4603      	mov	r3, r0
 8000b76:	b29b      	uxth	r3, r3
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3720      	adds	r7, #32
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <moveForward>:
/*
 * Move Forward:
 * xPhase => 0
 */
void moveForward()
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(RIGHT_DM_PHASE_GPIO_Port, RIGHT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b8e:	f002 f90b 	bl	8002da8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LEFT_DM_PHASE_GPIO_Port, LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f002 f904 	bl	8002da8 <HAL_GPIO_WritePin>
}
 8000ba0:	bf00      	nop
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	0000      	movs	r0, r0
	...

08000ba8 <calcServoRotation>:
 * and 2500 is 90 degrees
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 */
int calcServoRotation(float turningAngle) {
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	ed87 0a01 	vstr	s0, [r7, #4]
	return 500 + round(11.11 * (turningAngle + 90));
 8000bb2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000bb6:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000c10 <calcServoRotation+0x68>
 8000bba:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000bbe:	ee17 0a90 	vmov	r0, s15
 8000bc2:	f7ff fc65 	bl	8000490 <__aeabi_f2d>
 8000bc6:	a310      	add	r3, pc, #64	; (adr r3, 8000c08 <calcServoRotation+0x60>)
 8000bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bcc:	f7ff fcb8 	bl	8000540 <__aeabi_dmul>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	ec43 2b17 	vmov	d7, r2, r3
 8000bd8:	eeb0 0a47 	vmov.f32	s0, s14
 8000bdc:	eef0 0a67 	vmov.f32	s1, s15
 8000be0:	f005 f896 	bl	8005d10 <round>
 8000be4:	ec51 0b10 	vmov	r0, r1, d0
 8000be8:	f04f 0200 	mov.w	r2, #0
 8000bec:	4b09      	ldr	r3, [pc, #36]	; (8000c14 <calcServoRotation+0x6c>)
 8000bee:	f7ff faf1 	bl	80001d4 <__adddf3>
 8000bf2:	4602      	mov	r2, r0
 8000bf4:	460b      	mov	r3, r1
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f7ff feb3 	bl	8000964 <__aeabi_d2iz>
 8000bfe:	4603      	mov	r3, r0
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	eb851eb8 	.word	0xeb851eb8
 8000c0c:	40263851 	.word	0x40263851
 8000c10:	42b40000 	.word	0x42b40000
 8000c14:	407f4000 	.word	0x407f4000

08000c18 <calcMotorSpeed>:
 * the range 0 -> 255 where 0 is 21 and 255 is 363
 *
 * Formular:
 * https://stackoverflow.com/questions/5731863/mapping-a-numeric-range-onto-another
 */
float calcMotorSpeed(float directionAmount) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	ed87 0a01 	vstr	s0, [r7, #4]
	return round(0.745614 * (directionAmount - 21));
 8000c22:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c26:	eeb3 7a05 	vmov.f32	s14, #53	; 0x41a80000  21.0
 8000c2a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000c2e:	ee17 0a90 	vmov	r0, s15
 8000c32:	f7ff fc2d 	bl	8000490 <__aeabi_f2d>
 8000c36:	a30e      	add	r3, pc, #56	; (adr r3, 8000c70 <calcMotorSpeed+0x58>)
 8000c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c3c:	f7ff fc80 	bl	8000540 <__aeabi_dmul>
 8000c40:	4602      	mov	r2, r0
 8000c42:	460b      	mov	r3, r1
 8000c44:	ec43 2b17 	vmov	d7, r2, r3
 8000c48:	eeb0 0a47 	vmov.f32	s0, s14
 8000c4c:	eef0 0a67 	vmov.f32	s1, s15
 8000c50:	f005 f85e 	bl	8005d10 <round>
 8000c54:	ec53 2b10 	vmov	r2, r3, d0
 8000c58:	4610      	mov	r0, r2
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	f7ff feaa 	bl	80009b4 <__aeabi_d2f>
 8000c60:	4603      	mov	r3, r0
 8000c62:	ee07 3a90 	vmov	s15, r3
}
 8000c66:	eeb0 0a67 	vmov.f32	s0, s15
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	e42e1262 	.word	0xe42e1262
 8000c74:	3fe7dc11 	.word	0x3fe7dc11

08000c78 <getDistance>:
 * Map ADC values to distance (in cm) based on predetermined measurements.
 *
 * https://www.hackster.io/tothmiki91/infrared-radar-with-sharp-distance-sensor-91554a
 */
float getDistance(float adcVal)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b087      	sub	sp, #28
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	ed87 0a01 	vstr	s0, [r7, #4]
  float distance = DISTANCE_MAX;
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <getDistance+0xcc>)
 8000c84:	617b      	str	r3, [r7, #20]

  // Linear interpolation from measured ADC value and MAP.
  for (int i = 1; i < (sizeof(distAdcMap)/sizeof(S_DIST_ADC_MAP)); i++)
 8000c86:	2301      	movs	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]
 8000c8a:	e04e      	b.n	8000d2a <getDistance+0xb2>
  {
    if (adcVal > distAdcMap[i].adcVal)
 8000c8c:	4a2e      	ldr	r2, [pc, #184]	; (8000d48 <getDistance+0xd0>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	00db      	lsls	r3, r3, #3
 8000c92:	4413      	add	r3, r2
 8000c94:	3304      	adds	r3, #4
 8000c96:	edd3 7a00 	vldr	s15, [r3]
 8000c9a:	ed97 7a01 	vldr	s14, [r7, #4]
 8000c9e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000ca2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca6:	dd3d      	ble.n	8000d24 <getDistance+0xac>
    {
      float factor = (adcVal - distAdcMap[i].adcVal)/(distAdcMap[i-1].adcVal - distAdcMap[i].adcVal);
 8000ca8:	4a27      	ldr	r2, [pc, #156]	; (8000d48 <getDistance+0xd0>)
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	00db      	lsls	r3, r3, #3
 8000cae:	4413      	add	r3, r2
 8000cb0:	3304      	adds	r3, #4
 8000cb2:	edd3 7a00 	vldr	s15, [r3]
 8000cb6:	ed97 7a01 	vldr	s14, [r7, #4]
 8000cba:	ee77 6a67 	vsub.f32	s13, s14, s15
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	3b01      	subs	r3, #1
 8000cc2:	4a21      	ldr	r2, [pc, #132]	; (8000d48 <getDistance+0xd0>)
 8000cc4:	00db      	lsls	r3, r3, #3
 8000cc6:	4413      	add	r3, r2
 8000cc8:	3304      	adds	r3, #4
 8000cca:	ed93 7a00 	vldr	s14, [r3]
 8000cce:	4a1e      	ldr	r2, [pc, #120]	; (8000d48 <getDistance+0xd0>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4413      	add	r3, r2
 8000cd6:	3304      	adds	r3, #4
 8000cd8:	edd3 7a00 	vldr	s15, [r3]
 8000cdc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000ce0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000ce4:	edc7 7a03 	vstr	s15, [r7, #12]
      distance = factor * (distAdcMap[i-1].distance - distAdcMap[i].distance) + distAdcMap[i].distance;
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	4a16      	ldr	r2, [pc, #88]	; (8000d48 <getDistance+0xd0>)
 8000cee:	00db      	lsls	r3, r3, #3
 8000cf0:	4413      	add	r3, r2
 8000cf2:	ed93 7a00 	vldr	s14, [r3]
 8000cf6:	4a14      	ldr	r2, [pc, #80]	; (8000d48 <getDistance+0xd0>)
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	00db      	lsls	r3, r3, #3
 8000cfc:	4413      	add	r3, r2
 8000cfe:	edd3 7a00 	vldr	s15, [r3]
 8000d02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000d06:	edd7 7a03 	vldr	s15, [r7, #12]
 8000d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000d0e:	4a0e      	ldr	r2, [pc, #56]	; (8000d48 <getDistance+0xd0>)
 8000d10:	693b      	ldr	r3, [r7, #16]
 8000d12:	00db      	lsls	r3, r3, #3
 8000d14:	4413      	add	r3, r2
 8000d16:	edd3 7a00 	vldr	s15, [r3]
 8000d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d1e:	edc7 7a05 	vstr	s15, [r7, #20]
      break;
 8000d22:	e005      	b.n	8000d30 <getDistance+0xb8>
  for (int i = 1; i < (sizeof(distAdcMap)/sizeof(S_DIST_ADC_MAP)); i++)
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	3301      	adds	r3, #1
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	2b0e      	cmp	r3, #14
 8000d2e:	d9ad      	bls.n	8000c8c <getDistance+0x14>
    }
  }

  return distance;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	ee07 3a90 	vmov	s15, r3
}
 8000d36:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3a:	371c      	adds	r7, #28
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	43160000 	.word	0x43160000
 8000d48:	20000004 	.word	0x20000004
 8000d4c:	00000000 	.word	0x00000000

08000d50 <calcBestPath>:
/*
 * Calculate best path:
 * Boat should always move in the direction with the best possible space
 */
void calcBestPath(uint16_t ir_left, uint16_t ir_center, uint16_t ir_right, float* turningAngle, float* directionAmount)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	ed2d 8b02 	vpush	{d8}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	607b      	str	r3, [r7, #4]
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	81fb      	strh	r3, [r7, #14]
 8000d60:	460b      	mov	r3, r1
 8000d62:	81bb      	strh	r3, [r7, #12]
 8000d64:	4613      	mov	r3, r2
 8000d66:	817b      	strh	r3, [r7, #10]
	float vv_left, vh_left;
	float vv_right, vh_right;
	float net_vertical, net_horizontal;

    // Resolve left sensor readings to vertical and horizontal plane
	vv_left = sinf(sensor_angle * (M_PI / 180.0)) * ir_left;
 8000d68:	4b6d      	ldr	r3, [pc, #436]	; (8000f20 <calcBestPath+0x1d0>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fb8f 	bl	8000490 <__aeabi_f2d>
 8000d72:	a369      	add	r3, pc, #420	; (adr r3, 8000f18 <calcBestPath+0x1c8>)
 8000d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d78:	f7ff fbe2 	bl	8000540 <__aeabi_dmul>
 8000d7c:	4602      	mov	r2, r0
 8000d7e:	460b      	mov	r3, r1
 8000d80:	4610      	mov	r0, r2
 8000d82:	4619      	mov	r1, r3
 8000d84:	f7ff fe16 	bl	80009b4 <__aeabi_d2f>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	ee00 3a10 	vmov	s0, r3
 8000d8e:	f005 f925 	bl	8005fdc <sinf>
 8000d92:	eeb0 7a40 	vmov.f32	s14, s0
 8000d96:	89fb      	ldrh	r3, [r7, #14]
 8000d98:	ee07 3a90 	vmov	s15, r3
 8000d9c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	vh_left = cosf(sensor_angle * (M_PI / 180.0)) * ir_left;
 8000da8:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <calcBestPath+0x1d0>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff fb6f 	bl	8000490 <__aeabi_f2d>
 8000db2:	a359      	add	r3, pc, #356	; (adr r3, 8000f18 <calcBestPath+0x1c8>)
 8000db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db8:	f7ff fbc2 	bl	8000540 <__aeabi_dmul>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	460b      	mov	r3, r1
 8000dc0:	4610      	mov	r0, r2
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	f7ff fdf6 	bl	80009b4 <__aeabi_d2f>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	ee00 3a10 	vmov	s0, r3
 8000dce:	f005 f8b9 	bl	8005f44 <cosf>
 8000dd2:	eeb0 7a40 	vmov.f32	s14, s0
 8000dd6:	89fb      	ldrh	r3, [r7, #14]
 8000dd8:	ee07 3a90 	vmov	s15, r3
 8000ddc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000de0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000de4:	edc7 7a08 	vstr	s15, [r7, #32]

	// Resolve right sensor readings to vertical and horizontal plane
	vv_right = sinf(sensor_angle * (M_PI / 180.0)) * ir_right;
 8000de8:	4b4d      	ldr	r3, [pc, #308]	; (8000f20 <calcBestPath+0x1d0>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff fb4f 	bl	8000490 <__aeabi_f2d>
 8000df2:	a349      	add	r3, pc, #292	; (adr r3, 8000f18 <calcBestPath+0x1c8>)
 8000df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df8:	f7ff fba2 	bl	8000540 <__aeabi_dmul>
 8000dfc:	4602      	mov	r2, r0
 8000dfe:	460b      	mov	r3, r1
 8000e00:	4610      	mov	r0, r2
 8000e02:	4619      	mov	r1, r3
 8000e04:	f7ff fdd6 	bl	80009b4 <__aeabi_d2f>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	ee00 3a10 	vmov	s0, r3
 8000e0e:	f005 f8e5 	bl	8005fdc <sinf>
 8000e12:	eeb0 7a40 	vmov.f32	s14, s0
 8000e16:	897b      	ldrh	r3, [r7, #10]
 8000e18:	ee07 3a90 	vmov	s15, r3
 8000e1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e24:	edc7 7a07 	vstr	s15, [r7, #28]
	vh_right = cosf(sensor_angle * (M_PI / 180.0)) * ir_right;
 8000e28:	4b3d      	ldr	r3, [pc, #244]	; (8000f20 <calcBestPath+0x1d0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff fb2f 	bl	8000490 <__aeabi_f2d>
 8000e32:	a339      	add	r3, pc, #228	; (adr r3, 8000f18 <calcBestPath+0x1c8>)
 8000e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e38:	f7ff fb82 	bl	8000540 <__aeabi_dmul>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	460b      	mov	r3, r1
 8000e40:	4610      	mov	r0, r2
 8000e42:	4619      	mov	r1, r3
 8000e44:	f7ff fdb6 	bl	80009b4 <__aeabi_d2f>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	ee00 3a10 	vmov	s0, r3
 8000e4e:	f005 f879 	bl	8005f44 <cosf>
 8000e52:	eeb0 7a40 	vmov.f32	s14, s0
 8000e56:	897b      	ldrh	r3, [r7, #10]
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e64:	edc7 7a06 	vstr	s15, [r7, #24]

	// Calculate sum of all three vectors
	net_vertical = vv_left + ir_center + vv_right;
 8000e68:	89bb      	ldrh	r3, [r7, #12]
 8000e6a:	ee07 3a90 	vmov	s15, r3
 8000e6e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e72:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e7a:	ed97 7a07 	vldr	s14, [r7, #28]
 8000e7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e82:	edc7 7a05 	vstr	s15, [r7, #20]
	net_horizontal = -(vh_left) + vh_right;
 8000e86:	ed97 7a06 	vldr	s14, [r7, #24]
 8000e8a:	edd7 7a08 	vldr	s15, [r7, #32]
 8000e8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e92:	edc7 7a04 	vstr	s15, [r7, #16]

	// Calculate angle servo motor should turn as well as approximate value for free space.
	// Free space amount will be used to control speed.
	*turningAngle = atanf(net_horizontal / net_vertical) / (M_PI / 180.0);
 8000e96:	ed97 7a04 	vldr	s14, [r7, #16]
 8000e9a:	edd7 7a05 	vldr	s15, [r7, #20]
 8000e9e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000ea2:	eeb0 0a66 	vmov.f32	s0, s13
 8000ea6:	f004 ff79 	bl	8005d9c <atanf>
 8000eaa:	ee10 3a10 	vmov	r3, s0
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff faee 	bl	8000490 <__aeabi_f2d>
 8000eb4:	a318      	add	r3, pc, #96	; (adr r3, 8000f18 <calcBestPath+0x1c8>)
 8000eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000eba:	f7ff fc6b 	bl	8000794 <__aeabi_ddiv>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fd75 	bl	80009b4 <__aeabi_d2f>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	601a      	str	r2, [r3, #0]
	*directionAmount = sqrtf(powf(net_horizontal, 2) + powf(net_vertical, 2));
 8000ed0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ed4:	ed97 0a04 	vldr	s0, [r7, #16]
 8000ed8:	f005 f8c6 	bl	8006068 <powf>
 8000edc:	eeb0 8a40 	vmov.f32	s16, s0
 8000ee0:	eef0 0a00 	vmov.f32	s1, #0	; 0x40000000  2.0
 8000ee4:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ee8:	f005 f8be 	bl	8006068 <powf>
 8000eec:	eef0 7a40 	vmov.f32	s15, s0
 8000ef0:	ee78 7a27 	vadd.f32	s15, s16, s15
 8000ef4:	eeb0 0a67 	vmov.f32	s0, s15
 8000ef8:	f005 f90e 	bl	8006118 <sqrtf>
 8000efc:	eef0 7a40 	vmov.f32	s15, s0
 8000f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000f02:	edc3 7a00 	vstr	s15, [r3]
}
 8000f06:	bf00      	nop
 8000f08:	3728      	adds	r7, #40	; 0x28
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	ecbd 8b02 	vpop	{d8}
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	f3af 8000 	nop.w
 8000f18:	a2529d39 	.word	0xa2529d39
 8000f1c:	3f91df46 	.word	0x3f91df46
 8000f20:	20000000 	.word	0x20000000

08000f24 <setMotionSettings>:
/*
 * Set Motion Settings:
 * Based on path calculation, configure servo and speed PWM
 */
void setMotionSettings(float turningAngle, float directionAmount)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f2e:	edc7 0a02 	vstr	s1, [r7, #8]
	float speed = calcMotorSpeed(directionAmount);
 8000f32:	ed97 0a02 	vldr	s0, [r7, #8]
 8000f36:	f7ff fe6f 	bl	8000c18 <calcMotorSpeed>
 8000f3a:	ed87 0a05 	vstr	s0, [r7, #20]
	uint16_t rotation = calcServoRotation(turningAngle);
 8000f3e:	ed97 0a03 	vldr	s0, [r7, #12]
 8000f42:	f7ff fe31 	bl	8000ba8 <calcServoRotation>
 8000f46:	4603      	mov	r3, r0
 8000f48:	827b      	strh	r3, [r7, #18]

	__HAL_TIM_SET_COMPARE(&htim17, TIM_CHANNEL_1, rotation);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <setMotionSettings+0x4c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	8a7a      	ldrh	r2, [r7, #18]
 8000f50:	635a      	str	r2, [r3, #52]	; 0x34
	setMotorSpeed(speed);
 8000f52:	edd7 7a05 	vldr	s15, [r7, #20]
 8000f56:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f5a:	edc7 7a01 	vstr	s15, [r7, #4]
 8000f5e:	793b      	ldrb	r3, [r7, #4]
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	4618      	mov	r0, r3
 8000f64:	f7ff fdd4 	bl	8000b10 <setMotorSpeed>
}
 8000f68:	bf00      	nop
 8000f6a:	3718      	adds	r7, #24
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200001a4 	.word	0x200001a4

08000f74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f74:	b590      	push	{r4, r7, lr}
 8000f76:	b087      	sub	sp, #28
 8000f78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f7a:	f000 fca7 	bl	80018cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f7e:	f000 f88f 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f82:	f000 fab3 	bl	80014ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f86:	f000 fa81 	bl	800148c <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000f8a:	f000 f94d 	bl	8001228 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000f8e:	f000 f8db 	bl	8001148 <MX_ADC1_Init>
  MX_TIM17_Init();
 8000f92:	f000 fa01 	bl	8001398 <MX_TIM17_Init>

  uint8_t powerBtnState;
  uint16_t ir_left, ir_center, ir_right;
  float turningAngle, directionAmount;

  HAL_TIM_Base_Start(&htim1);
 8000f96:	483f      	ldr	r0, [pc, #252]	; (8001094 <main+0x120>)
 8000f98:	f003 fb10 	bl	80045bc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim17);
 8000f9c:	483e      	ldr	r0, [pc, #248]	; (8001098 <main+0x124>)
 8000f9e:	f003 fb0d 	bl	80045bc <HAL_TIM_Base_Start>

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000fa2:	2100      	movs	r1, #0
 8000fa4:	483b      	ldr	r0, [pc, #236]	; (8001094 <main+0x120>)
 8000fa6:	f003 fbbf 	bl	8004728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000faa:	2104      	movs	r1, #4
 8000fac:	4839      	ldr	r0, [pc, #228]	; (8001094 <main+0x120>)
 8000fae:	f003 fbbb 	bl	8004728 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4838      	ldr	r0, [pc, #224]	; (8001098 <main+0x124>)
 8000fb6:	f003 fbb7 	bl	8004728 <HAL_TIM_PWM_Start>

  powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8000fba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fc2:	f001 fed9 	bl	8002d78 <HAL_GPIO_ReadPin>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	73fb      	strb	r3, [r7, #15]
  setInitialState(powerBtnState);
 8000fca:	7bfb      	ldrb	r3, [r7, #15]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fd81 	bl	8000ad4 <setInitialState>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8000fd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fda:	f001 fecd 	bl	8002d78 <HAL_GPIO_ReadPin>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	73fb      	strb	r3, [r7, #15]

		if (togglePowerBtn(powerBtnState) == 1) {
 8000fe2:	7bfb      	ldrb	r3, [r7, #15]
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f7ff fd35 	bl	8000a54 <togglePowerBtn>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b01      	cmp	r3, #1
 8000fee:	d1f0      	bne.n	8000fd2 <main+0x5e>
			ir_left = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_1));
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	482a      	ldr	r0, [pc, #168]	; (800109c <main+0x128>)
 8000ff4:	f7ff fda2 	bl	8000b3c <ADC_Read>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	ee07 3a90 	vmov	s15, r3
 8000ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001002:	eeb0 0a67 	vmov.f32	s0, s15
 8001006:	f7ff fe37 	bl	8000c78 <getDistance>
 800100a:	eef0 7a40 	vmov.f32	s15, s0
 800100e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001012:	ee17 3a90 	vmov	r3, s15
 8001016:	81bb      	strh	r3, [r7, #12]
			ir_center = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_2));
 8001018:	2102      	movs	r1, #2
 800101a:	4820      	ldr	r0, [pc, #128]	; (800109c <main+0x128>)
 800101c:	f7ff fd8e 	bl	8000b3c <ADC_Read>
 8001020:	4603      	mov	r3, r0
 8001022:	ee07 3a90 	vmov	s15, r3
 8001026:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800102a:	eeb0 0a67 	vmov.f32	s0, s15
 800102e:	f7ff fe23 	bl	8000c78 <getDistance>
 8001032:	eef0 7a40 	vmov.f32	s15, s0
 8001036:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800103a:	ee17 3a90 	vmov	r3, s15
 800103e:	817b      	strh	r3, [r7, #10]
			ir_right = getDistance(ADC_Read(&hadc1, ADC_CHANNEL_4));
 8001040:	2104      	movs	r1, #4
 8001042:	4816      	ldr	r0, [pc, #88]	; (800109c <main+0x128>)
 8001044:	f7ff fd7a 	bl	8000b3c <ADC_Read>
 8001048:	4603      	mov	r3, r0
 800104a:	ee07 3a90 	vmov	s15, r3
 800104e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001052:	eeb0 0a67 	vmov.f32	s0, s15
 8001056:	f7ff fe0f 	bl	8000c78 <getDistance>
 800105a:	eef0 7a40 	vmov.f32	s15, s0
 800105e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001062:	ee17 3a90 	vmov	r3, s15
 8001066:	813b      	strh	r3, [r7, #8]

			calcBestPath(ir_left, ir_center, ir_right, &turningAngle, &directionAmount);
 8001068:	1d3c      	adds	r4, r7, #4
 800106a:	893a      	ldrh	r2, [r7, #8]
 800106c:	8979      	ldrh	r1, [r7, #10]
 800106e:	89b8      	ldrh	r0, [r7, #12]
 8001070:	463b      	mov	r3, r7
 8001072:	9300      	str	r3, [sp, #0]
 8001074:	4623      	mov	r3, r4
 8001076:	f7ff fe6b 	bl	8000d50 <calcBestPath>
			setMotionSettings(turningAngle, directionAmount);
 800107a:	edd7 7a01 	vldr	s15, [r7, #4]
 800107e:	ed97 7a00 	vldr	s14, [r7]
 8001082:	eef0 0a47 	vmov.f32	s1, s14
 8001086:	eeb0 0a67 	vmov.f32	s0, s15
 800108a:	f7ff ff4b 	bl	8000f24 <setMotionSettings>

			moveForward();
 800108e:	f7ff fd77 	bl	8000b80 <moveForward>
		powerBtnState = HAL_GPIO_ReadPin(POWER_BTN_GPIO_Port, POWER_BTN_Pin);
 8001092:	e79e      	b.n	8000fd2 <main+0x5e>
 8001094:	20000158 	.word	0x20000158
 8001098:	200001a4 	.word	0x200001a4
 800109c:	20000108 	.word	0x20000108

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b096      	sub	sp, #88	; 0x58
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010aa:	2228      	movs	r2, #40	; 0x28
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f004 fe26 	bl	8005d00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 031c 	add.w	r3, r7, #28
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010c4:	1d3b      	adds	r3, r7, #4
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
 80010d0:	611a      	str	r2, [r3, #16]
 80010d2:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80010e0:	2300      	movs	r3, #0
 80010e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	4618      	mov	r0, r3
 80010ea:	f001 fe75 	bl	8002dd8 <HAL_RCC_OscConfig>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80010f4:	f000 fa48 	bl	8001588 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010f8:	230f      	movs	r3, #15
 80010fa:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80010fc:	2300      	movs	r3, #0
 80010fe:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001100:	2300      	movs	r3, #0
 8001102:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001108:	2300      	movs	r3, #0
 800110a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800110c:	f107 031c 	add.w	r3, r7, #28
 8001110:	2100      	movs	r1, #0
 8001112:	4618      	mov	r0, r3
 8001114:	f002 fe9e 	bl	8003e54 <HAL_RCC_ClockConfig>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <SystemClock_Config+0x82>
  {
    Error_Handler();
 800111e:	f000 fa33 	bl	8001588 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLK_HCLK;
 8001128:	2300      	movs	r3, #0
 800112a:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4618      	mov	r0, r3
 8001130:	f003 f8c6 	bl	80042c0 <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800113a:	f000 fa25 	bl	8001588 <Error_Handler>
  }
}
 800113e:	bf00      	nop
 8001140:	3758      	adds	r7, #88	; 0x58
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b08a      	sub	sp, #40	; 0x28
 800114c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800114e:	f107 031c 	add.w	r3, r7, #28
 8001152:	2200      	movs	r2, #0
 8001154:	601a      	str	r2, [r3, #0]
 8001156:	605a      	str	r2, [r3, #4]
 8001158:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800115a:	1d3b      	adds	r3, r7, #4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
 8001168:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800116a:	4b2e      	ldr	r3, [pc, #184]	; (8001224 <MX_ADC1_Init+0xdc>)
 800116c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001170:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <MX_ADC1_Init+0xdc>)
 8001174:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001178:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800117a:	4b2a      	ldr	r3, [pc, #168]	; (8001224 <MX_ADC1_Init+0xdc>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001180:	4b28      	ldr	r3, [pc, #160]	; (8001224 <MX_ADC1_Init+0xdc>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001186:	4b27      	ldr	r3, [pc, #156]	; (8001224 <MX_ADC1_Init+0xdc>)
 8001188:	2200      	movs	r2, #0
 800118a:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800118c:	4b25      	ldr	r3, [pc, #148]	; (8001224 <MX_ADC1_Init+0xdc>)
 800118e:	2200      	movs	r2, #0
 8001190:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001194:	4b23      	ldr	r3, [pc, #140]	; (8001224 <MX_ADC1_Init+0xdc>)
 8001196:	2200      	movs	r2, #0
 8001198:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800119a:	4b22      	ldr	r3, [pc, #136]	; (8001224 <MX_ADC1_Init+0xdc>)
 800119c:	2201      	movs	r2, #1
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011a0:	4b20      	ldr	r3, [pc, #128]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011a6:	4b1f      	ldr	r3, [pc, #124]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011a8:	2201      	movs	r2, #1
 80011aa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011b4:	4b1b      	ldr	r3, [pc, #108]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011b6:	2204      	movs	r2, #4
 80011b8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80011ba:	4b1a      	ldr	r3, [pc, #104]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80011c0:	4b18      	ldr	r3, [pc, #96]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011c6:	4817      	ldr	r0, [pc, #92]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011c8:	f000 fc0a 	bl	80019e0 <HAL_ADC_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011d2:	f000 f9d9 	bl	8001588 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80011da:	f107 031c 	add.w	r3, r7, #28
 80011de:	4619      	mov	r1, r3
 80011e0:	4810      	ldr	r0, [pc, #64]	; (8001224 <MX_ADC1_Init+0xdc>)
 80011e2:	f001 f9e1 	bl	80025a8 <HAL_ADCEx_MultiModeConfigChannel>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d001      	beq.n	80011f0 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 80011ec:	f000 f9cc 	bl	8001588 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80011f0:	2301      	movs	r3, #1
 80011f2:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80011f4:	2301      	movs	r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80011f8:	2300      	movs	r3, #0
 80011fa:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	4619      	mov	r1, r3
 800120c:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_ADC1_Init+0xdc>)
 800120e:	f000 ff0b 	bl	8002028 <HAL_ADC_ConfigChannel>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8001218:	f000 f9b6 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800121c:	bf00      	nop
 800121e:	3728      	adds	r7, #40	; 0x28
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	20000108 	.word	0x20000108

08001228 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b09a      	sub	sp, #104	; 0x68
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
 8001236:	605a      	str	r2, [r3, #4]
 8001238:	609a      	str	r2, [r3, #8]
 800123a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800123c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001248:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	222c      	movs	r2, #44	; 0x2c
 8001260:	2100      	movs	r1, #0
 8001262:	4618      	mov	r0, r3
 8001264:	f004 fd4c 	bl	8005d00 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <MX_TIM1_Init+0x168>)
 800126a:	4a4a      	ldr	r2, [pc, #296]	; (8001394 <MX_TIM1_Init+0x16c>)
 800126c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 625-1;
 800126e:	4b48      	ldr	r3, [pc, #288]	; (8001390 <MX_TIM1_Init+0x168>)
 8001270:	f44f 721c 	mov.w	r2, #624	; 0x270
 8001274:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001276:	4b46      	ldr	r3, [pc, #280]	; (8001390 <MX_TIM1_Init+0x168>)
 8001278:	2200      	movs	r2, #0
 800127a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 256-1;
 800127c:	4b44      	ldr	r3, [pc, #272]	; (8001390 <MX_TIM1_Init+0x168>)
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001282:	4b43      	ldr	r3, [pc, #268]	; (8001390 <MX_TIM1_Init+0x168>)
 8001284:	2200      	movs	r2, #0
 8001286:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001288:	4b41      	ldr	r3, [pc, #260]	; (8001390 <MX_TIM1_Init+0x168>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800128e:	4b40      	ldr	r3, [pc, #256]	; (8001390 <MX_TIM1_Init+0x168>)
 8001290:	2280      	movs	r2, #128	; 0x80
 8001292:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001294:	483e      	ldr	r0, [pc, #248]	; (8001390 <MX_TIM1_Init+0x168>)
 8001296:	f003 f939 	bl	800450c <HAL_TIM_Base_Init>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d001      	beq.n	80012a4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80012a0:	f000 f972 	bl	8001588 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012a8:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80012ae:	4619      	mov	r1, r3
 80012b0:	4837      	ldr	r0, [pc, #220]	; (8001390 <MX_TIM1_Init+0x168>)
 80012b2:	f003 fc39 	bl	8004b28 <HAL_TIM_ConfigClockSource>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80012bc:	f000 f964 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012c0:	4833      	ldr	r0, [pc, #204]	; (8001390 <MX_TIM1_Init+0x168>)
 80012c2:	f003 f9cf 	bl	8004664 <HAL_TIM_PWM_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80012cc:	f000 f95c 	bl	8001588 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012d0:	2300      	movs	r3, #0
 80012d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012d4:	2300      	movs	r3, #0
 80012d6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d8:	2300      	movs	r3, #0
 80012da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012dc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012e0:	4619      	mov	r1, r3
 80012e2:	482b      	ldr	r0, [pc, #172]	; (8001390 <MX_TIM1_Init+0x168>)
 80012e4:	f004 f8c8 	bl	8005478 <HAL_TIMEx_MasterConfigSynchronization>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80012ee:	f000 f94b 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012f2:	2360      	movs	r3, #96	; 0x60
 80012f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80012f6:	2300      	movs	r3, #0
 80012f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012fa:	2300      	movs	r3, #0
 80012fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012fe:	2300      	movs	r3, #0
 8001300:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001302:	2300      	movs	r3, #0
 8001304:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001306:	2300      	movs	r3, #0
 8001308:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800130a:	2300      	movs	r3, #0
 800130c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800130e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001312:	2200      	movs	r2, #0
 8001314:	4619      	mov	r1, r3
 8001316:	481e      	ldr	r0, [pc, #120]	; (8001390 <MX_TIM1_Init+0x168>)
 8001318:	f003 faf2 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8001322:	f000 f931 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001326:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800132a:	2204      	movs	r2, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4818      	ldr	r0, [pc, #96]	; (8001390 <MX_TIM1_Init+0x168>)
 8001330:	f003 fae6 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 800133a:	f000 f925 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800133e:	2300      	movs	r3, #0
 8001340:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001342:	2300      	movs	r3, #0
 8001344:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001346:	2300      	movs	r3, #0
 8001348:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800134a:	2300      	movs	r3, #0
 800134c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001352:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001356:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800135c:	2300      	movs	r3, #0
 800135e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001360:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001364:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800136a:	2300      	movs	r3, #0
 800136c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800136e:	1d3b      	adds	r3, r7, #4
 8001370:	4619      	mov	r1, r3
 8001372:	4807      	ldr	r0, [pc, #28]	; (8001390 <MX_TIM1_Init+0x168>)
 8001374:	f004 f8ee 	bl	8005554 <HAL_TIMEx_ConfigBreakDeadTime>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x15a>
  {
    Error_Handler();
 800137e:	f000 f903 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001382:	4803      	ldr	r0, [pc, #12]	; (8001390 <MX_TIM1_Init+0x168>)
 8001384:	f000 f99a 	bl	80016bc <HAL_TIM_MspPostInit>

}
 8001388:	bf00      	nop
 800138a:	3768      	adds	r7, #104	; 0x68
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	20000158 	.word	0x20000158
 8001394:	40012c00 	.word	0x40012c00

08001398 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b092      	sub	sp, #72	; 0x48
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800139e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]
 80013ae:	615a      	str	r2, [r3, #20]
 80013b0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80013b2:	463b      	mov	r3, r7
 80013b4:	222c      	movs	r2, #44	; 0x2c
 80013b6:	2100      	movs	r1, #0
 80013b8:	4618      	mov	r0, r3
 80013ba:	f004 fca1 	bl	8005d00 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80013be:	4b31      	ldr	r3, [pc, #196]	; (8001484 <MX_TIM17_Init+0xec>)
 80013c0:	4a31      	ldr	r2, [pc, #196]	; (8001488 <MX_TIM17_Init+0xf0>)
 80013c2:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 8-1;
 80013c4:	4b2f      	ldr	r3, [pc, #188]	; (8001484 <MX_TIM17_Init+0xec>)
 80013c6:	2207      	movs	r2, #7
 80013c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ca:	4b2e      	ldr	r3, [pc, #184]	; (8001484 <MX_TIM17_Init+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 20000-1;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_TIM17_Init+0xec>)
 80013d2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80013d6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d8:	4b2a      	ldr	r3, [pc, #168]	; (8001484 <MX_TIM17_Init+0xec>)
 80013da:	2200      	movs	r2, #0
 80013dc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80013de:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_TIM17_Init+0xec>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013e4:	4b27      	ldr	r3, [pc, #156]	; (8001484 <MX_TIM17_Init+0xec>)
 80013e6:	2280      	movs	r2, #128	; 0x80
 80013e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80013ea:	4826      	ldr	r0, [pc, #152]	; (8001484 <MX_TIM17_Init+0xec>)
 80013ec:	f003 f88e 	bl	800450c <HAL_TIM_Base_Init>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 80013f6:	f000 f8c7 	bl	8001588 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 80013fa:	4822      	ldr	r0, [pc, #136]	; (8001484 <MX_TIM17_Init+0xec>)
 80013fc:	f003 f932 	bl	8004664 <HAL_TIM_PWM_Init>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8001406:	f000 f8bf 	bl	8001588 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140a:	2360      	movs	r3, #96	; 0x60
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.Pulse = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001426:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800142a:	2200      	movs	r2, #0
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	; (8001484 <MX_TIM17_Init+0xec>)
 8001430:	f003 fa66 	bl	8004900 <HAL_TIM_PWM_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 800143a:	f000 f8a5 	bl	8001588 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143e:	2300      	movs	r3, #0
 8001440:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001442:	2300      	movs	r3, #0
 8001444:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001446:	2300      	movs	r3, #0
 8001448:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 800144a:	2300      	movs	r3, #0
 800144c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144e:	2300      	movs	r3, #0
 8001450:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001452:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001456:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8001460:	463b      	mov	r3, r7
 8001462:	4619      	mov	r1, r3
 8001464:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM17_Init+0xec>)
 8001466:	f004 f875 	bl	8005554 <HAL_TIMEx_ConfigBreakDeadTime>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8001470:	f000 f88a 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM17_Init+0xec>)
 8001476:	f000 f921 	bl	80016bc <HAL_TIM_MspPostInit>

}
 800147a:	bf00      	nop
 800147c:	3748      	adds	r7, #72	; 0x48
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	200001a4 	.word	0x200001a4
 8001488:	40014800 	.word	0x40014800

0800148c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001492:	4a15      	ldr	r2, [pc, #84]	; (80014e8 <MX_USART2_UART_Init+0x5c>)
 8001494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001496:	4b13      	ldr	r3, [pc, #76]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b11      	ldr	r3, [pc, #68]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0e      	ldr	r3, [pc, #56]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b09      	ldr	r3, [pc, #36]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014c2:	4b08      	ldr	r3, [pc, #32]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ce:	4805      	ldr	r0, [pc, #20]	; (80014e4 <MX_USART2_UART_Init+0x58>)
 80014d0:	f004 f8b8 	bl	8005644 <HAL_UART_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80014da:	f000 f855 	bl	8001588 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014de:	bf00      	nop
 80014e0:	bd80      	pop	{r7, pc}
 80014e2:	bf00      	nop
 80014e4:	200001f0 	.word	0x200001f0
 80014e8:	40004400 	.word	0x40004400

080014ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b088      	sub	sp, #32
 80014f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f2:	f107 030c 	add.w	r3, r7, #12
 80014f6:	2200      	movs	r2, #0
 80014f8:	601a      	str	r2, [r3, #0]
 80014fa:	605a      	str	r2, [r3, #4]
 80014fc:	609a      	str	r2, [r3, #8]
 80014fe:	60da      	str	r2, [r3, #12]
 8001500:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <MX_GPIO_Init+0x98>)
 8001504:	695b      	ldr	r3, [r3, #20]
 8001506:	4a1f      	ldr	r2, [pc, #124]	; (8001584 <MX_GPIO_Init+0x98>)
 8001508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150c:	6153      	str	r3, [r2, #20]
 800150e:	4b1d      	ldr	r3, [pc, #116]	; (8001584 <MX_GPIO_Init+0x98>)
 8001510:	695b      	ldr	r3, [r3, #20]
 8001512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001516:	60bb      	str	r3, [r7, #8]
 8001518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800151a:	4b1a      	ldr	r3, [pc, #104]	; (8001584 <MX_GPIO_Init+0x98>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	4a19      	ldr	r2, [pc, #100]	; (8001584 <MX_GPIO_Init+0x98>)
 8001520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001524:	6153      	str	r3, [r2, #20]
 8001526:	4b17      	ldr	r3, [pc, #92]	; (8001584 <MX_GPIO_Init+0x98>)
 8001528:	695b      	ldr	r3, [r3, #20]
 800152a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800152e:	607b      	str	r3, [r7, #4]
 8001530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin, GPIO_PIN_RESET);
 8001532:	2200      	movs	r2, #0
 8001534:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8001538:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800153c:	f001 fc34 	bl	8002da8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : RIGHT_DM_PHASE_Pin LEFT_DM_PHASE_Pin */
  GPIO_InitStruct.Pin = RIGHT_DM_PHASE_Pin|LEFT_DM_PHASE_Pin;
 8001540:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001544:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001546:	2301      	movs	r3, #1
 8001548:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154e:	2300      	movs	r3, #0
 8001550:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	4619      	mov	r1, r3
 8001558:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800155c:	f001 fa9a 	bl	8002a94 <HAL_GPIO_Init>

  /*Configure GPIO pin : POWER_BTN_Pin */
  GPIO_InitStruct.Pin = POWER_BTN_Pin;
 8001560:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001564:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800156a:	2302      	movs	r3, #2
 800156c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(POWER_BTN_GPIO_Port, &GPIO_InitStruct);
 800156e:	f107 030c 	add.w	r3, r7, #12
 8001572:	4619      	mov	r1, r3
 8001574:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001578:	f001 fa8c 	bl	8002a94 <HAL_GPIO_Init>

}
 800157c:	bf00      	nop
 800157e:	3720      	adds	r7, #32
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	40021000 	.word	0x40021000

08001588 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800158c:	b672      	cpsid	i
}
 800158e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001590:	e7fe      	b.n	8001590 <Error_Handler+0x8>
	...

08001594 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800159a:	4b0f      	ldr	r3, [pc, #60]	; (80015d8 <HAL_MspInit+0x44>)
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	4a0e      	ldr	r2, [pc, #56]	; (80015d8 <HAL_MspInit+0x44>)
 80015a0:	f043 0301 	orr.w	r3, r3, #1
 80015a4:	6193      	str	r3, [r2, #24]
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <HAL_MspInit+0x44>)
 80015a8:	699b      	ldr	r3, [r3, #24]
 80015aa:	f003 0301 	and.w	r3, r3, #1
 80015ae:	607b      	str	r3, [r7, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_MspInit+0x44>)
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_MspInit+0x44>)
 80015b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015bc:	61d3      	str	r3, [r2, #28]
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_MspInit+0x44>)
 80015c0:	69db      	ldr	r3, [r3, #28]
 80015c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c6:	603b      	str	r3, [r7, #0]
 80015c8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b08a      	sub	sp, #40	; 0x28
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0314 	add.w	r3, r7, #20
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80015fc:	d124      	bne.n	8001648 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_ADC_MspInit+0x74>)
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	4a13      	ldr	r2, [pc, #76]	; (8001650 <HAL_ADC_MspInit+0x74>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6153      	str	r3, [r2, #20]
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_ADC_MspInit+0x74>)
 800160c:	695b      	ldr	r3, [r3, #20]
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	613b      	str	r3, [r7, #16]
 8001614:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_ADC_MspInit+0x74>)
 8001618:	695b      	ldr	r3, [r3, #20]
 800161a:	4a0d      	ldr	r2, [pc, #52]	; (8001650 <HAL_ADC_MspInit+0x74>)
 800161c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001620:	6153      	str	r3, [r2, #20]
 8001622:	4b0b      	ldr	r3, [pc, #44]	; (8001650 <HAL_ADC_MspInit+0x74>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162a:	60fb      	str	r3, [r7, #12]
 800162c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PA3     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = IR_LEFT_Pin|IR_CENTER_Pin|IR_RIGHT_Pin;
 800162e:	230b      	movs	r3, #11
 8001630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001632:	2303      	movs	r3, #3
 8001634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f107 0314 	add.w	r3, r7, #20
 800163e:	4619      	mov	r1, r3
 8001640:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001644:	f001 fa26 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001648:	bf00      	nop
 800164a:	3728      	adds	r7, #40	; 0x28
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	40021000 	.word	0x40021000

08001654 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001654:	b480      	push	{r7}
 8001656:	b085      	sub	sp, #20
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a13      	ldr	r2, [pc, #76]	; (80016b0 <HAL_TIM_Base_MspInit+0x5c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d10c      	bne.n	8001680 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001666:	4b13      	ldr	r3, [pc, #76]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	4a12      	ldr	r2, [pc, #72]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 800166c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001670:	6193      	str	r3, [r2, #24]
 8001672:	4b10      	ldr	r3, [pc, #64]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 8001674:	699b      	ldr	r3, [r3, #24]
 8001676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 800167e:	e010      	b.n	80016a2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM17)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0c      	ldr	r2, [pc, #48]	; (80016b8 <HAL_TIM_Base_MspInit+0x64>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d10b      	bne.n	80016a2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800168a:	4b0a      	ldr	r3, [pc, #40]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 800168c:	699b      	ldr	r3, [r3, #24]
 800168e:	4a09      	ldr	r2, [pc, #36]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 8001690:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001694:	6193      	str	r3, [r2, #24]
 8001696:	4b07      	ldr	r3, [pc, #28]	; (80016b4 <HAL_TIM_Base_MspInit+0x60>)
 8001698:	699b      	ldr	r3, [r3, #24]
 800169a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
}
 80016a2:	bf00      	nop
 80016a4:	3714      	adds	r7, #20
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40014800 	.word	0x40014800

080016bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a23      	ldr	r2, [pc, #140]	; (8001768 <HAL_TIM_MspPostInit+0xac>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d11e      	bne.n	800171c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b23      	ldr	r3, [pc, #140]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	4a22      	ldr	r2, [pc, #136]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 80016e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016e8:	6153      	str	r3, [r2, #20]
 80016ea:	4b20      	ldr	r3, [pc, #128]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = RIGHT_DM_ENBL_Pin|LEFT_DM_ENBL_Pin;
 80016f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001704:	2300      	movs	r3, #0
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001708:	2306      	movs	r3, #6
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001716:	f001 f9bd 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 800171a:	e020      	b.n	800175e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM17)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a13      	ldr	r2, [pc, #76]	; (8001770 <HAL_TIM_MspPostInit+0xb4>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d11b      	bne.n	800175e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	4b11      	ldr	r3, [pc, #68]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 8001728:	695b      	ldr	r3, [r3, #20]
 800172a:	4a10      	ldr	r2, [pc, #64]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 800172c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001730:	6153      	str	r3, [r2, #20]
 8001732:	4b0e      	ldr	r3, [pc, #56]	; (800176c <HAL_TIM_MspPostInit+0xb0>)
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_MOTOR_Pin;
 800173e:	2320      	movs	r3, #32
 8001740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001742:	2302      	movs	r3, #2
 8001744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM17;
 800174e:	230a      	movs	r3, #10
 8001750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_MOTOR_GPIO_Port, &GPIO_InitStruct);
 8001752:	f107 0314 	add.w	r3, r7, #20
 8001756:	4619      	mov	r1, r3
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <HAL_TIM_MspPostInit+0xb8>)
 800175a:	f001 f99b 	bl	8002a94 <HAL_GPIO_Init>
}
 800175e:	bf00      	nop
 8001760:	3728      	adds	r7, #40	; 0x28
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40012c00 	.word	0x40012c00
 800176c:	40021000 	.word	0x40021000
 8001770:	40014800 	.word	0x40014800
 8001774:	48000400 	.word	0x48000400

08001778 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001780:	f107 0314 	add.w	r3, r7, #20
 8001784:	2200      	movs	r2, #0
 8001786:	601a      	str	r2, [r3, #0]
 8001788:	605a      	str	r2, [r3, #4]
 800178a:	609a      	str	r2, [r3, #8]
 800178c:	60da      	str	r2, [r3, #12]
 800178e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	4a18      	ldr	r2, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0x80>)
 8001796:	4293      	cmp	r3, r2
 8001798:	d129      	bne.n	80017ee <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <HAL_UART_MspInit+0x84>)
 800179c:	69db      	ldr	r3, [r3, #28]
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <HAL_UART_MspInit+0x84>)
 80017a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017a4:	61d3      	str	r3, [r2, #28]
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <HAL_UART_MspInit+0x84>)
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ae:	613b      	str	r3, [r7, #16]
 80017b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b2:	4b12      	ldr	r3, [pc, #72]	; (80017fc <HAL_UART_MspInit+0x84>)
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <HAL_UART_MspInit+0x84>)
 80017b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017bc:	6153      	str	r3, [r2, #20]
 80017be:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <HAL_UART_MspInit+0x84>)
 80017c0:	695b      	ldr	r3, [r3, #20]
 80017c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80017ca:	f248 0304 	movw	r3, #32772	; 0x8004
 80017ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d4:	2300      	movs	r3, #0
 80017d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d8:	2303      	movs	r3, #3
 80017da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017dc:	2307      	movs	r3, #7
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017ea:	f001 f953 	bl	8002a94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ee:	bf00      	nop
 80017f0:	3728      	adds	r7, #40	; 0x28
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	40004400 	.word	0x40004400
 80017fc:	40021000 	.word	0x40021000

08001800 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001804:	e7fe      	b.n	8001804 <NMI_Handler+0x4>

08001806 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800180a:	e7fe      	b.n	800180a <HardFault_Handler+0x4>

0800180c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001810:	e7fe      	b.n	8001810 <MemManage_Handler+0x4>

08001812 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001812:	b480      	push	{r7}
 8001814:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001816:	e7fe      	b.n	8001816 <BusFault_Handler+0x4>

08001818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800181c:	e7fe      	b.n	800181c <UsageFault_Handler+0x4>

0800181e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	46bd      	mov	sp, r7
 8001826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182a:	4770      	bx	lr

0800182c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001830:	bf00      	nop
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr

0800183a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800183a:	b480      	push	{r7}
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800184c:	f000 f884 	bl	8001958 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001850:	bf00      	nop
 8001852:	bd80      	pop	{r7, pc}

08001854 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <SystemInit+0x20>)
 800185a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185e:	4a05      	ldr	r2, [pc, #20]	; (8001874 <SystemInit+0x20>)
 8001860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001878:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018b0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800187c:	480d      	ldr	r0, [pc, #52]	; (80018b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800187e:	490e      	ldr	r1, [pc, #56]	; (80018b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001880:	4a0e      	ldr	r2, [pc, #56]	; (80018bc <LoopForever+0xe>)
  movs r3, #0
 8001882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001884:	e002      	b.n	800188c <LoopCopyDataInit>

08001886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800188a:	3304      	adds	r3, #4

0800188c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800188c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800188e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001890:	d3f9      	bcc.n	8001886 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001892:	4a0b      	ldr	r2, [pc, #44]	; (80018c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001894:	4c0b      	ldr	r4, [pc, #44]	; (80018c4 <LoopForever+0x16>)
  movs r3, #0
 8001896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001898:	e001      	b.n	800189e <LoopFillZerobss>

0800189a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800189a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800189c:	3204      	adds	r2, #4

0800189e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800189e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018a0:	d3fb      	bcc.n	800189a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018a2:	f7ff ffd7 	bl	8001854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a6:	f004 fa07 	bl	8005cb8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018aa:	f7ff fb63 	bl	8000f74 <main>

080018ae <LoopForever>:

LoopForever:
    b LoopForever
 80018ae:	e7fe      	b.n	80018ae <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80018b0:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018b8:	200000ec 	.word	0x200000ec
  ldr r2, =_sidata
 80018bc:	080075d4 	.word	0x080075d4
  ldr r2, =_sbss
 80018c0:	200000ec 	.word	0x200000ec
  ldr r4, =_ebss
 80018c4:	20000284 	.word	0x20000284

080018c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018c8:	e7fe      	b.n	80018c8 <ADC1_2_IRQHandler>
	...

080018cc <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d0:	4b08      	ldr	r3, [pc, #32]	; (80018f4 <HAL_Init+0x28>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a07      	ldr	r2, [pc, #28]	; (80018f4 <HAL_Init+0x28>)
 80018d6:	f043 0310 	orr.w	r3, r3, #16
 80018da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018dc:	2003      	movs	r0, #3
 80018de:	f001 f8a5 	bl	8002a2c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018e2:	2000      	movs	r0, #0
 80018e4:	f000 f808 	bl	80018f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018e8:	f7ff fe54 	bl	8001594 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018ec:	2300      	movs	r3, #0
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	40022000 	.word	0x40022000

080018f8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001900:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_InitTick+0x54>)
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <HAL_InitTick+0x58>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	4619      	mov	r1, r3
 800190a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800190e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001912:	fbb2 f3f3 	udiv	r3, r2, r3
 8001916:	4618      	mov	r0, r3
 8001918:	f001 f8af 	bl	8002a7a <HAL_SYSTICK_Config>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e00e      	b.n	8001944 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b0f      	cmp	r3, #15
 800192a:	d80a      	bhi.n	8001942 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800192c:	2200      	movs	r2, #0
 800192e:	6879      	ldr	r1, [r7, #4]
 8001930:	f04f 30ff 	mov.w	r0, #4294967295
 8001934:	f001 f885 	bl	8002a42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001938:	4a06      	ldr	r2, [pc, #24]	; (8001954 <HAL_InitTick+0x5c>)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
 8001940:	e000      	b.n	8001944 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
}
 8001944:	4618      	mov	r0, r3
 8001946:	3708      	adds	r7, #8
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	2000007c 	.word	0x2000007c
 8001950:	20000084 	.word	0x20000084
 8001954:	20000080 	.word	0x20000080

08001958 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800195c:	4b06      	ldr	r3, [pc, #24]	; (8001978 <HAL_IncTick+0x20>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_IncTick+0x24>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4413      	add	r3, r2
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <HAL_IncTick+0x24>)
 800196a:	6013      	str	r3, [r2, #0]
}
 800196c:	bf00      	nop
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	20000084 	.word	0x20000084
 800197c:	20000280 	.word	0x20000280

08001980 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return uwTick;  
 8001984:	4b03      	ldr	r3, [pc, #12]	; (8001994 <HAL_GetTick+0x14>)
 8001986:	681b      	ldr	r3, [r3, #0]
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001990:	4770      	bx	lr
 8001992:	bf00      	nop
 8001994:	20000280 	.word	0x20000280

08001998 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019a0:	f7ff ffee 	bl	8001980 <HAL_GetTick>
 80019a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019b0:	d005      	beq.n	80019be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019b2:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <HAL_Delay+0x44>)
 80019b4:	781b      	ldrb	r3, [r3, #0]
 80019b6:	461a      	mov	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4413      	add	r3, r2
 80019bc:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019be:	bf00      	nop
 80019c0:	f7ff ffde 	bl	8001980 <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68bb      	ldr	r3, [r7, #8]
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	68fa      	ldr	r2, [r7, #12]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d8f7      	bhi.n	80019c0 <HAL_Delay+0x28>
  {
  }
}
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000084 	.word	0x20000084

080019e0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b09a      	sub	sp, #104	; 0x68
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 80019f2:	2300      	movs	r3, #0
 80019f4:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d101      	bne.n	8001a00 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e172      	b.n	8001ce6 <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	f003 0310 	and.w	r3, r3, #16
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d176      	bne.n	8001b00 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d152      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2200      	movs	r2, #0
 8001a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001a34:	6878      	ldr	r0, [r7, #4]
 8001a36:	f7ff fdd1 	bl	80015dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d13b      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 fed7 	bl	80027fc <ADC_Disable>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f003 0310 	and.w	r3, r3, #16
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d12f      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
 8001a60:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d12b      	bne.n	8001ac0 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001a70:	f023 0302 	bic.w	r3, r3, #2
 8001a74:	f043 0202 	orr.w	r2, r3, #2
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	689a      	ldr	r2, [r3, #8]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a8a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001a9a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9c:	4b94      	ldr	r3, [pc, #592]	; (8001cf0 <HAL_ADC_Init+0x310>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4a94      	ldr	r2, [pc, #592]	; (8001cf4 <HAL_ADC_Init+0x314>)
 8001aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa6:	0c9a      	lsrs	r2, r3, #18
 8001aa8:	4613      	mov	r3, r2
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	4413      	add	r3, r2
 8001aae:	005b      	lsls	r3, r3, #1
 8001ab0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab2:	e002      	b.n	8001aba <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d1f9      	bne.n	8001ab4 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d007      	beq.n	8001ade <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001ad8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001adc:	d110      	bne.n	8001b00 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f023 0312 	bic.w	r3, r3, #18
 8001ae6:	f043 0210 	orr.w	r2, r3, #16
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	f043 0201 	orr.w	r2, r3, #1
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	f003 0310 	and.w	r3, r3, #16
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f040 80df 	bne.w	8001ccc <HAL_ADC_Init+0x2ec>
 8001b0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	f040 80da 	bne.w	8001ccc <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f040 80d2 	bne.w	8001ccc <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001b30:	f043 0202 	orr.w	r2, r3, #2
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001b38:	4b6f      	ldr	r3, [pc, #444]	; (8001cf8 <HAL_ADC_Init+0x318>)
 8001b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b44:	d102      	bne.n	8001b4c <HAL_ADC_Init+0x16c>
 8001b46:	4b6d      	ldr	r3, [pc, #436]	; (8001cfc <HAL_ADC_Init+0x31c>)
 8001b48:	60fb      	str	r3, [r7, #12]
 8001b4a:	e002      	b.n	8001b52 <HAL_ADC_Init+0x172>
 8001b4c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b50:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f003 0303 	and.w	r3, r3, #3
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d108      	bne.n	8001b72 <HAL_ADC_Init+0x192>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 0301 	and.w	r3, r3, #1
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_ADC_Init+0x192>
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e000      	b.n	8001b74 <HAL_ADC_Init+0x194>
 8001b72:	2300      	movs	r3, #0
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d11c      	bne.n	8001bb2 <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b78:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d010      	beq.n	8001ba0 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d107      	bne.n	8001b9a <HAL_ADC_Init+0x1ba>
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d101      	bne.n	8001b9a <HAL_ADC_Init+0x1ba>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_ADC_Init+0x1bc>
 8001b9a:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d108      	bne.n	8001bb2 <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	431a      	orrs	r2, r3
 8001bae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001bb0:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	7e5b      	ldrb	r3, [r3, #25]
 8001bb6:	035b      	lsls	r3, r3, #13
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001bbc:	2a01      	cmp	r2, #1
 8001bbe:	d002      	beq.n	8001bc6 <HAL_ADC_Init+0x1e6>
 8001bc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bc4:	e000      	b.n	8001bc8 <HAL_ADC_Init+0x1e8>
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	431a      	orrs	r2, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	431a      	orrs	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d11b      	bne.n	8001c1e <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	7e5b      	ldrb	r3, [r3, #25]
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d109      	bne.n	8001c02 <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf2:	3b01      	subs	r3, #1
 8001bf4:	045a      	lsls	r2, r3, #17
 8001bf6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bfe:	663b      	str	r3, [r7, #96]	; 0x60
 8001c00:	e00d      	b.n	8001c1e <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c06:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8001c0a:	f043 0220 	orr.w	r2, r3, #32
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c16:	f043 0201 	orr.w	r2, r3, #1
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d007      	beq.n	8001c36 <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c2e:	4313      	orrs	r3, r2
 8001c30:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c32:	4313      	orrs	r3, r2
 8001c34:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d114      	bne.n	8001c6e <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	6812      	ldr	r2, [r2, #0]
 8001c4e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001c52:	f023 0302 	bic.w	r3, r3, #2
 8001c56:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	7e1b      	ldrb	r3, [r3, #24]
 8001c5c:	039a      	lsls	r2, r3, #14
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c64:	005b      	lsls	r3, r3, #1
 8001c66:	4313      	orrs	r3, r2
 8001c68:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	68da      	ldr	r2, [r3, #12]
 8001c74:	4b22      	ldr	r3, [pc, #136]	; (8001d00 <HAL_ADC_Init+0x320>)
 8001c76:	4013      	ands	r3, r2
 8001c78:	687a      	ldr	r2, [r7, #4]
 8001c7a:	6812      	ldr	r2, [r2, #0]
 8001c7c:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001c7e:	430b      	orrs	r3, r1
 8001c80:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	691b      	ldr	r3, [r3, #16]
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d10c      	bne.n	8001ca4 <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c90:	f023 010f 	bic.w	r1, r3, #15
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	69db      	ldr	r3, [r3, #28]
 8001c98:	1e5a      	subs	r2, r3, #1
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	430a      	orrs	r2, r1
 8001ca0:	631a      	str	r2, [r3, #48]	; 0x30
 8001ca2:	e007      	b.n	8001cb4 <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f022 020f 	bic.w	r2, r2, #15
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	f023 0303 	bic.w	r3, r3, #3
 8001cc2:	f043 0201 	orr.w	r2, r3, #1
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	641a      	str	r2, [r3, #64]	; 0x40
 8001cca:	e00a      	b.n	8001ce2 <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cd0:	f023 0312 	bic.w	r3, r3, #18
 8001cd4:	f043 0210 	orr.w	r2, r3, #16
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001cdc:	2301      	movs	r3, #1
 8001cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001ce2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	3768      	adds	r7, #104	; 0x68
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	2000007c 	.word	0x2000007c
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	50000300 	.word	0x50000300
 8001cfc:	50000100 	.word	0x50000100
 8001d00:	fff0c007 	.word	0xfff0c007

08001d04 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b084      	sub	sp, #16
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	f003 0304 	and.w	r3, r3, #4
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	f040 809c 	bne.w	8001e58 <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_ADC_Start+0x2a>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e097      	b.n	8001e5e <HAL_ADC_Start+0x15a>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fcfc 	bl	8002734 <ADC_Enable>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001d40:	7bfb      	ldrb	r3, [r7, #15]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	f040 8083 	bne.w	8001e4e <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d50:	f023 0301 	bic.w	r3, r3, #1
 8001d54:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001d5c:	4b42      	ldr	r3, [pc, #264]	; (8001e68 <HAL_ADC_Start+0x164>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 031f 	and.w	r3, r3, #31
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Start+0x6e>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001d70:	d115      	bne.n	8001d9e <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d76:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d027      	beq.n	8001ddc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d90:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d94:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	; 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001d9c:	e01e      	b.n	8001ddc <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001db2:	d004      	beq.n	8001dbe <HAL_ADC_Start+0xba>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a2c      	ldr	r2, [pc, #176]	; (8001e6c <HAL_ADC_Start+0x168>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d10e      	bne.n	8001ddc <HAL_ADC_Start+0xd8>
 8001dbe:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d007      	beq.n	8001ddc <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001dd4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	641a      	str	r2, [r3, #64]	; 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001de4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001de8:	d106      	bne.n	8001df8 <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dee:	f023 0206 	bic.w	r2, r3, #6
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	645a      	str	r2, [r3, #68]	; 0x44
 8001df6:	e002      	b.n	8001dfe <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	645a      	str	r2, [r3, #68]	; 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2200      	movs	r2, #0
 8001e02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	221c      	movs	r2, #28
 8001e0c:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001e0e:	4b16      	ldr	r3, [pc, #88]	; (8001e68 <HAL_ADC_Start+0x164>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 031f 	and.w	r3, r3, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d010      	beq.n	8001e3c <HAL_ADC_Start+0x138>
 8001e1a:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <HAL_ADC_Start+0x164>)
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f003 031f 	and.w	r3, r3, #31
 8001e22:	2b05      	cmp	r3, #5
 8001e24:	d00a      	beq.n	8001e3c <HAL_ADC_Start+0x138>
 8001e26:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <HAL_ADC_Start+0x164>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 031f 	and.w	r3, r3, #31
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d004      	beq.n	8001e3c <HAL_ADC_Start+0x138>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e3a:	d10f      	bne.n	8001e5c <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	689a      	ldr	r2, [r3, #8]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0204 	orr.w	r2, r2, #4
 8001e4a:	609a      	str	r2, [r3, #8]
 8001e4c:	e006      	b.n	8001e5c <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2200      	movs	r2, #0
 8001e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8001e56:	e001      	b.n	8001e5c <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e5e:	4618      	mov	r0, r3
 8001e60:	3710      	adds	r7, #16
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	50000300 	.word	0x50000300
 8001e6c:	50000100 	.word	0x50000100

08001e70 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	695b      	ldr	r3, [r3, #20]
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d102      	bne.n	8001e8c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001e86:	2308      	movs	r3, #8
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e02e      	b.n	8001eea <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	; (8002008 <HAL_ADC_PollForConversion+0x198>)
 8001e8e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d112      	bne.n	8001ec2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	f003 0301 	and.w	r3, r3, #1
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d11d      	bne.n	8001ee6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eae:	f043 0220 	orr.w	r2, r3, #32
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e09d      	b.n	8001ffe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d00b      	beq.n	8001ee6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f043 0220 	orr.w	r2, r3, #32
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2200      	movs	r2, #0
 8001ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e08b      	b.n	8001ffe <HAL_ADC_PollForConversion+0x18e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8001ee6:	230c      	movs	r3, #12
 8001ee8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001eea:	4b47      	ldr	r3, [pc, #284]	; (8002008 <HAL_ADC_PollForConversion+0x198>)
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f003 031f 	and.w	r3, r3, #31
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d004      	beq.n	8001f00 <HAL_ADC_PollForConversion+0x90>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001efe:	d104      	bne.n	8001f0a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68db      	ldr	r3, [r3, #12]
 8001f06:	613b      	str	r3, [r7, #16]
 8001f08:	e003      	b.n	8001f12 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f0a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001f12:	f7ff fd35 	bl	8001980 <HAL_GetTick>
 8001f16:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f18:	e021      	b.n	8001f5e <HAL_ADC_PollForConversion+0xee>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f20:	d01d      	beq.n	8001f5e <HAL_ADC_PollForConversion+0xee>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d007      	beq.n	8001f38 <HAL_ADC_PollForConversion+0xc8>
 8001f28:	f7ff fd2a 	bl	8001980 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	683a      	ldr	r2, [r7, #0]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d212      	bcs.n	8001f5e <HAL_ADC_PollForConversion+0xee>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	681a      	ldr	r2, [r3, #0]
 8001f3e:	697b      	ldr	r3, [r7, #20]
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10b      	bne.n	8001f5e <HAL_ADC_PollForConversion+0xee>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4a:	f043 0204 	orr.w	r2, r3, #4
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	2200      	movs	r2, #0
 8001f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e04f      	b.n	8001ffe <HAL_ADC_PollForConversion+0x18e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	697b      	ldr	r3, [r7, #20]
 8001f66:	4013      	ands	r3, r2
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0d6      	beq.n	8001f1a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	68db      	ldr	r3, [r3, #12]
 8001f7e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d131      	bne.n	8001fea <HAL_ADC_PollForConversion+0x17a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d12c      	bne.n	8001fea <HAL_ADC_PollForConversion+0x17a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 0308 	and.w	r3, r3, #8
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d125      	bne.n	8001fea <HAL_ADC_PollForConversion+0x17a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f003 0304 	and.w	r3, r3, #4
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d112      	bne.n	8001fd2 <HAL_ADC_PollForConversion+0x162>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	641a      	str	r2, [r3, #64]	; 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fbc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d112      	bne.n	8001fea <HAL_ADC_PollForConversion+0x17a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	f043 0201 	orr.w	r2, r3, #1
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	641a      	str	r2, [r3, #64]	; 0x40
 8001fd0:	e00b      	b.n	8001fea <HAL_ADC_PollForConversion+0x17a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd6:	f043 0220 	orr.w	r2, r3, #32
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	f043 0201 	orr.w	r2, r3, #1
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d103      	bne.n	8001ffc <HAL_ADC_PollForConversion+0x18c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	50000300 	.word	0x50000300

0800200c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800201a:	4618      	mov	r0, r3
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002028:	b480      	push	{r7}
 800202a:	b09b      	sub	sp, #108	; 0x6c
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002032:	2300      	movs	r3, #0
 8002034:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002042:	2b01      	cmp	r3, #1
 8002044:	d101      	bne.n	800204a <HAL_ADC_ConfigChannel+0x22>
 8002046:	2302      	movs	r3, #2
 8002048:	e2a4      	b.n	8002594 <HAL_ADC_ConfigChannel+0x56c>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2201      	movs	r2, #1
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	689b      	ldr	r3, [r3, #8]
 8002058:	f003 0304 	and.w	r3, r3, #4
 800205c:	2b00      	cmp	r3, #0
 800205e:	f040 8288 	bne.w	8002572 <HAL_ADC_ConfigChannel+0x54a>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b04      	cmp	r3, #4
 8002068:	d81c      	bhi.n	80020a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	685a      	ldr	r2, [r3, #4]
 8002074:	4613      	mov	r3, r2
 8002076:	005b      	lsls	r3, r3, #1
 8002078:	4413      	add	r3, r2
 800207a:	005b      	lsls	r3, r3, #1
 800207c:	461a      	mov	r2, r3
 800207e:	231f      	movs	r3, #31
 8002080:	4093      	lsls	r3, r2
 8002082:	43db      	mvns	r3, r3
 8002084:	4019      	ands	r1, r3
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	6818      	ldr	r0, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	685a      	ldr	r2, [r3, #4]
 800208e:	4613      	mov	r3, r2
 8002090:	005b      	lsls	r3, r3, #1
 8002092:	4413      	add	r3, r2
 8002094:	005b      	lsls	r3, r3, #1
 8002096:	fa00 f203 	lsl.w	r2, r0, r3
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	631a      	str	r2, [r3, #48]	; 0x30
 80020a2:	e063      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2b09      	cmp	r3, #9
 80020aa:	d81e      	bhi.n	80020ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685a      	ldr	r2, [r3, #4]
 80020b6:	4613      	mov	r3, r2
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	4413      	add	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	3b1e      	subs	r3, #30
 80020c0:	221f      	movs	r2, #31
 80020c2:	fa02 f303 	lsl.w	r3, r2, r3
 80020c6:	43db      	mvns	r3, r3
 80020c8:	4019      	ands	r1, r3
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	6818      	ldr	r0, [r3, #0]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685a      	ldr	r2, [r3, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	005b      	lsls	r3, r3, #1
 80020d6:	4413      	add	r3, r2
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	3b1e      	subs	r3, #30
 80020dc:	fa00 f203 	lsl.w	r2, r0, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34
 80020e8:	e040      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b0e      	cmp	r3, #14
 80020f0:	d81e      	bhi.n	8002130 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685a      	ldr	r2, [r3, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4413      	add	r3, r2
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3b3c      	subs	r3, #60	; 0x3c
 8002106:	221f      	movs	r2, #31
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	4019      	ands	r1, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	6818      	ldr	r0, [r3, #0]
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	005b      	lsls	r3, r3, #1
 800211c:	4413      	add	r3, r2
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	3b3c      	subs	r3, #60	; 0x3c
 8002122:	fa00 f203 	lsl.w	r2, r0, r3
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	430a      	orrs	r2, r1
 800212c:	639a      	str	r2, [r3, #56]	; 0x38
 800212e:	e01d      	b.n	800216c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	005b      	lsls	r3, r3, #1
 800213e:	4413      	add	r3, r2
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	3b5a      	subs	r3, #90	; 0x5a
 8002144:	221f      	movs	r2, #31
 8002146:	fa02 f303 	lsl.w	r3, r2, r3
 800214a:	43db      	mvns	r3, r3
 800214c:	4019      	ands	r1, r3
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	6818      	ldr	r0, [r3, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	685a      	ldr	r2, [r3, #4]
 8002156:	4613      	mov	r3, r2
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	4413      	add	r3, r2
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	3b5a      	subs	r3, #90	; 0x5a
 8002160:	fa00 f203 	lsl.w	r2, r0, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	f003 030c 	and.w	r3, r3, #12
 8002176:	2b00      	cmp	r3, #0
 8002178:	f040 80e5 	bne.w	8002346 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	2b09      	cmp	r3, #9
 8002182:	d91c      	bls.n	80021be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	6999      	ldr	r1, [r3, #24]
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	4019      	ands	r1, r3
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6898      	ldr	r0, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	681a      	ldr	r2, [r3, #0]
 80021a8:	4613      	mov	r3, r2
 80021aa:	005b      	lsls	r3, r3, #1
 80021ac:	4413      	add	r3, r2
 80021ae:	3b1e      	subs	r3, #30
 80021b0:	fa00 f203 	lsl.w	r2, r0, r3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	430a      	orrs	r2, r1
 80021ba:	619a      	str	r2, [r3, #24]
 80021bc:	e019      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	6959      	ldr	r1, [r3, #20]
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	681a      	ldr	r2, [r3, #0]
 80021c8:	4613      	mov	r3, r2
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	4413      	add	r3, r2
 80021ce:	2207      	movs	r2, #7
 80021d0:	fa02 f303 	lsl.w	r3, r2, r3
 80021d4:	43db      	mvns	r3, r3
 80021d6:	4019      	ands	r1, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	6898      	ldr	r0, [r3, #8]
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681a      	ldr	r2, [r3, #0]
 80021e0:	4613      	mov	r3, r2
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	4413      	add	r3, r2
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	695a      	ldr	r2, [r3, #20]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	08db      	lsrs	r3, r3, #3
 80021fe:	f003 0303 	and.w	r3, r3, #3
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	691b      	ldr	r3, [r3, #16]
 800220e:	3b01      	subs	r3, #1
 8002210:	2b03      	cmp	r3, #3
 8002212:	d84f      	bhi.n	80022b4 <HAL_ADC_ConfigChannel+0x28c>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <HAL_ADC_ConfigChannel+0x1f4>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800224f 	.word	0x0800224f
 8002224:	08002271 	.word	0x08002271
 8002228:	08002293 	.word	0x08002293
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002232:	4b94      	ldr	r3, [pc, #592]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002234:	4013      	ands	r3, r2
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	6812      	ldr	r2, [r2, #0]
 800223a:	0691      	lsls	r1, r2, #26
 800223c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800223e:	430a      	orrs	r2, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800224a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800224c:	e07e      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002254:	4b8b      	ldr	r3, [pc, #556]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002256:	4013      	ands	r3, r2
 8002258:	683a      	ldr	r2, [r7, #0]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	0691      	lsls	r1, r2, #26
 800225e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002260:	430a      	orrs	r2, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800226c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800226e:	e06d      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002276:	4b83      	ldr	r3, [pc, #524]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 8002278:	4013      	ands	r3, r2
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	6812      	ldr	r2, [r2, #0]
 800227e:	0691      	lsls	r1, r2, #26
 8002280:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002282:	430a      	orrs	r2, r1
 8002284:	431a      	orrs	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800228e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002290:	e05c      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8002298:	4b7a      	ldr	r3, [pc, #488]	; (8002484 <HAL_ADC_ConfigChannel+0x45c>)
 800229a:	4013      	ands	r3, r2
 800229c:	683a      	ldr	r2, [r7, #0]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	0691      	lsls	r1, r2, #26
 80022a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80022a4:	430a      	orrs	r2, r1
 80022a6:	431a      	orrs	r2, r3
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80022b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80022b2:	e04b      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	069b      	lsls	r3, r3, #26
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d107      	bne.n	80022d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	069b      	lsls	r3, r3, #26
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d107      	bne.n	80022fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80022fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002302:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	069b      	lsls	r3, r3, #26
 800230c:	429a      	cmp	r2, r3
 800230e:	d107      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800231e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002326:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	069b      	lsls	r3, r3, #26
 8002330:	429a      	cmp	r2, r3
 8002332:	d10a      	bne.n	800234a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002342:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8002344:	e001      	b.n	800234a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8002346:	bf00      	nop
 8002348:	e000      	b.n	800234c <HAL_ADC_ConfigChannel+0x324>
      break;
 800234a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	2b01      	cmp	r3, #1
 8002358:	d108      	bne.n	800236c <HAL_ADC_ConfigChannel+0x344>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0301 	and.w	r3, r3, #1
 8002364:	2b01      	cmp	r3, #1
 8002366:	d101      	bne.n	800236c <HAL_ADC_ConfigChannel+0x344>
 8002368:	2301      	movs	r3, #1
 800236a:	e000      	b.n	800236e <HAL_ADC_ConfigChannel+0x346>
 800236c:	2300      	movs	r3, #0
 800236e:	2b00      	cmp	r3, #0
 8002370:	f040 810a 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d00f      	beq.n	800239c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	2201      	movs	r2, #1
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43da      	mvns	r2, r3
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	400a      	ands	r2, r1
 8002396:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800239a:	e049      	b.n	8002430 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2201      	movs	r2, #1
 80023aa:	409a      	lsls	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	430a      	orrs	r2, r1
 80023b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b09      	cmp	r3, #9
 80023bc:	d91c      	bls.n	80023f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6999      	ldr	r1, [r3, #24]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4613      	mov	r3, r2
 80023ca:	005b      	lsls	r3, r3, #1
 80023cc:	4413      	add	r3, r2
 80023ce:	3b1b      	subs	r3, #27
 80023d0:	2207      	movs	r2, #7
 80023d2:	fa02 f303 	lsl.w	r3, r2, r3
 80023d6:	43db      	mvns	r3, r3
 80023d8:	4019      	ands	r1, r3
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	6898      	ldr	r0, [r3, #8]
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	681a      	ldr	r2, [r3, #0]
 80023e2:	4613      	mov	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	4413      	add	r3, r2
 80023e8:	3b1b      	subs	r3, #27
 80023ea:	fa00 f203 	lsl.w	r2, r0, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	430a      	orrs	r2, r1
 80023f4:	619a      	str	r2, [r3, #24]
 80023f6:	e01b      	b.n	8002430 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6959      	ldr	r1, [r3, #20]
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	1c5a      	adds	r2, r3, #1
 8002404:	4613      	mov	r3, r2
 8002406:	005b      	lsls	r3, r3, #1
 8002408:	4413      	add	r3, r2
 800240a:	2207      	movs	r2, #7
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	43db      	mvns	r3, r3
 8002412:	4019      	ands	r1, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	6898      	ldr	r0, [r3, #8]
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	4613      	mov	r3, r2
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4413      	add	r3, r2
 8002424:	fa00 f203 	lsl.w	r2, r0, r3
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	430a      	orrs	r2, r1
 800242e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002430:	4b15      	ldr	r3, [pc, #84]	; (8002488 <HAL_ADC_ConfigChannel+0x460>)
 8002432:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b10      	cmp	r3, #16
 800243a:	d105      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800243c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002444:	2b00      	cmp	r3, #0
 8002446:	d015      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800244c:	2b11      	cmp	r3, #17
 800244e:	d105      	bne.n	800245c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002450:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00b      	beq.n	8002474 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002460:	2b12      	cmp	r3, #18
 8002462:	f040 8091 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002466:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800246e:	2b00      	cmp	r3, #0
 8002470:	f040 808a 	bne.w	8002588 <HAL_ADC_ConfigChannel+0x560>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800247c:	d108      	bne.n	8002490 <HAL_ADC_ConfigChannel+0x468>
 800247e:	4b03      	ldr	r3, [pc, #12]	; (800248c <HAL_ADC_ConfigChannel+0x464>)
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	e008      	b.n	8002496 <HAL_ADC_ConfigChannel+0x46e>
 8002484:	83fff000 	.word	0x83fff000
 8002488:	50000300 	.word	0x50000300
 800248c:	50000100 	.word	0x50000100
 8002490:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002494:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	f003 0303 	and.w	r3, r3, #3
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d108      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x48e>
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0301 	and.w	r3, r3, #1
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x48e>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <HAL_ADC_ConfigChannel+0x490>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d150      	bne.n	800255e <HAL_ADC_ConfigChannel+0x536>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024bc:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d010      	beq.n	80024e4 <HAL_ADC_ConfigChannel+0x4bc>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	689b      	ldr	r3, [r3, #8]
 80024c6:	f003 0303 	and.w	r3, r3, #3
 80024ca:	2b01      	cmp	r3, #1
 80024cc:	d107      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d101      	bne.n	80024de <HAL_ADC_ConfigChannel+0x4b6>
 80024da:	2301      	movs	r3, #1
 80024dc:	e000      	b.n	80024e0 <HAL_ADC_ConfigChannel+0x4b8>
 80024de:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d13c      	bne.n	800255e <HAL_ADC_ConfigChannel+0x536>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b10      	cmp	r3, #16
 80024ea:	d11d      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x500>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024f4:	d118      	bne.n	8002528 <HAL_ADC_ConfigChannel+0x500>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80024f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80024fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002500:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002502:	4b27      	ldr	r3, [pc, #156]	; (80025a0 <HAL_ADC_ConfigChannel+0x578>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a27      	ldr	r2, [pc, #156]	; (80025a4 <HAL_ADC_ConfigChannel+0x57c>)
 8002508:	fba2 2303 	umull	r2, r3, r2, r3
 800250c:	0c9a      	lsrs	r2, r3, #18
 800250e:	4613      	mov	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	4413      	add	r3, r2
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002518:	e002      	b.n	8002520 <HAL_ADC_ConfigChannel+0x4f8>
          {
            wait_loop_index--;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	3b01      	subs	r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1f9      	bne.n	800251a <HAL_ADC_ConfigChannel+0x4f2>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002526:	e02e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b11      	cmp	r3, #17
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x520>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002538:	d106      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x520>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800253a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8002542:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002544:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002546:	e01e      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b12      	cmp	r3, #18
 800254e:	d11a      	bne.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002550:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002558:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800255a:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800255c:	e013      	b.n	8002586 <HAL_ADC_ConfigChannel+0x55e>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f043 0220 	orr.w	r2, r3, #32
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002570:	e00a      	b.n	8002588 <HAL_ADC_ConfigChannel+0x560>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f043 0220 	orr.w	r2, r3, #32
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8002584:	e000      	b.n	8002588 <HAL_ADC_ConfigChannel+0x560>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002586:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002590:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8002594:	4618      	mov	r0, r3
 8002596:	376c      	adds	r7, #108	; 0x6c
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr
 80025a0:	2000007c 	.word	0x2000007c
 80025a4:	431bde83 	.word	0x431bde83

080025a8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b099      	sub	sp, #100	; 0x64
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025b2:	2300      	movs	r3, #0
 80025b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025c0:	d102      	bne.n	80025c8 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80025c2:	4b5a      	ldr	r3, [pc, #360]	; (800272c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	e002      	b.n	80025ce <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80025c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80025cc:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d101      	bne.n	80025d8 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80025d4:	2301      	movs	r3, #1
 80025d6:	e0a2      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d101      	bne.n	80025e6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80025e2:	2302      	movs	r3, #2
 80025e4:	e09b      	b.n	800271e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2201      	movs	r2, #1
 80025ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d17f      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	689b      	ldr	r3, [r3, #8]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	d179      	bne.n	80026fc <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002608:	4b49      	ldr	r3, [pc, #292]	; (8002730 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800260a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d040      	beq.n	8002696 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6859      	ldr	r1, [r3, #4]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002626:	035b      	lsls	r3, r3, #13
 8002628:	430b      	orrs	r3, r1
 800262a:	431a      	orrs	r2, r3
 800262c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800262e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f003 0303 	and.w	r3, r3, #3
 800263a:	2b01      	cmp	r3, #1
 800263c:	d108      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0301 	and.w	r3, r3, #1
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800264c:	2301      	movs	r3, #1
 800264e:	e000      	b.n	8002652 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 8002650:	2300      	movs	r3, #0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d15c      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	f003 0303 	and.w	r3, r3, #3
 800265e:	2b01      	cmp	r3, #1
 8002660:	d107      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002662:	68bb      	ldr	r3, [r7, #8]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d101      	bne.n	8002672 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 800266e:	2301      	movs	r3, #1
 8002670:	e000      	b.n	8002674 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 8002672:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002674:	2b00      	cmp	r3, #0
 8002676:	d14b      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002678:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002680:	f023 030f 	bic.w	r3, r3, #15
 8002684:	683a      	ldr	r2, [r7, #0]
 8002686:	6811      	ldr	r1, [r2, #0]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	6892      	ldr	r2, [r2, #8]
 800268c:	430a      	orrs	r2, r1
 800268e:	431a      	orrs	r2, r3
 8002690:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002692:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002694:	e03c      	b.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002696:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800269e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	f003 0303 	and.w	r3, r3, #3
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d108      	bne.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f003 0301 	and.w	r3, r3, #1
 80026ba:	2b01      	cmp	r3, #1
 80026bc:	d101      	bne.n	80026c2 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 80026c2:	2300      	movs	r3, #0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d123      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d107      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0301 	and.w	r3, r3, #1
 80026dc:	2b01      	cmp	r3, #1
 80026de:	d101      	bne.n	80026e4 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 80026e0:	2301      	movs	r3, #1
 80026e2:	e000      	b.n	80026e6 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 80026e4:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d112      	bne.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 80026ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80026f2:	f023 030f 	bic.w	r3, r3, #15
 80026f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80026f8:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80026fa:	e009      	b.n	8002710 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002700:	f043 0220 	orr.w	r2, r3, #32
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800270e:	e000      	b.n	8002712 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002710:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2200      	movs	r2, #0
 8002716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800271a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800271e:	4618      	mov	r0, r3
 8002720:	3764      	adds	r7, #100	; 0x64
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	50000100 	.word	0x50000100
 8002730:	50000300 	.word	0x50000300

08002734 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 0303 	and.w	r3, r3, #3
 800274a:	2b01      	cmp	r3, #1
 800274c:	d108      	bne.n	8002760 <ADC_Enable+0x2c>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0301 	and.w	r3, r3, #1
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <ADC_Enable+0x2c>
 800275c:	2301      	movs	r3, #1
 800275e:	e000      	b.n	8002762 <ADC_Enable+0x2e>
 8002760:	2300      	movs	r3, #0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d143      	bne.n	80027ee <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	4b22      	ldr	r3, [pc, #136]	; (80027f8 <ADC_Enable+0xc4>)
 800276e:	4013      	ands	r3, r2
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00d      	beq.n	8002790 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	f043 0210 	orr.w	r2, r3, #16
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002784:	f043 0201 	orr.w	r2, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	645a      	str	r2, [r3, #68]	; 0x44
      
      return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e02f      	b.n	80027f0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	689a      	ldr	r2, [r3, #8]
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f042 0201 	orr.w	r2, r2, #1
 800279e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80027a0:	f7ff f8ee 	bl	8001980 <HAL_GetTick>
 80027a4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027a6:	e01b      	b.n	80027e0 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80027a8:	f7ff f8ea 	bl	8001980 <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b02      	cmp	r3, #2
 80027b4:	d914      	bls.n	80027e0 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0301 	and.w	r3, r3, #1
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d00d      	beq.n	80027e0 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	f043 0210 	orr.w	r2, r3, #16
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d4:	f043 0201 	orr.w	r2, r3, #1
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e007      	b.n	80027f0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b01      	cmp	r3, #1
 80027ec:	d1dc      	bne.n	80027a8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80027ee:	2300      	movs	r3, #0
}
 80027f0:	4618      	mov	r0, r3
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	8000003f 	.word	0x8000003f

080027fc <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002804:	2300      	movs	r3, #0
 8002806:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	689b      	ldr	r3, [r3, #8]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	2b01      	cmp	r3, #1
 8002814:	d108      	bne.n	8002828 <ADC_Disable+0x2c>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0301 	and.w	r3, r3, #1
 8002820:	2b01      	cmp	r3, #1
 8002822:	d101      	bne.n	8002828 <ADC_Disable+0x2c>
 8002824:	2301      	movs	r3, #1
 8002826:	e000      	b.n	800282a <ADC_Disable+0x2e>
 8002828:	2300      	movs	r3, #0
 800282a:	2b00      	cmp	r3, #0
 800282c:	d047      	beq.n	80028be <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 030d 	and.w	r3, r3, #13
 8002838:	2b01      	cmp	r3, #1
 800283a:	d10f      	bne.n	800285c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	689a      	ldr	r2, [r3, #8]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f042 0202 	orr.w	r2, r2, #2
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2203      	movs	r2, #3
 8002852:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002854:	f7ff f894 	bl	8001980 <HAL_GetTick>
 8002858:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800285a:	e029      	b.n	80028b0 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	f043 0210 	orr.w	r2, r3, #16
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800286c:	f043 0201 	orr.w	r2, r3, #1
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 8002874:	2301      	movs	r3, #1
 8002876:	e023      	b.n	80028c0 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002878:	f7ff f882 	bl	8001980 <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	2b02      	cmp	r3, #2
 8002884:	d914      	bls.n	80028b0 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	689b      	ldr	r3, [r3, #8]
 800288c:	f003 0301 	and.w	r3, r3, #1
 8002890:	2b01      	cmp	r3, #1
 8002892:	d10d      	bne.n	80028b0 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	f043 0210 	orr.w	r2, r3, #16
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028a4:	f043 0201 	orr.w	r2, r3, #1
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e007      	b.n	80028c0 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d0dc      	beq.n	8002878 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80028be:	2300      	movs	r3, #0
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f003 0307 	and.w	r3, r3, #7
 80028d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d8:	4b0c      	ldr	r3, [pc, #48]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028de:	68ba      	ldr	r2, [r7, #8]
 80028e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028fa:	4a04      	ldr	r2, [pc, #16]	; (800290c <__NVIC_SetPriorityGrouping+0x44>)
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	60d3      	str	r3, [r2, #12]
}
 8002900:	bf00      	nop
 8002902:	3714      	adds	r7, #20
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <__NVIC_GetPriorityGrouping+0x18>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	0a1b      	lsrs	r3, r3, #8
 800291a:	f003 0307 	and.w	r3, r3, #7
}
 800291e:	4618      	mov	r0, r3
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800292c:	b480      	push	{r7}
 800292e:	b083      	sub	sp, #12
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	6039      	str	r1, [r7, #0]
 8002936:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800293c:	2b00      	cmp	r3, #0
 800293e:	db0a      	blt.n	8002956 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	b2da      	uxtb	r2, r3
 8002944:	490c      	ldr	r1, [pc, #48]	; (8002978 <__NVIC_SetPriority+0x4c>)
 8002946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800294a:	0112      	lsls	r2, r2, #4
 800294c:	b2d2      	uxtb	r2, r2
 800294e:	440b      	add	r3, r1
 8002950:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002954:	e00a      	b.n	800296c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002956:	683b      	ldr	r3, [r7, #0]
 8002958:	b2da      	uxtb	r2, r3
 800295a:	4908      	ldr	r1, [pc, #32]	; (800297c <__NVIC_SetPriority+0x50>)
 800295c:	79fb      	ldrb	r3, [r7, #7]
 800295e:	f003 030f 	and.w	r3, r3, #15
 8002962:	3b04      	subs	r3, #4
 8002964:	0112      	lsls	r2, r2, #4
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	440b      	add	r3, r1
 800296a:	761a      	strb	r2, [r3, #24]
}
 800296c:	bf00      	nop
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr
 8002978:	e000e100 	.word	0xe000e100
 800297c:	e000ed00 	.word	0xe000ed00

08002980 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002980:	b480      	push	{r7}
 8002982:	b089      	sub	sp, #36	; 0x24
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f1c3 0307 	rsb	r3, r3, #7
 800299a:	2b04      	cmp	r3, #4
 800299c:	bf28      	it	cs
 800299e:	2304      	movcs	r3, #4
 80029a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029a2:	69fb      	ldr	r3, [r7, #28]
 80029a4:	3304      	adds	r3, #4
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d902      	bls.n	80029b0 <NVIC_EncodePriority+0x30>
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	3b03      	subs	r3, #3
 80029ae:	e000      	b.n	80029b2 <NVIC_EncodePriority+0x32>
 80029b0:	2300      	movs	r3, #0
 80029b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029b4:	f04f 32ff 	mov.w	r2, #4294967295
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	fa02 f303 	lsl.w	r3, r2, r3
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	401a      	ands	r2, r3
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029c8:	f04f 31ff 	mov.w	r1, #4294967295
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa01 f303 	lsl.w	r3, r1, r3
 80029d2:	43d9      	mvns	r1, r3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d8:	4313      	orrs	r3, r2
         );
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3724      	adds	r7, #36	; 0x24
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80029f8:	d301      	bcc.n	80029fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80029fa:	2301      	movs	r3, #1
 80029fc:	e00f      	b.n	8002a1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <SysTick_Config+0x40>)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3b01      	subs	r3, #1
 8002a04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a06:	210f      	movs	r1, #15
 8002a08:	f04f 30ff 	mov.w	r0, #4294967295
 8002a0c:	f7ff ff8e 	bl	800292c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <SysTick_Config+0x40>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a16:	4b04      	ldr	r3, [pc, #16]	; (8002a28 <SysTick_Config+0x40>)
 8002a18:	2207      	movs	r2, #7
 8002a1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a1c:	2300      	movs	r3, #0
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	e000e010 	.word	0xe000e010

08002a2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff ff47 	bl	80028c8 <__NVIC_SetPriorityGrouping>
}
 8002a3a:	bf00      	nop
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b086      	sub	sp, #24
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	60b9      	str	r1, [r7, #8]
 8002a4c:	607a      	str	r2, [r7, #4]
 8002a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a54:	f7ff ff5c 	bl	8002910 <__NVIC_GetPriorityGrouping>
 8002a58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a5a:	687a      	ldr	r2, [r7, #4]
 8002a5c:	68b9      	ldr	r1, [r7, #8]
 8002a5e:	6978      	ldr	r0, [r7, #20]
 8002a60:	f7ff ff8e 	bl	8002980 <NVIC_EncodePriority>
 8002a64:	4602      	mov	r2, r0
 8002a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f7ff ff5d 	bl	800292c <__NVIC_SetPriority>
}
 8002a72:	bf00      	nop
 8002a74:	3718      	adds	r7, #24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff ffb0 	bl	80029e8 <SysTick_Config>
 8002a88:	4603      	mov	r3, r0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3708      	adds	r7, #8
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
	...

08002a94 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a94:	b480      	push	{r7}
 8002a96:	b087      	sub	sp, #28
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
 8002a9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002aa2:	e14e      	b.n	8002d42 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681a      	ldr	r2, [r3, #0]
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8140 	beq.w	8002d3c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d005      	beq.n	8002ad4 <HAL_GPIO_Init+0x40>
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f003 0303 	and.w	r3, r3, #3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d130      	bne.n	8002b36 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	2203      	movs	r2, #3
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	693a      	ldr	r2, [r7, #16]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	68da      	ldr	r2, [r3, #12]
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	693a      	ldr	r2, [r7, #16]
 8002b02:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b12:	43db      	mvns	r3, r3
 8002b14:	693a      	ldr	r2, [r7, #16]
 8002b16:	4013      	ands	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	091b      	lsrs	r3, r3, #4
 8002b20:	f003 0201 	and.w	r2, r3, #1
 8002b24:	697b      	ldr	r3, [r7, #20]
 8002b26:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2a:	693a      	ldr	r2, [r7, #16]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f003 0303 	and.w	r3, r3, #3
 8002b3e:	2b03      	cmp	r3, #3
 8002b40:	d017      	beq.n	8002b72 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	2203      	movs	r2, #3
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	43db      	mvns	r3, r3
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4013      	ands	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	697b      	ldr	r3, [r7, #20]
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	fa02 f303 	lsl.w	r3, r2, r3
 8002b66:	693a      	ldr	r2, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	685b      	ldr	r3, [r3, #4]
 8002b76:	f003 0303 	and.w	r3, r3, #3
 8002b7a:	2b02      	cmp	r3, #2
 8002b7c:	d123      	bne.n	8002bc6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	08da      	lsrs	r2, r3, #3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	3208      	adds	r2, #8
 8002b86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	220f      	movs	r2, #15
 8002b96:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9a:	43db      	mvns	r3, r3
 8002b9c:	693a      	ldr	r2, [r7, #16]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f003 0307 	and.w	r3, r3, #7
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb2:	693a      	ldr	r2, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	08da      	lsrs	r2, r3, #3
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3208      	adds	r2, #8
 8002bc0:	6939      	ldr	r1, [r7, #16]
 8002bc2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	005b      	lsls	r3, r3, #1
 8002bd0:	2203      	movs	r2, #3
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	693a      	ldr	r2, [r7, #16]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0203 	and.w	r2, r3, #3
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	693a      	ldr	r2, [r7, #16]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	685b      	ldr	r3, [r3, #4]
 8002bfe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	f000 809a 	beq.w	8002d3c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c08:	4b55      	ldr	r3, [pc, #340]	; (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c0a:	699b      	ldr	r3, [r3, #24]
 8002c0c:	4a54      	ldr	r2, [pc, #336]	; (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	6193      	str	r3, [r2, #24]
 8002c14:	4b52      	ldr	r3, [pc, #328]	; (8002d60 <HAL_GPIO_Init+0x2cc>)
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002c20:	4a50      	ldr	r2, [pc, #320]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	089b      	lsrs	r3, r3, #2
 8002c26:	3302      	adds	r3, #2
 8002c28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c2c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f003 0303 	and.w	r3, r3, #3
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	220f      	movs	r2, #15
 8002c38:	fa02 f303 	lsl.w	r3, r2, r3
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002c4a:	d013      	beq.n	8002c74 <HAL_GPIO_Init+0x1e0>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a46      	ldr	r2, [pc, #280]	; (8002d68 <HAL_GPIO_Init+0x2d4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00d      	beq.n	8002c70 <HAL_GPIO_Init+0x1dc>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a45      	ldr	r2, [pc, #276]	; (8002d6c <HAL_GPIO_Init+0x2d8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d007      	beq.n	8002c6c <HAL_GPIO_Init+0x1d8>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4a44      	ldr	r2, [pc, #272]	; (8002d70 <HAL_GPIO_Init+0x2dc>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_GPIO_Init+0x1d4>
 8002c64:	2303      	movs	r3, #3
 8002c66:	e006      	b.n	8002c76 <HAL_GPIO_Init+0x1e2>
 8002c68:	2305      	movs	r3, #5
 8002c6a:	e004      	b.n	8002c76 <HAL_GPIO_Init+0x1e2>
 8002c6c:	2302      	movs	r3, #2
 8002c6e:	e002      	b.n	8002c76 <HAL_GPIO_Init+0x1e2>
 8002c70:	2301      	movs	r3, #1
 8002c72:	e000      	b.n	8002c76 <HAL_GPIO_Init+0x1e2>
 8002c74:	2300      	movs	r3, #0
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	f002 0203 	and.w	r2, r2, #3
 8002c7c:	0092      	lsls	r2, r2, #2
 8002c7e:	4093      	lsls	r3, r2
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	4313      	orrs	r3, r2
 8002c84:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c86:	4937      	ldr	r1, [pc, #220]	; (8002d64 <HAL_GPIO_Init+0x2d0>)
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	089b      	lsrs	r3, r3, #2
 8002c8c:	3302      	adds	r3, #2
 8002c8e:	693a      	ldr	r2, [r7, #16]
 8002c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c94:	4b37      	ldr	r3, [pc, #220]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d003      	beq.n	8002cb8 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8002cb0:	693a      	ldr	r2, [r7, #16]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002cb8:	4a2e      	ldr	r2, [pc, #184]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002cbe:	4b2d      	ldr	r3, [pc, #180]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	43db      	mvns	r3, r3
 8002cc8:	693a      	ldr	r2, [r7, #16]
 8002cca:	4013      	ands	r3, r2
 8002ccc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	685b      	ldr	r3, [r3, #4]
 8002cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002cda:	693a      	ldr	r2, [r7, #16]
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002ce4:	693b      	ldr	r3, [r7, #16]
 8002ce6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ce8:	4b22      	ldr	r3, [pc, #136]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d003      	beq.n	8002d0c <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002d0c:	4a19      	ldr	r2, [pc, #100]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d003      	beq.n	8002d36 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8002d2e:	693a      	ldr	r2, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002d36:	4a0f      	ldr	r2, [pc, #60]	; (8002d74 <HAL_GPIO_Init+0x2e0>)
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	f47f aea9 	bne.w	8002aa4 <HAL_GPIO_Init+0x10>
  }
}
 8002d52:	bf00      	nop
 8002d54:	bf00      	nop
 8002d56:	371c      	adds	r7, #28
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5e:	4770      	bx	lr
 8002d60:	40021000 	.word	0x40021000
 8002d64:	40010000 	.word	0x40010000
 8002d68:	48000400 	.word	0x48000400
 8002d6c:	48000800 	.word	0x48000800
 8002d70:	48000c00 	.word	0x48000c00
 8002d74:	40010400 	.word	0x40010400

08002d78 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	460b      	mov	r3, r1
 8002d82:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	691a      	ldr	r2, [r3, #16]
 8002d88:	887b      	ldrh	r3, [r7, #2]
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d002      	beq.n	8002d96 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d90:	2301      	movs	r3, #1
 8002d92:	73fb      	strb	r3, [r7, #15]
 8002d94:	e001      	b.n	8002d9a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	3714      	adds	r7, #20
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da8:	b480      	push	{r7}
 8002daa:	b083      	sub	sp, #12
 8002dac:	af00      	add	r7, sp, #0
 8002dae:	6078      	str	r0, [r7, #4]
 8002db0:	460b      	mov	r3, r1
 8002db2:	807b      	strh	r3, [r7, #2]
 8002db4:	4613      	mov	r3, r2
 8002db6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db8:	787b      	ldrb	r3, [r7, #1]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d003      	beq.n	8002dc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002dbe:	887a      	ldrh	r2, [r7, #2]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dc4:	e002      	b.n	8002dcc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002dc6:	887a      	ldrh	r2, [r7, #2]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr

08002dd8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002de4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002de8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002dea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002dee:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	f001 b823 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dfe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002e02:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 817d 	beq.w	800310e <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002e14:	4bbc      	ldr	r3, [pc, #752]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f003 030c 	and.w	r3, r3, #12
 8002e1c:	2b04      	cmp	r3, #4
 8002e1e:	d00c      	beq.n	8002e3a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e20:	4bb9      	ldr	r3, [pc, #740]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f003 030c 	and.w	r3, r3, #12
 8002e28:	2b08      	cmp	r3, #8
 8002e2a:	d15c      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x10e>
 8002e2c:	4bb6      	ldr	r3, [pc, #728]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e38:	d155      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x10e>
 8002e3a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e3e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e4e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e52:	fab3 f383 	clz	r3, r3
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	095b      	lsrs	r3, r3, #5
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	f043 0301 	orr.w	r3, r3, #1
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d102      	bne.n	8002e6c <HAL_RCC_OscConfig+0x94>
 8002e66:	4ba8      	ldr	r3, [pc, #672]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	e015      	b.n	8002e98 <HAL_RCC_OscConfig+0xc0>
 8002e6c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e70:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e74:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8002e78:	fa93 f3a3 	rbit	r3, r3
 8002e7c:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002e80:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e84:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002e88:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002e8c:	fa93 f3a3 	rbit	r3, r3
 8002e90:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8002e94:	4b9c      	ldr	r3, [pc, #624]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e9c:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002ea0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8002ea4:	fa92 f2a2 	rbit	r2, r2
 8002ea8:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002eac:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002eb0:	fab2 f282 	clz	r2, r2
 8002eb4:	b2d2      	uxtb	r2, r2
 8002eb6:	f042 0220 	orr.w	r2, r2, #32
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	f002 021f 	and.w	r2, r2, #31
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	fa01 f202 	lsl.w	r2, r1, r2
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 811f 	beq.w	800310c <HAL_RCC_OscConfig+0x334>
 8002ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8116 	bne.w	800310c <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	f000 bfaf 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ee6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002eea:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ef6:	d106      	bne.n	8002f06 <HAL_RCC_OscConfig+0x12e>
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4a82      	ldr	r2, [pc, #520]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f02:	6013      	str	r3, [r2, #0]
 8002f04:	e036      	b.n	8002f74 <HAL_RCC_OscConfig+0x19c>
 8002f06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f0a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10c      	bne.n	8002f30 <HAL_RCC_OscConfig+0x158>
 8002f16:	4b7c      	ldr	r3, [pc, #496]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	4a7b      	ldr	r2, [pc, #492]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f20:	6013      	str	r3, [r2, #0]
 8002f22:	4b79      	ldr	r3, [pc, #484]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a78      	ldr	r2, [pc, #480]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	e021      	b.n	8002f74 <HAL_RCC_OscConfig+0x19c>
 8002f30:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f34:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f40:	d10c      	bne.n	8002f5c <HAL_RCC_OscConfig+0x184>
 8002f42:	4b71      	ldr	r3, [pc, #452]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4a70      	ldr	r2, [pc, #448]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f4c:	6013      	str	r3, [r2, #0]
 8002f4e:	4b6e      	ldr	r3, [pc, #440]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a6d      	ldr	r2, [pc, #436]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f58:	6013      	str	r3, [r2, #0]
 8002f5a:	e00b      	b.n	8002f74 <HAL_RCC_OscConfig+0x19c>
 8002f5c:	4b6a      	ldr	r3, [pc, #424]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a69      	ldr	r2, [pc, #420]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	4b67      	ldr	r3, [pc, #412]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4a66      	ldr	r2, [pc, #408]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f72:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f74:	4b64      	ldr	r3, [pc, #400]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f78:	f023 020f 	bic.w	r2, r3, #15
 8002f7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f80:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	495f      	ldr	r1, [pc, #380]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f8e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002f92:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d059      	beq.n	8003052 <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9e:	f7fe fcef 	bl	8001980 <HAL_GetTick>
 8002fa2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fcea 	bl	8001980 <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fb2:	1ad3      	subs	r3, r2, r3
 8002fb4:	2b64      	cmp	r3, #100	; 0x64
 8002fb6:	d902      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	f000 bf43 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 8002fbe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002fc2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8002fca:	fa93 f3a3 	rbit	r3, r3
 8002fce:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002fd2:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	fab3 f383 	clz	r3, r3
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	095b      	lsrs	r3, r3, #5
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	f043 0301 	orr.w	r3, r3, #1
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d102      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x218>
 8002fea:	4b47      	ldr	r3, [pc, #284]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	e015      	b.n	800301c <HAL_RCC_OscConfig+0x244>
 8002ff0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002ff4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8003004:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003008:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800300c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8003010:	fa93 f3a3 	rbit	r3, r3
 8003014:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8003018:	4b3b      	ldr	r3, [pc, #236]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003020:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8003024:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8003028:	fa92 f2a2 	rbit	r2, r2
 800302c:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8003030:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8003034:	fab2 f282 	clz	r2, r2
 8003038:	b2d2      	uxtb	r2, r2
 800303a:	f042 0220 	orr.w	r2, r2, #32
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f002 021f 	and.w	r2, r2, #31
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	4013      	ands	r3, r2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ab      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x1d0>
 8003050:	e05d      	b.n	800310e <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003052:	f7fe fc95 	bl	8001980 <HAL_GetTick>
 8003056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800305a:	e00a      	b.n	8003072 <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800305c:	f7fe fc90 	bl	8001980 <HAL_GetTick>
 8003060:	4602      	mov	r2, r0
 8003062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b64      	cmp	r3, #100	; 0x64
 800306a:	d902      	bls.n	8003072 <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	f000 bee9 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003072:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003076:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 800307e:	fa93 f3a3 	rbit	r3, r3
 8003082:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8003086:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800308a:	fab3 f383 	clz	r3, r3
 800308e:	b2db      	uxtb	r3, r3
 8003090:	095b      	lsrs	r3, r3, #5
 8003092:	b2db      	uxtb	r3, r3
 8003094:	f043 0301 	orr.w	r3, r3, #1
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b01      	cmp	r3, #1
 800309c:	d102      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2cc>
 800309e:	4b1a      	ldr	r3, [pc, #104]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	e015      	b.n	80030d0 <HAL_RCC_OscConfig+0x2f8>
 80030a4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030a8:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80030b8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80030bc:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80030c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80030c4:	fa93 f3a3 	rbit	r3, r3
 80030c8:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 80030cc:	4b0e      	ldr	r3, [pc, #56]	; (8003108 <HAL_RCC_OscConfig+0x330>)
 80030ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80030d4:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 80030d8:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80030dc:	fa92 f2a2 	rbit	r2, r2
 80030e0:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 80030e4:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f042 0220 	orr.w	r2, r2, #32
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f002 021f 	and.w	r2, r2, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d1ab      	bne.n	800305c <HAL_RCC_OscConfig+0x284>
 8003104:	e003      	b.n	800310e <HAL_RCC_OscConfig+0x336>
 8003106:	bf00      	nop
 8003108:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800310c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800310e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003112:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 817d 	beq.w	800341e <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003124:	4ba6      	ldr	r3, [pc, #664]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f003 030c 	and.w	r3, r3, #12
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003130:	4ba3      	ldr	r3, [pc, #652]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 8003132:	685b      	ldr	r3, [r3, #4]
 8003134:	f003 030c 	and.w	r3, r3, #12
 8003138:	2b08      	cmp	r3, #8
 800313a:	d172      	bne.n	8003222 <HAL_RCC_OscConfig+0x44a>
 800313c:	4ba0      	ldr	r3, [pc, #640]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003144:	2b00      	cmp	r3, #0
 8003146:	d16c      	bne.n	8003222 <HAL_RCC_OscConfig+0x44a>
 8003148:	2302      	movs	r3, #2
 800314a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800314e:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 800315a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	fab3 f383 	clz	r3, r3
 8003162:	b2db      	uxtb	r3, r3
 8003164:	095b      	lsrs	r3, r3, #5
 8003166:	b2db      	uxtb	r3, r3
 8003168:	f043 0301 	orr.w	r3, r3, #1
 800316c:	b2db      	uxtb	r3, r3
 800316e:	2b01      	cmp	r3, #1
 8003170:	d102      	bne.n	8003178 <HAL_RCC_OscConfig+0x3a0>
 8003172:	4b93      	ldr	r3, [pc, #588]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	e013      	b.n	80031a0 <HAL_RCC_OscConfig+0x3c8>
 8003178:	2302      	movs	r3, #2
 800317a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800317e:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8003182:	fa93 f3a3 	rbit	r3, r3
 8003186:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800318a:	2302      	movs	r3, #2
 800318c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8003190:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8003194:	fa93 f3a3 	rbit	r3, r3
 8003198:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 800319c:	4b88      	ldr	r3, [pc, #544]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 800319e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a0:	2202      	movs	r2, #2
 80031a2:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 80031a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80031aa:	fa92 f2a2 	rbit	r2, r2
 80031ae:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 80031b2:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80031b6:	fab2 f282 	clz	r2, r2
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	f042 0220 	orr.w	r2, r2, #32
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	f002 021f 	and.w	r2, r2, #31
 80031c6:	2101      	movs	r1, #1
 80031c8:	fa01 f202 	lsl.w	r2, r1, r2
 80031cc:	4013      	ands	r3, r2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <HAL_RCC_OscConfig+0x410>
 80031d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031d6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	691b      	ldr	r3, [r3, #16]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d002      	beq.n	80031e8 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	f000 be2e 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031e8:	4b75      	ldr	r3, [pc, #468]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80031f4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	695b      	ldr	r3, [r3, #20]
 80031fc:	21f8      	movs	r1, #248	; 0xf8
 80031fe:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8003206:	fa91 f1a1 	rbit	r1, r1
 800320a:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800320e:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8003212:	fab1 f181 	clz	r1, r1
 8003216:	b2c9      	uxtb	r1, r1
 8003218:	408b      	lsls	r3, r1
 800321a:	4969      	ldr	r1, [pc, #420]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 800321c:	4313      	orrs	r3, r2
 800321e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003220:	e0fd      	b.n	800341e <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003222:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003226:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	691b      	ldr	r3, [r3, #16]
 800322e:	2b00      	cmp	r3, #0
 8003230:	f000 8088 	beq.w	8003344 <HAL_RCC_OscConfig+0x56c>
 8003234:	2301      	movs	r3, #1
 8003236:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800323a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800323e:	fa93 f3a3 	rbit	r3, r3
 8003242:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8003246:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800324a:	fab3 f383 	clz	r3, r3
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003254:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	461a      	mov	r2, r3
 800325c:	2301      	movs	r3, #1
 800325e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fb8e 	bl	8001980 <HAL_GetTick>
 8003264:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003268:	e00a      	b.n	8003280 <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800326a:	f7fe fb89 	bl	8001980 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	2b02      	cmp	r3, #2
 8003278:	d902      	bls.n	8003280 <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	f000 bde2 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003280:	2302      	movs	r3, #2
 8003282:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800328a:	fa93 f3a3 	rbit	r3, r3
 800328e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8003292:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	fab3 f383 	clz	r3, r3
 800329a:	b2db      	uxtb	r3, r3
 800329c:	095b      	lsrs	r3, r3, #5
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d102      	bne.n	80032b0 <HAL_RCC_OscConfig+0x4d8>
 80032aa:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	e013      	b.n	80032d8 <HAL_RCC_OscConfig+0x500>
 80032b0:	2302      	movs	r3, #2
 80032b2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80032ba:	fa93 f3a3 	rbit	r3, r3
 80032be:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80032c2:	2302      	movs	r3, #2
 80032c4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80032c8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80032cc:	fa93 f3a3 	rbit	r3, r3
 80032d0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 80032d4:	4b3a      	ldr	r3, [pc, #232]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2202      	movs	r2, #2
 80032da:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80032de:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80032e2:	fa92 f2a2 	rbit	r2, r2
 80032e6:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 80032ea:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 80032ee:	fab2 f282 	clz	r2, r2
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	f042 0220 	orr.w	r2, r2, #32
 80032f8:	b2d2      	uxtb	r2, r2
 80032fa:	f002 021f 	and.w	r2, r2, #31
 80032fe:	2101      	movs	r1, #1
 8003300:	fa01 f202 	lsl.w	r2, r1, r2
 8003304:	4013      	ands	r3, r2
 8003306:	2b00      	cmp	r3, #0
 8003308:	d0af      	beq.n	800326a <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003312:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003316:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	695b      	ldr	r3, [r3, #20]
 800331e:	21f8      	movs	r1, #248	; 0xf8
 8003320:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8003328:	fa91 f1a1 	rbit	r1, r1
 800332c:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8003330:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8003334:	fab1 f181 	clz	r1, r1
 8003338:	b2c9      	uxtb	r1, r1
 800333a:	408b      	lsls	r3, r1
 800333c:	4920      	ldr	r1, [pc, #128]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 800333e:	4313      	orrs	r3, r2
 8003340:	600b      	str	r3, [r1, #0]
 8003342:	e06c      	b.n	800341e <HAL_RCC_OscConfig+0x646>
 8003344:	2301      	movs	r3, #1
 8003346:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8003356:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800335a:	fab3 f383 	clz	r3, r3
 800335e:	b2db      	uxtb	r3, r3
 8003360:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003364:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	461a      	mov	r2, r3
 800336c:	2300      	movs	r3, #0
 800336e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7fe fb06 	bl	8001980 <HAL_GetTick>
 8003374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003378:	e00a      	b.n	8003390 <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337a:	f7fe fb01 	bl	8001980 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d902      	bls.n	8003390 <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	f000 bd5a 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003390:	2302      	movs	r3, #2
 8003392:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003396:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 80033a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a6:	fab3 f383 	clz	r3, r3
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	095b      	lsrs	r3, r3, #5
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	f043 0301 	orr.w	r3, r3, #1
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	2b01      	cmp	r3, #1
 80033b8:	d104      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5ec>
 80033ba:	4b01      	ldr	r3, [pc, #4]	; (80033c0 <HAL_RCC_OscConfig+0x5e8>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	e015      	b.n	80033ec <HAL_RCC_OscConfig+0x614>
 80033c0:	40021000 	.word	0x40021000
 80033c4:	2302      	movs	r3, #2
 80033c6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033ca:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80033ce:	fa93 f3a3 	rbit	r3, r3
 80033d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80033d6:	2302      	movs	r3, #2
 80033d8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80033dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80033e8:	4bc8      	ldr	r3, [pc, #800]	; (800370c <HAL_RCC_OscConfig+0x934>)
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2202      	movs	r2, #2
 80033ee:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 80033f2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80033f6:	fa92 f2a2 	rbit	r2, r2
 80033fa:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80033fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8003402:	fab2 f282 	clz	r2, r2
 8003406:	b2d2      	uxtb	r2, r2
 8003408:	f042 0220 	orr.w	r2, r2, #32
 800340c:	b2d2      	uxtb	r2, r2
 800340e:	f002 021f 	and.w	r2, r2, #31
 8003412:	2101      	movs	r1, #1
 8003414:	fa01 f202 	lsl.w	r2, r1, r2
 8003418:	4013      	ands	r3, r2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d1ad      	bne.n	800337a <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800341e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003422:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 8110 	beq.w	8003654 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003434:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003438:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	699b      	ldr	r3, [r3, #24]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d079      	beq.n	8003538 <HAL_RCC_OscConfig+0x760>
 8003444:	2301      	movs	r3, #1
 8003446:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8003456:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800345a:	fab3 f383 	clz	r3, r3
 800345e:	b2db      	uxtb	r3, r3
 8003460:	461a      	mov	r2, r3
 8003462:	4bab      	ldr	r3, [pc, #684]	; (8003710 <HAL_RCC_OscConfig+0x938>)
 8003464:	4413      	add	r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	461a      	mov	r2, r3
 800346a:	2301      	movs	r3, #1
 800346c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800346e:	f7fe fa87 	bl	8001980 <HAL_GetTick>
 8003472:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003476:	e00a      	b.n	800348e <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003478:	f7fe fa82 	bl	8001980 <HAL_GetTick>
 800347c:	4602      	mov	r2, r0
 800347e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003482:	1ad3      	subs	r3, r2, r3
 8003484:	2b02      	cmp	r3, #2
 8003486:	d902      	bls.n	800348e <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8003488:	2303      	movs	r3, #3
 800348a:	f000 bcdb 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 800348e:	2302      	movs	r3, #2
 8003490:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8003498:	fa93 f3a3 	rbit	r3, r3
 800349c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034a0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034a4:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034a8:	2202      	movs	r2, #2
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034b0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	fa93 f2a3 	rbit	r2, r3
 80034ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034be:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80034c2:	601a      	str	r2, [r3, #0]
 80034c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034c8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034cc:	2202      	movs	r2, #2
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	fa93 f2a3 	rbit	r2, r3
 80034de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034e2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80034e6:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034e8:	4b88      	ldr	r3, [pc, #544]	; (800370c <HAL_RCC_OscConfig+0x934>)
 80034ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034f0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80034f4:	2102      	movs	r1, #2
 80034f6:	6019      	str	r1, [r3, #0]
 80034f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80034fc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	fa93 f1a3 	rbit	r1, r3
 8003506:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800350a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800350e:	6019      	str	r1, [r3, #0]
  return result;
 8003510:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003514:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	fab3 f383 	clz	r3, r3
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003524:	b2db      	uxtb	r3, r3
 8003526:	f003 031f 	and.w	r3, r3, #31
 800352a:	2101      	movs	r1, #1
 800352c:	fa01 f303 	lsl.w	r3, r1, r3
 8003530:	4013      	ands	r3, r2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0a0      	beq.n	8003478 <HAL_RCC_OscConfig+0x6a0>
 8003536:	e08d      	b.n	8003654 <HAL_RCC_OscConfig+0x87c>
 8003538:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800353c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8003540:	2201      	movs	r2, #1
 8003542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003544:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003548:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	fa93 f2a3 	rbit	r2, r3
 8003552:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003556:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800355a:	601a      	str	r2, [r3, #0]
  return result;
 800355c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003560:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8003564:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	fab3 f383 	clz	r3, r3
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	4b68      	ldr	r3, [pc, #416]	; (8003710 <HAL_RCC_OscConfig+0x938>)
 8003570:	4413      	add	r3, r2
 8003572:	009b      	lsls	r3, r3, #2
 8003574:	461a      	mov	r2, r3
 8003576:	2300      	movs	r3, #0
 8003578:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800357a:	f7fe fa01 	bl	8001980 <HAL_GetTick>
 800357e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003582:	e00a      	b.n	800359a <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003584:	f7fe f9fc 	bl	8001980 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800358e:	1ad3      	subs	r3, r2, r3
 8003590:	2b02      	cmp	r3, #2
 8003592:	d902      	bls.n	800359a <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	f000 bc55 	b.w	8003e44 <HAL_RCC_OscConfig+0x106c>
 800359a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800359e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80035a2:	2202      	movs	r2, #2
 80035a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035aa:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	fa93 f2a3 	rbit	r2, r3
 80035b4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035b8:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80035bc:	601a      	str	r2, [r3, #0]
 80035be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035c2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035c6:	2202      	movs	r2, #2
 80035c8:	601a      	str	r2, [r3, #0]
 80035ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035ce:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	fa93 f2a3 	rbit	r2, r3
 80035d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035ea:	2202      	movs	r2, #2
 80035ec:	601a      	str	r2, [r3, #0]
 80035ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80035f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	fa93 f2a3 	rbit	r2, r3
 80035fc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003600:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8003604:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003606:	4b41      	ldr	r3, [pc, #260]	; (800370c <HAL_RCC_OscConfig+0x934>)
 8003608:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800360a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800360e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8003612:	2102      	movs	r1, #2
 8003614:	6019      	str	r1, [r3, #0]
 8003616:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800361a:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	fa93 f1a3 	rbit	r1, r3
 8003624:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003628:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800362c:	6019      	str	r1, [r3, #0]
  return result;
 800362e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003632:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	fab3 f383 	clz	r3, r3
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8003642:	b2db      	uxtb	r3, r3
 8003644:	f003 031f 	and.w	r3, r3, #31
 8003648:	2101      	movs	r1, #1
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	4013      	ands	r3, r2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d197      	bne.n	8003584 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003654:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003658:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0304 	and.w	r3, r3, #4
 8003664:	2b00      	cmp	r3, #0
 8003666:	f000 81a1 	beq.w	80039ac <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 800366a:	2300      	movs	r3, #0
 800366c:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003670:	4b26      	ldr	r3, [pc, #152]	; (800370c <HAL_RCC_OscConfig+0x934>)
 8003672:	69db      	ldr	r3, [r3, #28]
 8003674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003678:	2b00      	cmp	r3, #0
 800367a:	d116      	bne.n	80036aa <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800367c:	4b23      	ldr	r3, [pc, #140]	; (800370c <HAL_RCC_OscConfig+0x934>)
 800367e:	69db      	ldr	r3, [r3, #28]
 8003680:	4a22      	ldr	r2, [pc, #136]	; (800370c <HAL_RCC_OscConfig+0x934>)
 8003682:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003686:	61d3      	str	r3, [r2, #28]
 8003688:	4b20      	ldr	r3, [pc, #128]	; (800370c <HAL_RCC_OscConfig+0x934>)
 800368a:	69db      	ldr	r3, [r3, #28]
 800368c:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8003690:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003694:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8003698:	601a      	str	r2, [r3, #0]
 800369a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800369e:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 80036a2:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80036a4:	2301      	movs	r3, #1
 80036a6:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_RCC_OscConfig+0x93c>)
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d11a      	bne.n	80036ec <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036b6:	4b17      	ldr	r3, [pc, #92]	; (8003714 <HAL_RCC_OscConfig+0x93c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a16      	ldr	r2, [pc, #88]	; (8003714 <HAL_RCC_OscConfig+0x93c>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036c0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036c2:	f7fe f95d 	bl	8001980 <HAL_GetTick>
 80036c6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036ca:	e009      	b.n	80036e0 <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036cc:	f7fe f958 	bl	8001980 <HAL_GetTick>
 80036d0:	4602      	mov	r2, r0
 80036d2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	; 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e3b1      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCC_OscConfig+0x93c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d0ef      	beq.n	80036cc <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80036f0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d10d      	bne.n	8003718 <HAL_RCC_OscConfig+0x940>
 80036fc:	4b03      	ldr	r3, [pc, #12]	; (800370c <HAL_RCC_OscConfig+0x934>)
 80036fe:	6a1b      	ldr	r3, [r3, #32]
 8003700:	4a02      	ldr	r2, [pc, #8]	; (800370c <HAL_RCC_OscConfig+0x934>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6213      	str	r3, [r2, #32]
 8003708:	e03c      	b.n	8003784 <HAL_RCC_OscConfig+0x9ac>
 800370a:	bf00      	nop
 800370c:	40021000 	.word	0x40021000
 8003710:	10908120 	.word	0x10908120
 8003714:	40007000 	.word	0x40007000
 8003718:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800371c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10c      	bne.n	8003742 <HAL_RCC_OscConfig+0x96a>
 8003728:	4bc1      	ldr	r3, [pc, #772]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	4ac0      	ldr	r2, [pc, #768]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800372e:	f023 0301 	bic.w	r3, r3, #1
 8003732:	6213      	str	r3, [r2, #32]
 8003734:	4bbe      	ldr	r3, [pc, #760]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	4abd      	ldr	r2, [pc, #756]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800373a:	f023 0304 	bic.w	r3, r3, #4
 800373e:	6213      	str	r3, [r2, #32]
 8003740:	e020      	b.n	8003784 <HAL_RCC_OscConfig+0x9ac>
 8003742:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003746:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	2b05      	cmp	r3, #5
 8003750:	d10c      	bne.n	800376c <HAL_RCC_OscConfig+0x994>
 8003752:	4bb7      	ldr	r3, [pc, #732]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	4ab6      	ldr	r2, [pc, #728]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003758:	f043 0304 	orr.w	r3, r3, #4
 800375c:	6213      	str	r3, [r2, #32]
 800375e:	4bb4      	ldr	r3, [pc, #720]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003760:	6a1b      	ldr	r3, [r3, #32]
 8003762:	4ab3      	ldr	r2, [pc, #716]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003764:	f043 0301 	orr.w	r3, r3, #1
 8003768:	6213      	str	r3, [r2, #32]
 800376a:	e00b      	b.n	8003784 <HAL_RCC_OscConfig+0x9ac>
 800376c:	4bb0      	ldr	r3, [pc, #704]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	4aaf      	ldr	r2, [pc, #700]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003772:	f023 0301 	bic.w	r3, r3, #1
 8003776:	6213      	str	r3, [r2, #32]
 8003778:	4bad      	ldr	r3, [pc, #692]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	4aac      	ldr	r2, [pc, #688]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800377e:	f023 0304 	bic.w	r3, r3, #4
 8003782:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003784:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003788:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8081 	beq.w	8003898 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003796:	f7fe f8f3 	bl	8001980 <HAL_GetTick>
 800379a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037a0:	f7fe f8ee 	bl	8001980 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e345      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
 80037b8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037bc:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80037c0:	2202      	movs	r2, #2
 80037c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037c8:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037d6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037e0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037e4:	2202      	movs	r2, #2
 80037e6:	601a      	str	r2, [r3, #0]
 80037e8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037ec:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	fa93 f2a3 	rbit	r2, r3
 80037f6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80037fa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80037fe:	601a      	str	r2, [r3, #0]
  return result;
 8003800:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003804:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003808:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	fab3 f383 	clz	r3, r3
 800380e:	b2db      	uxtb	r3, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	b2db      	uxtb	r3, r3
 8003814:	f043 0302 	orr.w	r3, r3, #2
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d102      	bne.n	8003824 <HAL_RCC_OscConfig+0xa4c>
 800381e:	4b84      	ldr	r3, [pc, #528]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003820:	6a1b      	ldr	r3, [r3, #32]
 8003822:	e013      	b.n	800384c <HAL_RCC_OscConfig+0xa74>
 8003824:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003828:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800382c:	2202      	movs	r2, #2
 800382e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003830:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003834:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	fa93 f2a3 	rbit	r2, r3
 800383e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003842:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8003846:	601a      	str	r2, [r3, #0]
 8003848:	4b79      	ldr	r3, [pc, #484]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800384a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003850:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003854:	2102      	movs	r1, #2
 8003856:	6011      	str	r1, [r2, #0]
 8003858:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800385c:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8003860:	6812      	ldr	r2, [r2, #0]
 8003862:	fa92 f1a2 	rbit	r1, r2
 8003866:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800386a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800386e:	6011      	str	r1, [r2, #0]
  return result;
 8003870:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003874:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8003878:	6812      	ldr	r2, [r2, #0]
 800387a:	fab2 f282 	clz	r2, r2
 800387e:	b2d2      	uxtb	r2, r2
 8003880:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003884:	b2d2      	uxtb	r2, r2
 8003886:	f002 021f 	and.w	r2, r2, #31
 800388a:	2101      	movs	r1, #1
 800388c:	fa01 f202 	lsl.w	r2, r1, r2
 8003890:	4013      	ands	r3, r2
 8003892:	2b00      	cmp	r3, #0
 8003894:	d084      	beq.n	80037a0 <HAL_RCC_OscConfig+0x9c8>
 8003896:	e07f      	b.n	8003998 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003898:	f7fe f872 	bl	8001980 <HAL_GetTick>
 800389c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a0:	e00b      	b.n	80038ba <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038a2:	f7fe f86d 	bl	8001980 <HAL_GetTick>
 80038a6:	4602      	mov	r2, r0
 80038a8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d901      	bls.n	80038ba <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e2c4      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
 80038ba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038be:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80038c2:	2202      	movs	r2, #2
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ca:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038d8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80038dc:	601a      	str	r2, [r3, #0]
 80038de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038e2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038e6:	2202      	movs	r2, #2
 80038e8:	601a      	str	r2, [r3, #0]
 80038ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038ee:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	fa93 f2a3 	rbit	r2, r3
 80038f8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80038fc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8003900:	601a      	str	r2, [r3, #0]
  return result;
 8003902:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003906:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 800390a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800390c:	fab3 f383 	clz	r3, r3
 8003910:	b2db      	uxtb	r3, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	b2db      	uxtb	r3, r3
 8003916:	f043 0302 	orr.w	r3, r3, #2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d102      	bne.n	8003926 <HAL_RCC_OscConfig+0xb4e>
 8003920:	4b43      	ldr	r3, [pc, #268]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	e013      	b.n	800394e <HAL_RCC_OscConfig+0xb76>
 8003926:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800392a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800392e:	2202      	movs	r2, #2
 8003930:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003932:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003936:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	fa93 f2a3 	rbit	r2, r3
 8003940:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003944:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8003948:	601a      	str	r2, [r3, #0]
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 800394c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003952:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003956:	2102      	movs	r1, #2
 8003958:	6011      	str	r1, [r2, #0]
 800395a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800395e:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8003962:	6812      	ldr	r2, [r2, #0]
 8003964:	fa92 f1a2 	rbit	r1, r2
 8003968:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800396c:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8003970:	6011      	str	r1, [r2, #0]
  return result;
 8003972:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003976:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800397a:	6812      	ldr	r2, [r2, #0]
 800397c:	fab2 f282 	clz	r2, r2
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003986:	b2d2      	uxtb	r2, r2
 8003988:	f002 021f 	and.w	r2, r2, #31
 800398c:	2101      	movs	r1, #1
 800398e:	fa01 f202 	lsl.w	r2, r1, r2
 8003992:	4013      	ands	r3, r2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d184      	bne.n	80038a2 <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003998:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800399c:	2b01      	cmp	r3, #1
 800399e:	d105      	bne.n	80039ac <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039a0:	4b23      	ldr	r3, [pc, #140]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 80039a2:	69db      	ldr	r3, [r3, #28]
 80039a4:	4a22      	ldr	r2, [pc, #136]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 80039a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80039aa:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80039ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039b0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	69db      	ldr	r3, [r3, #28]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	f000 8242 	beq.w	8003e42 <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039be:	4b1c      	ldr	r3, [pc, #112]	; (8003a30 <HAL_RCC_OscConfig+0xc58>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 030c 	and.w	r3, r3, #12
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	f000 8213 	beq.w	8003df2 <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80039cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039d0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	69db      	ldr	r3, [r3, #28]
 80039d8:	2b02      	cmp	r3, #2
 80039da:	f040 8162 	bne.w	8003ca2 <HAL_RCC_OscConfig+0xeca>
 80039de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039e2:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039e6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80039ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039f0:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	fa93 f2a3 	rbit	r2, r3
 80039fa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80039fe:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003a02:	601a      	str	r2, [r3, #0]
  return result;
 8003a04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a08:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 8003a0c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a0e:	fab3 f383 	clz	r3, r3
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003a18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	461a      	mov	r2, r3
 8003a20:	2300      	movs	r3, #0
 8003a22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a24:	f7fd ffac 	bl	8001980 <HAL_GetTick>
 8003a28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a2c:	e00c      	b.n	8003a48 <HAL_RCC_OscConfig+0xc70>
 8003a2e:	bf00      	nop
 8003a30:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a34:	f7fd ffa4 	bl	8001980 <HAL_GetTick>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003a3e:	1ad3      	subs	r3, r2, r3
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d901      	bls.n	8003a48 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003a44:	2303      	movs	r3, #3
 8003a46:	e1fd      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003a48:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a4c:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a50:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a5a:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	fa93 f2a3 	rbit	r2, r3
 8003a64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a68:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a6c:	601a      	str	r2, [r3, #0]
  return result;
 8003a6e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a72:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8003a76:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a78:	fab3 f383 	clz	r3, r3
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	095b      	lsrs	r3, r3, #5
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f043 0301 	orr.w	r3, r3, #1
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d102      	bne.n	8003a92 <HAL_RCC_OscConfig+0xcba>
 8003a8c:	4bb0      	ldr	r3, [pc, #704]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	e027      	b.n	8003ae2 <HAL_RCC_OscConfig+0xd0a>
 8003a92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003a96:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003a9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003a9e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aa4:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	fa93 f2a3 	rbit	r2, r3
 8003aae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ab2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003abc:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ac0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ac4:	601a      	str	r2, [r3, #0]
 8003ac6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003aca:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	fa93 f2a3 	rbit	r2, r3
 8003ad4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ad8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8003adc:	601a      	str	r2, [r3, #0]
 8003ade:	4b9c      	ldr	r3, [pc, #624]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003ae6:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003aea:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003aee:	6011      	str	r1, [r2, #0]
 8003af0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003af4:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8003af8:	6812      	ldr	r2, [r2, #0]
 8003afa:	fa92 f1a2 	rbit	r1, r2
 8003afe:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b02:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003b06:	6011      	str	r1, [r2, #0]
  return result;
 8003b08:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003b0c:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8003b10:	6812      	ldr	r2, [r2, #0]
 8003b12:	fab2 f282 	clz	r2, r2
 8003b16:	b2d2      	uxtb	r2, r2
 8003b18:	f042 0220 	orr.w	r2, r2, #32
 8003b1c:	b2d2      	uxtb	r2, r2
 8003b1e:	f002 021f 	and.w	r2, r2, #31
 8003b22:	2101      	movs	r1, #1
 8003b24:	fa01 f202 	lsl.w	r2, r1, r2
 8003b28:	4013      	ands	r3, r2
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d182      	bne.n	8003a34 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b2e:	4b88      	ldr	r3, [pc, #544]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8003b36:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b3a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8003b42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b46:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6a1b      	ldr	r3, [r3, #32]
 8003b4e:	430b      	orrs	r3, r1
 8003b50:	497f      	ldr	r1, [pc, #508]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	604b      	str	r3, [r1, #4]
 8003b56:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b5a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b5e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003b62:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b64:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b68:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	fa93 f2a3 	rbit	r2, r3
 8003b72:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b76:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b7a:	601a      	str	r2, [r3, #0]
  return result;
 8003b7c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003b80:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8003b84:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b86:	fab3 f383 	clz	r3, r3
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003b90:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	461a      	mov	r2, r3
 8003b98:	2301      	movs	r3, #1
 8003b9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b9c:	f7fd fef0 	bl	8001980 <HAL_GetTick>
 8003ba0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ba4:	e009      	b.n	8003bba <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ba6:	f7fd feeb 	bl	8001980 <HAL_GetTick>
 8003baa:	4602      	mov	r2, r0
 8003bac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003bb0:	1ad3      	subs	r3, r2, r3
 8003bb2:	2b02      	cmp	r3, #2
 8003bb4:	d901      	bls.n	8003bba <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e144      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003bba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bbe:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003bc2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003bc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bcc:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	fa93 f2a3 	rbit	r2, r3
 8003bd6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003bda:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003bde:	601a      	str	r2, [r3, #0]
  return result;
 8003be0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003be4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8003be8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bea:	fab3 f383 	clz	r3, r3
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	095b      	lsrs	r3, r3, #5
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	b2db      	uxtb	r3, r3
 8003bfa:	2b01      	cmp	r3, #1
 8003bfc:	d102      	bne.n	8003c04 <HAL_RCC_OscConfig+0xe2c>
 8003bfe:	4b54      	ldr	r3, [pc, #336]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	e027      	b.n	8003c54 <HAL_RCC_OscConfig+0xe7c>
 8003c04:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c08:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003c0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c12:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c16:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	fa93 f2a3 	rbit	r2, r3
 8003c20:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c24:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8003c28:	601a      	str	r2, [r3, #0]
 8003c2a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c2e:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c3c:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	fa93 f2a3 	rbit	r2, r3
 8003c46:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003c4a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8003c4e:	601a      	str	r2, [r3, #0]
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c58:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c5c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003c60:	6011      	str	r1, [r2, #0]
 8003c62:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c66:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8003c6a:	6812      	ldr	r2, [r2, #0]
 8003c6c:	fa92 f1a2 	rbit	r1, r2
 8003c70:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c74:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c78:	6011      	str	r1, [r2, #0]
  return result;
 8003c7a:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003c7e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8003c82:	6812      	ldr	r2, [r2, #0]
 8003c84:	fab2 f282 	clz	r2, r2
 8003c88:	b2d2      	uxtb	r2, r2
 8003c8a:	f042 0220 	orr.w	r2, r2, #32
 8003c8e:	b2d2      	uxtb	r2, r2
 8003c90:	f002 021f 	and.w	r2, r2, #31
 8003c94:	2101      	movs	r1, #1
 8003c96:	fa01 f202 	lsl.w	r2, r1, r2
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d082      	beq.n	8003ba6 <HAL_RCC_OscConfig+0xdce>
 8003ca0:	e0cf      	b.n	8003e42 <HAL_RCC_OscConfig+0x106a>
 8003ca2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ca6:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003caa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003cae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cb0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cb4:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	fa93 f2a3 	rbit	r2, r3
 8003cbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003cc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003cc6:	601a      	str	r2, [r3, #0]
  return result;
 8003cc8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003ccc:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8003cd0:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cd2:	fab3 f383 	clz	r3, r3
 8003cd6:	b2db      	uxtb	r3, r3
 8003cd8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003cdc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003ce0:	009b      	lsls	r3, r3, #2
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ce8:	f7fd fe4a 	bl	8001980 <HAL_GetTick>
 8003cec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cf0:	e009      	b.n	8003d06 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003cf2:	f7fd fe45 	bl	8001980 <HAL_GetTick>
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d901      	bls.n	8003d06 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 8003d02:	2303      	movs	r3, #3
 8003d04:	e09e      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
 8003d06:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d0a:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003d0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d14:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d18:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	fa93 f2a3 	rbit	r2, r3
 8003d22:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d2a:	601a      	str	r2, [r3, #0]
  return result;
 8003d2c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d30:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8003d34:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d36:	fab3 f383 	clz	r3, r3
 8003d3a:	b2db      	uxtb	r3, r3
 8003d3c:	095b      	lsrs	r3, r3, #5
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	f043 0301 	orr.w	r3, r3, #1
 8003d44:	b2db      	uxtb	r3, r3
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d104      	bne.n	8003d54 <HAL_RCC_OscConfig+0xf7c>
 8003d4a:	4b01      	ldr	r3, [pc, #4]	; (8003d50 <HAL_RCC_OscConfig+0xf78>)
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	e029      	b.n	8003da4 <HAL_RCC_OscConfig+0xfcc>
 8003d50:	40021000 	.word	0x40021000
 8003d54:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d58:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d5c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d62:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d66:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	fa93 f2a3 	rbit	r2, r3
 8003d70:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d74:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8003d78:	601a      	str	r2, [r3, #0]
 8003d7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003d86:	601a      	str	r2, [r3, #0]
 8003d88:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d8c:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	fa93 f2a3 	rbit	r2, r3
 8003d96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003d9a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8003d9e:	601a      	str	r2, [r3, #0]
 8003da0:	4b2b      	ldr	r3, [pc, #172]	; (8003e50 <HAL_RCC_OscConfig+0x1078>)
 8003da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003da8:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003dac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003db0:	6011      	str	r1, [r2, #0]
 8003db2:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003db6:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8003dba:	6812      	ldr	r2, [r2, #0]
 8003dbc:	fa92 f1a2 	rbit	r1, r2
 8003dc0:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dc4:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003dc8:	6011      	str	r1, [r2, #0]
  return result;
 8003dca:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8003dce:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	fab2 f282 	clz	r2, r2
 8003dd8:	b2d2      	uxtb	r2, r2
 8003dda:	f042 0220 	orr.w	r2, r2, #32
 8003dde:	b2d2      	uxtb	r2, r2
 8003de0:	f002 021f 	and.w	r2, r2, #31
 8003de4:	2101      	movs	r1, #1
 8003de6:	fa01 f202 	lsl.w	r2, r1, r2
 8003dea:	4013      	ands	r3, r2
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d180      	bne.n	8003cf2 <HAL_RCC_OscConfig+0xf1a>
 8003df0:	e027      	b.n	8003e42 <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003df2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003df6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	69db      	ldr	r3, [r3, #28]
 8003dfe:	2b01      	cmp	r3, #1
 8003e00:	d101      	bne.n	8003e06 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8003e02:	2301      	movs	r3, #1
 8003e04:	e01e      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003e06:	4b12      	ldr	r3, [pc, #72]	; (8003e50 <HAL_RCC_OscConfig+0x1078>)
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e0e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003e12:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003e16:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e1a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	429a      	cmp	r2, r3
 8003e24:	d10b      	bne.n	8003e3e <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003e26:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8003e2a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003e2e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8003e32:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d001      	beq.n	8003e42 <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e000      	b.n	8003e44 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	40021000 	.word	0x40021000

08003e54 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b09e      	sub	sp, #120	; 0x78
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e162      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003e6c:	4b90      	ldr	r3, [pc, #576]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	683a      	ldr	r2, [r7, #0]
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d910      	bls.n	8003e9c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e7a:	4b8d      	ldr	r3, [pc, #564]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 0207 	bic.w	r2, r3, #7
 8003e82:	498b      	ldr	r1, [pc, #556]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	4313      	orrs	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e8a:	4b89      	ldr	r3, [pc, #548]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0307 	and.w	r3, r3, #7
 8003e92:	683a      	ldr	r2, [r7, #0]
 8003e94:	429a      	cmp	r2, r3
 8003e96:	d001      	beq.n	8003e9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e14a      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003ea8:	4b82      	ldr	r3, [pc, #520]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003eaa:	685b      	ldr	r3, [r3, #4]
 8003eac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	497f      	ldr	r1, [pc, #508]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80dc 	beq.w	8004080 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d13c      	bne.n	8003f4a <HAL_RCC_ClockConfig+0xf6>
 8003ed0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003ed4:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ed8:	fa93 f3a3 	rbit	r3, r3
 8003edc:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8003ede:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ee0:	fab3 f383 	clz	r3, r3
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	095b      	lsrs	r3, r3, #5
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	f043 0301 	orr.w	r3, r3, #1
 8003eee:	b2db      	uxtb	r3, r3
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d102      	bne.n	8003efa <HAL_RCC_ClockConfig+0xa6>
 8003ef4:	4b6f      	ldr	r3, [pc, #444]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	e00f      	b.n	8003f1a <HAL_RCC_ClockConfig+0xc6>
 8003efa:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003efe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f00:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f02:	fa93 f3a3 	rbit	r3, r3
 8003f06:	667b      	str	r3, [r7, #100]	; 0x64
 8003f08:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003f0c:	663b      	str	r3, [r7, #96]	; 0x60
 8003f0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003f10:	fa93 f3a3 	rbit	r3, r3
 8003f14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003f16:	4b67      	ldr	r3, [pc, #412]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003f1e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003f20:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003f22:	fa92 f2a2 	rbit	r2, r2
 8003f26:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8003f28:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003f2a:	fab2 f282 	clz	r2, r2
 8003f2e:	b2d2      	uxtb	r2, r2
 8003f30:	f042 0220 	orr.w	r2, r2, #32
 8003f34:	b2d2      	uxtb	r2, r2
 8003f36:	f002 021f 	and.w	r2, r2, #31
 8003f3a:	2101      	movs	r1, #1
 8003f3c:	fa01 f202 	lsl.w	r2, r1, r2
 8003f40:	4013      	ands	r3, r2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d17b      	bne.n	800403e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e0f3      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d13c      	bne.n	8003fcc <HAL_RCC_ClockConfig+0x178>
 8003f52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f56:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f5a:	fa93 f3a3 	rbit	r3, r3
 8003f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f62:	fab3 f383 	clz	r3, r3
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	095b      	lsrs	r3, r3, #5
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	f043 0301 	orr.w	r3, r3, #1
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	2b01      	cmp	r3, #1
 8003f74:	d102      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x128>
 8003f76:	4b4f      	ldr	r3, [pc, #316]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	e00f      	b.n	8003f9c <HAL_RCC_ClockConfig+0x148>
 8003f7c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f80:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f84:	fa93 f3a3 	rbit	r3, r3
 8003f88:	647b      	str	r3, [r7, #68]	; 0x44
 8003f8a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f8e:	643b      	str	r3, [r7, #64]	; 0x40
 8003f90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f92:	fa93 f3a3 	rbit	r3, r3
 8003f96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f98:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003fa0:	63ba      	str	r2, [r7, #56]	; 0x38
 8003fa2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa4:	fa92 f2a2 	rbit	r2, r2
 8003fa8:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8003faa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fac:	fab2 f282 	clz	r2, r2
 8003fb0:	b2d2      	uxtb	r2, r2
 8003fb2:	f042 0220 	orr.w	r2, r2, #32
 8003fb6:	b2d2      	uxtb	r2, r2
 8003fb8:	f002 021f 	and.w	r2, r2, #31
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	fa01 f202 	lsl.w	r2, r1, r2
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d13a      	bne.n	800403e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	e0b2      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd2:	fa93 f3a3 	rbit	r3, r3
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8003fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fda:	fab3 f383 	clz	r3, r3
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	095b      	lsrs	r3, r3, #5
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	f043 0301 	orr.w	r3, r3, #1
 8003fe8:	b2db      	uxtb	r3, r3
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d102      	bne.n	8003ff4 <HAL_RCC_ClockConfig+0x1a0>
 8003fee:	4b31      	ldr	r3, [pc, #196]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	e00d      	b.n	8004010 <HAL_RCC_ClockConfig+0x1bc>
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ffa:	fa93 f3a3 	rbit	r3, r3
 8003ffe:	627b      	str	r3, [r7, #36]	; 0x24
 8004000:	2302      	movs	r3, #2
 8004002:	623b      	str	r3, [r7, #32]
 8004004:	6a3b      	ldr	r3, [r7, #32]
 8004006:	fa93 f3a3 	rbit	r3, r3
 800400a:	61fb      	str	r3, [r7, #28]
 800400c:	4b29      	ldr	r3, [pc, #164]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	2202      	movs	r2, #2
 8004012:	61ba      	str	r2, [r7, #24]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	fa92 f2a2 	rbit	r2, r2
 800401a:	617a      	str	r2, [r7, #20]
  return result;
 800401c:	697a      	ldr	r2, [r7, #20]
 800401e:	fab2 f282 	clz	r2, r2
 8004022:	b2d2      	uxtb	r2, r2
 8004024:	f042 0220 	orr.w	r2, r2, #32
 8004028:	b2d2      	uxtb	r2, r2
 800402a:	f002 021f 	and.w	r2, r2, #31
 800402e:	2101      	movs	r1, #1
 8004030:	fa01 f202 	lsl.w	r2, r1, r2
 8004034:	4013      	ands	r3, r2
 8004036:	2b00      	cmp	r3, #0
 8004038:	d101      	bne.n	800403e <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	e079      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800403e:	4b1d      	ldr	r3, [pc, #116]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f023 0203 	bic.w	r2, r3, #3
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	491a      	ldr	r1, [pc, #104]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 800404c:	4313      	orrs	r3, r2
 800404e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004050:	f7fd fc96 	bl	8001980 <HAL_GetTick>
 8004054:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004056:	e00a      	b.n	800406e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004058:	f7fd fc92 	bl	8001980 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	f241 3288 	movw	r2, #5000	; 0x1388
 8004066:	4293      	cmp	r3, r2
 8004068:	d901      	bls.n	800406e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e061      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800406e:	4b11      	ldr	r3, [pc, #68]	; (80040b4 <HAL_RCC_ClockConfig+0x260>)
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f003 020c 	and.w	r2, r3, #12
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	429a      	cmp	r2, r3
 800407e:	d1eb      	bne.n	8004058 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004080:	4b0b      	ldr	r3, [pc, #44]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 0307 	and.w	r3, r3, #7
 8004088:	683a      	ldr	r2, [r7, #0]
 800408a:	429a      	cmp	r2, r3
 800408c:	d214      	bcs.n	80040b8 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800408e:	4b08      	ldr	r3, [pc, #32]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f023 0207 	bic.w	r2, r3, #7
 8004096:	4906      	ldr	r1, [pc, #24]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	4313      	orrs	r3, r2
 800409c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b04      	ldr	r3, [pc, #16]	; (80040b0 <HAL_RCC_ClockConfig+0x25c>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d005      	beq.n	80040b8 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e040      	b.n	8004132 <HAL_RCC_ClockConfig+0x2de>
 80040b0:	40022000 	.word	0x40022000
 80040b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0304 	and.w	r3, r3, #4
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d008      	beq.n	80040d6 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040c4:	4b1d      	ldr	r3, [pc, #116]	; (800413c <HAL_RCC_ClockConfig+0x2e8>)
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68db      	ldr	r3, [r3, #12]
 80040d0:	491a      	ldr	r1, [pc, #104]	; (800413c <HAL_RCC_ClockConfig+0x2e8>)
 80040d2:	4313      	orrs	r3, r2
 80040d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f003 0308 	and.w	r3, r3, #8
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d009      	beq.n	80040f6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040e2:	4b16      	ldr	r3, [pc, #88]	; (800413c <HAL_RCC_ClockConfig+0x2e8>)
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	691b      	ldr	r3, [r3, #16]
 80040ee:	00db      	lsls	r3, r3, #3
 80040f0:	4912      	ldr	r1, [pc, #72]	; (800413c <HAL_RCC_ClockConfig+0x2e8>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80040f6:	f000 f829 	bl	800414c <HAL_RCC_GetSysClockFreq>
 80040fa:	4601      	mov	r1, r0
 80040fc:	4b0f      	ldr	r3, [pc, #60]	; (800413c <HAL_RCC_ClockConfig+0x2e8>)
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004104:	22f0      	movs	r2, #240	; 0xf0
 8004106:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	fa92 f2a2 	rbit	r2, r2
 800410e:	60fa      	str	r2, [r7, #12]
  return result;
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	fab2 f282 	clz	r2, r2
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	40d3      	lsrs	r3, r2
 800411a:	4a09      	ldr	r2, [pc, #36]	; (8004140 <HAL_RCC_ClockConfig+0x2ec>)
 800411c:	5cd3      	ldrb	r3, [r2, r3]
 800411e:	fa21 f303 	lsr.w	r3, r1, r3
 8004122:	4a08      	ldr	r2, [pc, #32]	; (8004144 <HAL_RCC_ClockConfig+0x2f0>)
 8004124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8004126:	4b08      	ldr	r3, [pc, #32]	; (8004148 <HAL_RCC_ClockConfig+0x2f4>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4618      	mov	r0, r3
 800412c:	f7fd fbe4 	bl	80018f8 <HAL_InitTick>
  
  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3778      	adds	r7, #120	; 0x78
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}
 800413a:	bf00      	nop
 800413c:	40021000 	.word	0x40021000
 8004140:	0800718c 	.word	0x0800718c
 8004144:	2000007c 	.word	0x2000007c
 8004148:	20000080 	.word	0x20000080

0800414c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800414c:	b480      	push	{r7}
 800414e:	b08b      	sub	sp, #44	; 0x2c
 8004150:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004152:	2300      	movs	r3, #0
 8004154:	61fb      	str	r3, [r7, #28]
 8004156:	2300      	movs	r3, #0
 8004158:	61bb      	str	r3, [r7, #24]
 800415a:	2300      	movs	r3, #0
 800415c:	627b      	str	r3, [r7, #36]	; 0x24
 800415e:	2300      	movs	r3, #0
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004162:	2300      	movs	r3, #0
 8004164:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8004166:	4b29      	ldr	r3, [pc, #164]	; (800420c <HAL_RCC_GetSysClockFreq+0xc0>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f003 030c 	and.w	r3, r3, #12
 8004172:	2b04      	cmp	r3, #4
 8004174:	d002      	beq.n	800417c <HAL_RCC_GetSysClockFreq+0x30>
 8004176:	2b08      	cmp	r3, #8
 8004178:	d003      	beq.n	8004182 <HAL_RCC_GetSysClockFreq+0x36>
 800417a:	e03c      	b.n	80041f6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800417c:	4b24      	ldr	r3, [pc, #144]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc4>)
 800417e:	623b      	str	r3, [r7, #32]
      break;
 8004180:	e03c      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8004182:	69fb      	ldr	r3, [r7, #28]
 8004184:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004188:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 800418c:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800418e:	68ba      	ldr	r2, [r7, #8]
 8004190:	fa92 f2a2 	rbit	r2, r2
 8004194:	607a      	str	r2, [r7, #4]
  return result;
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	fab2 f282 	clz	r2, r2
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	40d3      	lsrs	r3, r2
 80041a0:	4a1c      	ldr	r2, [pc, #112]	; (8004214 <HAL_RCC_GetSysClockFreq+0xc8>)
 80041a2:	5cd3      	ldrb	r3, [r2, r3]
 80041a4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80041a6:	4b19      	ldr	r3, [pc, #100]	; (800420c <HAL_RCC_GetSysClockFreq+0xc0>)
 80041a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	220f      	movs	r2, #15
 80041b0:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	693a      	ldr	r2, [r7, #16]
 80041b4:	fa92 f2a2 	rbit	r2, r2
 80041b8:	60fa      	str	r2, [r7, #12]
  return result;
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	fab2 f282 	clz	r2, r2
 80041c0:	b2d2      	uxtb	r2, r2
 80041c2:	40d3      	lsrs	r3, r2
 80041c4:	4a14      	ldr	r2, [pc, #80]	; (8004218 <HAL_RCC_GetSysClockFreq+0xcc>)
 80041c6:	5cd3      	ldrb	r3, [r2, r3]
 80041c8:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80041d4:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	fbb2 f2f3 	udiv	r2, r2, r3
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	fb02 f303 	mul.w	r3, r2, r3
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
 80041e4:	e004      	b.n	80041f0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	4a0c      	ldr	r2, [pc, #48]	; (800421c <HAL_RCC_GetSysClockFreq+0xd0>)
 80041ea:	fb02 f303 	mul.w	r3, r2, r3
 80041ee:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80041f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f2:	623b      	str	r3, [r7, #32]
      break;
 80041f4:	e002      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80041f6:	4b06      	ldr	r3, [pc, #24]	; (8004210 <HAL_RCC_GetSysClockFreq+0xc4>)
 80041f8:	623b      	str	r3, [r7, #32]
      break;
 80041fa:	bf00      	nop
    }
  }
  return sysclockfreq;
 80041fc:	6a3b      	ldr	r3, [r7, #32]
}
 80041fe:	4618      	mov	r0, r3
 8004200:	372c      	adds	r7, #44	; 0x2c
 8004202:	46bd      	mov	sp, r7
 8004204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004208:	4770      	bx	lr
 800420a:	bf00      	nop
 800420c:	40021000 	.word	0x40021000
 8004210:	007a1200 	.word	0x007a1200
 8004214:	080071a4 	.word	0x080071a4
 8004218:	080071b4 	.word	0x080071b4
 800421c:	003d0900 	.word	0x003d0900

08004220 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004220:	b480      	push	{r7}
 8004222:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004224:	4b03      	ldr	r3, [pc, #12]	; (8004234 <HAL_RCC_GetHCLKFreq+0x14>)
 8004226:	681b      	ldr	r3, [r3, #0]
}
 8004228:	4618      	mov	r0, r3
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr
 8004232:	bf00      	nop
 8004234:	2000007c 	.word	0x2000007c

08004238 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800423e:	f7ff ffef 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004242:	4601      	mov	r1, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800424c:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004250:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004252:	687a      	ldr	r2, [r7, #4]
 8004254:	fa92 f2a2 	rbit	r2, r2
 8004258:	603a      	str	r2, [r7, #0]
  return result;
 800425a:	683a      	ldr	r2, [r7, #0]
 800425c:	fab2 f282 	clz	r2, r2
 8004260:	b2d2      	uxtb	r2, r2
 8004262:	40d3      	lsrs	r3, r2
 8004264:	4a04      	ldr	r2, [pc, #16]	; (8004278 <HAL_RCC_GetPCLK1Freq+0x40>)
 8004266:	5cd3      	ldrb	r3, [r2, r3]
 8004268:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800426c:	4618      	mov	r0, r3
 800426e:	3708      	adds	r7, #8
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	40021000 	.word	0x40021000
 8004278:	0800719c 	.word	0x0800719c

0800427c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b082      	sub	sp, #8
 8004280:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004282:	f7ff ffcd 	bl	8004220 <HAL_RCC_GetHCLKFreq>
 8004286:	4601      	mov	r1, r0
 8004288:	4b0b      	ldr	r3, [pc, #44]	; (80042b8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8004290:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004294:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	fa92 f2a2 	rbit	r2, r2
 800429c:	603a      	str	r2, [r7, #0]
  return result;
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	fab2 f282 	clz	r2, r2
 80042a4:	b2d2      	uxtb	r2, r2
 80042a6:	40d3      	lsrs	r3, r2
 80042a8:	4a04      	ldr	r2, [pc, #16]	; (80042bc <HAL_RCC_GetPCLK2Freq+0x40>)
 80042aa:	5cd3      	ldrb	r3, [r2, r3]
 80042ac:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80042b0:	4618      	mov	r0, r3
 80042b2:	3708      	adds	r7, #8
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}
 80042b8:	40021000 	.word	0x40021000
 80042bc:	0800719c 	.word	0x0800719c

080042c0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b092      	sub	sp, #72	; 0x48
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042c8:	2300      	movs	r3, #0
 80042ca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80042cc:	2300      	movs	r3, #0
 80042ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80042d0:	2300      	movs	r3, #0
 80042d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f000 80cd 	beq.w	800447e <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80042e4:	4b86      	ldr	r3, [pc, #536]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d10e      	bne.n	800430e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80042f0:	4b83      	ldr	r3, [pc, #524]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f2:	69db      	ldr	r3, [r3, #28]
 80042f4:	4a82      	ldr	r2, [pc, #520]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fa:	61d3      	str	r3, [r2, #28]
 80042fc:	4b80      	ldr	r3, [pc, #512]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004304:	60bb      	str	r3, [r7, #8]
 8004306:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004308:	2301      	movs	r3, #1
 800430a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800430e:	4b7d      	ldr	r3, [pc, #500]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004316:	2b00      	cmp	r3, #0
 8004318:	d118      	bne.n	800434c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800431a:	4b7a      	ldr	r3, [pc, #488]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a79      	ldr	r2, [pc, #484]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004324:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004326:	f7fd fb2b 	bl	8001980 <HAL_GetTick>
 800432a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800432c:	e008      	b.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800432e:	f7fd fb27 	bl	8001980 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b64      	cmp	r3, #100	; 0x64
 800433a:	d901      	bls.n	8004340 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0db      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004340:	4b70      	ldr	r3, [pc, #448]	; (8004504 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0f0      	beq.n	800432e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800434c:	4b6c      	ldr	r3, [pc, #432]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800434e:	6a1b      	ldr	r3, [r3, #32]
 8004350:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004354:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004356:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004358:	2b00      	cmp	r3, #0
 800435a:	d07d      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x198>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004364:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004366:	429a      	cmp	r2, r3
 8004368:	d076      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800436a:	4b65      	ldr	r3, [pc, #404]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004378:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800437a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437c:	fa93 f3a3 	rbit	r3, r3
 8004380:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8004382:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004384:	fab3 f383 	clz	r3, r3
 8004388:	b2db      	uxtb	r3, r3
 800438a:	461a      	mov	r2, r3
 800438c:	4b5e      	ldr	r3, [pc, #376]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800438e:	4413      	add	r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	461a      	mov	r2, r3
 8004394:	2301      	movs	r3, #1
 8004396:	6013      	str	r3, [r2, #0]
 8004398:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800439c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	fa93 f3a3 	rbit	r3, r3
 80043a4:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80043a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80043a8:	fab3 f383 	clz	r3, r3
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	461a      	mov	r2, r3
 80043b0:	4b55      	ldr	r3, [pc, #340]	; (8004508 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80043b2:	4413      	add	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	461a      	mov	r2, r3
 80043b8:	2300      	movs	r3, #0
 80043ba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80043bc:	4a50      	ldr	r2, [pc, #320]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80043be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80043c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c4:	f003 0301 	and.w	r3, r3, #1
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d045      	beq.n	8004458 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fd fad8 	bl	8001980 <HAL_GetTick>
 80043d0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80043d2:	e00a      	b.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80043d4:	f7fd fad4 	bl	8001980 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	f241 3288 	movw	r2, #5000	; 0x1388
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d901      	bls.n	80043ea <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80043e6:	2303      	movs	r3, #3
 80043e8:	e086      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x238>
 80043ea:	2302      	movs	r3, #2
 80043ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f0:	fa93 f3a3 	rbit	r3, r3
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
 80043f6:	2302      	movs	r3, #2
 80043f8:	623b      	str	r3, [r7, #32]
 80043fa:	6a3b      	ldr	r3, [r7, #32]
 80043fc:	fa93 f3a3 	rbit	r3, r3
 8004400:	61fb      	str	r3, [r7, #28]
  return result;
 8004402:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004404:	fab3 f383 	clz	r3, r3
 8004408:	b2db      	uxtb	r3, r3
 800440a:	095b      	lsrs	r3, r3, #5
 800440c:	b2db      	uxtb	r3, r3
 800440e:	f043 0302 	orr.w	r3, r3, #2
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b02      	cmp	r3, #2
 8004416:	d102      	bne.n	800441e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8004418:	4b39      	ldr	r3, [pc, #228]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800441a:	6a1b      	ldr	r3, [r3, #32]
 800441c:	e007      	b.n	800442e <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800441e:	2302      	movs	r3, #2
 8004420:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	617b      	str	r3, [r7, #20]
 800442a:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800442c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442e:	2202      	movs	r2, #2
 8004430:	613a      	str	r2, [r7, #16]
 8004432:	693a      	ldr	r2, [r7, #16]
 8004434:	fa92 f2a2 	rbit	r2, r2
 8004438:	60fa      	str	r2, [r7, #12]
  return result;
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	fab2 f282 	clz	r2, r2
 8004440:	b2d2      	uxtb	r2, r2
 8004442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004446:	b2d2      	uxtb	r2, r2
 8004448:	f002 021f 	and.w	r2, r2, #31
 800444c:	2101      	movs	r1, #1
 800444e:	fa01 f202 	lsl.w	r2, r1, r2
 8004452:	4013      	ands	r3, r2
 8004454:	2b00      	cmp	r3, #0
 8004456:	d0bd      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8004458:	4b29      	ldr	r3, [pc, #164]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	4926      	ldr	r1, [pc, #152]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004466:	4313      	orrs	r3, r2
 8004468:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800446a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800446e:	2b01      	cmp	r3, #1
 8004470:	d105      	bne.n	800447e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004472:	4b23      	ldr	r3, [pc, #140]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004474:	69db      	ldr	r3, [r3, #28]
 8004476:	4a22      	ldr	r2, [pc, #136]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004478:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800447c:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0301 	and.w	r3, r3, #1
 8004486:	2b00      	cmp	r3, #0
 8004488:	d008      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800448a:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f023 0203 	bic.w	r2, r3, #3
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	689b      	ldr	r3, [r3, #8]
 8004496:	491a      	ldr	r1, [pc, #104]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8004498:	4313      	orrs	r3, r2
 800449a:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 0320 	and.w	r3, r3, #32
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d008      	beq.n	80044ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80044a8:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f023 0210 	bic.w	r2, r3, #16
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4912      	ldr	r1, [pc, #72]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044b6:	4313      	orrs	r3, r2
 80044b8:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80044c6:	4b0e      	ldr	r3, [pc, #56]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ca:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	691b      	ldr	r3, [r3, #16]
 80044d2:	490b      	ldr	r1, [pc, #44]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044d4:	4313      	orrs	r3, r2
 80044d6:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d008      	beq.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80044e4:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	4903      	ldr	r1, [pc, #12]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3748      	adds	r7, #72	; 0x48
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}
 8004500:	40021000 	.word	0x40021000
 8004504:	40007000 	.word	0x40007000
 8004508:	10908100 	.word	0x10908100

0800450c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d101      	bne.n	800451e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e049      	b.n	80045b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004524:	b2db      	uxtb	r3, r3
 8004526:	2b00      	cmp	r3, #0
 8004528:	d106      	bne.n	8004538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7fd f88e 	bl	8001654 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2202      	movs	r2, #2
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	3304      	adds	r3, #4
 8004548:	4619      	mov	r1, r3
 800454a:	4610      	mov	r0, r2
 800454c:	f000 fbb6 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2201      	movs	r2, #1
 800456c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2201      	movs	r2, #1
 800457c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2201      	movs	r2, #1
 800458c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2201      	movs	r2, #1
 8004594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2201      	movs	r2, #1
 800459c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80045b0:	2300      	movs	r3, #0
}
 80045b2:	4618      	mov	r0, r3
 80045b4:	3708      	adds	r7, #8
 80045b6:	46bd      	mov	sp, r7
 80045b8:	bd80      	pop	{r7, pc}
	...

080045bc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b085      	sub	sp, #20
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d001      	beq.n	80045d4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045d0:	2301      	movs	r3, #1
 80045d2:	e038      	b.n	8004646 <HAL_TIM_Base_Start+0x8a>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <HAL_TIM_Base_Start+0x98>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d00e      	beq.n	8004604 <HAL_TIM_Base_Start+0x48>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ee:	d009      	beq.n	8004604 <HAL_TIM_Base_Start+0x48>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a18      	ldr	r2, [pc, #96]	; (8004658 <HAL_TIM_Base_Start+0x9c>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d004      	beq.n	8004604 <HAL_TIM_Base_Start+0x48>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a17      	ldr	r2, [pc, #92]	; (800465c <HAL_TIM_Base_Start+0xa0>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d115      	bne.n	8004630 <HAL_TIM_Base_Start+0x74>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	689a      	ldr	r2, [r3, #8]
 800460a:	4b15      	ldr	r3, [pc, #84]	; (8004660 <HAL_TIM_Base_Start+0xa4>)
 800460c:	4013      	ands	r3, r2
 800460e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2b06      	cmp	r3, #6
 8004614:	d015      	beq.n	8004642 <HAL_TIM_Base_Start+0x86>
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800461c:	d011      	beq.n	8004642 <HAL_TIM_Base_Start+0x86>
    {
      __HAL_TIM_ENABLE(htim);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f042 0201 	orr.w	r2, r2, #1
 800462c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462e:	e008      	b.n	8004642 <HAL_TIM_Base_Start+0x86>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	e000      	b.n	8004644 <HAL_TIM_Base_Start+0x88>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004642:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr
 8004652:	bf00      	nop
 8004654:	40012c00 	.word	0x40012c00
 8004658:	40000400 	.word	0x40000400
 800465c:	40014000 	.word	0x40014000
 8004660:	00010007 	.word	0x00010007

08004664 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b082      	sub	sp, #8
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d101      	bne.n	8004676 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	e049      	b.n	800470a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800467c:	b2db      	uxtb	r3, r3
 800467e:	2b00      	cmp	r3, #0
 8004680:	d106      	bne.n	8004690 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f841 	bl	8004712 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2202      	movs	r2, #2
 8004694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	3304      	adds	r3, #4
 80046a0:	4619      	mov	r1, r3
 80046a2:	4610      	mov	r0, r2
 80046a4:	f000 fb0a 	bl	8004cbc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2201      	movs	r2, #1
 80046e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2201      	movs	r2, #1
 80046ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2201      	movs	r2, #1
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004708:	2300      	movs	r3, #0
}
 800470a:	4618      	mov	r0, r3
 800470c:	3708      	adds	r7, #8
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004712:	b480      	push	{r7}
 8004714:	b083      	sub	sp, #12
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800471a:	bf00      	nop
 800471c:	370c      	adds	r7, #12
 800471e:	46bd      	mov	sp, r7
 8004720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004724:	4770      	bx	lr
	...

08004728 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b084      	sub	sp, #16
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
 8004730:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d109      	bne.n	800474c <HAL_TIM_PWM_Start+0x24>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b01      	cmp	r3, #1
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e03c      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	2b04      	cmp	r3, #4
 8004750:	d109      	bne.n	8004766 <HAL_TIM_PWM_Start+0x3e>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004758:	b2db      	uxtb	r3, r3
 800475a:	2b01      	cmp	r3, #1
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	e02f      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b08      	cmp	r3, #8
 800476a:	d109      	bne.n	8004780 <HAL_TIM_PWM_Start+0x58>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004772:	b2db      	uxtb	r3, r3
 8004774:	2b01      	cmp	r3, #1
 8004776:	bf14      	ite	ne
 8004778:	2301      	movne	r3, #1
 800477a:	2300      	moveq	r3, #0
 800477c:	b2db      	uxtb	r3, r3
 800477e:	e022      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	2b0c      	cmp	r3, #12
 8004784:	d109      	bne.n	800479a <HAL_TIM_PWM_Start+0x72>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b01      	cmp	r3, #1
 8004790:	bf14      	ite	ne
 8004792:	2301      	movne	r3, #1
 8004794:	2300      	moveq	r3, #0
 8004796:	b2db      	uxtb	r3, r3
 8004798:	e015      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	2b10      	cmp	r3, #16
 800479e:	d109      	bne.n	80047b4 <HAL_TIM_PWM_Start+0x8c>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80047a6:	b2db      	uxtb	r3, r3
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	bf14      	ite	ne
 80047ac:	2301      	movne	r3, #1
 80047ae:	2300      	moveq	r3, #0
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	e008      	b.n	80047c6 <HAL_TIM_PWM_Start+0x9e>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80047ba:	b2db      	uxtb	r3, r3
 80047bc:	2b01      	cmp	r3, #1
 80047be:	bf14      	ite	ne
 80047c0:	2301      	movne	r3, #1
 80047c2:	2300      	moveq	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e088      	b.n	80048e0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d104      	bne.n	80047de <HAL_TIM_PWM_Start+0xb6>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2202      	movs	r2, #2
 80047d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047dc:	e023      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b04      	cmp	r3, #4
 80047e2:	d104      	bne.n	80047ee <HAL_TIM_PWM_Start+0xc6>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2202      	movs	r2, #2
 80047e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047ec:	e01b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047ee:	683b      	ldr	r3, [r7, #0]
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d104      	bne.n	80047fe <HAL_TIM_PWM_Start+0xd6>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2202      	movs	r2, #2
 80047f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047fc:	e013      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b0c      	cmp	r3, #12
 8004802:	d104      	bne.n	800480e <HAL_TIM_PWM_Start+0xe6>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2202      	movs	r2, #2
 8004808:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800480c:	e00b      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	2b10      	cmp	r3, #16
 8004812:	d104      	bne.n	800481e <HAL_TIM_PWM_Start+0xf6>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800481c:	e003      	b.n	8004826 <HAL_TIM_PWM_Start+0xfe>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2202      	movs	r2, #2
 8004822:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	2201      	movs	r2, #1
 800482c:	6839      	ldr	r1, [r7, #0]
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fdfc 	bl	800542c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a2b      	ldr	r2, [pc, #172]	; (80048e8 <HAL_TIM_PWM_Start+0x1c0>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_PWM_Start+0x134>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a2a      	ldr	r2, [pc, #168]	; (80048ec <HAL_TIM_PWM_Start+0x1c4>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d009      	beq.n	800485c <HAL_TIM_PWM_Start+0x134>
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a28      	ldr	r2, [pc, #160]	; (80048f0 <HAL_TIM_PWM_Start+0x1c8>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d004      	beq.n	800485c <HAL_TIM_PWM_Start+0x134>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a27      	ldr	r2, [pc, #156]	; (80048f4 <HAL_TIM_PWM_Start+0x1cc>)
 8004858:	4293      	cmp	r3, r2
 800485a:	d101      	bne.n	8004860 <HAL_TIM_PWM_Start+0x138>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <HAL_TIM_PWM_Start+0x13a>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d007      	beq.n	8004876 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004874:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a1b      	ldr	r2, [pc, #108]	; (80048e8 <HAL_TIM_PWM_Start+0x1c0>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d00e      	beq.n	800489e <HAL_TIM_PWM_Start+0x176>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004888:	d009      	beq.n	800489e <HAL_TIM_PWM_Start+0x176>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a1a      	ldr	r2, [pc, #104]	; (80048f8 <HAL_TIM_PWM_Start+0x1d0>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d004      	beq.n	800489e <HAL_TIM_PWM_Start+0x176>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a14      	ldr	r2, [pc, #80]	; (80048ec <HAL_TIM_PWM_Start+0x1c4>)
 800489a:	4293      	cmp	r3, r2
 800489c:	d115      	bne.n	80048ca <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	689a      	ldr	r2, [r3, #8]
 80048a4:	4b15      	ldr	r3, [pc, #84]	; (80048fc <HAL_TIM_PWM_Start+0x1d4>)
 80048a6:	4013      	ands	r3, r2
 80048a8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b06      	cmp	r3, #6
 80048ae:	d015      	beq.n	80048dc <HAL_TIM_PWM_Start+0x1b4>
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b6:	d011      	beq.n	80048dc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	681a      	ldr	r2, [r3, #0]
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f042 0201 	orr.w	r2, r2, #1
 80048c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048c8:	e008      	b.n	80048dc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f042 0201 	orr.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]
 80048da:	e000      	b.n	80048de <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048dc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}
 80048e8:	40012c00 	.word	0x40012c00
 80048ec:	40014000 	.word	0x40014000
 80048f0:	40014400 	.word	0x40014400
 80048f4:	40014800 	.word	0x40014800
 80048f8:	40000400 	.word	0x40000400
 80048fc:	00010007 	.word	0x00010007

08004900 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b086      	sub	sp, #24
 8004904:	af00      	add	r7, sp, #0
 8004906:	60f8      	str	r0, [r7, #12]
 8004908:	60b9      	str	r1, [r7, #8]
 800490a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	2b01      	cmp	r3, #1
 8004918:	d101      	bne.n	800491e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800491a:	2302      	movs	r3, #2
 800491c:	e0ff      	b.n	8004b1e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	2201      	movs	r2, #1
 8004922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2b14      	cmp	r3, #20
 800492a:	f200 80f0 	bhi.w	8004b0e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800492e:	a201      	add	r2, pc, #4	; (adr r2, 8004934 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	08004989 	.word	0x08004989
 8004938:	08004b0f 	.word	0x08004b0f
 800493c:	08004b0f 	.word	0x08004b0f
 8004940:	08004b0f 	.word	0x08004b0f
 8004944:	080049c9 	.word	0x080049c9
 8004948:	08004b0f 	.word	0x08004b0f
 800494c:	08004b0f 	.word	0x08004b0f
 8004950:	08004b0f 	.word	0x08004b0f
 8004954:	08004a0b 	.word	0x08004a0b
 8004958:	08004b0f 	.word	0x08004b0f
 800495c:	08004b0f 	.word	0x08004b0f
 8004960:	08004b0f 	.word	0x08004b0f
 8004964:	08004a4b 	.word	0x08004a4b
 8004968:	08004b0f 	.word	0x08004b0f
 800496c:	08004b0f 	.word	0x08004b0f
 8004970:	08004b0f 	.word	0x08004b0f
 8004974:	08004a8d 	.word	0x08004a8d
 8004978:	08004b0f 	.word	0x08004b0f
 800497c:	08004b0f 	.word	0x08004b0f
 8004980:	08004b0f 	.word	0x08004b0f
 8004984:	08004acd 	.word	0x08004acd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68b9      	ldr	r1, [r7, #8]
 800498e:	4618      	mov	r0, r3
 8004990:	f000 fa0c 	bl	8004dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	699a      	ldr	r2, [r3, #24]
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f042 0208 	orr.w	r2, r2, #8
 80049a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	699a      	ldr	r2, [r3, #24]
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0204 	bic.w	r2, r2, #4
 80049b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	6999      	ldr	r1, [r3, #24]
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	691a      	ldr	r2, [r3, #16]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	430a      	orrs	r2, r1
 80049c4:	619a      	str	r2, [r3, #24]
      break;
 80049c6:	e0a5      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68b9      	ldr	r1, [r7, #8]
 80049ce:	4618      	mov	r0, r3
 80049d0:	f000 fa72 	bl	8004eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	699a      	ldr	r2, [r3, #24]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	699a      	ldr	r2, [r3, #24]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	6999      	ldr	r1, [r3, #24]
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	021a      	lsls	r2, r3, #8
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	430a      	orrs	r2, r1
 8004a06:	619a      	str	r2, [r3, #24]
      break;
 8004a08:	e084      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68b9      	ldr	r1, [r7, #8]
 8004a10:	4618      	mov	r0, r3
 8004a12:	f000 fad1 	bl	8004fb8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	69da      	ldr	r2, [r3, #28]
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f042 0208 	orr.w	r2, r2, #8
 8004a24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	69da      	ldr	r2, [r3, #28]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0204 	bic.w	r2, r2, #4
 8004a34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	69d9      	ldr	r1, [r3, #28]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	691a      	ldr	r2, [r3, #16]
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	430a      	orrs	r2, r1
 8004a46:	61da      	str	r2, [r3, #28]
      break;
 8004a48:	e064      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	4618      	mov	r0, r3
 8004a52:	f000 fb2f 	bl	80050b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	69da      	ldr	r2, [r3, #28]
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	69d9      	ldr	r1, [r3, #28]
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	691b      	ldr	r3, [r3, #16]
 8004a80:	021a      	lsls	r2, r3, #8
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	430a      	orrs	r2, r1
 8004a88:	61da      	str	r2, [r3, #28]
      break;
 8004a8a:	e043      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68b9      	ldr	r1, [r7, #8]
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fb72 	bl	800517c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f042 0208 	orr.w	r2, r2, #8
 8004aa6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f022 0204 	bic.w	r2, r2, #4
 8004ab6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	691a      	ldr	r2, [r3, #16]
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004aca:	e023      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	68b9      	ldr	r1, [r7, #8]
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f000 fbb0 	bl	8005238 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ae6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004af6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	691b      	ldr	r3, [r3, #16]
 8004b02:	021a      	lsls	r2, r3, #8
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004b0c:	e002      	b.n	8004b14 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	75fb      	strb	r3, [r7, #23]
      break;
 8004b12:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2200      	movs	r2, #0
 8004b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b1e:	4618      	mov	r0, r3
 8004b20:	3718      	adds	r7, #24
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop

08004b28 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b084      	sub	sp, #16
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b32:	2300      	movs	r3, #0
 8004b34:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d101      	bne.n	8004b44 <HAL_TIM_ConfigClockSource+0x1c>
 8004b40:	2302      	movs	r3, #2
 8004b42:	e0b6      	b.n	8004cb2 <HAL_TIM_ConfigClockSource+0x18a>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2201      	movs	r2, #1
 8004b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2202      	movs	r2, #2
 8004b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004b66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b80:	d03e      	beq.n	8004c00 <HAL_TIM_ConfigClockSource+0xd8>
 8004b82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b86:	f200 8087 	bhi.w	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b8e:	f000 8086 	beq.w	8004c9e <HAL_TIM_ConfigClockSource+0x176>
 8004b92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b96:	d87f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004b98:	2b70      	cmp	r3, #112	; 0x70
 8004b9a:	d01a      	beq.n	8004bd2 <HAL_TIM_ConfigClockSource+0xaa>
 8004b9c:	2b70      	cmp	r3, #112	; 0x70
 8004b9e:	d87b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004ba0:	2b60      	cmp	r3, #96	; 0x60
 8004ba2:	d050      	beq.n	8004c46 <HAL_TIM_ConfigClockSource+0x11e>
 8004ba4:	2b60      	cmp	r3, #96	; 0x60
 8004ba6:	d877      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004ba8:	2b50      	cmp	r3, #80	; 0x50
 8004baa:	d03c      	beq.n	8004c26 <HAL_TIM_ConfigClockSource+0xfe>
 8004bac:	2b50      	cmp	r3, #80	; 0x50
 8004bae:	d873      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bb0:	2b40      	cmp	r3, #64	; 0x40
 8004bb2:	d058      	beq.n	8004c66 <HAL_TIM_ConfigClockSource+0x13e>
 8004bb4:	2b40      	cmp	r3, #64	; 0x40
 8004bb6:	d86f      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bb8:	2b30      	cmp	r3, #48	; 0x30
 8004bba:	d064      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bbc:	2b30      	cmp	r3, #48	; 0x30
 8004bbe:	d86b      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bc0:	2b20      	cmp	r3, #32
 8004bc2:	d060      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bc4:	2b20      	cmp	r3, #32
 8004bc6:	d867      	bhi.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d05c      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bcc:	2b10      	cmp	r3, #16
 8004bce:	d05a      	beq.n	8004c86 <HAL_TIM_ConfigClockSource+0x15e>
 8004bd0:	e062      	b.n	8004c98 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	6899      	ldr	r1, [r3, #8]
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f000 fc03 	bl	80053ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004bee:	68bb      	ldr	r3, [r7, #8]
 8004bf0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004bf4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	609a      	str	r2, [r3, #8]
      break;
 8004bfe:	e04f      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6818      	ldr	r0, [r3, #0]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	6899      	ldr	r1, [r3, #8]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f000 fbec 	bl	80053ec <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	689a      	ldr	r2, [r3, #8]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c22:	609a      	str	r2, [r3, #8]
      break;
 8004c24:	e03c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6818      	ldr	r0, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	6859      	ldr	r1, [r3, #4]
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	461a      	mov	r2, r3
 8004c34:	f000 fb60 	bl	80052f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2150      	movs	r1, #80	; 0x50
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f000 fbb9 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004c44:	e02c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6818      	ldr	r0, [r3, #0]
 8004c4a:	683b      	ldr	r3, [r7, #0]
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	68db      	ldr	r3, [r3, #12]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f000 fb7f 	bl	8005356 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	2160      	movs	r1, #96	; 0x60
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f000 fba9 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004c64:	e01c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6818      	ldr	r0, [r3, #0]
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	68db      	ldr	r3, [r3, #12]
 8004c72:	461a      	mov	r2, r3
 8004c74:	f000 fb40 	bl	80052f8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	2140      	movs	r1, #64	; 0x40
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f000 fb99 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004c84:	e00c      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f000 fb90 	bl	80053b6 <TIM_ITRx_SetConfig>
      break;
 8004c96:	e003      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e000      	b.n	8004ca0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8004c9e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	3710      	adds	r7, #16
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	4a32      	ldr	r2, [pc, #200]	; (8004d98 <TIM_Base_SetConfig+0xdc>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d007      	beq.n	8004ce4 <TIM_Base_SetConfig+0x28>
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cda:	d003      	beq.n	8004ce4 <TIM_Base_SetConfig+0x28>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	4a2f      	ldr	r2, [pc, #188]	; (8004d9c <TIM_Base_SetConfig+0xe0>)
 8004ce0:	4293      	cmp	r3, r2
 8004ce2:	d108      	bne.n	8004cf6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	68fa      	ldr	r2, [r7, #12]
 8004cf2:	4313      	orrs	r3, r2
 8004cf4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a27      	ldr	r2, [pc, #156]	; (8004d98 <TIM_Base_SetConfig+0xdc>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d013      	beq.n	8004d26 <TIM_Base_SetConfig+0x6a>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d04:	d00f      	beq.n	8004d26 <TIM_Base_SetConfig+0x6a>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	4a24      	ldr	r2, [pc, #144]	; (8004d9c <TIM_Base_SetConfig+0xe0>)
 8004d0a:	4293      	cmp	r3, r2
 8004d0c:	d00b      	beq.n	8004d26 <TIM_Base_SetConfig+0x6a>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	4a23      	ldr	r2, [pc, #140]	; (8004da0 <TIM_Base_SetConfig+0xe4>)
 8004d12:	4293      	cmp	r3, r2
 8004d14:	d007      	beq.n	8004d26 <TIM_Base_SetConfig+0x6a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	4a22      	ldr	r2, [pc, #136]	; (8004da4 <TIM_Base_SetConfig+0xe8>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d003      	beq.n	8004d26 <TIM_Base_SetConfig+0x6a>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	4a21      	ldr	r2, [pc, #132]	; (8004da8 <TIM_Base_SetConfig+0xec>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d108      	bne.n	8004d38 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	68db      	ldr	r3, [r3, #12]
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4313      	orrs	r3, r2
 8004d36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	4313      	orrs	r3, r2
 8004d44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a0e      	ldr	r2, [pc, #56]	; (8004d98 <TIM_Base_SetConfig+0xdc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d00b      	beq.n	8004d7c <TIM_Base_SetConfig+0xc0>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a0e      	ldr	r2, [pc, #56]	; (8004da0 <TIM_Base_SetConfig+0xe4>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d007      	beq.n	8004d7c <TIM_Base_SetConfig+0xc0>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	4a0d      	ldr	r2, [pc, #52]	; (8004da4 <TIM_Base_SetConfig+0xe8>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d003      	beq.n	8004d7c <TIM_Base_SetConfig+0xc0>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	4a0c      	ldr	r2, [pc, #48]	; (8004da8 <TIM_Base_SetConfig+0xec>)
 8004d78:	4293      	cmp	r3, r2
 8004d7a:	d103      	bne.n	8004d84 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	615a      	str	r2, [r3, #20]
}
 8004d8a:	bf00      	nop
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	40012c00 	.word	0x40012c00
 8004d9c:	40000400 	.word	0x40000400
 8004da0:	40014000 	.word	0x40014000
 8004da4:	40014400 	.word	0x40014400
 8004da8:	40014800 	.word	0x40014800

08004dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b087      	sub	sp, #28
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a1b      	ldr	r3, [r3, #32]
 8004dba:	f023 0201 	bic.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f023 0303 	bic.w	r3, r3, #3
 8004de6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68fa      	ldr	r2, [r7, #12]
 8004dee:	4313      	orrs	r3, r2
 8004df0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	f023 0302 	bic.w	r3, r3, #2
 8004df8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004dfa:	683b      	ldr	r3, [r7, #0]
 8004dfc:	689b      	ldr	r3, [r3, #8]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	4313      	orrs	r3, r2
 8004e02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	4a28      	ldr	r2, [pc, #160]	; (8004ea8 <TIM_OC1_SetConfig+0xfc>)
 8004e08:	4293      	cmp	r3, r2
 8004e0a:	d00b      	beq.n	8004e24 <TIM_OC1_SetConfig+0x78>
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	4a27      	ldr	r2, [pc, #156]	; (8004eac <TIM_OC1_SetConfig+0x100>)
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d007      	beq.n	8004e24 <TIM_OC1_SetConfig+0x78>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	4a26      	ldr	r2, [pc, #152]	; (8004eb0 <TIM_OC1_SetConfig+0x104>)
 8004e18:	4293      	cmp	r3, r2
 8004e1a:	d003      	beq.n	8004e24 <TIM_OC1_SetConfig+0x78>
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	4a25      	ldr	r2, [pc, #148]	; (8004eb4 <TIM_OC1_SetConfig+0x108>)
 8004e20:	4293      	cmp	r3, r2
 8004e22:	d10c      	bne.n	8004e3e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	f023 0308 	bic.w	r3, r3, #8
 8004e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	68db      	ldr	r3, [r3, #12]
 8004e30:	697a      	ldr	r2, [r7, #20]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f023 0304 	bic.w	r3, r3, #4
 8004e3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	4a19      	ldr	r2, [pc, #100]	; (8004ea8 <TIM_OC1_SetConfig+0xfc>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d00b      	beq.n	8004e5e <TIM_OC1_SetConfig+0xb2>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a18      	ldr	r2, [pc, #96]	; (8004eac <TIM_OC1_SetConfig+0x100>)
 8004e4a:	4293      	cmp	r3, r2
 8004e4c:	d007      	beq.n	8004e5e <TIM_OC1_SetConfig+0xb2>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	4a17      	ldr	r2, [pc, #92]	; (8004eb0 <TIM_OC1_SetConfig+0x104>)
 8004e52:	4293      	cmp	r3, r2
 8004e54:	d003      	beq.n	8004e5e <TIM_OC1_SetConfig+0xb2>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a16      	ldr	r2, [pc, #88]	; (8004eb4 <TIM_OC1_SetConfig+0x108>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d111      	bne.n	8004e82 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e64:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e6c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	693a      	ldr	r2, [r7, #16]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	693a      	ldr	r2, [r7, #16]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68fa      	ldr	r2, [r7, #12]
 8004e8c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	685a      	ldr	r2, [r3, #4]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	697a      	ldr	r2, [r7, #20]
 8004e9a:	621a      	str	r2, [r3, #32]
}
 8004e9c:	bf00      	nop
 8004e9e:	371c      	adds	r7, #28
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	40012c00 	.word	0x40012c00
 8004eac:	40014000 	.word	0x40014000
 8004eb0:	40014400 	.word	0x40014400
 8004eb4:	40014800 	.word	0x40014800

08004eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004eb8:	b480      	push	{r7}
 8004eba:	b087      	sub	sp, #28
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
 8004ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	f023 0210 	bic.w	r2, r3, #16
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6a1b      	ldr	r3, [r3, #32]
 8004ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004ee6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	021b      	lsls	r3, r3, #8
 8004efa:	68fa      	ldr	r2, [r7, #12]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	f023 0320 	bic.w	r3, r3, #32
 8004f06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	011b      	lsls	r3, r3, #4
 8004f0e:	697a      	ldr	r2, [r7, #20]
 8004f10:	4313      	orrs	r3, r2
 8004f12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a24      	ldr	r2, [pc, #144]	; (8004fa8 <TIM_OC2_SetConfig+0xf0>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d10d      	bne.n	8004f38 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	011b      	lsls	r3, r3, #4
 8004f2a:	697a      	ldr	r2, [r7, #20]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1b      	ldr	r2, [pc, #108]	; (8004fa8 <TIM_OC2_SetConfig+0xf0>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d00b      	beq.n	8004f58 <TIM_OC2_SetConfig+0xa0>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	4a1a      	ldr	r2, [pc, #104]	; (8004fac <TIM_OC2_SetConfig+0xf4>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d007      	beq.n	8004f58 <TIM_OC2_SetConfig+0xa0>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a19      	ldr	r2, [pc, #100]	; (8004fb0 <TIM_OC2_SetConfig+0xf8>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d003      	beq.n	8004f58 <TIM_OC2_SetConfig+0xa0>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	4a18      	ldr	r2, [pc, #96]	; (8004fb4 <TIM_OC2_SetConfig+0xfc>)
 8004f54:	4293      	cmp	r3, r2
 8004f56:	d113      	bne.n	8004f80 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f5e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f60:	693b      	ldr	r3, [r7, #16]
 8004f62:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f66:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	695b      	ldr	r3, [r3, #20]
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	699b      	ldr	r3, [r3, #24]
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	693a      	ldr	r2, [r7, #16]
 8004f84:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68fa      	ldr	r2, [r7, #12]
 8004f8a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685a      	ldr	r2, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	697a      	ldr	r2, [r7, #20]
 8004f98:	621a      	str	r2, [r3, #32]
}
 8004f9a:	bf00      	nop
 8004f9c:	371c      	adds	r7, #28
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	40012c00 	.word	0x40012c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40014400 	.word	0x40014400
 8004fb4:	40014800 	.word	0x40014800

08004fb8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b087      	sub	sp, #28
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6a1b      	ldr	r3, [r3, #32]
 8004fc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	69db      	ldr	r3, [r3, #28]
 8004fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0303 	bic.w	r3, r3, #3
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	4a23      	ldr	r2, [pc, #140]	; (80050a4 <TIM_OC3_SetConfig+0xec>)
 8005016:	4293      	cmp	r3, r2
 8005018:	d10d      	bne.n	8005036 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	021b      	lsls	r3, r3, #8
 8005028:	697a      	ldr	r2, [r7, #20]
 800502a:	4313      	orrs	r3, r2
 800502c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005034:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <TIM_OC3_SetConfig+0xec>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d00b      	beq.n	8005056 <TIM_OC3_SetConfig+0x9e>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a19      	ldr	r2, [pc, #100]	; (80050a8 <TIM_OC3_SetConfig+0xf0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d007      	beq.n	8005056 <TIM_OC3_SetConfig+0x9e>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a18      	ldr	r2, [pc, #96]	; (80050ac <TIM_OC3_SetConfig+0xf4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d003      	beq.n	8005056 <TIM_OC3_SetConfig+0x9e>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a17      	ldr	r2, [pc, #92]	; (80050b0 <TIM_OC3_SetConfig+0xf8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d113      	bne.n	800507e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800505c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005064:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	693a      	ldr	r2, [r7, #16]
 800506e:	4313      	orrs	r3, r2
 8005070:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	699b      	ldr	r3, [r3, #24]
 8005076:	011b      	lsls	r3, r3, #4
 8005078:	693a      	ldr	r2, [r7, #16]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	693a      	ldr	r2, [r7, #16]
 8005082:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	68fa      	ldr	r2, [r7, #12]
 8005088:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	685a      	ldr	r2, [r3, #4]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	621a      	str	r2, [r3, #32]
}
 8005098:	bf00      	nop
 800509a:	371c      	adds	r7, #28
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	40012c00 	.word	0x40012c00
 80050a8:	40014000 	.word	0x40014000
 80050ac:	40014400 	.word	0x40014400
 80050b0:	40014800 	.word	0x40014800

080050b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b087      	sub	sp, #28
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a1b      	ldr	r3, [r3, #32]
 80050ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	685b      	ldr	r3, [r3, #4]
 80050d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	021b      	lsls	r3, r3, #8
 80050f6:	68fa      	ldr	r2, [r7, #12]
 80050f8:	4313      	orrs	r3, r2
 80050fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050fc:	693b      	ldr	r3, [r7, #16]
 80050fe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005102:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	031b      	lsls	r3, r3, #12
 800510a:	693a      	ldr	r2, [r7, #16]
 800510c:	4313      	orrs	r3, r2
 800510e:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	4a16      	ldr	r2, [pc, #88]	; (800516c <TIM_OC4_SetConfig+0xb8>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d00b      	beq.n	8005130 <TIM_OC4_SetConfig+0x7c>
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a15      	ldr	r2, [pc, #84]	; (8005170 <TIM_OC4_SetConfig+0xbc>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d007      	beq.n	8005130 <TIM_OC4_SetConfig+0x7c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4a14      	ldr	r2, [pc, #80]	; (8005174 <TIM_OC4_SetConfig+0xc0>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d003      	beq.n	8005130 <TIM_OC4_SetConfig+0x7c>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	4a13      	ldr	r2, [pc, #76]	; (8005178 <TIM_OC4_SetConfig+0xc4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d109      	bne.n	8005144 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005136:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	019b      	lsls	r3, r3, #6
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	4313      	orrs	r3, r2
 8005142:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	697a      	ldr	r2, [r7, #20]
 8005148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	685a      	ldr	r2, [r3, #4]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	693a      	ldr	r2, [r7, #16]
 800515c:	621a      	str	r2, [r3, #32]
}
 800515e:	bf00      	nop
 8005160:	371c      	adds	r7, #28
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr
 800516a:	bf00      	nop
 800516c:	40012c00 	.word	0x40012c00
 8005170:	40014000 	.word	0x40014000
 8005174:	40014400 	.word	0x40014400
 8005178:	40014800 	.word	0x40014800

0800517c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800517c:	b480      	push	{r7}
 800517e:	b087      	sub	sp, #28
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
 8005196:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	4313      	orrs	r3, r2
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80051c0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	693a      	ldr	r2, [r7, #16]
 80051ca:	4313      	orrs	r3, r2
 80051cc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a15      	ldr	r2, [pc, #84]	; (8005228 <TIM_OC5_SetConfig+0xac>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d00b      	beq.n	80051ee <TIM_OC5_SetConfig+0x72>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	4a14      	ldr	r2, [pc, #80]	; (800522c <TIM_OC5_SetConfig+0xb0>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d007      	beq.n	80051ee <TIM_OC5_SetConfig+0x72>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	4a13      	ldr	r2, [pc, #76]	; (8005230 <TIM_OC5_SetConfig+0xb4>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d003      	beq.n	80051ee <TIM_OC5_SetConfig+0x72>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	4a12      	ldr	r2, [pc, #72]	; (8005234 <TIM_OC5_SetConfig+0xb8>)
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d109      	bne.n	8005202 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80051f4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	021b      	lsls	r3, r3, #8
 80051fc:	697a      	ldr	r2, [r7, #20]
 80051fe:	4313      	orrs	r3, r2
 8005200:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	697a      	ldr	r2, [r7, #20]
 8005206:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68fa      	ldr	r2, [r7, #12]
 800520c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	685a      	ldr	r2, [r3, #4]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	621a      	str	r2, [r3, #32]
}
 800521c:	bf00      	nop
 800521e:	371c      	adds	r7, #28
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	40012c00 	.word	0x40012c00
 800522c:	40014000 	.word	0x40014000
 8005230:	40014400 	.word	0x40014400
 8005234:	40014800 	.word	0x40014800

08005238 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005238:	b480      	push	{r7}
 800523a:	b087      	sub	sp, #28
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
 8005246:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6a1b      	ldr	r3, [r3, #32]
 8005252:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800526a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	021b      	lsls	r3, r3, #8
 8005272:	68fa      	ldr	r2, [r7, #12]
 8005274:	4313      	orrs	r3, r2
 8005276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800527e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	051b      	lsls	r3, r3, #20
 8005286:	693a      	ldr	r2, [r7, #16]
 8005288:	4313      	orrs	r3, r2
 800528a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	4a16      	ldr	r2, [pc, #88]	; (80052e8 <TIM_OC6_SetConfig+0xb0>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00b      	beq.n	80052ac <TIM_OC6_SetConfig+0x74>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	4a15      	ldr	r2, [pc, #84]	; (80052ec <TIM_OC6_SetConfig+0xb4>)
 8005298:	4293      	cmp	r3, r2
 800529a:	d007      	beq.n	80052ac <TIM_OC6_SetConfig+0x74>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <TIM_OC6_SetConfig+0xb8>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d003      	beq.n	80052ac <TIM_OC6_SetConfig+0x74>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	4a13      	ldr	r2, [pc, #76]	; (80052f4 <TIM_OC6_SetConfig+0xbc>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d109      	bne.n	80052c0 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052b2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	695b      	ldr	r3, [r3, #20]
 80052b8:	029b      	lsls	r3, r3, #10
 80052ba:	697a      	ldr	r2, [r7, #20]
 80052bc:	4313      	orrs	r3, r2
 80052be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	697a      	ldr	r2, [r7, #20]
 80052c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	685a      	ldr	r2, [r3, #4]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	621a      	str	r2, [r3, #32]
}
 80052da:	bf00      	nop
 80052dc:	371c      	adds	r7, #28
 80052de:	46bd      	mov	sp, r7
 80052e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e4:	4770      	bx	lr
 80052e6:	bf00      	nop
 80052e8:	40012c00 	.word	0x40012c00
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40014400 	.word	0x40014400
 80052f4:	40014800 	.word	0x40014800

080052f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b087      	sub	sp, #28
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	60f8      	str	r0, [r7, #12]
 8005300:	60b9      	str	r1, [r7, #8]
 8005302:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6a1b      	ldr	r3, [r3, #32]
 8005308:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	6a1b      	ldr	r3, [r3, #32]
 800530e:	f023 0201 	bic.w	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	699b      	ldr	r3, [r3, #24]
 800531a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005322:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	011b      	lsls	r3, r3, #4
 8005328:	693a      	ldr	r2, [r7, #16]
 800532a:	4313      	orrs	r3, r2
 800532c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	f023 030a 	bic.w	r3, r3, #10
 8005334:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005336:	697a      	ldr	r2, [r7, #20]
 8005338:	68bb      	ldr	r3, [r7, #8]
 800533a:	4313      	orrs	r3, r2
 800533c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	693a      	ldr	r2, [r7, #16]
 8005342:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	697a      	ldr	r2, [r7, #20]
 8005348:	621a      	str	r2, [r3, #32]
}
 800534a:	bf00      	nop
 800534c:	371c      	adds	r7, #28
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005356:	b480      	push	{r7}
 8005358:	b087      	sub	sp, #28
 800535a:	af00      	add	r7, sp, #0
 800535c:	60f8      	str	r0, [r7, #12]
 800535e:	60b9      	str	r1, [r7, #8]
 8005360:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	f023 0210 	bic.w	r2, r3, #16
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	699b      	ldr	r3, [r3, #24]
 8005372:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a1b      	ldr	r3, [r3, #32]
 8005378:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005380:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	031b      	lsls	r3, r3, #12
 8005386:	697a      	ldr	r2, [r7, #20]
 8005388:	4313      	orrs	r3, r2
 800538a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005392:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	011b      	lsls	r3, r3, #4
 8005398:	693a      	ldr	r2, [r7, #16]
 800539a:	4313      	orrs	r3, r2
 800539c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	693a      	ldr	r2, [r7, #16]
 80053a8:	621a      	str	r2, [r3, #32]
}
 80053aa:	bf00      	nop
 80053ac:	371c      	adds	r7, #28
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b085      	sub	sp, #20
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053ce:	683a      	ldr	r2, [r7, #0]
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	4313      	orrs	r3, r2
 80053d4:	f043 0307 	orr.w	r3, r3, #7
 80053d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	68fa      	ldr	r2, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]
}
 80053e0:	bf00      	nop
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b087      	sub	sp, #28
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	689b      	ldr	r3, [r3, #8]
 80053fe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005406:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	021a      	lsls	r2, r3, #8
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	431a      	orrs	r2, r3
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	4313      	orrs	r3, r2
 8005414:	697a      	ldr	r2, [r7, #20]
 8005416:	4313      	orrs	r3, r2
 8005418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	609a      	str	r2, [r3, #8]
}
 8005420:	bf00      	nop
 8005422:	371c      	adds	r7, #28
 8005424:	46bd      	mov	sp, r7
 8005426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542a:	4770      	bx	lr

0800542c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800542c:	b480      	push	{r7}
 800542e:	b087      	sub	sp, #28
 8005430:	af00      	add	r7, sp, #0
 8005432:	60f8      	str	r0, [r7, #12]
 8005434:	60b9      	str	r1, [r7, #8]
 8005436:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	f003 031f 	and.w	r3, r3, #31
 800543e:	2201      	movs	r2, #1
 8005440:	fa02 f303 	lsl.w	r3, r2, r3
 8005444:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a1a      	ldr	r2, [r3, #32]
 800544a:	697b      	ldr	r3, [r7, #20]
 800544c:	43db      	mvns	r3, r3
 800544e:	401a      	ands	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	6a1a      	ldr	r2, [r3, #32]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f003 031f 	and.w	r3, r3, #31
 800545e:	6879      	ldr	r1, [r7, #4]
 8005460:	fa01 f303 	lsl.w	r3, r1, r3
 8005464:	431a      	orrs	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	621a      	str	r2, [r3, #32]
}
 800546a:	bf00      	nop
 800546c:	371c      	adds	r7, #28
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
	...

08005478 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005478:	b480      	push	{r7}
 800547a:	b085      	sub	sp, #20
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005488:	2b01      	cmp	r3, #1
 800548a:	d101      	bne.n	8005490 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800548c:	2302      	movs	r3, #2
 800548e:	e054      	b.n	800553a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2202      	movs	r2, #2
 800549c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a24      	ldr	r2, [pc, #144]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d108      	bne.n	80054cc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80054c0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4313      	orrs	r3, r2
 80054ca:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	4313      	orrs	r3, r2
 80054dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	68fa      	ldr	r2, [r7, #12]
 80054e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	4a17      	ldr	r2, [pc, #92]	; (8005548 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d00e      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054f8:	d009      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	4a13      	ldr	r2, [pc, #76]	; (800554c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d004      	beq.n	800550e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	4a11      	ldr	r2, [pc, #68]	; (8005550 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d10c      	bne.n	8005528 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005514:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	689b      	ldr	r3, [r3, #8]
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	4313      	orrs	r3, r2
 800551e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	2201      	movs	r2, #1
 800552c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3714      	adds	r7, #20
 800553e:	46bd      	mov	sp, r7
 8005540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005544:	4770      	bx	lr
 8005546:	bf00      	nop
 8005548:	40012c00 	.word	0x40012c00
 800554c:	40000400 	.word	0x40000400
 8005550:	40014000 	.word	0x40014000

08005554 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005554:	b480      	push	{r7}
 8005556:	b085      	sub	sp, #20
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
 800555c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800555e:	2300      	movs	r3, #0
 8005560:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
#endif /* TIM_BDTR_BKF */
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005568:	2b01      	cmp	r3, #1
 800556a:	d101      	bne.n	8005570 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800556c:	2302      	movs	r3, #2
 800556e:	e060      	b.n	8005632 <HAL_TIMEx_ConfigBreakDeadTime+0xde>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	4313      	orrs	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	685b      	ldr	r3, [r3, #4]
 800559e:	4313      	orrs	r3, r2
 80055a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	695b      	ldr	r3, [r3, #20]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKF)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	699b      	ldr	r3, [r3, #24]
 80055e4:	041b      	lsls	r3, r3, #16
 80055e6:	4313      	orrs	r3, r2
 80055e8:	60fb      	str	r3, [r7, #12]
#endif /* TIM_BDTR_BKF */

#if defined(TIM_BDTR_BK2E)
  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	4a14      	ldr	r2, [pc, #80]	; (8005640 <HAL_TIMEx_ConfigBreakDeadTime+0xec>)
 80055f0:	4293      	cmp	r3, r2
 80055f2:	d115      	bne.n	8005620 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fe:	051b      	lsls	r3, r3, #20
 8005600:	4313      	orrs	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	69db      	ldr	r3, [r3, #28]
 800560e:	4313      	orrs	r3, r2
 8005610:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	6a1b      	ldr	r3, [r3, #32]
 800561c:	4313      	orrs	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_BDTR_BK2E */

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68fa      	ldr	r2, [r7, #12]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3714      	adds	r7, #20
 8005636:	46bd      	mov	sp, r7
 8005638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800563c:	4770      	bx	lr
 800563e:	bf00      	nop
 8005640:	40012c00 	.word	0x40012c00

08005644 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b082      	sub	sp, #8
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d101      	bne.n	8005656 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e040      	b.n	80056d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fc f886 	bl	8001778 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2224      	movs	r2, #36	; 0x24
 8005670:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 0201 	bic.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 f82c 	bl	80056e0 <UART_SetConfig>
 8005688:	4603      	mov	r3, r0
 800568a:	2b01      	cmp	r3, #1
 800568c:	d101      	bne.n	8005692 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e022      	b.n	80056d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 f956 	bl	800594c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	685a      	ldr	r2, [r3, #4]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	689a      	ldr	r2, [r3, #8]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f042 0201 	orr.w	r2, r2, #1
 80056ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80056d0:	6878      	ldr	r0, [r7, #4]
 80056d2:	f000 f9dd 	bl	8005a90 <UART_CheckIdleState>
 80056d6:	4603      	mov	r3, r0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3708      	adds	r7, #8
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}

080056e0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b088      	sub	sp, #32
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80056e8:	2300      	movs	r3, #0
 80056ea:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689a      	ldr	r2, [r3, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	431a      	orrs	r2, r3
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	695b      	ldr	r3, [r3, #20]
 80056fa:	431a      	orrs	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	69db      	ldr	r3, [r3, #28]
 8005700:	4313      	orrs	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b8a      	ldr	r3, [pc, #552]	; (8005934 <UART_SetConfig+0x254>)
 800570c:	4013      	ands	r3, r2
 800570e:	687a      	ldr	r2, [r7, #4]
 8005710:	6812      	ldr	r2, [r2, #0]
 8005712:	6979      	ldr	r1, [r7, #20]
 8005714:	430b      	orrs	r3, r1
 8005716:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	685b      	ldr	r3, [r3, #4]
 800571e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	430a      	orrs	r2, r1
 800572c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	699b      	ldr	r3, [r3, #24]
 8005732:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	697a      	ldr	r2, [r7, #20]
 800573a:	4313      	orrs	r3, r2
 800573c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	697a      	ldr	r2, [r7, #20]
 800574e:	430a      	orrs	r2, r1
 8005750:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a78      	ldr	r2, [pc, #480]	; (8005938 <UART_SetConfig+0x258>)
 8005758:	4293      	cmp	r3, r2
 800575a:	d120      	bne.n	800579e <UART_SetConfig+0xbe>
 800575c:	4b77      	ldr	r3, [pc, #476]	; (800593c <UART_SetConfig+0x25c>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f003 0303 	and.w	r3, r3, #3
 8005764:	2b03      	cmp	r3, #3
 8005766:	d817      	bhi.n	8005798 <UART_SetConfig+0xb8>
 8005768:	a201      	add	r2, pc, #4	; (adr r2, 8005770 <UART_SetConfig+0x90>)
 800576a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800576e:	bf00      	nop
 8005770:	08005781 	.word	0x08005781
 8005774:	0800578d 	.word	0x0800578d
 8005778:	08005793 	.word	0x08005793
 800577c:	08005787 	.word	0x08005787
 8005780:	2300      	movs	r3, #0
 8005782:	77fb      	strb	r3, [r7, #31]
 8005784:	e01d      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005786:	2302      	movs	r3, #2
 8005788:	77fb      	strb	r3, [r7, #31]
 800578a:	e01a      	b.n	80057c2 <UART_SetConfig+0xe2>
 800578c:	2304      	movs	r3, #4
 800578e:	77fb      	strb	r3, [r7, #31]
 8005790:	e017      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005792:	2308      	movs	r3, #8
 8005794:	77fb      	strb	r3, [r7, #31]
 8005796:	e014      	b.n	80057c2 <UART_SetConfig+0xe2>
 8005798:	2310      	movs	r3, #16
 800579a:	77fb      	strb	r3, [r7, #31]
 800579c:	e011      	b.n	80057c2 <UART_SetConfig+0xe2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a67      	ldr	r2, [pc, #412]	; (8005940 <UART_SetConfig+0x260>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d102      	bne.n	80057ae <UART_SetConfig+0xce>
 80057a8:	2300      	movs	r3, #0
 80057aa:	77fb      	strb	r3, [r7, #31]
 80057ac:	e009      	b.n	80057c2 <UART_SetConfig+0xe2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a64      	ldr	r2, [pc, #400]	; (8005944 <UART_SetConfig+0x264>)
 80057b4:	4293      	cmp	r3, r2
 80057b6:	d102      	bne.n	80057be <UART_SetConfig+0xde>
 80057b8:	2300      	movs	r3, #0
 80057ba:	77fb      	strb	r3, [r7, #31]
 80057bc:	e001      	b.n	80057c2 <UART_SetConfig+0xe2>
 80057be:	2310      	movs	r3, #16
 80057c0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	69db      	ldr	r3, [r3, #28]
 80057c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057ca:	d15b      	bne.n	8005884 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 80057cc:	7ffb      	ldrb	r3, [r7, #31]
 80057ce:	2b08      	cmp	r3, #8
 80057d0:	d827      	bhi.n	8005822 <UART_SetConfig+0x142>
 80057d2:	a201      	add	r2, pc, #4	; (adr r2, 80057d8 <UART_SetConfig+0xf8>)
 80057d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057d8:	080057fd 	.word	0x080057fd
 80057dc:	08005805 	.word	0x08005805
 80057e0:	0800580d 	.word	0x0800580d
 80057e4:	08005823 	.word	0x08005823
 80057e8:	08005813 	.word	0x08005813
 80057ec:	08005823 	.word	0x08005823
 80057f0:	08005823 	.word	0x08005823
 80057f4:	08005823 	.word	0x08005823
 80057f8:	0800581b 	.word	0x0800581b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057fc:	f7fe fd1c 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 8005800:	61b8      	str	r0, [r7, #24]
        break;
 8005802:	e013      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005804:	f7fe fd3a 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 8005808:	61b8      	str	r0, [r7, #24]
        break;
 800580a:	e00f      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800580c:	4b4e      	ldr	r3, [pc, #312]	; (8005948 <UART_SetConfig+0x268>)
 800580e:	61bb      	str	r3, [r7, #24]
        break;
 8005810:	e00c      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005812:	f7fe fc9b 	bl	800414c <HAL_RCC_GetSysClockFreq>
 8005816:	61b8      	str	r0, [r7, #24]
        break;
 8005818:	e008      	b.n	800582c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800581a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800581e:	61bb      	str	r3, [r7, #24]
        break;
 8005820:	e004      	b.n	800582c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8005822:	2300      	movs	r3, #0
 8005824:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005826:	2301      	movs	r3, #1
 8005828:	77bb      	strb	r3, [r7, #30]
        break;
 800582a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800582c:	69bb      	ldr	r3, [r7, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d074      	beq.n	800591c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	005a      	lsls	r2, r3, #1
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	085b      	lsrs	r3, r3, #1
 800583c:	441a      	add	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	fbb2 f3f3 	udiv	r3, r2, r3
 8005846:	b29b      	uxth	r3, r3
 8005848:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b0f      	cmp	r3, #15
 800584e:	d916      	bls.n	800587e <UART_SetConfig+0x19e>
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005856:	d212      	bcs.n	800587e <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	b29b      	uxth	r3, r3
 800585c:	f023 030f 	bic.w	r3, r3, #15
 8005860:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	085b      	lsrs	r3, r3, #1
 8005866:	b29b      	uxth	r3, r3
 8005868:	f003 0307 	and.w	r3, r3, #7
 800586c:	b29a      	uxth	r2, r3
 800586e:	89fb      	ldrh	r3, [r7, #14]
 8005870:	4313      	orrs	r3, r2
 8005872:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	89fa      	ldrh	r2, [r7, #14]
 800587a:	60da      	str	r2, [r3, #12]
 800587c:	e04e      	b.n	800591c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	77bb      	strb	r3, [r7, #30]
 8005882:	e04b      	b.n	800591c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005884:	7ffb      	ldrb	r3, [r7, #31]
 8005886:	2b08      	cmp	r3, #8
 8005888:	d827      	bhi.n	80058da <UART_SetConfig+0x1fa>
 800588a:	a201      	add	r2, pc, #4	; (adr r2, 8005890 <UART_SetConfig+0x1b0>)
 800588c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005890:	080058b5 	.word	0x080058b5
 8005894:	080058bd 	.word	0x080058bd
 8005898:	080058c5 	.word	0x080058c5
 800589c:	080058db 	.word	0x080058db
 80058a0:	080058cb 	.word	0x080058cb
 80058a4:	080058db 	.word	0x080058db
 80058a8:	080058db 	.word	0x080058db
 80058ac:	080058db 	.word	0x080058db
 80058b0:	080058d3 	.word	0x080058d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058b4:	f7fe fcc0 	bl	8004238 <HAL_RCC_GetPCLK1Freq>
 80058b8:	61b8      	str	r0, [r7, #24]
        break;
 80058ba:	e013      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058bc:	f7fe fcde 	bl	800427c <HAL_RCC_GetPCLK2Freq>
 80058c0:	61b8      	str	r0, [r7, #24]
        break;
 80058c2:	e00f      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80058c4:	4b20      	ldr	r3, [pc, #128]	; (8005948 <UART_SetConfig+0x268>)
 80058c6:	61bb      	str	r3, [r7, #24]
        break;
 80058c8:	e00c      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80058ca:	f7fe fc3f 	bl	800414c <HAL_RCC_GetSysClockFreq>
 80058ce:	61b8      	str	r0, [r7, #24]
        break;
 80058d0:	e008      	b.n	80058e4 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80058d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80058d6:	61bb      	str	r3, [r7, #24]
        break;
 80058d8:	e004      	b.n	80058e4 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 80058da:	2300      	movs	r3, #0
 80058dc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80058de:	2301      	movs	r3, #1
 80058e0:	77bb      	strb	r3, [r7, #30]
        break;
 80058e2:	bf00      	nop
    }

    if (pclk != 0U)
 80058e4:	69bb      	ldr	r3, [r7, #24]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d018      	beq.n	800591c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	685b      	ldr	r3, [r3, #4]
 80058ee:	085a      	lsrs	r2, r3, #1
 80058f0:	69bb      	ldr	r3, [r7, #24]
 80058f2:	441a      	add	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	685b      	ldr	r3, [r3, #4]
 80058f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	2b0f      	cmp	r3, #15
 8005904:	d908      	bls.n	8005918 <UART_SetConfig+0x238>
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800590c:	d204      	bcs.n	8005918 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	60da      	str	r2, [r3, #12]
 8005916:	e001      	b.n	800591c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8005928:	7fbb      	ldrb	r3, [r7, #30]
}
 800592a:	4618      	mov	r0, r3
 800592c:	3720      	adds	r7, #32
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	bf00      	nop
 8005934:	efff69f3 	.word	0xefff69f3
 8005938:	40013800 	.word	0x40013800
 800593c:	40021000 	.word	0x40021000
 8005940:	40004400 	.word	0x40004400
 8005944:	40004800 	.word	0x40004800
 8005948:	007a1200 	.word	0x007a1200

0800594c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	f003 0301 	and.w	r3, r3, #1
 800595c:	2b00      	cmp	r3, #0
 800595e:	d00a      	beq.n	8005976 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	685b      	ldr	r3, [r3, #4]
 8005966:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	430a      	orrs	r2, r1
 8005974:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800597a:	f003 0302 	and.w	r3, r3, #2
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00a      	beq.n	8005998 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	685b      	ldr	r3, [r3, #4]
 8005988:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	430a      	orrs	r2, r1
 8005996:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00a      	beq.n	80059ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059be:	f003 0308 	and.w	r3, r3, #8
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e0:	f003 0310 	and.w	r3, r3, #16
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00a      	beq.n	80059fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	430a      	orrs	r2, r1
 80059fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d00a      	beq.n	8005a20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	430a      	orrs	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d01a      	beq.n	8005a62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a4a:	d10a      	bne.n	8005a62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	605a      	str	r2, [r3, #4]
  }
}
 8005a84:	bf00      	nop
 8005a86:	370c      	adds	r7, #12
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b086      	sub	sp, #24
 8005a94:	af02      	add	r7, sp, #8
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005aa0:	f7fb ff6e 	bl	8001980 <HAL_GetTick>
 8005aa4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d10e      	bne.n	8005ad2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ab4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ab8:	9300      	str	r3, [sp, #0]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f000 f82d 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ace:	2303      	movs	r3, #3
 8005ad0:	e023      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b04      	cmp	r3, #4
 8005ade:	d10e      	bne.n	8005afe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005ae0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005ae4:	9300      	str	r3, [sp, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005aee:	6878      	ldr	r0, [r7, #4]
 8005af0:	f000 f817 	bl	8005b22 <UART_WaitOnFlagUntilTimeout>
 8005af4:	4603      	mov	r3, r0
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e00d      	b.n	8005b1a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2220      	movs	r2, #32
 8005b02:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2220      	movs	r2, #32
 8005b08:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2200      	movs	r2, #0
 8005b0e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2200      	movs	r2, #0
 8005b14:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8005b18:	2300      	movs	r3, #0
}
 8005b1a:	4618      	mov	r0, r3
 8005b1c:	3710      	adds	r7, #16
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}

08005b22 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b22:	b580      	push	{r7, lr}
 8005b24:	b09c      	sub	sp, #112	; 0x70
 8005b26:	af00      	add	r7, sp, #0
 8005b28:	60f8      	str	r0, [r7, #12]
 8005b2a:	60b9      	str	r1, [r7, #8]
 8005b2c:	603b      	str	r3, [r7, #0]
 8005b2e:	4613      	mov	r3, r2
 8005b30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b32:	e0a5      	b.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b34:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	f000 80a1 	beq.w	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b3e:	f7fb ff1f 	bl	8001980 <HAL_GetTick>
 8005b42:	4602      	mov	r2, r0
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	1ad3      	subs	r3, r2, r3
 8005b48:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d302      	bcc.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
 8005b4e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d13e      	bne.n	8005bd2 <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b5c:	e853 3f00 	ldrex	r3, [r3]
 8005b60:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005b62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b68:	667b      	str	r3, [r7, #100]	; 0x64
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	461a      	mov	r2, r3
 8005b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b72:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b74:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005b78:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005b7a:	e841 2300 	strex	r3, r2, [r1]
 8005b7e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005b80:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d1e6      	bne.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	3308      	adds	r3, #8
 8005b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b90:	e853 3f00 	ldrex	r3, [r3]
 8005b94:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b98:	f023 0301 	bic.w	r3, r3, #1
 8005b9c:	663b      	str	r3, [r7, #96]	; 0x60
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	3308      	adds	r3, #8
 8005ba4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005ba6:	64ba      	str	r2, [r7, #72]	; 0x48
 8005ba8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005baa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005bac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bae:	e841 2300 	strex	r3, r2, [r1]
 8005bb2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1e5      	bne.n	8005b86 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2220      	movs	r2, #32
 8005bbe:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2220      	movs	r2, #32
 8005bc4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e067      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0304 	and.w	r3, r3, #4
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d04f      	beq.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bee:	d147      	bne.n	8005c80 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005bf8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c02:	e853 3f00 	ldrex	r3, [r3]
 8005c06:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	461a      	mov	r2, r3
 8005c16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c18:	637b      	str	r3, [r7, #52]	; 0x34
 8005c1a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c1c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c20:	e841 2300 	strex	r3, r2, [r1]
 8005c24:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d1e6      	bne.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	3308      	adds	r3, #8
 8005c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	e853 3f00 	ldrex	r3, [r3]
 8005c3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
 8005c42:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	3308      	adds	r3, #8
 8005c4a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005c4c:	623a      	str	r2, [r7, #32]
 8005c4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c50:	69f9      	ldr	r1, [r7, #28]
 8005c52:	6a3a      	ldr	r2, [r7, #32]
 8005c54:	e841 2300 	strex	r3, r2, [r1]
 8005c58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1e5      	bne.n	8005c2c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2220      	movs	r2, #32
 8005c64:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2220      	movs	r2, #32
 8005c6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2220      	movs	r2, #32
 8005c70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2200      	movs	r2, #0
 8005c78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8005c7c:	2303      	movs	r3, #3
 8005c7e:	e010      	b.n	8005ca2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69da      	ldr	r2, [r3, #28]
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	4013      	ands	r3, r2
 8005c8a:	68ba      	ldr	r2, [r7, #8]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	bf0c      	ite	eq
 8005c90:	2301      	moveq	r3, #1
 8005c92:	2300      	movne	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	79fb      	ldrb	r3, [r7, #7]
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	f43f af4a 	beq.w	8005b34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ca0:	2300      	movs	r3, #0
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	3770      	adds	r7, #112	; 0x70
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}
	...

08005cac <__errno>:
 8005cac:	4b01      	ldr	r3, [pc, #4]	; (8005cb4 <__errno+0x8>)
 8005cae:	6818      	ldr	r0, [r3, #0]
 8005cb0:	4770      	bx	lr
 8005cb2:	bf00      	nop
 8005cb4:	20000088 	.word	0x20000088

08005cb8 <__libc_init_array>:
 8005cb8:	b570      	push	{r4, r5, r6, lr}
 8005cba:	4d0d      	ldr	r5, [pc, #52]	; (8005cf0 <__libc_init_array+0x38>)
 8005cbc:	4c0d      	ldr	r4, [pc, #52]	; (8005cf4 <__libc_init_array+0x3c>)
 8005cbe:	1b64      	subs	r4, r4, r5
 8005cc0:	10a4      	asrs	r4, r4, #2
 8005cc2:	2600      	movs	r6, #0
 8005cc4:	42a6      	cmp	r6, r4
 8005cc6:	d109      	bne.n	8005cdc <__libc_init_array+0x24>
 8005cc8:	4d0b      	ldr	r5, [pc, #44]	; (8005cf8 <__libc_init_array+0x40>)
 8005cca:	4c0c      	ldr	r4, [pc, #48]	; (8005cfc <__libc_init_array+0x44>)
 8005ccc:	f001 fa52 	bl	8007174 <_init>
 8005cd0:	1b64      	subs	r4, r4, r5
 8005cd2:	10a4      	asrs	r4, r4, #2
 8005cd4:	2600      	movs	r6, #0
 8005cd6:	42a6      	cmp	r6, r4
 8005cd8:	d105      	bne.n	8005ce6 <__libc_init_array+0x2e>
 8005cda:	bd70      	pop	{r4, r5, r6, pc}
 8005cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ce0:	4798      	blx	r3
 8005ce2:	3601      	adds	r6, #1
 8005ce4:	e7ee      	b.n	8005cc4 <__libc_init_array+0xc>
 8005ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cea:	4798      	blx	r3
 8005cec:	3601      	adds	r6, #1
 8005cee:	e7f2      	b.n	8005cd6 <__libc_init_array+0x1e>
 8005cf0:	080075cc 	.word	0x080075cc
 8005cf4:	080075cc 	.word	0x080075cc
 8005cf8:	080075cc 	.word	0x080075cc
 8005cfc:	080075d0 	.word	0x080075d0

08005d00 <memset>:
 8005d00:	4402      	add	r2, r0
 8005d02:	4603      	mov	r3, r0
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d100      	bne.n	8005d0a <memset+0xa>
 8005d08:	4770      	bx	lr
 8005d0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005d0e:	e7f9      	b.n	8005d04 <memset+0x4>

08005d10 <round>:
 8005d10:	ec51 0b10 	vmov	r0, r1, d0
 8005d14:	b570      	push	{r4, r5, r6, lr}
 8005d16:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8005d1a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8005d1e:	2c13      	cmp	r4, #19
 8005d20:	ee10 2a10 	vmov	r2, s0
 8005d24:	460b      	mov	r3, r1
 8005d26:	dc19      	bgt.n	8005d5c <round+0x4c>
 8005d28:	2c00      	cmp	r4, #0
 8005d2a:	da09      	bge.n	8005d40 <round+0x30>
 8005d2c:	3401      	adds	r4, #1
 8005d2e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005d32:	d103      	bne.n	8005d3c <round+0x2c>
 8005d34:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005d38:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	e028      	b.n	8005d92 <round+0x82>
 8005d40:	4d15      	ldr	r5, [pc, #84]	; (8005d98 <round+0x88>)
 8005d42:	4125      	asrs	r5, r4
 8005d44:	ea01 0605 	and.w	r6, r1, r5
 8005d48:	4332      	orrs	r2, r6
 8005d4a:	d00e      	beq.n	8005d6a <round+0x5a>
 8005d4c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d50:	fa42 f404 	asr.w	r4, r2, r4
 8005d54:	4423      	add	r3, r4
 8005d56:	ea23 0305 	bic.w	r3, r3, r5
 8005d5a:	e7ef      	b.n	8005d3c <round+0x2c>
 8005d5c:	2c33      	cmp	r4, #51	; 0x33
 8005d5e:	dd07      	ble.n	8005d70 <round+0x60>
 8005d60:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8005d64:	d101      	bne.n	8005d6a <round+0x5a>
 8005d66:	f7fa fa35 	bl	80001d4 <__adddf3>
 8005d6a:	ec41 0b10 	vmov	d0, r0, r1
 8005d6e:	bd70      	pop	{r4, r5, r6, pc}
 8005d70:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8005d74:	f04f 35ff 	mov.w	r5, #4294967295
 8005d78:	40f5      	lsrs	r5, r6
 8005d7a:	4228      	tst	r0, r5
 8005d7c:	d0f5      	beq.n	8005d6a <round+0x5a>
 8005d7e:	2101      	movs	r1, #1
 8005d80:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8005d84:	fa01 f404 	lsl.w	r4, r1, r4
 8005d88:	1912      	adds	r2, r2, r4
 8005d8a:	bf28      	it	cs
 8005d8c:	185b      	addcs	r3, r3, r1
 8005d8e:	ea22 0205 	bic.w	r2, r2, r5
 8005d92:	4619      	mov	r1, r3
 8005d94:	4610      	mov	r0, r2
 8005d96:	e7e8      	b.n	8005d6a <round+0x5a>
 8005d98:	000fffff 	.word	0x000fffff

08005d9c <atanf>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	ee10 5a10 	vmov	r5, s0
 8005da2:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8005da6:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8005daa:	eef0 7a40 	vmov.f32	s15, s0
 8005dae:	db10      	blt.n	8005dd2 <atanf+0x36>
 8005db0:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8005db4:	dd04      	ble.n	8005dc0 <atanf+0x24>
 8005db6:	ee70 7a00 	vadd.f32	s15, s0, s0
 8005dba:	eeb0 0a67 	vmov.f32	s0, s15
 8005dbe:	bd38      	pop	{r3, r4, r5, pc}
 8005dc0:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8005ef8 <atanf+0x15c>
 8005dc4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 8005efc <atanf+0x160>
 8005dc8:	2d00      	cmp	r5, #0
 8005dca:	bfd8      	it	le
 8005dcc:	eef0 7a40 	vmovle.f32	s15, s0
 8005dd0:	e7f3      	b.n	8005dba <atanf+0x1e>
 8005dd2:	4b4b      	ldr	r3, [pc, #300]	; (8005f00 <atanf+0x164>)
 8005dd4:	429c      	cmp	r4, r3
 8005dd6:	dc10      	bgt.n	8005dfa <atanf+0x5e>
 8005dd8:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8005ddc:	da0a      	bge.n	8005df4 <atanf+0x58>
 8005dde:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8005f04 <atanf+0x168>
 8005de2:	ee30 7a07 	vadd.f32	s14, s0, s14
 8005de6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dea:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8005dee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df2:	dce2      	bgt.n	8005dba <atanf+0x1e>
 8005df4:	f04f 33ff 	mov.w	r3, #4294967295
 8005df8:	e013      	b.n	8005e22 <atanf+0x86>
 8005dfa:	f000 f8e7 	bl	8005fcc <fabsf>
 8005dfe:	4b42      	ldr	r3, [pc, #264]	; (8005f08 <atanf+0x16c>)
 8005e00:	429c      	cmp	r4, r3
 8005e02:	dc4f      	bgt.n	8005ea4 <atanf+0x108>
 8005e04:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8005e08:	429c      	cmp	r4, r3
 8005e0a:	dc41      	bgt.n	8005e90 <atanf+0xf4>
 8005e0c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8005e10:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005e14:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005e18:	2300      	movs	r3, #0
 8005e1a:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005e22:	1c5a      	adds	r2, r3, #1
 8005e24:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8005e28:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8005f0c <atanf+0x170>
 8005e2c:	eddf 5a38 	vldr	s11, [pc, #224]	; 8005f10 <atanf+0x174>
 8005e30:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8005f14 <atanf+0x178>
 8005e34:	ee66 6a06 	vmul.f32	s13, s12, s12
 8005e38:	eee6 5a87 	vfma.f32	s11, s13, s14
 8005e3c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8005f18 <atanf+0x17c>
 8005e40:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005e44:	eddf 5a35 	vldr	s11, [pc, #212]	; 8005f1c <atanf+0x180>
 8005e48:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005e4c:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8005f20 <atanf+0x184>
 8005e50:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005e54:	eddf 5a33 	vldr	s11, [pc, #204]	; 8005f24 <atanf+0x188>
 8005e58:	eee7 5a26 	vfma.f32	s11, s14, s13
 8005e5c:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8005f28 <atanf+0x18c>
 8005e60:	eea6 5a87 	vfma.f32	s10, s13, s14
 8005e64:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8005f2c <atanf+0x190>
 8005e68:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005e6c:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8005f30 <atanf+0x194>
 8005e70:	eea7 5a26 	vfma.f32	s10, s14, s13
 8005e74:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8005f34 <atanf+0x198>
 8005e78:	eea5 7a26 	vfma.f32	s14, s10, s13
 8005e7c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005e80:	eea5 7a86 	vfma.f32	s14, s11, s12
 8005e84:	ee27 7a87 	vmul.f32	s14, s15, s14
 8005e88:	d121      	bne.n	8005ece <atanf+0x132>
 8005e8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e8e:	e794      	b.n	8005dba <atanf+0x1e>
 8005e90:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005e94:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005e98:	ee30 0a27 	vadd.f32	s0, s0, s15
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005ea2:	e7be      	b.n	8005e22 <atanf+0x86>
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <atanf+0x19c>)
 8005ea6:	429c      	cmp	r4, r3
 8005ea8:	dc0b      	bgt.n	8005ec2 <atanf+0x126>
 8005eaa:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8005eae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005eb2:	eea0 7a27 	vfma.f32	s14, s0, s15
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005ebc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005ec0:	e7af      	b.n	8005e22 <atanf+0x86>
 8005ec2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8005ec6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8005eca:	2303      	movs	r3, #3
 8005ecc:	e7a9      	b.n	8005e22 <atanf+0x86>
 8005ece:	4a1b      	ldr	r2, [pc, #108]	; (8005f3c <atanf+0x1a0>)
 8005ed0:	491b      	ldr	r1, [pc, #108]	; (8005f40 <atanf+0x1a4>)
 8005ed2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8005ed6:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8005eda:	ed93 0a00 	vldr	s0, [r3]
 8005ede:	ee37 7a40 	vsub.f32	s14, s14, s0
 8005ee2:	ed92 0a00 	vldr	s0, [r2]
 8005ee6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eea:	2d00      	cmp	r5, #0
 8005eec:	ee70 7a67 	vsub.f32	s15, s0, s15
 8005ef0:	bfb8      	it	lt
 8005ef2:	eef1 7a67 	vneglt.f32	s15, s15
 8005ef6:	e760      	b.n	8005dba <atanf+0x1e>
 8005ef8:	3fc90fdb 	.word	0x3fc90fdb
 8005efc:	bfc90fdb 	.word	0xbfc90fdb
 8005f00:	3edfffff 	.word	0x3edfffff
 8005f04:	7149f2ca 	.word	0x7149f2ca
 8005f08:	3f97ffff 	.word	0x3f97ffff
 8005f0c:	3c8569d7 	.word	0x3c8569d7
 8005f10:	3d4bda59 	.word	0x3d4bda59
 8005f14:	bd6ef16b 	.word	0xbd6ef16b
 8005f18:	3d886b35 	.word	0x3d886b35
 8005f1c:	3dba2e6e 	.word	0x3dba2e6e
 8005f20:	3e124925 	.word	0x3e124925
 8005f24:	3eaaaaab 	.word	0x3eaaaaab
 8005f28:	bd15a221 	.word	0xbd15a221
 8005f2c:	bd9d8795 	.word	0xbd9d8795
 8005f30:	bde38e38 	.word	0xbde38e38
 8005f34:	be4ccccd 	.word	0xbe4ccccd
 8005f38:	401bffff 	.word	0x401bffff
 8005f3c:	080071c4 	.word	0x080071c4
 8005f40:	080071d4 	.word	0x080071d4

08005f44 <cosf>:
 8005f44:	ee10 3a10 	vmov	r3, s0
 8005f48:	b507      	push	{r0, r1, r2, lr}
 8005f4a:	4a1e      	ldr	r2, [pc, #120]	; (8005fc4 <cosf+0x80>)
 8005f4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f50:	4293      	cmp	r3, r2
 8005f52:	dc06      	bgt.n	8005f62 <cosf+0x1e>
 8005f54:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8005fc8 <cosf+0x84>
 8005f58:	b003      	add	sp, #12
 8005f5a:	f85d eb04 	ldr.w	lr, [sp], #4
 8005f5e:	f000 bd07 	b.w	8006970 <__kernel_cosf>
 8005f62:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005f66:	db04      	blt.n	8005f72 <cosf+0x2e>
 8005f68:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005f6c:	b003      	add	sp, #12
 8005f6e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005f72:	4668      	mov	r0, sp
 8005f74:	f000 fbbc 	bl	80066f0 <__ieee754_rem_pio2f>
 8005f78:	f000 0003 	and.w	r0, r0, #3
 8005f7c:	2801      	cmp	r0, #1
 8005f7e:	d009      	beq.n	8005f94 <cosf+0x50>
 8005f80:	2802      	cmp	r0, #2
 8005f82:	d010      	beq.n	8005fa6 <cosf+0x62>
 8005f84:	b9b0      	cbnz	r0, 8005fb4 <cosf+0x70>
 8005f86:	eddd 0a01 	vldr	s1, [sp, #4]
 8005f8a:	ed9d 0a00 	vldr	s0, [sp]
 8005f8e:	f000 fcef 	bl	8006970 <__kernel_cosf>
 8005f92:	e7eb      	b.n	8005f6c <cosf+0x28>
 8005f94:	eddd 0a01 	vldr	s1, [sp, #4]
 8005f98:	ed9d 0a00 	vldr	s0, [sp]
 8005f9c:	f000 ffbe 	bl	8006f1c <__kernel_sinf>
 8005fa0:	eeb1 0a40 	vneg.f32	s0, s0
 8005fa4:	e7e2      	b.n	8005f6c <cosf+0x28>
 8005fa6:	eddd 0a01 	vldr	s1, [sp, #4]
 8005faa:	ed9d 0a00 	vldr	s0, [sp]
 8005fae:	f000 fcdf 	bl	8006970 <__kernel_cosf>
 8005fb2:	e7f5      	b.n	8005fa0 <cosf+0x5c>
 8005fb4:	eddd 0a01 	vldr	s1, [sp, #4]
 8005fb8:	ed9d 0a00 	vldr	s0, [sp]
 8005fbc:	2001      	movs	r0, #1
 8005fbe:	f000 ffad 	bl	8006f1c <__kernel_sinf>
 8005fc2:	e7d3      	b.n	8005f6c <cosf+0x28>
 8005fc4:	3f490fd8 	.word	0x3f490fd8
 8005fc8:	00000000 	.word	0x00000000

08005fcc <fabsf>:
 8005fcc:	ee10 3a10 	vmov	r3, s0
 8005fd0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fd4:	ee00 3a10 	vmov	s0, r3
 8005fd8:	4770      	bx	lr
	...

08005fdc <sinf>:
 8005fdc:	ee10 3a10 	vmov	r3, s0
 8005fe0:	b507      	push	{r0, r1, r2, lr}
 8005fe2:	4a1f      	ldr	r2, [pc, #124]	; (8006060 <sinf+0x84>)
 8005fe4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	dc07      	bgt.n	8005ffc <sinf+0x20>
 8005fec:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8006064 <sinf+0x88>
 8005ff0:	2000      	movs	r0, #0
 8005ff2:	b003      	add	sp, #12
 8005ff4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ff8:	f000 bf90 	b.w	8006f1c <__kernel_sinf>
 8005ffc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8006000:	db04      	blt.n	800600c <sinf+0x30>
 8006002:	ee30 0a40 	vsub.f32	s0, s0, s0
 8006006:	b003      	add	sp, #12
 8006008:	f85d fb04 	ldr.w	pc, [sp], #4
 800600c:	4668      	mov	r0, sp
 800600e:	f000 fb6f 	bl	80066f0 <__ieee754_rem_pio2f>
 8006012:	f000 0003 	and.w	r0, r0, #3
 8006016:	2801      	cmp	r0, #1
 8006018:	d00a      	beq.n	8006030 <sinf+0x54>
 800601a:	2802      	cmp	r0, #2
 800601c:	d00f      	beq.n	800603e <sinf+0x62>
 800601e:	b9c0      	cbnz	r0, 8006052 <sinf+0x76>
 8006020:	eddd 0a01 	vldr	s1, [sp, #4]
 8006024:	ed9d 0a00 	vldr	s0, [sp]
 8006028:	2001      	movs	r0, #1
 800602a:	f000 ff77 	bl	8006f1c <__kernel_sinf>
 800602e:	e7ea      	b.n	8006006 <sinf+0x2a>
 8006030:	eddd 0a01 	vldr	s1, [sp, #4]
 8006034:	ed9d 0a00 	vldr	s0, [sp]
 8006038:	f000 fc9a 	bl	8006970 <__kernel_cosf>
 800603c:	e7e3      	b.n	8006006 <sinf+0x2a>
 800603e:	eddd 0a01 	vldr	s1, [sp, #4]
 8006042:	ed9d 0a00 	vldr	s0, [sp]
 8006046:	2001      	movs	r0, #1
 8006048:	f000 ff68 	bl	8006f1c <__kernel_sinf>
 800604c:	eeb1 0a40 	vneg.f32	s0, s0
 8006050:	e7d9      	b.n	8006006 <sinf+0x2a>
 8006052:	eddd 0a01 	vldr	s1, [sp, #4]
 8006056:	ed9d 0a00 	vldr	s0, [sp]
 800605a:	f000 fc89 	bl	8006970 <__kernel_cosf>
 800605e:	e7f5      	b.n	800604c <sinf+0x70>
 8006060:	3f490fd8 	.word	0x3f490fd8
 8006064:	00000000 	.word	0x00000000

08006068 <powf>:
 8006068:	b508      	push	{r3, lr}
 800606a:	ed2d 8b04 	vpush	{d8-d9}
 800606e:	eeb0 8a60 	vmov.f32	s16, s1
 8006072:	eeb0 9a40 	vmov.f32	s18, s0
 8006076:	f000 f86d 	bl	8006154 <__ieee754_powf>
 800607a:	eeb4 8a48 	vcmp.f32	s16, s16
 800607e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006082:	eef0 8a40 	vmov.f32	s17, s0
 8006086:	d63e      	bvs.n	8006106 <powf+0x9e>
 8006088:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800608c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006090:	d112      	bne.n	80060b8 <powf+0x50>
 8006092:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800609a:	d039      	beq.n	8006110 <powf+0xa8>
 800609c:	eeb0 0a48 	vmov.f32	s0, s16
 80060a0:	f000 ffa6 	bl	8006ff0 <finitef>
 80060a4:	b378      	cbz	r0, 8006106 <powf+0x9e>
 80060a6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 80060aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ae:	d52a      	bpl.n	8006106 <powf+0x9e>
 80060b0:	f7ff fdfc 	bl	8005cac <__errno>
 80060b4:	2322      	movs	r3, #34	; 0x22
 80060b6:	e014      	b.n	80060e2 <powf+0x7a>
 80060b8:	f000 ff9a 	bl	8006ff0 <finitef>
 80060bc:	b998      	cbnz	r0, 80060e6 <powf+0x7e>
 80060be:	eeb0 0a49 	vmov.f32	s0, s18
 80060c2:	f000 ff95 	bl	8006ff0 <finitef>
 80060c6:	b170      	cbz	r0, 80060e6 <powf+0x7e>
 80060c8:	eeb0 0a48 	vmov.f32	s0, s16
 80060cc:	f000 ff90 	bl	8006ff0 <finitef>
 80060d0:	b148      	cbz	r0, 80060e6 <powf+0x7e>
 80060d2:	eef4 8a68 	vcmp.f32	s17, s17
 80060d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060da:	d7e9      	bvc.n	80060b0 <powf+0x48>
 80060dc:	f7ff fde6 	bl	8005cac <__errno>
 80060e0:	2321      	movs	r3, #33	; 0x21
 80060e2:	6003      	str	r3, [r0, #0]
 80060e4:	e00f      	b.n	8006106 <powf+0x9e>
 80060e6:	eef5 8a40 	vcmp.f32	s17, #0.0
 80060ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ee:	d10a      	bne.n	8006106 <powf+0x9e>
 80060f0:	eeb0 0a49 	vmov.f32	s0, s18
 80060f4:	f000 ff7c 	bl	8006ff0 <finitef>
 80060f8:	b128      	cbz	r0, 8006106 <powf+0x9e>
 80060fa:	eeb0 0a48 	vmov.f32	s0, s16
 80060fe:	f000 ff77 	bl	8006ff0 <finitef>
 8006102:	2800      	cmp	r0, #0
 8006104:	d1d4      	bne.n	80060b0 <powf+0x48>
 8006106:	eeb0 0a68 	vmov.f32	s0, s17
 800610a:	ecbd 8b04 	vpop	{d8-d9}
 800610e:	bd08      	pop	{r3, pc}
 8006110:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8006114:	e7f7      	b.n	8006106 <powf+0x9e>
	...

08006118 <sqrtf>:
 8006118:	b508      	push	{r3, lr}
 800611a:	ed2d 8b02 	vpush	{d8}
 800611e:	eeb0 8a40 	vmov.f32	s16, s0
 8006122:	f000 fc21 	bl	8006968 <__ieee754_sqrtf>
 8006126:	eeb4 8a48 	vcmp.f32	s16, s16
 800612a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800612e:	d60c      	bvs.n	800614a <sqrtf+0x32>
 8006130:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006150 <sqrtf+0x38>
 8006134:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006138:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800613c:	d505      	bpl.n	800614a <sqrtf+0x32>
 800613e:	f7ff fdb5 	bl	8005cac <__errno>
 8006142:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006146:	2321      	movs	r3, #33	; 0x21
 8006148:	6003      	str	r3, [r0, #0]
 800614a:	ecbd 8b02 	vpop	{d8}
 800614e:	bd08      	pop	{r3, pc}
 8006150:	00000000 	.word	0x00000000

08006154 <__ieee754_powf>:
 8006154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006158:	ee10 4a90 	vmov	r4, s1
 800615c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8006160:	ed2d 8b02 	vpush	{d8}
 8006164:	ee10 6a10 	vmov	r6, s0
 8006168:	eeb0 8a40 	vmov.f32	s16, s0
 800616c:	eef0 8a60 	vmov.f32	s17, s1
 8006170:	d10c      	bne.n	800618c <__ieee754_powf+0x38>
 8006172:	f486 0680 	eor.w	r6, r6, #4194304	; 0x400000
 8006176:	0076      	lsls	r6, r6, #1
 8006178:	f516 0f00 	cmn.w	r6, #8388608	; 0x800000
 800617c:	f240 8296 	bls.w	80066ac <__ieee754_powf+0x558>
 8006180:	ee38 0a28 	vadd.f32	s0, s16, s17
 8006184:	ecbd 8b02 	vpop	{d8}
 8006188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618c:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8006190:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006194:	dcf4      	bgt.n	8006180 <__ieee754_powf+0x2c>
 8006196:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800619a:	dd08      	ble.n	80061ae <__ieee754_powf+0x5a>
 800619c:	f1b6 5f7e 	cmp.w	r6, #1065353216	; 0x3f800000
 80061a0:	d1ee      	bne.n	8006180 <__ieee754_powf+0x2c>
 80061a2:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80061a6:	0064      	lsls	r4, r4, #1
 80061a8:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80061ac:	e7e6      	b.n	800617c <__ieee754_powf+0x28>
 80061ae:	2e00      	cmp	r6, #0
 80061b0:	da20      	bge.n	80061f4 <__ieee754_powf+0xa0>
 80061b2:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80061b6:	da2d      	bge.n	8006214 <__ieee754_powf+0xc0>
 80061b8:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80061bc:	f2c0 827f 	blt.w	80066be <__ieee754_powf+0x56a>
 80061c0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80061c4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80061c8:	fa48 f703 	asr.w	r7, r8, r3
 80061cc:	fa07 f303 	lsl.w	r3, r7, r3
 80061d0:	4543      	cmp	r3, r8
 80061d2:	f040 8274 	bne.w	80066be <__ieee754_powf+0x56a>
 80061d6:	f007 0701 	and.w	r7, r7, #1
 80061da:	f1c7 0702 	rsb	r7, r7, #2
 80061de:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80061e2:	d11f      	bne.n	8006224 <__ieee754_powf+0xd0>
 80061e4:	2c00      	cmp	r4, #0
 80061e6:	f280 8267 	bge.w	80066b8 <__ieee754_powf+0x564>
 80061ea:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80061ee:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80061f2:	e7c7      	b.n	8006184 <__ieee754_powf+0x30>
 80061f4:	2700      	movs	r7, #0
 80061f6:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80061fa:	d1f0      	bne.n	80061de <__ieee754_powf+0x8a>
 80061fc:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8006200:	f000 8254 	beq.w	80066ac <__ieee754_powf+0x558>
 8006204:	dd08      	ble.n	8006218 <__ieee754_powf+0xc4>
 8006206:	ed9f 0ac2 	vldr	s0, [pc, #776]	; 8006510 <__ieee754_powf+0x3bc>
 800620a:	2c00      	cmp	r4, #0
 800620c:	bfa8      	it	ge
 800620e:	eeb0 0a68 	vmovge.f32	s0, s17
 8006212:	e7b7      	b.n	8006184 <__ieee754_powf+0x30>
 8006214:	2702      	movs	r7, #2
 8006216:	e7ee      	b.n	80061f6 <__ieee754_powf+0xa2>
 8006218:	2c00      	cmp	r4, #0
 800621a:	f280 824a 	bge.w	80066b2 <__ieee754_powf+0x55e>
 800621e:	eeb1 0a68 	vneg.f32	s0, s17
 8006222:	e7af      	b.n	8006184 <__ieee754_powf+0x30>
 8006224:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 8006228:	d102      	bne.n	8006230 <__ieee754_powf+0xdc>
 800622a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800622e:	e7a9      	b.n	8006184 <__ieee754_powf+0x30>
 8006230:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8006234:	eeb0 0a48 	vmov.f32	s0, s16
 8006238:	d107      	bne.n	800624a <__ieee754_powf+0xf6>
 800623a:	2e00      	cmp	r6, #0
 800623c:	db05      	blt.n	800624a <__ieee754_powf+0xf6>
 800623e:	ecbd 8b02 	vpop	{d8}
 8006242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006246:	f000 bb8f 	b.w	8006968 <__ieee754_sqrtf>
 800624a:	f7ff febf 	bl	8005fcc <fabsf>
 800624e:	b125      	cbz	r5, 800625a <__ieee754_powf+0x106>
 8006250:	f026 4340 	bic.w	r3, r6, #3221225472	; 0xc0000000
 8006254:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8006258:	d116      	bne.n	8006288 <__ieee754_powf+0x134>
 800625a:	2c00      	cmp	r4, #0
 800625c:	bfbc      	itt	lt
 800625e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8006262:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8006266:	2e00      	cmp	r6, #0
 8006268:	da8c      	bge.n	8006184 <__ieee754_powf+0x30>
 800626a:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 800626e:	ea55 0307 	orrs.w	r3, r5, r7
 8006272:	d104      	bne.n	800627e <__ieee754_powf+0x12a>
 8006274:	ee70 7a40 	vsub.f32	s15, s0, s0
 8006278:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800627c:	e782      	b.n	8006184 <__ieee754_powf+0x30>
 800627e:	2f01      	cmp	r7, #1
 8006280:	d180      	bne.n	8006184 <__ieee754_powf+0x30>
 8006282:	eeb1 0a40 	vneg.f32	s0, s0
 8006286:	e77d      	b.n	8006184 <__ieee754_powf+0x30>
 8006288:	0ff0      	lsrs	r0, r6, #31
 800628a:	3801      	subs	r0, #1
 800628c:	ea57 0300 	orrs.w	r3, r7, r0
 8006290:	d104      	bne.n	800629c <__ieee754_powf+0x148>
 8006292:	ee38 8a48 	vsub.f32	s16, s16, s16
 8006296:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800629a:	e773      	b.n	8006184 <__ieee754_powf+0x30>
 800629c:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80062a0:	dd74      	ble.n	800638c <__ieee754_powf+0x238>
 80062a2:	4b9c      	ldr	r3, [pc, #624]	; (8006514 <__ieee754_powf+0x3c0>)
 80062a4:	429d      	cmp	r5, r3
 80062a6:	dc08      	bgt.n	80062ba <__ieee754_powf+0x166>
 80062a8:	2c00      	cmp	r4, #0
 80062aa:	da0b      	bge.n	80062c4 <__ieee754_powf+0x170>
 80062ac:	2000      	movs	r0, #0
 80062ae:	ecbd 8b02 	vpop	{d8}
 80062b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062b6:	f000 be95 	b.w	8006fe4 <__math_oflowf>
 80062ba:	4b97      	ldr	r3, [pc, #604]	; (8006518 <__ieee754_powf+0x3c4>)
 80062bc:	429d      	cmp	r5, r3
 80062be:	dd08      	ble.n	80062d2 <__ieee754_powf+0x17e>
 80062c0:	2c00      	cmp	r4, #0
 80062c2:	dcf3      	bgt.n	80062ac <__ieee754_powf+0x158>
 80062c4:	2000      	movs	r0, #0
 80062c6:	ecbd 8b02 	vpop	{d8}
 80062ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062ce:	f000 be83 	b.w	8006fd8 <__math_uflowf>
 80062d2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80062d6:	ee30 0a67 	vsub.f32	s0, s0, s15
 80062da:	eddf 6a90 	vldr	s13, [pc, #576]	; 800651c <__ieee754_powf+0x3c8>
 80062de:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80062e2:	eee0 6a67 	vfms.f32	s13, s0, s15
 80062e6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80062ea:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80062ee:	ee20 7a00 	vmul.f32	s14, s0, s0
 80062f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8006520 <__ieee754_powf+0x3cc>
 80062fa:	ee67 7a67 	vnmul.f32	s15, s14, s15
 80062fe:	ed9f 7a89 	vldr	s14, [pc, #548]	; 8006524 <__ieee754_powf+0x3d0>
 8006302:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006306:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8006528 <__ieee754_powf+0x3d4>
 800630a:	eef0 6a67 	vmov.f32	s13, s15
 800630e:	eee0 6a07 	vfma.f32	s13, s0, s14
 8006312:	ee16 3a90 	vmov	r3, s13
 8006316:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800631a:	f023 030f 	bic.w	r3, r3, #15
 800631e:	ee00 3a90 	vmov	s1, r3
 8006322:	eee0 0a47 	vfms.f32	s1, s0, s14
 8006326:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800632a:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 800632e:	f024 040f 	bic.w	r4, r4, #15
 8006332:	ee07 4a10 	vmov	s14, r4
 8006336:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800633a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800633e:	ee07 3a90 	vmov	s15, r3
 8006342:	eee7 0a27 	vfma.f32	s1, s14, s15
 8006346:	3f01      	subs	r7, #1
 8006348:	ea57 0200 	orrs.w	r2, r7, r0
 800634c:	ee07 4a10 	vmov	s14, r4
 8006350:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006354:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8006358:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800635c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8006360:	ee17 4a10 	vmov	r4, s14
 8006364:	bf08      	it	eq
 8006366:	eeb0 8a40 	vmoveq.f32	s16, s0
 800636a:	2c00      	cmp	r4, #0
 800636c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8006370:	f340 817e 	ble.w	8006670 <__ieee754_powf+0x51c>
 8006374:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8006378:	f340 80f8 	ble.w	800656c <__ieee754_powf+0x418>
 800637c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	bf4c      	ite	mi
 8006386:	2001      	movmi	r0, #1
 8006388:	2000      	movpl	r0, #0
 800638a:	e790      	b.n	80062ae <__ieee754_powf+0x15a>
 800638c:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 8006390:	bf01      	itttt	eq
 8006392:	eddf 7a66 	vldreq	s15, [pc, #408]	; 800652c <__ieee754_powf+0x3d8>
 8006396:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800639a:	f06f 0217 	mvneq.w	r2, #23
 800639e:	ee17 5a90 	vmoveq	r5, s15
 80063a2:	ea4f 53e5 	mov.w	r3, r5, asr #23
 80063a6:	bf18      	it	ne
 80063a8:	2200      	movne	r2, #0
 80063aa:	3b7f      	subs	r3, #127	; 0x7f
 80063ac:	4413      	add	r3, r2
 80063ae:	4a60      	ldr	r2, [pc, #384]	; (8006530 <__ieee754_powf+0x3dc>)
 80063b0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 80063b4:	4295      	cmp	r5, r2
 80063b6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 80063ba:	dd06      	ble.n	80063ca <__ieee754_powf+0x276>
 80063bc:	4a5d      	ldr	r2, [pc, #372]	; (8006534 <__ieee754_powf+0x3e0>)
 80063be:	4295      	cmp	r5, r2
 80063c0:	f340 80a4 	ble.w	800650c <__ieee754_powf+0x3b8>
 80063c4:	3301      	adds	r3, #1
 80063c6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80063ca:	2500      	movs	r5, #0
 80063cc:	4a5a      	ldr	r2, [pc, #360]	; (8006538 <__ieee754_powf+0x3e4>)
 80063ce:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80063d2:	ee07 1a90 	vmov	s15, r1
 80063d6:	ed92 7a00 	vldr	s14, [r2]
 80063da:	4a58      	ldr	r2, [pc, #352]	; (800653c <__ieee754_powf+0x3e8>)
 80063dc:	ee37 6a27 	vadd.f32	s12, s14, s15
 80063e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 80063e4:	eec5 6a86 	vdiv.f32	s13, s11, s12
 80063e8:	1049      	asrs	r1, r1, #1
 80063ea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 80063ee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 80063f2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 80063f6:	ee37 5ac7 	vsub.f32	s10, s15, s14
 80063fa:	ee06 1a10 	vmov	s12, r1
 80063fe:	ee65 4a26 	vmul.f32	s9, s10, s13
 8006402:	ee36 7a47 	vsub.f32	s14, s12, s14
 8006406:	ee14 6a90 	vmov	r6, s9
 800640a:	4016      	ands	r6, r2
 800640c:	ee05 6a90 	vmov	s11, r6
 8006410:	eea5 5ac6 	vfms.f32	s10, s11, s12
 8006414:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006418:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8006540 <__ieee754_powf+0x3ec>
 800641c:	eea5 5ae7 	vfms.f32	s10, s11, s15
 8006420:	ee64 7aa4 	vmul.f32	s15, s9, s9
 8006424:	ee25 6a26 	vmul.f32	s12, s10, s13
 8006428:	eddf 6a46 	vldr	s13, [pc, #280]	; 8006544 <__ieee754_powf+0x3f0>
 800642c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8006430:	eddf 6a45 	vldr	s13, [pc, #276]	; 8006548 <__ieee754_powf+0x3f4>
 8006434:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006438:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800651c <__ieee754_powf+0x3c8>
 800643c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006440:	eddf 6a42 	vldr	s13, [pc, #264]	; 800654c <__ieee754_powf+0x3f8>
 8006444:	eee7 6a27 	vfma.f32	s13, s14, s15
 8006448:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8006550 <__ieee754_powf+0x3fc>
 800644c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8006450:	ee74 6aa5 	vadd.f32	s13, s9, s11
 8006454:	ee27 5aa7 	vmul.f32	s10, s15, s15
 8006458:	ee66 6a86 	vmul.f32	s13, s13, s12
 800645c:	eee5 6a07 	vfma.f32	s13, s10, s14
 8006460:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 8006464:	eef0 7a45 	vmov.f32	s15, s10
 8006468:	eee5 7aa5 	vfma.f32	s15, s11, s11
 800646c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006470:	ee17 1a90 	vmov	r1, s15
 8006474:	4011      	ands	r1, r2
 8006476:	ee07 1a90 	vmov	s15, r1
 800647a:	ee37 7ac5 	vsub.f32	s14, s15, s10
 800647e:	eea5 7ae5 	vfms.f32	s14, s11, s11
 8006482:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8006486:	ee27 7a24 	vmul.f32	s14, s14, s9
 800648a:	eea6 7a27 	vfma.f32	s14, s12, s15
 800648e:	eeb0 6a47 	vmov.f32	s12, s14
 8006492:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8006496:	ee16 1a10 	vmov	r1, s12
 800649a:	4011      	ands	r1, r2
 800649c:	ee06 1a90 	vmov	s13, r1
 80064a0:	eee5 6ae7 	vfms.f32	s13, s11, s15
 80064a4:	eddf 7a2b 	vldr	s15, [pc, #172]	; 8006554 <__ieee754_powf+0x400>
 80064a8:	eddf 5a2b 	vldr	s11, [pc, #172]	; 8006558 <__ieee754_powf+0x404>
 80064ac:	ee37 7a66 	vsub.f32	s14, s14, s13
 80064b0:	ee06 1a10 	vmov	s12, r1
 80064b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80064b8:	eddf 7a28 	vldr	s15, [pc, #160]	; 800655c <__ieee754_powf+0x408>
 80064bc:	4928      	ldr	r1, [pc, #160]	; (8006560 <__ieee754_powf+0x40c>)
 80064be:	eea6 7a27 	vfma.f32	s14, s12, s15
 80064c2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80064c6:	edd1 7a00 	vldr	s15, [r1]
 80064ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80064ce:	ee07 3a90 	vmov	s15, r3
 80064d2:	4b24      	ldr	r3, [pc, #144]	; (8006564 <__ieee754_powf+0x410>)
 80064d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80064d8:	eef0 7a47 	vmov.f32	s15, s14
 80064dc:	eee6 7a25 	vfma.f32	s15, s12, s11
 80064e0:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 80064e4:	edd5 0a00 	vldr	s1, [r5]
 80064e8:	ee77 7aa0 	vadd.f32	s15, s15, s1
 80064ec:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064f0:	ee17 3a90 	vmov	r3, s15
 80064f4:	4013      	ands	r3, r2
 80064f6:	ee07 3a90 	vmov	s15, r3
 80064fa:	ee77 6ae6 	vsub.f32	s13, s15, s13
 80064fe:	ee76 6ae0 	vsub.f32	s13, s13, s1
 8006502:	eee6 6a65 	vfms.f32	s13, s12, s11
 8006506:	ee77 7a66 	vsub.f32	s15, s14, s13
 800650a:	e70e      	b.n	800632a <__ieee754_powf+0x1d6>
 800650c:	2501      	movs	r5, #1
 800650e:	e75d      	b.n	80063cc <__ieee754_powf+0x278>
 8006510:	00000000 	.word	0x00000000
 8006514:	3f7ffff3 	.word	0x3f7ffff3
 8006518:	3f800007 	.word	0x3f800007
 800651c:	3eaaaaab 	.word	0x3eaaaaab
 8006520:	3fb8aa3b 	.word	0x3fb8aa3b
 8006524:	36eca570 	.word	0x36eca570
 8006528:	3fb8aa00 	.word	0x3fb8aa00
 800652c:	4b800000 	.word	0x4b800000
 8006530:	001cc471 	.word	0x001cc471
 8006534:	005db3d6 	.word	0x005db3d6
 8006538:	080071e4 	.word	0x080071e4
 800653c:	fffff000 	.word	0xfffff000
 8006540:	3e6c3255 	.word	0x3e6c3255
 8006544:	3e53f142 	.word	0x3e53f142
 8006548:	3e8ba305 	.word	0x3e8ba305
 800654c:	3edb6db7 	.word	0x3edb6db7
 8006550:	3f19999a 	.word	0x3f19999a
 8006554:	3f76384f 	.word	0x3f76384f
 8006558:	3f763800 	.word	0x3f763800
 800655c:	369dc3a0 	.word	0x369dc3a0
 8006560:	080071f4 	.word	0x080071f4
 8006564:	080071ec 	.word	0x080071ec
 8006568:	3338aa3c 	.word	0x3338aa3c
 800656c:	f040 8095 	bne.w	800669a <__ieee754_powf+0x546>
 8006570:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8006568 <__ieee754_powf+0x414>
 8006574:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006578:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800657c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8006580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006584:	f73f aefa 	bgt.w	800637c <__ieee754_powf+0x228>
 8006588:	15db      	asrs	r3, r3, #23
 800658a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800658e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8006592:	4103      	asrs	r3, r0
 8006594:	4423      	add	r3, r4
 8006596:	494b      	ldr	r1, [pc, #300]	; (80066c4 <__ieee754_powf+0x570>)
 8006598:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800659c:	3a7f      	subs	r2, #127	; 0x7f
 800659e:	4111      	asrs	r1, r2
 80065a0:	ea23 0101 	bic.w	r1, r3, r1
 80065a4:	ee07 1a10 	vmov	s14, r1
 80065a8:	f3c3 0016 	ubfx	r0, r3, #0, #23
 80065ac:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80065b0:	f1c2 0217 	rsb	r2, r2, #23
 80065b4:	4110      	asrs	r0, r2
 80065b6:	2c00      	cmp	r4, #0
 80065b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80065bc:	bfb8      	it	lt
 80065be:	4240      	neglt	r0, r0
 80065c0:	ee37 7aa0 	vadd.f32	s14, s15, s1
 80065c4:	ed9f 0a40 	vldr	s0, [pc, #256]	; 80066c8 <__ieee754_powf+0x574>
 80065c8:	eddf 6a40 	vldr	s13, [pc, #256]	; 80066cc <__ieee754_powf+0x578>
 80065cc:	ee17 3a10 	vmov	r3, s14
 80065d0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80065d4:	f023 030f 	bic.w	r3, r3, #15
 80065d8:	ee07 3a10 	vmov	s14, r3
 80065dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80065e0:	ee27 0a00 	vmul.f32	s0, s14, s0
 80065e4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80065e8:	eddf 7a39 	vldr	s15, [pc, #228]	; 80066d0 <__ieee754_powf+0x57c>
 80065ec:	eea0 0aa7 	vfma.f32	s0, s1, s15
 80065f0:	eef0 7a40 	vmov.f32	s15, s0
 80065f4:	eee7 7a26 	vfma.f32	s15, s14, s13
 80065f8:	eeb0 6a67 	vmov.f32	s12, s15
 80065fc:	eea7 6a66 	vfms.f32	s12, s14, s13
 8006600:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8006604:	ee30 0a46 	vsub.f32	s0, s0, s12
 8006608:	eddf 6a32 	vldr	s13, [pc, #200]	; 80066d4 <__ieee754_powf+0x580>
 800660c:	ed9f 6a32 	vldr	s12, [pc, #200]	; 80066d8 <__ieee754_powf+0x584>
 8006610:	eee7 6a06 	vfma.f32	s13, s14, s12
 8006614:	ed9f 6a31 	vldr	s12, [pc, #196]	; 80066dc <__ieee754_powf+0x588>
 8006618:	eea6 6a87 	vfma.f32	s12, s13, s14
 800661c:	eddf 6a30 	vldr	s13, [pc, #192]	; 80066e0 <__ieee754_powf+0x58c>
 8006620:	eee6 6a07 	vfma.f32	s13, s12, s14
 8006624:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 80066e4 <__ieee754_powf+0x590>
 8006628:	eea6 6a87 	vfma.f32	s12, s13, s14
 800662c:	eef0 6a67 	vmov.f32	s13, s15
 8006630:	eee6 6a47 	vfms.f32	s13, s12, s14
 8006634:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8006638:	ee27 6aa6 	vmul.f32	s12, s15, s13
 800663c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8006640:	eea7 0a80 	vfma.f32	s0, s15, s0
 8006644:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8006648:	ee37 0a40 	vsub.f32	s0, s14, s0
 800664c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006650:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006654:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006658:	ee10 3a10 	vmov	r3, s0
 800665c:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8006660:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006664:	da1f      	bge.n	80066a6 <__ieee754_powf+0x552>
 8006666:	f000 fd13 	bl	8007090 <scalbnf>
 800666a:	ee20 0a08 	vmul.f32	s0, s0, s16
 800666e:	e589      	b.n	8006184 <__ieee754_powf+0x30>
 8006670:	4a1d      	ldr	r2, [pc, #116]	; (80066e8 <__ieee754_powf+0x594>)
 8006672:	4293      	cmp	r3, r2
 8006674:	dd07      	ble.n	8006686 <__ieee754_powf+0x532>
 8006676:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800667a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667e:	bf4c      	ite	mi
 8006680:	2001      	movmi	r0, #1
 8006682:	2000      	movpl	r0, #0
 8006684:	e61f      	b.n	80062c6 <__ieee754_powf+0x172>
 8006686:	d108      	bne.n	800669a <__ieee754_powf+0x546>
 8006688:	ee37 7a67 	vsub.f32	s14, s14, s15
 800668c:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8006690:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006694:	f6ff af78 	blt.w	8006588 <__ieee754_powf+0x434>
 8006698:	e7ed      	b.n	8006676 <__ieee754_powf+0x522>
 800669a:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800669e:	f73f af73 	bgt.w	8006588 <__ieee754_powf+0x434>
 80066a2:	2000      	movs	r0, #0
 80066a4:	e78c      	b.n	80065c0 <__ieee754_powf+0x46c>
 80066a6:	ee00 3a10 	vmov	s0, r3
 80066aa:	e7de      	b.n	800666a <__ieee754_powf+0x516>
 80066ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80066b0:	e568      	b.n	8006184 <__ieee754_powf+0x30>
 80066b2:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 80066ec <__ieee754_powf+0x598>
 80066b6:	e565      	b.n	8006184 <__ieee754_powf+0x30>
 80066b8:	eeb0 0a48 	vmov.f32	s0, s16
 80066bc:	e562      	b.n	8006184 <__ieee754_powf+0x30>
 80066be:	2700      	movs	r7, #0
 80066c0:	e58d      	b.n	80061de <__ieee754_powf+0x8a>
 80066c2:	bf00      	nop
 80066c4:	007fffff 	.word	0x007fffff
 80066c8:	35bfbe8c 	.word	0x35bfbe8c
 80066cc:	3f317200 	.word	0x3f317200
 80066d0:	3f317218 	.word	0x3f317218
 80066d4:	b5ddea0e 	.word	0xb5ddea0e
 80066d8:	3331bb4c 	.word	0x3331bb4c
 80066dc:	388ab355 	.word	0x388ab355
 80066e0:	bb360b61 	.word	0xbb360b61
 80066e4:	3e2aaaab 	.word	0x3e2aaaab
 80066e8:	43160000 	.word	0x43160000
 80066ec:	00000000 	.word	0x00000000

080066f0 <__ieee754_rem_pio2f>:
 80066f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066f2:	ee10 6a10 	vmov	r6, s0
 80066f6:	4b8e      	ldr	r3, [pc, #568]	; (8006930 <__ieee754_rem_pio2f+0x240>)
 80066f8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80066fc:	429d      	cmp	r5, r3
 80066fe:	b087      	sub	sp, #28
 8006700:	eef0 7a40 	vmov.f32	s15, s0
 8006704:	4604      	mov	r4, r0
 8006706:	dc05      	bgt.n	8006714 <__ieee754_rem_pio2f+0x24>
 8006708:	2300      	movs	r3, #0
 800670a:	ed80 0a00 	vstr	s0, [r0]
 800670e:	6043      	str	r3, [r0, #4]
 8006710:	2000      	movs	r0, #0
 8006712:	e01a      	b.n	800674a <__ieee754_rem_pio2f+0x5a>
 8006714:	4b87      	ldr	r3, [pc, #540]	; (8006934 <__ieee754_rem_pio2f+0x244>)
 8006716:	429d      	cmp	r5, r3
 8006718:	dc46      	bgt.n	80067a8 <__ieee754_rem_pio2f+0xb8>
 800671a:	2e00      	cmp	r6, #0
 800671c:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8006938 <__ieee754_rem_pio2f+0x248>
 8006720:	4b86      	ldr	r3, [pc, #536]	; (800693c <__ieee754_rem_pio2f+0x24c>)
 8006722:	f025 050f 	bic.w	r5, r5, #15
 8006726:	dd1f      	ble.n	8006768 <__ieee754_rem_pio2f+0x78>
 8006728:	429d      	cmp	r5, r3
 800672a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800672e:	d00e      	beq.n	800674e <__ieee754_rem_pio2f+0x5e>
 8006730:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8006940 <__ieee754_rem_pio2f+0x250>
 8006734:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8006738:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800673c:	ed80 0a00 	vstr	s0, [r0]
 8006740:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006744:	2001      	movs	r0, #1
 8006746:	edc4 7a01 	vstr	s15, [r4, #4]
 800674a:	b007      	add	sp, #28
 800674c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800674e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8006944 <__ieee754_rem_pio2f+0x254>
 8006752:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8006948 <__ieee754_rem_pio2f+0x258>
 8006756:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800675a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800675e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8006762:	edc0 6a00 	vstr	s13, [r0]
 8006766:	e7eb      	b.n	8006740 <__ieee754_rem_pio2f+0x50>
 8006768:	429d      	cmp	r5, r3
 800676a:	ee77 7a80 	vadd.f32	s15, s15, s0
 800676e:	d00e      	beq.n	800678e <__ieee754_rem_pio2f+0x9e>
 8006770:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8006940 <__ieee754_rem_pio2f+0x250>
 8006774:	ee37 0a87 	vadd.f32	s0, s15, s14
 8006778:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800677c:	ed80 0a00 	vstr	s0, [r0]
 8006780:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006784:	f04f 30ff 	mov.w	r0, #4294967295
 8006788:	edc4 7a01 	vstr	s15, [r4, #4]
 800678c:	e7dd      	b.n	800674a <__ieee754_rem_pio2f+0x5a>
 800678e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8006944 <__ieee754_rem_pio2f+0x254>
 8006792:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8006948 <__ieee754_rem_pio2f+0x258>
 8006796:	ee77 7a80 	vadd.f32	s15, s15, s0
 800679a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800679e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067a2:	edc0 6a00 	vstr	s13, [r0]
 80067a6:	e7eb      	b.n	8006780 <__ieee754_rem_pio2f+0x90>
 80067a8:	4b68      	ldr	r3, [pc, #416]	; (800694c <__ieee754_rem_pio2f+0x25c>)
 80067aa:	429d      	cmp	r5, r3
 80067ac:	dc72      	bgt.n	8006894 <__ieee754_rem_pio2f+0x1a4>
 80067ae:	f7ff fc0d 	bl	8005fcc <fabsf>
 80067b2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8006950 <__ieee754_rem_pio2f+0x260>
 80067b6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80067ba:	eee0 7a07 	vfma.f32	s15, s0, s14
 80067be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80067c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80067c6:	ee17 0a90 	vmov	r0, s15
 80067ca:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8006938 <__ieee754_rem_pio2f+0x248>
 80067ce:	eea7 0a67 	vfms.f32	s0, s14, s15
 80067d2:	281f      	cmp	r0, #31
 80067d4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8006940 <__ieee754_rem_pio2f+0x250>
 80067d8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067dc:	eeb1 6a47 	vneg.f32	s12, s14
 80067e0:	ee70 6a67 	vsub.f32	s13, s0, s15
 80067e4:	ee16 2a90 	vmov	r2, s13
 80067e8:	dc1c      	bgt.n	8006824 <__ieee754_rem_pio2f+0x134>
 80067ea:	495a      	ldr	r1, [pc, #360]	; (8006954 <__ieee754_rem_pio2f+0x264>)
 80067ec:	1e47      	subs	r7, r0, #1
 80067ee:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80067f2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80067f6:	428b      	cmp	r3, r1
 80067f8:	d014      	beq.n	8006824 <__ieee754_rem_pio2f+0x134>
 80067fa:	6022      	str	r2, [r4, #0]
 80067fc:	ed94 7a00 	vldr	s14, [r4]
 8006800:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006804:	2e00      	cmp	r6, #0
 8006806:	ee30 0a67 	vsub.f32	s0, s0, s15
 800680a:	ed84 0a01 	vstr	s0, [r4, #4]
 800680e:	da9c      	bge.n	800674a <__ieee754_rem_pio2f+0x5a>
 8006810:	eeb1 7a47 	vneg.f32	s14, s14
 8006814:	eeb1 0a40 	vneg.f32	s0, s0
 8006818:	ed84 7a00 	vstr	s14, [r4]
 800681c:	ed84 0a01 	vstr	s0, [r4, #4]
 8006820:	4240      	negs	r0, r0
 8006822:	e792      	b.n	800674a <__ieee754_rem_pio2f+0x5a>
 8006824:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8006828:	15eb      	asrs	r3, r5, #23
 800682a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800682e:	2d08      	cmp	r5, #8
 8006830:	dde3      	ble.n	80067fa <__ieee754_rem_pio2f+0x10a>
 8006832:	eddf 7a44 	vldr	s15, [pc, #272]	; 8006944 <__ieee754_rem_pio2f+0x254>
 8006836:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006948 <__ieee754_rem_pio2f+0x258>
 800683a:	eef0 6a40 	vmov.f32	s13, s0
 800683e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8006842:	ee30 0a66 	vsub.f32	s0, s0, s13
 8006846:	eea6 0a27 	vfma.f32	s0, s12, s15
 800684a:	eef0 7a40 	vmov.f32	s15, s0
 800684e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8006852:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8006856:	ee15 2a90 	vmov	r2, s11
 800685a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800685e:	1a5b      	subs	r3, r3, r1
 8006860:	2b19      	cmp	r3, #25
 8006862:	dc04      	bgt.n	800686e <__ieee754_rem_pio2f+0x17e>
 8006864:	edc4 5a00 	vstr	s11, [r4]
 8006868:	eeb0 0a66 	vmov.f32	s0, s13
 800686c:	e7c6      	b.n	80067fc <__ieee754_rem_pio2f+0x10c>
 800686e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8006958 <__ieee754_rem_pio2f+0x268>
 8006872:	eeb0 0a66 	vmov.f32	s0, s13
 8006876:	eea6 0a25 	vfma.f32	s0, s12, s11
 800687a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800687e:	eddf 6a37 	vldr	s13, [pc, #220]	; 800695c <__ieee754_rem_pio2f+0x26c>
 8006882:	eee6 7a25 	vfma.f32	s15, s12, s11
 8006886:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800688a:	ee30 7a67 	vsub.f32	s14, s0, s15
 800688e:	ed84 7a00 	vstr	s14, [r4]
 8006892:	e7b3      	b.n	80067fc <__ieee754_rem_pio2f+0x10c>
 8006894:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8006898:	db06      	blt.n	80068a8 <__ieee754_rem_pio2f+0x1b8>
 800689a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800689e:	edc0 7a01 	vstr	s15, [r0, #4]
 80068a2:	edc0 7a00 	vstr	s15, [r0]
 80068a6:	e733      	b.n	8006710 <__ieee754_rem_pio2f+0x20>
 80068a8:	15ea      	asrs	r2, r5, #23
 80068aa:	3a86      	subs	r2, #134	; 0x86
 80068ac:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 80068b0:	ee07 3a90 	vmov	s15, r3
 80068b4:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068b8:	eddf 6a29 	vldr	s13, [pc, #164]	; 8006960 <__ieee754_rem_pio2f+0x270>
 80068bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068c4:	ed8d 7a03 	vstr	s14, [sp, #12]
 80068c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068cc:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80068d0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80068d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80068d8:	ed8d 7a04 	vstr	s14, [sp, #16]
 80068dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80068e0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80068e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e8:	edcd 7a05 	vstr	s15, [sp, #20]
 80068ec:	d11e      	bne.n	800692c <__ieee754_rem_pio2f+0x23c>
 80068ee:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80068f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f6:	bf14      	ite	ne
 80068f8:	2302      	movne	r3, #2
 80068fa:	2301      	moveq	r3, #1
 80068fc:	4919      	ldr	r1, [pc, #100]	; (8006964 <__ieee754_rem_pio2f+0x274>)
 80068fe:	9101      	str	r1, [sp, #4]
 8006900:	2102      	movs	r1, #2
 8006902:	9100      	str	r1, [sp, #0]
 8006904:	a803      	add	r0, sp, #12
 8006906:	4621      	mov	r1, r4
 8006908:	f000 f892 	bl	8006a30 <__kernel_rem_pio2f>
 800690c:	2e00      	cmp	r6, #0
 800690e:	f6bf af1c 	bge.w	800674a <__ieee754_rem_pio2f+0x5a>
 8006912:	edd4 7a00 	vldr	s15, [r4]
 8006916:	eef1 7a67 	vneg.f32	s15, s15
 800691a:	edc4 7a00 	vstr	s15, [r4]
 800691e:	edd4 7a01 	vldr	s15, [r4, #4]
 8006922:	eef1 7a67 	vneg.f32	s15, s15
 8006926:	edc4 7a01 	vstr	s15, [r4, #4]
 800692a:	e779      	b.n	8006820 <__ieee754_rem_pio2f+0x130>
 800692c:	2303      	movs	r3, #3
 800692e:	e7e5      	b.n	80068fc <__ieee754_rem_pio2f+0x20c>
 8006930:	3f490fd8 	.word	0x3f490fd8
 8006934:	4016cbe3 	.word	0x4016cbe3
 8006938:	3fc90f80 	.word	0x3fc90f80
 800693c:	3fc90fd0 	.word	0x3fc90fd0
 8006940:	37354443 	.word	0x37354443
 8006944:	37354400 	.word	0x37354400
 8006948:	2e85a308 	.word	0x2e85a308
 800694c:	43490f80 	.word	0x43490f80
 8006950:	3f22f984 	.word	0x3f22f984
 8006954:	080071fc 	.word	0x080071fc
 8006958:	2e85a300 	.word	0x2e85a300
 800695c:	248d3132 	.word	0x248d3132
 8006960:	43800000 	.word	0x43800000
 8006964:	0800727c 	.word	0x0800727c

08006968 <__ieee754_sqrtf>:
 8006968:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800696c:	4770      	bx	lr
	...

08006970 <__kernel_cosf>:
 8006970:	ee10 3a10 	vmov	r3, s0
 8006974:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006978:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800697c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8006980:	da05      	bge.n	800698e <__kernel_cosf+0x1e>
 8006982:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006986:	ee17 2a90 	vmov	r2, s15
 800698a:	2a00      	cmp	r2, #0
 800698c:	d03d      	beq.n	8006a0a <__kernel_cosf+0x9a>
 800698e:	ee60 5a00 	vmul.f32	s11, s0, s0
 8006992:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8006a10 <__kernel_cosf+0xa0>
 8006996:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8006a14 <__kernel_cosf+0xa4>
 800699a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8006a18 <__kernel_cosf+0xa8>
 800699e:	4a1f      	ldr	r2, [pc, #124]	; (8006a1c <__kernel_cosf+0xac>)
 80069a0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 80069a4:	4293      	cmp	r3, r2
 80069a6:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8006a20 <__kernel_cosf+0xb0>
 80069aa:	eee7 7a25 	vfma.f32	s15, s14, s11
 80069ae:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8006a24 <__kernel_cosf+0xb4>
 80069b2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80069b6:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8006a28 <__kernel_cosf+0xb8>
 80069ba:	eee7 7a25 	vfma.f32	s15, s14, s11
 80069be:	eeb0 7a66 	vmov.f32	s14, s13
 80069c2:	eea7 7aa5 	vfma.f32	s14, s15, s11
 80069c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80069ca:	ee65 7aa6 	vmul.f32	s15, s11, s13
 80069ce:	ee67 6a25 	vmul.f32	s13, s14, s11
 80069d2:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 80069d6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80069da:	dc04      	bgt.n	80069e6 <__kernel_cosf+0x76>
 80069dc:	ee37 7ac7 	vsub.f32	s14, s15, s14
 80069e0:	ee36 0a47 	vsub.f32	s0, s12, s14
 80069e4:	4770      	bx	lr
 80069e6:	4a11      	ldr	r2, [pc, #68]	; (8006a2c <__kernel_cosf+0xbc>)
 80069e8:	4293      	cmp	r3, r2
 80069ea:	bfda      	itte	le
 80069ec:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80069f0:	ee06 3a90 	vmovle	s13, r3
 80069f4:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80069f8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80069fc:	ee36 0a66 	vsub.f32	s0, s12, s13
 8006a00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006a04:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006a08:	4770      	bx	lr
 8006a0a:	eeb0 0a46 	vmov.f32	s0, s12
 8006a0e:	4770      	bx	lr
 8006a10:	ad47d74e 	.word	0xad47d74e
 8006a14:	310f74f6 	.word	0x310f74f6
 8006a18:	3d2aaaab 	.word	0x3d2aaaab
 8006a1c:	3e999999 	.word	0x3e999999
 8006a20:	b493f27c 	.word	0xb493f27c
 8006a24:	37d00d01 	.word	0x37d00d01
 8006a28:	bab60b61 	.word	0xbab60b61
 8006a2c:	3f480000 	.word	0x3f480000

08006a30 <__kernel_rem_pio2f>:
 8006a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a34:	ed2d 8b04 	vpush	{d8-d9}
 8006a38:	b0d9      	sub	sp, #356	; 0x164
 8006a3a:	4688      	mov	r8, r1
 8006a3c:	9002      	str	r0, [sp, #8]
 8006a3e:	49bb      	ldr	r1, [pc, #748]	; (8006d2c <__kernel_rem_pio2f+0x2fc>)
 8006a40:	9866      	ldr	r0, [sp, #408]	; 0x198
 8006a42:	9301      	str	r3, [sp, #4]
 8006a44:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8006a48:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8006a4c:	1e59      	subs	r1, r3, #1
 8006a4e:	1d13      	adds	r3, r2, #4
 8006a50:	db27      	blt.n	8006aa2 <__kernel_rem_pio2f+0x72>
 8006a52:	f1b2 0b03 	subs.w	fp, r2, #3
 8006a56:	bf48      	it	mi
 8006a58:	f102 0b04 	addmi.w	fp, r2, #4
 8006a5c:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8006a60:	1c45      	adds	r5, r0, #1
 8006a62:	00ec      	lsls	r4, r5, #3
 8006a64:	1a47      	subs	r7, r0, r1
 8006a66:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006a6a:	9403      	str	r4, [sp, #12]
 8006a6c:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8006a70:	eb0a 0c01 	add.w	ip, sl, r1
 8006a74:	ae1c      	add	r6, sp, #112	; 0x70
 8006a76:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8006a7a:	2400      	movs	r4, #0
 8006a7c:	4564      	cmp	r4, ip
 8006a7e:	dd12      	ble.n	8006aa6 <__kernel_rem_pio2f+0x76>
 8006a80:	9b01      	ldr	r3, [sp, #4]
 8006a82:	ac1c      	add	r4, sp, #112	; 0x70
 8006a84:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8006a88:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8006a8c:	f04f 0c00 	mov.w	ip, #0
 8006a90:	45d4      	cmp	ip, sl
 8006a92:	dc27      	bgt.n	8006ae4 <__kernel_rem_pio2f+0xb4>
 8006a94:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8006a98:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006a9c:	4627      	mov	r7, r4
 8006a9e:	2600      	movs	r6, #0
 8006aa0:	e016      	b.n	8006ad0 <__kernel_rem_pio2f+0xa0>
 8006aa2:	2000      	movs	r0, #0
 8006aa4:	e7dc      	b.n	8006a60 <__kernel_rem_pio2f+0x30>
 8006aa6:	42e7      	cmn	r7, r4
 8006aa8:	bf5d      	ittte	pl
 8006aaa:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8006aae:	ee07 3a90 	vmovpl	s15, r3
 8006ab2:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8006ab6:	eef0 7a47 	vmovmi.f32	s15, s14
 8006aba:	ece6 7a01 	vstmia	r6!, {s15}
 8006abe:	3401      	adds	r4, #1
 8006ac0:	e7dc      	b.n	8006a7c <__kernel_rem_pio2f+0x4c>
 8006ac2:	ecf9 6a01 	vldmia	r9!, {s13}
 8006ac6:	ed97 7a00 	vldr	s14, [r7]
 8006aca:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006ace:	3601      	adds	r6, #1
 8006ad0:	428e      	cmp	r6, r1
 8006ad2:	f1a7 0704 	sub.w	r7, r7, #4
 8006ad6:	ddf4      	ble.n	8006ac2 <__kernel_rem_pio2f+0x92>
 8006ad8:	eceb 7a01 	vstmia	fp!, {s15}
 8006adc:	f10c 0c01 	add.w	ip, ip, #1
 8006ae0:	3404      	adds	r4, #4
 8006ae2:	e7d5      	b.n	8006a90 <__kernel_rem_pio2f+0x60>
 8006ae4:	ab08      	add	r3, sp, #32
 8006ae6:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8006aea:	eddf 8a93 	vldr	s17, [pc, #588]	; 8006d38 <__kernel_rem_pio2f+0x308>
 8006aee:	ed9f 9a91 	vldr	s18, [pc, #580]	; 8006d34 <__kernel_rem_pio2f+0x304>
 8006af2:	9304      	str	r3, [sp, #16]
 8006af4:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8006af8:	4656      	mov	r6, sl
 8006afa:	00b3      	lsls	r3, r6, #2
 8006afc:	9305      	str	r3, [sp, #20]
 8006afe:	ab58      	add	r3, sp, #352	; 0x160
 8006b00:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8006b04:	ac08      	add	r4, sp, #32
 8006b06:	ab44      	add	r3, sp, #272	; 0x110
 8006b08:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8006b0c:	46a4      	mov	ip, r4
 8006b0e:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8006b12:	4637      	mov	r7, r6
 8006b14:	2f00      	cmp	r7, #0
 8006b16:	f1a0 0004 	sub.w	r0, r0, #4
 8006b1a:	dc4f      	bgt.n	8006bbc <__kernel_rem_pio2f+0x18c>
 8006b1c:	4628      	mov	r0, r5
 8006b1e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006b22:	f000 fab5 	bl	8007090 <scalbnf>
 8006b26:	eeb0 8a40 	vmov.f32	s16, s0
 8006b2a:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8006b2e:	ee28 0a00 	vmul.f32	s0, s16, s0
 8006b32:	f000 fa6b 	bl	800700c <floorf>
 8006b36:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8006b3a:	eea0 8a67 	vfms.f32	s16, s0, s15
 8006b3e:	2d00      	cmp	r5, #0
 8006b40:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006b44:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8006b48:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8006b4c:	ee17 9a90 	vmov	r9, s15
 8006b50:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006b54:	dd44      	ble.n	8006be0 <__kernel_rem_pio2f+0x1b0>
 8006b56:	f106 3cff 	add.w	ip, r6, #4294967295
 8006b5a:	ab08      	add	r3, sp, #32
 8006b5c:	f1c5 0e08 	rsb	lr, r5, #8
 8006b60:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8006b64:	fa47 f00e 	asr.w	r0, r7, lr
 8006b68:	4481      	add	r9, r0
 8006b6a:	fa00 f00e 	lsl.w	r0, r0, lr
 8006b6e:	1a3f      	subs	r7, r7, r0
 8006b70:	f1c5 0007 	rsb	r0, r5, #7
 8006b74:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8006b78:	4107      	asrs	r7, r0
 8006b7a:	2f00      	cmp	r7, #0
 8006b7c:	dd3f      	ble.n	8006bfe <__kernel_rem_pio2f+0x1ce>
 8006b7e:	f04f 0e00 	mov.w	lr, #0
 8006b82:	f109 0901 	add.w	r9, r9, #1
 8006b86:	4673      	mov	r3, lr
 8006b88:	4576      	cmp	r6, lr
 8006b8a:	dc6b      	bgt.n	8006c64 <__kernel_rem_pio2f+0x234>
 8006b8c:	2d00      	cmp	r5, #0
 8006b8e:	dd04      	ble.n	8006b9a <__kernel_rem_pio2f+0x16a>
 8006b90:	2d01      	cmp	r5, #1
 8006b92:	d078      	beq.n	8006c86 <__kernel_rem_pio2f+0x256>
 8006b94:	2d02      	cmp	r5, #2
 8006b96:	f000 8081 	beq.w	8006c9c <__kernel_rem_pio2f+0x26c>
 8006b9a:	2f02      	cmp	r7, #2
 8006b9c:	d12f      	bne.n	8006bfe <__kernel_rem_pio2f+0x1ce>
 8006b9e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006ba2:	ee30 8a48 	vsub.f32	s16, s0, s16
 8006ba6:	b353      	cbz	r3, 8006bfe <__kernel_rem_pio2f+0x1ce>
 8006ba8:	4628      	mov	r0, r5
 8006baa:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8006bae:	f000 fa6f 	bl	8007090 <scalbnf>
 8006bb2:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8006bb6:	ee38 8a40 	vsub.f32	s16, s16, s0
 8006bba:	e020      	b.n	8006bfe <__kernel_rem_pio2f+0x1ce>
 8006bbc:	ee60 7a28 	vmul.f32	s15, s0, s17
 8006bc0:	3f01      	subs	r7, #1
 8006bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006bc6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006bca:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8006bce:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006bd2:	ecac 0a01 	vstmia	ip!, {s0}
 8006bd6:	ed90 0a00 	vldr	s0, [r0]
 8006bda:	ee37 0a80 	vadd.f32	s0, s15, s0
 8006bde:	e799      	b.n	8006b14 <__kernel_rem_pio2f+0xe4>
 8006be0:	d105      	bne.n	8006bee <__kernel_rem_pio2f+0x1be>
 8006be2:	1e70      	subs	r0, r6, #1
 8006be4:	ab08      	add	r3, sp, #32
 8006be6:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8006bea:	11ff      	asrs	r7, r7, #7
 8006bec:	e7c5      	b.n	8006b7a <__kernel_rem_pio2f+0x14a>
 8006bee:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8006bf2:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006bf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bfa:	da31      	bge.n	8006c60 <__kernel_rem_pio2f+0x230>
 8006bfc:	2700      	movs	r7, #0
 8006bfe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c06:	f040 809b 	bne.w	8006d40 <__kernel_rem_pio2f+0x310>
 8006c0a:	1e74      	subs	r4, r6, #1
 8006c0c:	46a4      	mov	ip, r4
 8006c0e:	2000      	movs	r0, #0
 8006c10:	45d4      	cmp	ip, sl
 8006c12:	da4a      	bge.n	8006caa <__kernel_rem_pio2f+0x27a>
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d07a      	beq.n	8006d0e <__kernel_rem_pio2f+0x2de>
 8006c18:	ab08      	add	r3, sp, #32
 8006c1a:	3d08      	subs	r5, #8
 8006c1c:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	f000 8081 	beq.w	8006d28 <__kernel_rem_pio2f+0x2f8>
 8006c26:	4628      	mov	r0, r5
 8006c28:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8006c2c:	00a5      	lsls	r5, r4, #2
 8006c2e:	f000 fa2f 	bl	8007090 <scalbnf>
 8006c32:	aa44      	add	r2, sp, #272	; 0x110
 8006c34:	1d2b      	adds	r3, r5, #4
 8006c36:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006d38 <__kernel_rem_pio2f+0x308>
 8006c3a:	18d1      	adds	r1, r2, r3
 8006c3c:	4622      	mov	r2, r4
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	f280 80ae 	bge.w	8006da0 <__kernel_rem_pio2f+0x370>
 8006c44:	4622      	mov	r2, r4
 8006c46:	2a00      	cmp	r2, #0
 8006c48:	f2c0 80cc 	blt.w	8006de4 <__kernel_rem_pio2f+0x3b4>
 8006c4c:	a944      	add	r1, sp, #272	; 0x110
 8006c4e:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8006c52:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006d30 <__kernel_rem_pio2f+0x300>
 8006c56:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006c5a:	2000      	movs	r0, #0
 8006c5c:	1aa1      	subs	r1, r4, r2
 8006c5e:	e0b6      	b.n	8006dce <__kernel_rem_pio2f+0x39e>
 8006c60:	2702      	movs	r7, #2
 8006c62:	e78c      	b.n	8006b7e <__kernel_rem_pio2f+0x14e>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	b94b      	cbnz	r3, 8006c7c <__kernel_rem_pio2f+0x24c>
 8006c68:	b118      	cbz	r0, 8006c72 <__kernel_rem_pio2f+0x242>
 8006c6a:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8006c6e:	6020      	str	r0, [r4, #0]
 8006c70:	2001      	movs	r0, #1
 8006c72:	f10e 0e01 	add.w	lr, lr, #1
 8006c76:	3404      	adds	r4, #4
 8006c78:	4603      	mov	r3, r0
 8006c7a:	e785      	b.n	8006b88 <__kernel_rem_pio2f+0x158>
 8006c7c:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8006c80:	6020      	str	r0, [r4, #0]
 8006c82:	4618      	mov	r0, r3
 8006c84:	e7f5      	b.n	8006c72 <__kernel_rem_pio2f+0x242>
 8006c86:	1e74      	subs	r4, r6, #1
 8006c88:	a808      	add	r0, sp, #32
 8006c8a:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006c8e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8006c92:	f10d 0c20 	add.w	ip, sp, #32
 8006c96:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8006c9a:	e77e      	b.n	8006b9a <__kernel_rem_pio2f+0x16a>
 8006c9c:	1e74      	subs	r4, r6, #1
 8006c9e:	a808      	add	r0, sp, #32
 8006ca0:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8006ca4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8006ca8:	e7f3      	b.n	8006c92 <__kernel_rem_pio2f+0x262>
 8006caa:	ab08      	add	r3, sp, #32
 8006cac:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8006cb0:	f10c 3cff 	add.w	ip, ip, #4294967295
 8006cb4:	4318      	orrs	r0, r3
 8006cb6:	e7ab      	b.n	8006c10 <__kernel_rem_pio2f+0x1e0>
 8006cb8:	f10c 0c01 	add.w	ip, ip, #1
 8006cbc:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8006cc0:	2c00      	cmp	r4, #0
 8006cc2:	d0f9      	beq.n	8006cb8 <__kernel_rem_pio2f+0x288>
 8006cc4:	9b05      	ldr	r3, [sp, #20]
 8006cc6:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8006cca:	eb0d 0003 	add.w	r0, sp, r3
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	18f4      	adds	r4, r6, r3
 8006cd2:	ab1c      	add	r3, sp, #112	; 0x70
 8006cd4:	1c77      	adds	r7, r6, #1
 8006cd6:	384c      	subs	r0, #76	; 0x4c
 8006cd8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006cdc:	4466      	add	r6, ip
 8006cde:	42be      	cmp	r6, r7
 8006ce0:	f6ff af0b 	blt.w	8006afa <__kernel_rem_pio2f+0xca>
 8006ce4:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8006ce8:	f8dd e008 	ldr.w	lr, [sp, #8]
 8006cec:	ee07 3a90 	vmov	s15, r3
 8006cf0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cf4:	f04f 0c00 	mov.w	ip, #0
 8006cf8:	ece4 7a01 	vstmia	r4!, {s15}
 8006cfc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006d00:	46a1      	mov	r9, r4
 8006d02:	458c      	cmp	ip, r1
 8006d04:	dd07      	ble.n	8006d16 <__kernel_rem_pio2f+0x2e6>
 8006d06:	ece0 7a01 	vstmia	r0!, {s15}
 8006d0a:	3701      	adds	r7, #1
 8006d0c:	e7e7      	b.n	8006cde <__kernel_rem_pio2f+0x2ae>
 8006d0e:	9804      	ldr	r0, [sp, #16]
 8006d10:	f04f 0c01 	mov.w	ip, #1
 8006d14:	e7d2      	b.n	8006cbc <__kernel_rem_pio2f+0x28c>
 8006d16:	ecfe 6a01 	vldmia	lr!, {s13}
 8006d1a:	ed39 7a01 	vldmdb	r9!, {s14}
 8006d1e:	f10c 0c01 	add.w	ip, ip, #1
 8006d22:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006d26:	e7ec      	b.n	8006d02 <__kernel_rem_pio2f+0x2d2>
 8006d28:	3c01      	subs	r4, #1
 8006d2a:	e775      	b.n	8006c18 <__kernel_rem_pio2f+0x1e8>
 8006d2c:	080075c0 	.word	0x080075c0
 8006d30:	08007594 	.word	0x08007594
 8006d34:	43800000 	.word	0x43800000
 8006d38:	3b800000 	.word	0x3b800000
 8006d3c:	00000000 	.word	0x00000000
 8006d40:	9b03      	ldr	r3, [sp, #12]
 8006d42:	eeb0 0a48 	vmov.f32	s0, s16
 8006d46:	1a98      	subs	r0, r3, r2
 8006d48:	f000 f9a2 	bl	8007090 <scalbnf>
 8006d4c:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8006d34 <__kernel_rem_pio2f+0x304>
 8006d50:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8006d54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d58:	db19      	blt.n	8006d8e <__kernel_rem_pio2f+0x35e>
 8006d5a:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006d38 <__kernel_rem_pio2f+0x308>
 8006d5e:	ee60 7a27 	vmul.f32	s15, s0, s15
 8006d62:	aa08      	add	r2, sp, #32
 8006d64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d68:	1c74      	adds	r4, r6, #1
 8006d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d6e:	3508      	adds	r5, #8
 8006d70:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8006d74:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006d78:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d7c:	ee10 3a10 	vmov	r3, s0
 8006d80:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006d84:	ee17 3a90 	vmov	r3, s15
 8006d88:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006d8c:	e74b      	b.n	8006c26 <__kernel_rem_pio2f+0x1f6>
 8006d8e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006d92:	aa08      	add	r2, sp, #32
 8006d94:	ee10 3a10 	vmov	r3, s0
 8006d98:	4634      	mov	r4, r6
 8006d9a:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006d9e:	e742      	b.n	8006c26 <__kernel_rem_pio2f+0x1f6>
 8006da0:	a808      	add	r0, sp, #32
 8006da2:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 8006da6:	9001      	str	r0, [sp, #4]
 8006da8:	ee07 0a90 	vmov	s15, r0
 8006dac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006db0:	3a01      	subs	r2, #1
 8006db2:	ee67 7a80 	vmul.f32	s15, s15, s0
 8006db6:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006dba:	ed61 7a01 	vstmdb	r1!, {s15}
 8006dbe:	e73e      	b.n	8006c3e <__kernel_rem_pio2f+0x20e>
 8006dc0:	ecfc 6a01 	vldmia	ip!, {s13}
 8006dc4:	ecb6 7a01 	vldmia	r6!, {s14}
 8006dc8:	eee6 7a87 	vfma.f32	s15, s13, s14
 8006dcc:	3001      	adds	r0, #1
 8006dce:	4550      	cmp	r0, sl
 8006dd0:	dc01      	bgt.n	8006dd6 <__kernel_rem_pio2f+0x3a6>
 8006dd2:	4288      	cmp	r0, r1
 8006dd4:	ddf4      	ble.n	8006dc0 <__kernel_rem_pio2f+0x390>
 8006dd6:	a858      	add	r0, sp, #352	; 0x160
 8006dd8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ddc:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8006de0:	3a01      	subs	r2, #1
 8006de2:	e730      	b.n	8006c46 <__kernel_rem_pio2f+0x216>
 8006de4:	9a66      	ldr	r2, [sp, #408]	; 0x198
 8006de6:	2a02      	cmp	r2, #2
 8006de8:	dc09      	bgt.n	8006dfe <__kernel_rem_pio2f+0x3ce>
 8006dea:	2a00      	cmp	r2, #0
 8006dec:	dc2a      	bgt.n	8006e44 <__kernel_rem_pio2f+0x414>
 8006dee:	d043      	beq.n	8006e78 <__kernel_rem_pio2f+0x448>
 8006df0:	f009 0007 	and.w	r0, r9, #7
 8006df4:	b059      	add	sp, #356	; 0x164
 8006df6:	ecbd 8b04 	vpop	{d8-d9}
 8006dfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dfe:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8006e00:	2b03      	cmp	r3, #3
 8006e02:	d1f5      	bne.n	8006df0 <__kernel_rem_pio2f+0x3c0>
 8006e04:	ab30      	add	r3, sp, #192	; 0xc0
 8006e06:	442b      	add	r3, r5
 8006e08:	461a      	mov	r2, r3
 8006e0a:	4619      	mov	r1, r3
 8006e0c:	4620      	mov	r0, r4
 8006e0e:	2800      	cmp	r0, #0
 8006e10:	f1a1 0104 	sub.w	r1, r1, #4
 8006e14:	dc51      	bgt.n	8006eba <__kernel_rem_pio2f+0x48a>
 8006e16:	4621      	mov	r1, r4
 8006e18:	2901      	cmp	r1, #1
 8006e1a:	f1a2 0204 	sub.w	r2, r2, #4
 8006e1e:	dc5c      	bgt.n	8006eda <__kernel_rem_pio2f+0x4aa>
 8006e20:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006e24:	3304      	adds	r3, #4
 8006e26:	2c01      	cmp	r4, #1
 8006e28:	dc67      	bgt.n	8006efa <__kernel_rem_pio2f+0x4ca>
 8006e2a:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8006e2e:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8006e32:	2f00      	cmp	r7, #0
 8006e34:	d167      	bne.n	8006f06 <__kernel_rem_pio2f+0x4d6>
 8006e36:	edc8 6a00 	vstr	s13, [r8]
 8006e3a:	ed88 7a01 	vstr	s14, [r8, #4]
 8006e3e:	edc8 7a02 	vstr	s15, [r8, #8]
 8006e42:	e7d5      	b.n	8006df0 <__kernel_rem_pio2f+0x3c0>
 8006e44:	aa30      	add	r2, sp, #192	; 0xc0
 8006e46:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006e4a:	4413      	add	r3, r2
 8006e4c:	4622      	mov	r2, r4
 8006e4e:	2a00      	cmp	r2, #0
 8006e50:	da24      	bge.n	8006e9c <__kernel_rem_pio2f+0x46c>
 8006e52:	b34f      	cbz	r7, 8006ea8 <__kernel_rem_pio2f+0x478>
 8006e54:	eef1 7a47 	vneg.f32	s15, s14
 8006e58:	edc8 7a00 	vstr	s15, [r8]
 8006e5c:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8006e60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006e64:	aa31      	add	r2, sp, #196	; 0xc4
 8006e66:	2301      	movs	r3, #1
 8006e68:	429c      	cmp	r4, r3
 8006e6a:	da20      	bge.n	8006eae <__kernel_rem_pio2f+0x47e>
 8006e6c:	b10f      	cbz	r7, 8006e72 <__kernel_rem_pio2f+0x442>
 8006e6e:	eef1 7a67 	vneg.f32	s15, s15
 8006e72:	edc8 7a01 	vstr	s15, [r8, #4]
 8006e76:	e7bb      	b.n	8006df0 <__kernel_rem_pio2f+0x3c0>
 8006e78:	aa30      	add	r2, sp, #192	; 0xc0
 8006e7a:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8006d3c <__kernel_rem_pio2f+0x30c>
 8006e7e:	4413      	add	r3, r2
 8006e80:	2c00      	cmp	r4, #0
 8006e82:	da05      	bge.n	8006e90 <__kernel_rem_pio2f+0x460>
 8006e84:	b10f      	cbz	r7, 8006e8a <__kernel_rem_pio2f+0x45a>
 8006e86:	eef1 7a67 	vneg.f32	s15, s15
 8006e8a:	edc8 7a00 	vstr	s15, [r8]
 8006e8e:	e7af      	b.n	8006df0 <__kernel_rem_pio2f+0x3c0>
 8006e90:	ed33 7a01 	vldmdb	r3!, {s14}
 8006e94:	3c01      	subs	r4, #1
 8006e96:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006e9a:	e7f1      	b.n	8006e80 <__kernel_rem_pio2f+0x450>
 8006e9c:	ed73 7a01 	vldmdb	r3!, {s15}
 8006ea0:	3a01      	subs	r2, #1
 8006ea2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006ea6:	e7d2      	b.n	8006e4e <__kernel_rem_pio2f+0x41e>
 8006ea8:	eef0 7a47 	vmov.f32	s15, s14
 8006eac:	e7d4      	b.n	8006e58 <__kernel_rem_pio2f+0x428>
 8006eae:	ecb2 7a01 	vldmia	r2!, {s14}
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006eb8:	e7d6      	b.n	8006e68 <__kernel_rem_pio2f+0x438>
 8006eba:	edd1 7a00 	vldr	s15, [r1]
 8006ebe:	edd1 6a01 	vldr	s13, [r1, #4]
 8006ec2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006ec6:	3801      	subs	r0, #1
 8006ec8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006ecc:	ed81 7a00 	vstr	s14, [r1]
 8006ed0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ed4:	edc1 7a01 	vstr	s15, [r1, #4]
 8006ed8:	e799      	b.n	8006e0e <__kernel_rem_pio2f+0x3de>
 8006eda:	edd2 7a00 	vldr	s15, [r2]
 8006ede:	edd2 6a01 	vldr	s13, [r2, #4]
 8006ee2:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8006ee6:	3901      	subs	r1, #1
 8006ee8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8006eec:	ed82 7a00 	vstr	s14, [r2]
 8006ef0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006ef4:	edc2 7a01 	vstr	s15, [r2, #4]
 8006ef8:	e78e      	b.n	8006e18 <__kernel_rem_pio2f+0x3e8>
 8006efa:	ed33 7a01 	vldmdb	r3!, {s14}
 8006efe:	3c01      	subs	r4, #1
 8006f00:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006f04:	e78f      	b.n	8006e26 <__kernel_rem_pio2f+0x3f6>
 8006f06:	eef1 6a66 	vneg.f32	s13, s13
 8006f0a:	eeb1 7a47 	vneg.f32	s14, s14
 8006f0e:	edc8 6a00 	vstr	s13, [r8]
 8006f12:	ed88 7a01 	vstr	s14, [r8, #4]
 8006f16:	eef1 7a67 	vneg.f32	s15, s15
 8006f1a:	e790      	b.n	8006e3e <__kernel_rem_pio2f+0x40e>

08006f1c <__kernel_sinf>:
 8006f1c:	ee10 3a10 	vmov	r3, s0
 8006f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006f24:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006f28:	da04      	bge.n	8006f34 <__kernel_sinf+0x18>
 8006f2a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006f2e:	ee17 3a90 	vmov	r3, s15
 8006f32:	b35b      	cbz	r3, 8006f8c <__kernel_sinf+0x70>
 8006f34:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006f38:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006f90 <__kernel_sinf+0x74>
 8006f3c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8006f94 <__kernel_sinf+0x78>
 8006f40:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006f44:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006f98 <__kernel_sinf+0x7c>
 8006f48:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006f4c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006f9c <__kernel_sinf+0x80>
 8006f50:	eea7 6a87 	vfma.f32	s12, s15, s14
 8006f54:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006fa0 <__kernel_sinf+0x84>
 8006f58:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006f5c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006f60:	b930      	cbnz	r0, 8006f70 <__kernel_sinf+0x54>
 8006f62:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8006fa4 <__kernel_sinf+0x88>
 8006f66:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006f6a:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006f6e:	4770      	bx	lr
 8006f70:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8006f74:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006f78:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006f7c:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006f80:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006fa8 <__kernel_sinf+0x8c>
 8006f84:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006f88:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006f8c:	4770      	bx	lr
 8006f8e:	bf00      	nop
 8006f90:	2f2ec9d3 	.word	0x2f2ec9d3
 8006f94:	b2d72f34 	.word	0xb2d72f34
 8006f98:	3638ef1b 	.word	0x3638ef1b
 8006f9c:	b9500d01 	.word	0xb9500d01
 8006fa0:	3c088889 	.word	0x3c088889
 8006fa4:	be2aaaab 	.word	0xbe2aaaab
 8006fa8:	3e2aaaab 	.word	0x3e2aaaab

08006fac <with_errnof>:
 8006fac:	b513      	push	{r0, r1, r4, lr}
 8006fae:	4604      	mov	r4, r0
 8006fb0:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006fb4:	f7fe fe7a 	bl	8005cac <__errno>
 8006fb8:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006fbc:	6004      	str	r4, [r0, #0]
 8006fbe:	b002      	add	sp, #8
 8006fc0:	bd10      	pop	{r4, pc}

08006fc2 <xflowf>:
 8006fc2:	b130      	cbz	r0, 8006fd2 <xflowf+0x10>
 8006fc4:	eef1 7a40 	vneg.f32	s15, s0
 8006fc8:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006fcc:	2022      	movs	r0, #34	; 0x22
 8006fce:	f7ff bfed 	b.w	8006fac <with_errnof>
 8006fd2:	eef0 7a40 	vmov.f32	s15, s0
 8006fd6:	e7f7      	b.n	8006fc8 <xflowf+0x6>

08006fd8 <__math_uflowf>:
 8006fd8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fe0 <__math_uflowf+0x8>
 8006fdc:	f7ff bff1 	b.w	8006fc2 <xflowf>
 8006fe0:	10000000 	.word	0x10000000

08006fe4 <__math_oflowf>:
 8006fe4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006fec <__math_oflowf+0x8>
 8006fe8:	f7ff bfeb 	b.w	8006fc2 <xflowf>
 8006fec:	70000000 	.word	0x70000000

08006ff0 <finitef>:
 8006ff0:	b082      	sub	sp, #8
 8006ff2:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006ff6:	9801      	ldr	r0, [sp, #4]
 8006ff8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006ffc:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8007000:	bfac      	ite	ge
 8007002:	2000      	movge	r0, #0
 8007004:	2001      	movlt	r0, #1
 8007006:	b002      	add	sp, #8
 8007008:	4770      	bx	lr
	...

0800700c <floorf>:
 800700c:	ee10 3a10 	vmov	r3, s0
 8007010:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8007014:	3a7f      	subs	r2, #127	; 0x7f
 8007016:	2a16      	cmp	r2, #22
 8007018:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800701c:	dc2a      	bgt.n	8007074 <floorf+0x68>
 800701e:	2a00      	cmp	r2, #0
 8007020:	da11      	bge.n	8007046 <floorf+0x3a>
 8007022:	eddf 7a18 	vldr	s15, [pc, #96]	; 8007084 <floorf+0x78>
 8007026:	ee30 0a27 	vadd.f32	s0, s0, s15
 800702a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800702e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007032:	dd05      	ble.n	8007040 <floorf+0x34>
 8007034:	2b00      	cmp	r3, #0
 8007036:	da23      	bge.n	8007080 <floorf+0x74>
 8007038:	4a13      	ldr	r2, [pc, #76]	; (8007088 <floorf+0x7c>)
 800703a:	2900      	cmp	r1, #0
 800703c:	bf18      	it	ne
 800703e:	4613      	movne	r3, r2
 8007040:	ee00 3a10 	vmov	s0, r3
 8007044:	4770      	bx	lr
 8007046:	4911      	ldr	r1, [pc, #68]	; (800708c <floorf+0x80>)
 8007048:	4111      	asrs	r1, r2
 800704a:	420b      	tst	r3, r1
 800704c:	d0fa      	beq.n	8007044 <floorf+0x38>
 800704e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 8007084 <floorf+0x78>
 8007052:	ee30 0a27 	vadd.f32	s0, s0, s15
 8007056:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800705a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705e:	ddef      	ble.n	8007040 <floorf+0x34>
 8007060:	2b00      	cmp	r3, #0
 8007062:	bfbe      	ittt	lt
 8007064:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8007068:	fa40 f202 	asrlt.w	r2, r0, r2
 800706c:	189b      	addlt	r3, r3, r2
 800706e:	ea23 0301 	bic.w	r3, r3, r1
 8007072:	e7e5      	b.n	8007040 <floorf+0x34>
 8007074:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8007078:	d3e4      	bcc.n	8007044 <floorf+0x38>
 800707a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800707e:	4770      	bx	lr
 8007080:	2300      	movs	r3, #0
 8007082:	e7dd      	b.n	8007040 <floorf+0x34>
 8007084:	7149f2ca 	.word	0x7149f2ca
 8007088:	bf800000 	.word	0xbf800000
 800708c:	007fffff 	.word	0x007fffff

08007090 <scalbnf>:
 8007090:	ee10 3a10 	vmov	r3, s0
 8007094:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8007098:	d025      	beq.n	80070e6 <scalbnf+0x56>
 800709a:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800709e:	d302      	bcc.n	80070a6 <scalbnf+0x16>
 80070a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80070a4:	4770      	bx	lr
 80070a6:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80070aa:	d122      	bne.n	80070f2 <scalbnf+0x62>
 80070ac:	4b2a      	ldr	r3, [pc, #168]	; (8007158 <scalbnf+0xc8>)
 80070ae:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800715c <scalbnf+0xcc>
 80070b2:	4298      	cmp	r0, r3
 80070b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070b8:	db16      	blt.n	80070e8 <scalbnf+0x58>
 80070ba:	ee10 3a10 	vmov	r3, s0
 80070be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80070c2:	3a19      	subs	r2, #25
 80070c4:	4402      	add	r2, r0
 80070c6:	2afe      	cmp	r2, #254	; 0xfe
 80070c8:	dd15      	ble.n	80070f6 <scalbnf+0x66>
 80070ca:	ee10 3a10 	vmov	r3, s0
 80070ce:	eddf 7a24 	vldr	s15, [pc, #144]	; 8007160 <scalbnf+0xd0>
 80070d2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8007164 <scalbnf+0xd4>
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	eeb0 7a67 	vmov.f32	s14, s15
 80070dc:	bfb8      	it	lt
 80070de:	eef0 7a66 	vmovlt.f32	s15, s13
 80070e2:	ee27 0a27 	vmul.f32	s0, s14, s15
 80070e6:	4770      	bx	lr
 80070e8:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8007168 <scalbnf+0xd8>
 80070ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 80070f0:	4770      	bx	lr
 80070f2:	0dd2      	lsrs	r2, r2, #23
 80070f4:	e7e6      	b.n	80070c4 <scalbnf+0x34>
 80070f6:	2a00      	cmp	r2, #0
 80070f8:	dd06      	ble.n	8007108 <scalbnf+0x78>
 80070fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80070fe:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8007102:	ee00 3a10 	vmov	s0, r3
 8007106:	4770      	bx	lr
 8007108:	f112 0f16 	cmn.w	r2, #22
 800710c:	da1a      	bge.n	8007144 <scalbnf+0xb4>
 800710e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007112:	4298      	cmp	r0, r3
 8007114:	ee10 3a10 	vmov	r3, s0
 8007118:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800711c:	dd0a      	ble.n	8007134 <scalbnf+0xa4>
 800711e:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8007160 <scalbnf+0xd0>
 8007122:	ed9f 7a10 	vldr	s14, [pc, #64]	; 8007164 <scalbnf+0xd4>
 8007126:	eef0 7a40 	vmov.f32	s15, s0
 800712a:	2b00      	cmp	r3, #0
 800712c:	bf18      	it	ne
 800712e:	eeb0 0a47 	vmovne.f32	s0, s14
 8007132:	e7db      	b.n	80070ec <scalbnf+0x5c>
 8007134:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 8007168 <scalbnf+0xd8>
 8007138:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800716c <scalbnf+0xdc>
 800713c:	eef0 7a40 	vmov.f32	s15, s0
 8007140:	2b00      	cmp	r3, #0
 8007142:	e7f3      	b.n	800712c <scalbnf+0x9c>
 8007144:	3219      	adds	r2, #25
 8007146:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800714a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800714e:	eddf 7a08 	vldr	s15, [pc, #32]	; 8007170 <scalbnf+0xe0>
 8007152:	ee07 3a10 	vmov	s14, r3
 8007156:	e7c4      	b.n	80070e2 <scalbnf+0x52>
 8007158:	ffff3cb0 	.word	0xffff3cb0
 800715c:	4c000000 	.word	0x4c000000
 8007160:	7149f2ca 	.word	0x7149f2ca
 8007164:	f149f2ca 	.word	0xf149f2ca
 8007168:	0da24260 	.word	0x0da24260
 800716c:	8da24260 	.word	0x8da24260
 8007170:	33000000 	.word	0x33000000

08007174 <_init>:
 8007174:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007176:	bf00      	nop
 8007178:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800717a:	bc08      	pop	{r3}
 800717c:	469e      	mov	lr, r3
 800717e:	4770      	bx	lr

08007180 <_fini>:
 8007180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007182:	bf00      	nop
 8007184:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007186:	bc08      	pop	{r3}
 8007188:	469e      	mov	lr, r3
 800718a:	4770      	bx	lr
